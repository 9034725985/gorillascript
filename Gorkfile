require! fs
require! gorilla: gorillascript
require! path
let {exec} = require 'child_process'

option \uglify, "u", "Use UglifyJS2 to minify the result"

let semicolon-wrap(mutable text as String)
  text := text.trim()
  if text.char-code-at(0) != ";".char-code-at(0)
    text := ";" & text
  if text.char-code-at(text.length - 1) != ";".char-code-at(0)
    text &= ";"
  text

command \build, "Build browser extras", #(options, cb)
  async! cb, filename-path <- fs.realpath __filename
  let basepath = path.dirname(filename-path)
  let files = ["node_modules/gorillascript/extras/gorillascript.js", "src/prism.js", "src/prism_gs.gs", "src/index.gs"]
  
  async <- (from-promise! gorilla.init())()
  
  output "Building code.js ... "
  let mutable start-time = new Date().get-time()
  asyncfor err, codes <- next, file in files
    async! cb, text <- fs.read-file path.join(basepath, file), "utf8"
    if r'\.gs$'.test file
      async! cb, compiled <- (from-promise! gorilla.compile text)()
      next null, compiled.code
    else
      next null, text
  if err?
    return cb(err)
  let code = semicolon-wrap(codes.join ";\n")
  output "$(((new Date().get-time() - start-time) / 1000_ms).to-fixed 3) s\n"
  async! cb <- fs.write-file path.join(basepath, "lib/code.js"), code, "utf8"
  asyncif next, options.uglify
    start-time := new Date().get-time()
    output "Building code.min.js ... "
    let uglified = semicolon-wrap(require("uglify-js").minify(code, from-string: true).code)
    async! cb <- fs.write-file path.join(basepath, "lib/code.min.js"), uglified, "utf8"
    output "$(((new Date().get-time() - start-time) / 1000_ms).to-fixed 3) s\n"
    next()
  
  cb()
