;(function (root) {
  var GorillaScript = (function () {
    function require(path) {
      var has = Object.prototype.hasOwnProperty;
      if (has.call(require._cache, path)) {
        return require._cache[path];
      } else if (has.call(require, path)) {
        var func = require[path];
        delete require[path];
        return require._cache[path] = func.call({});
      }
    }
    require._cache = {};
    require['./utils'] = function () {
    var module = { exports: this };
    var exports = this;
    (function () {
      "use strict";
      var __num, __strnum, __typeof;
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __strnum = function (strnum) {
        var type;
        type = typeof strnum;
        if (type === "string") {
          return strnum;
        } else if (type === "number") {
          return String(strnum);
        } else {
          throw TypeError("Expected a string or number, got " + __typeof(strnum));
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      function stringRepeat(text, count) {
        if (__num(count) < 1) {
          return "";
        } else if (count === 1) {
          return text;
        } else if (__num(count) & 1) {
          return __strnum(text) + __strnum(stringRepeat(text, __num(count) - 1));
        } else {
          return stringRepeat(__strnum(text) + __strnum(text), __num(count) / 2);
        }
      }
      exports.stringRepeat = stringRepeat;
      exports.padLeft = function (text, len, padding) {
        return __strnum(stringRepeat(padding, __num(len) - __num(text.length))) + __strnum(text);
      };
      exports.padRight = function (text, len, padding) {
        return __strnum(text) + __strnum(stringRepeat(padding, __num(len) - __num(text.length)));
      };
    }.call(this));
    
    return module.exports;
  };
  require['./jsutils'] = function () {
    var module = { exports: this };
    var exports = this;
    (function () {
      "use strict";
      var __bind, __create, __in, __isArray, __lte, __num, __owns, __slice, __strnum, __toArray, __typeof, isAcceptableIdent, padLeft, toJSSource;
      __bind = function (parent, child) {
        var func;
        if (parent == null) {
          throw TypeError("Expected parent to be an object, got " + __typeof(parent));
        }
        func = parent[child];
        if (typeof func !== "function") {
          throw Error("Trying to bind child '" + String(child) + "' which is not a function");
        }
        return function () {
          return func.apply(parent, arguments);
        };
      };
      __create = typeof Object.create === "function" ? Object.create
        : function (x) {
          function F() {}
          F.prototype = x;
          return new F();
        };
      __in = typeof Array.prototype.indexOf === "function"
        ? (function () {
          var indexOf;
          indexOf = Array.prototype.indexOf;
          return function (child, parent) {
            return indexOf.call(parent, child) !== -1;
          };
        }())
        : function (child, parent) {
          var i, len;
          len = +parent.length;
          i = -1;
          while (++i < len) {
            if (child === parent[i] && i in parent) {
              return true;
            }
          }
          return false;
        };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __lte = function (x, y) {
        var type;
        type = typeof x;
        if (type !== "number" && type !== "string") {
          throw TypeError("Cannot compare a non-number/string: " + type);
        } else if (type !== typeof y) {
          throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
        } else {
          return x <= y;
        }
      };
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __owns = Object.prototype.hasOwnProperty;
      __slice = Array.prototype.slice;
      __strnum = function (strnum) {
        var type;
        type = typeof strnum;
        if (type === "string") {
          return strnum;
        } else if (type === "number") {
          return String(strnum);
        } else {
          throw TypeError("Expected a string or number, got " + __typeof(strnum));
        }
      };
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      padLeft = require("./utils").padLeft;
      isAcceptableIdent = (function () {
        var IDENTIFIER_REGEX, IDENTIFIER_UNICODE_REGEX, RESERVED;
        IDENTIFIER_REGEX = /^[a-zA-Z_\$][a-zA-Z_\$0-9]*$/;
        IDENTIFIER_UNICODE_REGEX = /^[a-zA-Z_\$\u00a0-\uffff][a-zA-Z_\$0-9\u00a0-\uffff]*$/;
        RESERVED = [
          "arguments",
          "break",
          "case",
          "catch",
          "class",
          "const",
          "continue",
          "debugger",
          "default",
          "delete",
          "do",
          "else",
          "enum",
          "export",
          "extends",
          "eval",
          "false",
          "finally",
          "for",
          "function",
          "if",
          "implements",
          "import",
          "in",
          "Infinity",
          "instanceof",
          "interface",
          "let",
          "NaN",
          "new",
          "null",
          "package",
          "private",
          "protected",
          "public",
          "return",
          "static",
          "super",
          "switch",
          "this",
          "throw",
          "true",
          "try",
          "typeof",
          "undefined",
          "var",
          "void",
          "while",
          "with",
          "yield"
        ];
        return function (name, allowUnicode) {
          var regex;
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (allowUnicode == null) {
            allowUnicode = false;
          } else if (typeof allowUnicode !== "boolean") {
            throw TypeError("Expected allowUnicode to be a Boolean, got " + __typeof(allowUnicode));
          }
          if (allowUnicode) {
            regex = IDENTIFIER_UNICODE_REGEX;
          } else {
            regex = IDENTIFIER_REGEX;
          }
          return regex.test(name) && !__in(name, RESERVED);
        };
      }());
      toJSSource = (function () {
        var LARGE_CHARACTER_SIZE, LARGE_CONTAINER_SIZE, types;
        function indent(sb, amount, space) {
          var i;
          if (space == null) {
            space = "  ";
          }
          for (i = 0, __num(amount); i < amount; ++i) {
            sb(space);
          }
        }
        function moreIndent(options) {
          var _o;
          _o = __create(options);
          _o.indent = __num(options.indent) + 1;
          return _o;
        }
        LARGE_CHARACTER_SIZE = 50;
        LARGE_CONTAINER_SIZE = 5;
        function isLarge(value) {
          var i, k, v;
          if (value == null) {
            return false;
          } else if (value instanceof RegExp) {
            return isLarge(value.source);
          } else if (value instanceof Date) {
            return false;
          } else if (__isArray(value)) {
            switch (value.length) {
            case 0: return false;
            case 1: return isLarge(value[0]);
            default: return true;
            }
          } else {
            switch (typeof value) {
            case "string": return __num(value.length) >= LARGE_CHARACTER_SIZE;
            case "number":
            case "boolean": return false;
            case "object":
              i = -1;
              for (k in value) {
                if (__owns.call(value, k)) {
                  ++i;
                  v = value[k];
                  if (i >= 1 || isLarge(k) || isLarge(v)) {
                    return true;
                  }
                }
              }
              return false;
            default: return true;
            }
          }
        }
        types = {
          "null": function (_p, sb) {
            sb("null");
          },
          "undefined": function (_p, sb) {
            sb("void 0");
          },
          number: function (value, sb) {
            sb(value === 0 ? (1 / __num(value) < 0 ? "-0" : "0")
              : isFinite(value) ? String(value)
              : value !== value ? "0/0"
              : __num(value) > 0 ? "1/0"
              : "-1/0");
          },
          regexp: function (regex, sb) {
            sb("/");
            sb(regex.source.replace(/(\\\\)*\\?\//g, "$1\\/") || "(?:)");
            sb("/");
            if (regex.global) {
              sb("g");
            }
            if (regex.ignoreCase) {
              sb("i");
            }
            if (regex.multiline) {
              sb("m");
            }
          },
          string: (function () {
            var DOUBLE_QUOTE_REGEX, SINGLE_QUOTE_REGEX;
            function escapeHelper(m) {
              switch (m) {
              case "\b": return "\\b";
              case "\t": return "\\t";
              case "\n": return "\\n";
              case "\f": return "\\f";
              case "\r": return "\\r";
              case "\n": return "\\n";
              case '"': return '\\"';
              case "'": return "\\'";
              case "\\": return "\\\\";
              default:
                return "\\u" + __strnum(padLeft(m.charCodeAt(0).toString(16), 4, "0"));
              }
            }
            DOUBLE_QUOTE_REGEX = /[\u0000-\u001f"\\\u0080-\uffff]/g;
            SINGLE_QUOTE_REGEX = /[\u0000-\u001f'\\\u0080-\uffff]/g;
            function doubleQuote(value) {
              return '"' + __strnum(value.replace(DOUBLE_QUOTE_REGEX, escapeHelper)) + '"';
            }
            function singleQuote(value) {
              return "'" + __strnum(value.replace(SINGLE_QUOTE_REGEX, escapeHelper)) + "'";
            }
            function shorter(x, y) {
              if (__lte(x.length, y.length)) {
                return x;
              } else {
                return y;
              }
            }
            return function (string, sb) {
              return sb(string.indexOf('"') === -1 ? doubleQuote(string)
                : string.indexOf("'") === -1 ? singleQuote(string)
                : shorter(doubleQuote(string), singleQuote(string)));
            };
          }()),
          boolean: function (bool, sb) {
            return sb(bool ? "true" : "false");
          },
          date: function (date, sb) {
            sb("new Date(");
            sb(String(date.getTime()));
            return sb(")");
          },
          array: function (array, sb, options) {
            var _arr, _len, childOptions, hasIndent, i, item, len;
            hasIndent = "indent" in options;
            if (array.length === 0) {
              return sb("[]");
            } else if (hasIndent && __num(array.length) > 1 && (__num(array.length) >= LARGE_CONTAINER_SIZE || (function () {
              var _arr, _i, _len, item;
              for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                item = _arr[_i];
                if (isLarge(item)) {
                  return true;
                }
              }
              return false;
            }()))) {
              sb("[\n");
              childOptions = moreIndent(options);
              for (_arr = __toArray(array), i = 0, len = _arr.length; i < len; ++i) {
                item = _arr[i];
                indent(sb, childOptions.indent);
                toJSSource(item, sb, childOptions);
                if (i < len - 1) {
                  sb(",");
                }
                sb("\n");
              }
              indent(sb, options.indent);
              return sb("]");
            } else {
              sb("[");
              for (_arr = __toArray(array), i = 0, _len = _arr.length; i < _len; ++i) {
                item = _arr[i];
                if (i > 0) {
                  sb(",");
                  if (hasIndent) {
                    sb(" ");
                  }
                }
                toJSSource(item, sb, options);
              }
              return sb("]");
            }
          },
          object: (function () {
            function writeSafeKey(key, sb, options) {
              var num;
              if (isAcceptableIdent(key)) {
                sb(key);
              } else {
                num = Number(key);
                if (num === num && String(num) === key) {
                  sb(key);
                } else {
                  toJSSource(key, sb, options);
                }
              }
            }
            return function (obj, sb, options) {
              var _arr, _len, _ref, childOptions, hasIndent, i, key, len, pairs, value;
              _arr = [];
              for (key in obj) {
                if (__owns.call(obj, key)) {
                  value = obj[key];
                  _arr.push({ key: key, value: value });
                }
              }
              pairs = _arr;
              hasIndent = "indent" in options;
              if (pairs.length === 0) {
                return sb("{}");
              } else if (hasIndent && pairs.length > 1 && (pairs.length >= LARGE_CONTAINER_SIZE || (function () {
                var _arr, _i, _len, _ref, key, value;
                for (_arr = __toArray(pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  key = (_ref = _arr[_i]).key;
                  value = _ref.value;
                  if (isLarge(key) || isLarge(value)) {
                    return true;
                  }
                }
                return false;
              }()))) {
                sb("{\n");
                childOptions = moreIndent(options);
                for (i = 0, len = pairs.length; i < len; ++i) {
                  key = (_ref = pairs[i]).key;
                  value = _ref.value;
                  indent(sb, childOptions.indent);
                  writeSafeKey(key, sb, childOptions);
                  sb(": ");
                  toJSSource(value, sb, childOptions);
                  if (i < len - 1) {
                    sb(",");
                  }
                  sb("\n");
                }
                indent(sb, options.indent);
                return sb("}");
              } else {
                sb("{");
                for (i = 0, _len = pairs.length; i < _len; ++i) {
                  key = (_ref = pairs[i]).key;
                  value = _ref.value;
                  if (i > 0) {
                    sb(",");
                    if (hasIndent) {
                      sb(" ");
                    }
                  }
                  writeSafeKey(key, sb, options);
                  sb(":");
                  if (hasIndent) {
                    sb(" ");
                  }
                  toJSSource(value, sb, options);
                }
                return sb("}");
              }
            };
          }())
        };
        return function (value, sb, options) {
          var _ref, arr, handler;
          if (sb == null) {
            sb = null;
          } else if (typeof sb !== "function") {
            throw TypeError("Expected sb to be one of Function or null, got " + __typeof(sb));
          }
          if (options == null) {
            options = {};
          }
          if (sb == null) {
            arr = [];
            toJSSource(
              value,
              __bind(arr, "push"),
              options
            );
            return arr.join("");
          } else {
            if (value === null) {
              types["null"](value, sb, options);
            } else if (__isArray(value)) {
              types.array(value, sb, options);
            } else if (value instanceof RegExp) {
              types.regexp(value, sb, options);
            } else if (value instanceof Date) {
              types.date(value, sb, options);
            } else {
              if (__owns.call(types, _ref = typeof value)) {
                handler = types[_ref];
              }
              if (typeof handler !== "function") {
                throw Error("Cannot convert " + __typeof(value) + " to JS source");
              }
              handler(value, sb, options);
            }
            return;
          }
        };
      }());
      exports.toJSSource = toJSSource;
      exports.isAcceptableIdent = isAcceptableIdent;
    }.call(this));
    
    return module.exports;
  };
  require['./types'] = function () {
    var module = { exports: this };
    var exports = this;
    (function () {
      "use strict";
      var __cmp, __create, __isArray, __lte, __name, __num, __owns, __slice, __str, __strnum, __toArray, __typeof, inspect, Type, util;
      __cmp = function (left, right) {
        var type;
        if (left === right) {
          return 0;
        } else {
          type = typeof left;
          if (type !== "number" && type !== "string") {
            throw TypeError("Cannot compare a non-number/string: " + type);
          } else if (type !== typeof right) {
            throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof right);
          } else if (left < right) {
            return -1;
          } else {
            return 1;
          }
        }
      };
      __create = typeof Object.create === "function" ? Object.create
        : function (x) {
          function F() {}
          F.prototype = x;
          return new F();
        };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __lte = function (x, y) {
        var type;
        type = typeof x;
        if (type !== "number" && type !== "string") {
          throw TypeError("Cannot compare a non-number/string: " + type);
        } else if (type !== typeof y) {
          throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
        } else {
          return x <= y;
        }
      };
      __name = function (func) {
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        return func.displayName || func.name || "";
      };
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __owns = Object.prototype.hasOwnProperty;
      __slice = Array.prototype.slice;
      __str = function (str) {
        if (typeof str !== "string") {
          throw TypeError("Expected a string, got " + __typeof(str));
        } else {
          return str;
        }
      };
      __strnum = function (strnum) {
        var type;
        type = typeof strnum;
        if (type === "string") {
          return strnum;
        } else if (type === "number") {
          return String(strnum);
        } else {
          throw TypeError("Expected a string or number, got " + __typeof(strnum));
        }
      };
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      util = require("util");
      if (util != null) {
        inspect = util.inspect;
      }
      module.exports = Type = (function () {
        var _Type_prototype, any, AnyType, arrayBase, ComplementType, fromJSONTypes, functionBase, GenericType, getId, none, NoneType, ObjectType, SimpleType, UnionType;
        function Type() {
          var _this;
          _this = this instanceof Type ? this : __create(_Type_prototype);
          throw TypeError("Type should not be instantiated");
        }
        _Type_prototype = Type.prototype;
        Type.displayName = "Type";
        _Type_prototype.isSubsetOf = function () {
          throw Error("Not implemented: " + __name(this.constructor) + ".isSubsetOf()");
        };
        _Type_prototype.isSupersetOf = function (other) {
          return other.isSubsetOf(this);
        };
        _Type_prototype.overlaps = function () {
          throw Error("Not implemented: " + __name(this.constructor) + ".overlaps()");
        };
        _Type_prototype.compare = function () {
          throw Error("Not implemented: " + __name(this.constructor) + ".compare()");
        };
        _Type_prototype.equals = function () {
          throw Error("Not implemented: " + __name(this.constructor) + ".equals()");
        };
        _Type_prototype.union = function () {
          throw Error("Not implemented: " + __name(this.constructor) + ".union()");
        };
        _Type_prototype.intersect = function () {
          throw Error("Not implemented: " + __name(this.constructor) + ".intersect()");
        };
        _Type_prototype.complement = function () {
          var _ref;
          if ((_ref = this._complement) == null) {
            return this._complement = ComplementType(this);
          } else {
            return _ref;
          }
        };
        _Type_prototype.array = function () {
          var _ref;
          if ((_ref = this._array) == null) {
            return this._array = Type.generic(arrayBase, this);
          } else {
            return _ref;
          }
        };
        _Type_prototype["function"] = function () {
          var _ref;
          if ((_ref = this._function) == null) {
            return this._function = Type.generic(functionBase, this);
          } else {
            return _ref;
          }
        };
        function contains(alpha, bravo) {
          var _arr, _i, item;
          for (_arr = __toArray(alpha), _i = _arr.length; _i--; ) {
            item = _arr[_i];
            if (item.equals(bravo)) {
              return true;
            }
          }
          return false;
        }
        function union(alpha, bravo) {
          var a, alphaLen, b, bravoLen, cmp, i, j, result;
          if (alpha === bravo) {
            return alpha;
          }
          result = [];
          alphaLen = alpha.length;
          bravoLen = bravo.length;
          i = 0;
          j = 0;
          while (i < __num(alphaLen) && j < __num(bravoLen)) {
            a = alpha[i];
            b = bravo[j];
            cmp = a.compare(b);
            if (cmp === 0) {
              result.push(a);
              ++i;
              ++j;
            } else if (__num(cmp) < 0) {
              result.push(a);
              ++i;
            } else {
              result.push(b);
              ++j;
            }
          }
          for (; i < __num(alphaLen); ++i) {
            result.push(alpha[i]);
          }
          for (; j < __num(bravoLen); ++j) {
            result.push(bravo[j]);
          }
          switch (result.length) {
          case alphaLen: return alpha;
          case bravoLen: return bravo;
          default: return result;
          }
        }
        function intersect(alpha, bravo) {
          var a, alphaLen, b, bravoLen, cmp, i, j, result;
          if (alpha === bravo) {
            return alpha;
          }
          alphaLen = alpha.length;
          bravoLen = bravo.length;
          result = [];
          i = 0;
          j = 0;
          while (i < __num(alphaLen) && j < __num(bravoLen)) {
            a = alpha[i];
            b = bravo[j];
            cmp = a.compare(b);
            if (cmp === 0) {
              result.push(a);
              ++i;
              ++j;
            } else if (__num(cmp) < 0) {
              ++i;
            } else {
              ++j;
            }
          }
          switch (result.length) {
          case alphaLen: return alpha;
          case bravoLen: return bravo;
          default: return result;
          }
        }
        function relativeComplement(alpha, bravo) {
          var a, alphaLen, bravoLen, cmp, i, j, result;
          if (alpha === bravo) {
            return [];
          }
          result = [];
          alphaLen = alpha.length;
          if (alphaLen === 0) {
            return result;
          }
          bravoLen = bravo.length;
          if (bravoLen === 0) {
            return alpha;
          }
          i = 0;
          j = 0;
          while (i < __num(alphaLen) && j < __num(bravoLen)) {
            a = alpha[i];
            cmp = a.compare(bravo[j]);
            if (cmp === 0) {
              ++i;
              ++j;
            } else if (__num(cmp) < 0) {
              result.push(a);
              ++i;
            } else {
              ++j;
            }
          }
          for (; i < __num(alphaLen); ++i) {
            result.push(alpha[i]);
          }
          if (result.length === alphaLen) {
            return alpha;
          } else {
            return result;
          }
        }
        function isSubsetOf(alpha, bravo) {
          var alphaLen, bravoLen, i, j;
          if (alpha === bravo) {
            return true;
          }
          alphaLen = alpha.length;
          if (alphaLen === 0) {
            return true;
          }
          bravoLen = bravo.length;
          if (!__lte(alphaLen, bravoLen)) {
            return false;
          } else {
            i = 0;
            j = 0;
            while (j < __num(bravoLen)) {
              if (alpha[i].equals(bravo[j])) {
                ++i;
                if (i >= __num(alphaLen)) {
                  return true;
                }
                ++j;
              } else {
                ++j;
              }
            }
            return false;
          }
        }
        function overlaps(alpha, bravo) {
          var alphaLen, bravoLen, cmp, i, j;
          alphaLen = alpha.length;
          if (alpha === bravo && __num(alphaLen) > 0) {
            return true;
          }
          bravoLen = bravo.length;
          i = 0;
          j = 0;
          while (i < __num(alphaLen) && j < __num(bravoLen)) {
            cmp = alpha[i].compare(bravo[j]);
            if (cmp === 0) {
              return true;
            } else if (__num(cmp) < 0) {
              ++i;
            } else {
              ++j;
            }
          }
          return false;
        }
        function compare(alpha, bravo) {
          var _ref, i, len;
          if (alpha !== bravo) {
            len = alpha.length;
            if (_ref = __cmp(len, bravo.length)) {
              return _ref;
            }
            for (i = 0, __num(len); i < len; ++i) {
              if (_ref = alpha[i].compare(bravo[i])) {
                return _ref;
              }
            }
          }
          return 0;
        }
        function equals(alpha, bravo) {
          var i, len;
          if (alpha !== bravo) {
            len = alpha.length;
            if (len !== bravo.length) {
              return false;
            }
            for (i = 0, __num(len); i < len; ++i) {
              if (!alpha[i].equals(bravo[i])) {
                return false;
              }
            }
          }
          return true;
        }
        function typeComparer(a, b) {
          return a.compare(b);
        }
        function makeUnionType(types, needsSort) {
          switch (types.length) {
          case 0: return none;
          case 1: return types[0];
          default:
            if (needsSort) {
              types.sort(typeComparer);
            }
            return UnionType(types);
          }
        }
        fromJSONTypes = {};
        Type.fromJSON = function (x) {
          var type;
          if (typeof x !== "object" || x === null) {
            throw TypeError("Expected x to be an Object, got " + __typeof(x));
          }
          type = x.type;
          if (typeof type !== "string") {
            throw TypeError("Unspecified type");
          } else if (!__owns.call(fromJSONTypes, type)) {
            throw TypeError("Unknown serialization type: " + __strnum(type));
          } else {
            return fromJSONTypes[type](x);
          }
        };
        getId = (function () {
          var id;
          id = -1;
          return function () {
            ++id;
            return id;
          };
        }());
        SimpleType = (function (Type) {
          var _SimpleType_prototype, _Type_prototype2;
          function SimpleType(name) {
            var _this;
            _this = this instanceof SimpleType ? this : __create(_SimpleType_prototype);
            if (typeof name !== "string") {
              throw TypeError("Expected name to be a String, got " + __typeof(name));
            }
            _this.name = name;
            _this.id = getId();
            return _this;
          }
          _Type_prototype2 = Type.prototype;
          _SimpleType_prototype = SimpleType.prototype = __create(_Type_prototype2);
          _SimpleType_prototype.constructor = SimpleType;
          SimpleType.displayName = "SimpleType";
          if (typeof Type.extended === "function") {
            Type.extended(SimpleType);
          }
          _SimpleType_prototype.toString = function () {
            return this.name;
          };
          _SimpleType_prototype.equals = function (other) {
            return this === other;
          };
          _SimpleType_prototype.compare = function (other) {
            if (this === other) {
              return 0;
            } else if (other instanceof SimpleType) {
              return __cmp(this.name, other.name) || __cmp(this.id, other.id);
            } else {
              return __cmp("SimpleType", other.constructor.displayName);
            }
          };
          _SimpleType_prototype.union = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType) {
              if (this === other) {
                return this;
              } else {
                return makeUnionType(
                  [this, other],
                  true
                );
              }
            } else {
              return other.union(this);
            }
          };
          _SimpleType_prototype.intersect = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType) {
              if (this === other) {
                return this;
              } else {
                return none;
              }
            } else {
              return other.intersect(this);
            }
          };
          _SimpleType_prototype.isSubsetOf = function (other) {
            var _this;
            _this = this;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType) {
              return this === other;
            } else if (other instanceof UnionType) {
              return (function () {
                var _arr, _i, type;
                for (_arr = __toArray(other.types), _i = _arr.length; _i--; ) {
                  type = _arr[_i];
                  if (_this === type) {
                    return true;
                  }
                }
                return false;
              }());
            } else if (other instanceof ComplementType) {
              return !this.isSubsetOf(other.untype);
            } else {
              return other === any;
            }
          };
          _SimpleType_prototype.overlaps = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType) {
              return this === other;
            } else {
              return other.overlaps(this);
            }
          };
          _SimpleType_prototype.inspect = function () {
            var _this;
            _this = this;
            return (function () {
              var _else, k, v;
              _else = true;
              for (k in Type) {
                if (__owns.call(Type, k)) {
                  _else = false;
                  v = Type[k];
                  if (v === _this) {
                    return "Type." + k;
                  }
                }
              }
              return "Type.make(" + __strnum(inspect(_this.name)) + ")";
            }());
          };
          _SimpleType_prototype.toJSON = function () {
            var _this;
            _this = this;
            return (function () {
              var _else, k, v;
              _else = true;
              for (k in Type) {
                if (__owns.call(Type, k)) {
                  _else = false;
                  v = Type[k];
                  if (v === _this) {
                    return { type: "simple", name: k };
                  }
                }
              }
              throw Error("Cannot serialize custom type: " + String(_this));
            }());
          };
          fromJSONTypes.simple = function (_p) {
            var name;
            name = _p.name;
            return __owns.call(Type, name) && Type[name] || (function () {
              throw Error("Unknown type: " + String(name));
            }());
          };
          return SimpleType;
        }(Type));
        Type.make = function (name) {
          return SimpleType(name);
        };
        GenericType = (function (Type) {
          var _GenericType_prototype, _Type_prototype2;
          function GenericType(base, args) {
            var _i, _ref, _this;
            _this = this instanceof GenericType ? this : __create(_GenericType_prototype);
            if (!(base instanceof SimpleType)) {
              throw TypeError("Expected base to be a " + __name(SimpleType) + ", got " + __typeof(base));
            }
            _this.base = base;
            if (!__isArray(args)) {
              throw TypeError("Expected args to be an Array, got " + __typeof(args));
            } else {
              for (_i = args.length; _i--; ) {
                if (!(args[_i] instanceof Type)) {
                  throw TypeError("Expected " + ("args[" + _i + "]") + " to be a " + __name(Type) + ", got " + __typeof(args[_i]));
                }
              }
            }
            if (args.length === 0) {
              throw Error("Must provide at least one generic type argument");
            }
            _this.id = getId();
            _this.args = args.slice();
            if (_this.base === arrayBase && args.length === 1) {
              if ((_ref = args[0]._array) != null) {
                return _ref;
              }
              args[0]._array = _this;
            } else if (_this.base === functionBase && args.length === 1) {
              if ((_ref = args[0]._function) != null) {
                return _ref;
              }
              args[0]._function = _this;
            }
            return _this;
          }
          _Type_prototype2 = Type.prototype;
          _GenericType_prototype = GenericType.prototype = __create(_Type_prototype2);
          _GenericType_prototype.constructor = GenericType;
          GenericType.displayName = "GenericType";
          if (typeof Type.extended === "function") {
            Type.extended(GenericType);
          }
          function become(alpha, bravo) {
            if (!__lte(alpha.id, bravo.id)) {
              return become(bravo, alpha);
            }
            bravo.base = alpha.base;
            bravo.args = alpha.args;
            bravo.id = alpha.id;
          }
          _GenericType_prototype.toString = function () {
            var _ref, _this;
            _this = this;
            if ((_ref = this._name) == null) {
              return this._name = (function () {
                var _arr, _len, arg, i, sb;
                if (_this.base === arrayBase && _this.args.length === 1) {
                  if (_this.args[0] === any) {
                    return "[]";
                  } else {
                    return "[" + String(_this.args[0]) + "]";
                  }
                } else if (_this.base === functionBase && _this.args.length === 1) {
                  if (_this.args[0] === any) {
                    return "->";
                  } else {
                    return "-> " + String(_this.args[0]);
                  }
                } else {
                  sb = [];
                  sb.push(String(_this.base));
                  sb.push("<");
                  for (_arr = __toArray(_this.args), i = 0, _len = _arr.length; i < _len; ++i) {
                    arg = _arr[i];
                    if (i > 0) {
                      sb.push(",");
                      if (arg !== any && _this.args[i - 1] !== any) {
                        sb.push(" ");
                      }
                    }
                    if (arg !== any) {
                      sb.push(String(arg));
                    }
                  }
                  sb.push(">");
                  return sb.join("");
                }
              }());
            } else {
              return _ref;
            }
          };
          _GenericType_prototype.equals = function (other) {
            if (other === this) {
              return true;
            } else if (other instanceof GenericType) {
              if (this.id === other.id) {
                return true;
              } else if (this.base === other.base && equals(this.args, other.args)) {
                become(this, other);
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          };
          _GenericType_prototype.compare = function (other) {
            var _ref, cmp;
            if (other === this) {
              return 0;
            } else if (other instanceof GenericType) {
              if (this.id === other.id) {
                return 0;
              } else {
                if (_ref = this.base.compare(other.base)) {
                  return _ref;
                }
                cmp = compare(this.args, other.args);
                if (!cmp) {
                  become(this, other);
                }
                return cmp;
              }
            } else {
              return __cmp("GenericType", other.constructor.displayName);
            }
          };
          _GenericType_prototype.union = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof GenericType) {
              if (this.equals(other)) {
                return this;
              } else if (this.isSubsetOf(other)) {
                return other;
              } else if (other.isSubsetOf(this)) {
                return this;
              } else {
                return makeUnionType(
                  [this, other],
                  true
                );
              }
            } else if (other instanceof SimpleType) {
              return makeUnionType(
                [this, other],
                true
              );
            } else {
              return other.union(this);
            }
          };
          _GenericType_prototype.intersect = function (other) {
            var arg, args, i, isOther, isThis, len, newArg, newArgs, otherArg, otherArgs;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof GenericType) {
              if (this.base !== other.base) {
                return none;
              } else if (this.equals(other)) {
                return this;
              } else {
                args = this.args;
                otherArgs = other.args;
                len = args.length;
                if (len !== otherArgs.length) {
                  return none;
                } else {
                  isThis = true;
                  isOther = true;
                  newArgs = [];
                  for (i = 0, __num(len); i < len; ++i) {
                    arg = args[i];
                    otherArg = otherArgs[i];
                    newArg = args[i].intersect(otherArgs[i]);
                    if (isThis && arg !== newArg) {
                      isThis = false;
                    }
                    if (isOther && otherArg !== newArg) {
                      isOther = false;
                    }
                    newArgs.push(newArg);
                  }
                  if (isThis) {
                    return this;
                  } else if (isOther) {
                    return other;
                  } else {
                    return GenericType(this.base, newArgs);
                  }
                }
              }
            } else if (other instanceof SimpleType) {
              return none;
            } else {
              return other.intersect(this);
            }
          };
          _GenericType_prototype.isSubsetOf = function (other) {
            var _this, args, i, len, otherArgs;
            _this = this;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof GenericType) {
              if (this.base !== other.base) {
                return false;
              } else if (this.equals(other)) {
                return true;
              } else {
                args = this.args;
                otherArgs = other.args;
                len = args.length;
                if (len !== otherArgs.length) {
                  return false;
                } else {
                  for (i = 0, __num(len); i < len; ++i) {
                    if (!args[i].isSubsetOf(otherArgs[i])) {
                      return false;
                    }
                  }
                  return true;
                }
              }
            } else if (other instanceof UnionType) {
              return (function () {
                var _arr, _i, type;
                for (_arr = __toArray(other.types), _i = _arr.length; _i--; ) {
                  type = _arr[_i];
                  if (_this.isSubsetOf(type)) {
                    return true;
                  }
                }
                return false;
              }());
            } else if (other instanceof ComplementType) {
              return !this.isSubsetOf(other.untype);
            } else {
              return other === any;
            }
          };
          _GenericType_prototype.overlaps = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof GenericType) {
              if (this.base !== other.base) {
                return false;
              } else {
                return this.args.length === other.args.length;
              }
            } else if (other instanceof SimpleType) {
              return false;
            } else {
              return other.overlaps(this);
            }
          };
          _GenericType_prototype.inspect = function (depth) {
            var _arr, _i, _len, arg, sb;
            if (depth != null) {
              depth = __num(depth) - 1;
            }
            sb = ["Type.generic("];
            sb.push(inspect(this.base, null, depth));
            for (_arr = __toArray(this.args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              arg = _arr[_i];
              sb.push(", ");
              sb.push(inspect(arg, null, depth));
            }
            sb.push(")");
            return sb.join("");
          };
          _GenericType_prototype.toJSON = function () {
            return { type: "generic", base: this.base, args: this.args };
          };
          fromJSONTypes.generic = function (_p) {
            var args, base, baseType;
            base = _p.base;
            args = _p.args;
            baseType = Type.fromJSON(base);
            if (baseType === arrayBase && args.length === 1) {
              return Type.fromJSON(args[0]).array();
            } else if (baseType === functionBase && args.length === 1) {
              return Type.fromJSON(args[0])["function"]();
            } else {
              return GenericType(baseType, (function () {
                var _arr, _arr2, _i, _len, arg;
                for (_arr = [], _arr2 = __toArray(args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  arg = _arr2[_i];
                  _arr.push(Type.fromJSON(arg));
                }
                return _arr;
              }()));
            }
          };
          return GenericType;
        }(Type));
        Type.generic = function (base) {
          var args;
          args = __slice.call(arguments, 1);
          return GenericType(
            typeof base === "string" ? Type.make(base) : base,
            args
          );
        };
        ObjectType = (function (Type) {
          var _ObjectType_prototype, _Type_prototype2;
          function ObjectType(data) {
            var _this, k, pairs, v;
            _this = this instanceof ObjectType ? this : __create(_ObjectType_prototype);
            if (typeof data !== "object" || data === null) {
              throw TypeError("Expected data to be an Object, got " + __typeof(data));
            }
            pairs = [];
            for (k in data) {
              if (__owns.call(data, k)) {
                v = data[k];
                if (!(v instanceof Type)) {
                  throw TypeError("Expected data[" + __str(JSON.stringify(k)) + "] to be a Type, got " + __typeof(v));
                }
                if (v !== any) {
                  pairs.push([k, v]);
                }
              }
            }
            pairs.sort(function (a, b) {
              return __cmp(a[0], b[0]);
            });
            if (pairs.length === 0 && Type.object != null) {
              return Type.object;
            }
            _this.pairs = pairs;
            _this.id = getId();
            return _this;
          }
          _Type_prototype2 = Type.prototype;
          _ObjectType_prototype = ObjectType.prototype = __create(_Type_prototype2);
          _ObjectType_prototype.constructor = ObjectType;
          ObjectType.displayName = "ObjectType";
          if (typeof Type.extended === "function") {
            Type.extended(ObjectType);
          }
          _ObjectType_prototype.toString = function () {
            var _ref, _this;
            _this = this;
            if ((_ref = this._name) == null) {
              return this._name = "{" + __strnum((function () {
                var _arr, _arr2, _i, _len, _ref, k, v;
                for (_arr = [], _arr2 = __toArray(_this.pairs), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  k = (_ref = _arr2[_i])[0];
                  v = _ref[1];
                  _arr.push(__strnum(k) + ": " + String(v));
                }
                return _arr;
              }()).join(", ")) + "}";
            } else {
              return _ref;
            }
          };
          function become(alpha, bravo) {
            if (!__lte(alpha.id, bravo.id)) {
              return become(bravo, alpha);
            }
            bravo.pairs = alpha.pairs;
            bravo.id = alpha.id;
          }
          _ObjectType_prototype.equals = function (other) {
            var _arr, _len, i, otherPair, otherPairs, pair, pairs;
            if (other === this) {
              return true;
            } else if (other instanceof ObjectType) {
              pairs = this.pairs;
              otherPairs = other.pairs;
              if (pairs === otherPairs) {
                return true;
              } else if (pairs.length !== otherPairs.length) {
                return false;
              } else {
                for (_arr = __toArray(pairs), i = 0, _len = _arr.length; i < _len; ++i) {
                  pair = _arr[i];
                  otherPair = otherPairs[i];
                  if (pair[0] !== otherPair[0] || !pair[1].equals(otherPair[1])) {
                    return false;
                  }
                }
                become(this, other);
                return true;
              }
            } else {
              return false;
            }
          };
          _ObjectType_prototype.compare = function (other) {
            var _arr, _len, cmp, i, otherPair, otherPairs, pair, pairs;
            if (this === other) {
              return 0;
            } else if (other instanceof ObjectType) {
              pairs = this.pairs;
              otherPairs = other.pairs;
              if (pairs === otherPairs) {
                return 0;
              } else {
                cmp = __cmp(pairs.length, otherPairs.length);
                if (cmp) {
                  return cmp;
                } else {
                  for (_arr = __toArray(pairs), i = 0, _len = _arr.length; i < _len; ++i) {
                    pair = _arr[i];
                    otherPair = otherPairs[i];
                    cmp = __cmp(pair[0], otherPair[0]) || pair[1].compare(otherPair[1]);
                    if (cmp) {
                      return cmp;
                    }
                  }
                  become(this, other);
                  return 0;
                }
              }
            } else {
              return __cmp("ObjectType", other.constructor.displayName);
            }
          };
          _ObjectType_prototype.union = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof ObjectType) {
              if (this.equals(other)) {
                return this;
              } else if (this.isSubsetOf(other)) {
                return other;
              } else if (other.isSubsetOf(this)) {
                return this;
              } else {
                return makeUnionType(
                  [this, other],
                  true
                );
              }
            } else if (other instanceof SimpleType || other instanceof GenericType) {
              return makeUnionType(
                [this, other],
                true
              );
            } else {
              return other.union(this);
            }
          };
          _ObjectType_prototype.intersect = function (other) {
            var _arr, _i, _len, _ref, k, merged, v;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof ObjectType) {
              if (this.equals(other)) {
                return this;
              } else if (this.isSubsetOf(other)) {
                return this;
              } else if (other.isSubsetOf(this)) {
                return other;
              } else {
                merged = {};
                for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  k = (_ref = _arr[_i])[0];
                  v = _ref[1];
                  merged[k] = v;
                }
                for (_arr = __toArray(other.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  k = (_ref = _arr[_i])[0];
                  v = _ref[1];
                  if (__owns.call(merged, k)) {
                    merged[k] = merged[k].intersect(v);
                  } else {
                    merged[k] = v;
                  }
                }
                return ObjectType(merged);
              }
            } else if (other instanceof SimpleType || other instanceof GenericType) {
              return none;
            } else {
              return other.intersect(this);
            }
          };
          _ObjectType_prototype.isSubsetOf = function (other) {
            var _arr, _i, _len, _ref, _this, i, len, otherK, otherPairs, otherV, pair, pairs;
            _this = this;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof ObjectType) {
              if (this === other || other === Type.object) {
                return true;
              } else if (this === Type.object) {
                return false;
              } else {
                pairs = this.pairs;
                otherPairs = other.pairs;
                if (pairs === other.pairs) {
                  return true;
                } else {
                  i = 0;
                  len = pairs.length;
                  for (_arr = __toArray(otherPairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                    otherK = (_ref = _arr[_i])[0];
                    otherV = _ref[1];
                    for (; i <= __num(len); ++i) {
                      if (i === len) {
                        return false;
                      }
                      pair = pairs[i];
                      if (pair[0] === otherK) {
                        if (pair[1].isSubsetOf(otherV)) {
                          ++i;
                          break;
                        } else {
                          return false;
                        }
                      } else if (!__lte(pair[0], otherK)) {
                        return false;
                      }
                    }
                  }
                  if (i === len) {
                    become(this, other);
                  }
                  return true;
                }
              }
            } else if (other instanceof UnionType) {
              return (function () {
                var _arr, _i, type;
                for (_arr = __toArray(other.types), _i = _arr.length; _i--; ) {
                  type = _arr[_i];
                  if (_this.isSubsetOf(type)) {
                    return true;
                  }
                }
                return false;
              }());
            } else if (other instanceof ComplementType) {
              return !this.isSubsetOf(other.untype);
            } else {
              return other === any;
            }
          };
          _ObjectType_prototype.overlaps = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof ObjectType) {
              return true;
            } else if (other instanceof SimpleType || other instanceof GenericType) {
              return false;
            } else {
              return other.overlaps(this);
            }
          };
          _ObjectType_prototype.value = function (key) {
            var _arr, _i, pair, pairKey;
            if (typeof key !== "string") {
              throw TypeError("Expected key to be a String, got " + __typeof(key));
            }
            for (_arr = __toArray(this.pairs), _i = _arr.length; _i--; ) {
              pair = _arr[_i];
              pairKey = pair[0];
              if (pairKey === key) {
                return pair[1];
              } else if (pairKey < key) {
                return Type.any;
              }
            }
            return Type.any;
          };
          _ObjectType_prototype.inspect = function (depth) {
            var _arr, _i, _len, _ref, k, obj, v;
            if (this === Type.object) {
              return "Type.object";
            } else {
              obj = {};
              for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                k = (_ref = _arr[_i])[0];
                v = _ref[1];
                obj[k] = v;
              }
              return "Type.makeObject(" + __strnum(inspect(obj, null, depth != null ? __num(depth) - 1 : null)) + ")";
            }
          };
          _ObjectType_prototype.toJSON = function () {
            var _arr, _i, _len, _ref, k, pairs, v;
            pairs = {};
            for (_arr = __toArray(this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              k = (_ref = _arr[_i])[0];
              v = _ref[1];
              pairs[k] = v;
            }
            return { type: "object", pairs: pairs };
          };
          fromJSONTypes.object = function (_p) {
            var deserializedPairs, k, pairs, v;
            pairs = _p.pairs;
            deserializedPairs = {};
            for (k in pairs) {
              if (__owns.call(pairs, k)) {
                v = pairs[k];
                deserializedPairs[k] = Type.fromJSON(v);
              }
            }
            return ObjectType(deserializedPairs);
          };
          return ObjectType;
        }(Type));
        Type.makeObject = function (data) {
          return ObjectType(data);
        };
        UnionType = (function (Type) {
          var _Type_prototype2, _UnionType_prototype;
          function UnionType(types) {
            var _i, _this;
            _this = this instanceof UnionType ? this : __create(_UnionType_prototype);
            if (!__isArray(types)) {
              throw TypeError("Expected types to be an Array, got " + __typeof(types));
            } else {
              for (_i = types.length; _i--; ) {
                if (!(types[_i] instanceof Type)) {
                  throw TypeError("Expected " + ("types[" + _i + "]") + " to be a " + __name(Type) + ", got " + __typeof(types[_i]));
                }
              }
            }
            _this.types = types;
            if (types.length <= 1) {
              throw Error("Must provide at least 2 types to UnionType");
            }
            _this.id = getId();
            return _this;
          }
          _Type_prototype2 = Type.prototype;
          _UnionType_prototype = UnionType.prototype = __create(_Type_prototype2);
          _UnionType_prototype.constructor = UnionType;
          UnionType.displayName = "UnionType";
          if (typeof Type.extended === "function") {
            Type.extended(UnionType);
          }
          _UnionType_prototype.toString = function () {
            var _ref;
            if ((_ref = this._name) == null) {
              return this._name = "(" + __strnum(this.types.join("|")) + ")";
            } else {
              return _ref;
            }
          };
          function become(alpha, bravo) {
            if (!__lte(alpha.id, bravo.id)) {
              return become(bravo, alpha);
            }
            bravo.types = alpha.types;
            return bravo.id = alpha.id;
          }
          _UnionType_prototype.equals = function (other) {
            if (other === this) {
              return true;
            } else if (other instanceof UnionType) {
              if (this.id === other.id) {
                return true;
              } else if (this.types === other.types || equals(this.types, other.types)) {
                become(this, other);
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          };
          _UnionType_prototype.compare = function (other) {
            var cmp;
            if (other === this) {
              return 0;
            } else if (other instanceof UnionType) {
              if (this.id === other.id) {
                return 0;
              } else if (this.types === other.types) {
                become(this, other);
                return 0;
              } else {
                cmp = compare(this.types, other.types);
                if (cmp === 0) {
                  become(this, other);
                }
                return cmp;
              }
            } else {
              return __cmp("UnionType", other.constructor.displayName);
            }
          };
          _UnionType_prototype.union = function (other) {
            var _arr, _i, _len, newTypes, type, types;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType || other instanceof GenericType) {
              types = union(this.types, [other]);
              if (types === this.types) {
                return this;
              } else {
                return makeUnionType(types);
              }
            } else if (other instanceof ObjectType) {
              if (other === Type.object) {
                newTypes = [other];
                for (_arr = __toArray(this.types), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  type = _arr[_i];
                  if (type instanceof ObjectType) {
                    if (type === Type.object) {
                      return this;
                    }
                  } else {
                    newTypes.push(type);
                  }
                }
                return makeUnionType(newTypes);
              } else {
                newTypes = [other];
                for (_arr = __toArray(this.types), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  type = _arr[_i];
                  if (type instanceof ObjectType) {
                    if (other.isSubsetOf(type)) {
                      return this;
                    } else if (!type.isSubsetOf(other)) {
                      newTypes.push(type);
                    }
                  } else {
                    newTypes.push(type);
                  }
                }
                return makeUnionType(newTypes);
              }
            } else if (other instanceof UnionType) {
              types = union(this.types, other.types);
              if (types === this.types) {
                return this;
              } else if (types === other.types) {
                return other;
              } else {
                return makeUnionType(types);
              }
            } else {
              return other.union(this);
            }
          };
          _UnionType_prototype.intersect = function (other) {
            var types;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType || other instanceof GenericType || other instanceof ObjectType) {
              return makeUnionType(intersect(this.types, [other]));
            } else if (other instanceof UnionType) {
              types = intersect(this.types, other.types);
              if (types === this.types) {
                return this;
              } else if (types === other.types) {
                return other;
              } else {
                return makeUnionType(types);
              }
            } else {
              return other.intersect(this);
            }
          };
          _UnionType_prototype.isSubsetOf = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof UnionType) {
              return isSubsetOf(this.types, other.types);
            } else if (other instanceof ComplementType) {
              return !this.overlaps(other.untype);
            } else {
              return other === any;
            }
          };
          _UnionType_prototype.overlaps = function (other) {
            var _this;
            _this = this;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType) {
              return contains(this.types, other);
            } else if (other instanceof GenericType || other instanceof ObjectType) {
              return (function () {
                var _arr, _i, type;
                for (_arr = __toArray(_this.types), _i = _arr.length; _i--; ) {
                  type = _arr[_i];
                  if (type.overlaps(other)) {
                    return true;
                  }
                }
                return false;
              }());
            } else if (other instanceof UnionType) {
              return overlaps(this.types, other.types);
            } else {
              return other.overlaps(this);
            }
          };
          _UnionType_prototype.inspect = function (depth) {
            var _this;
            _this = this;
            return "(" + __strnum((function () {
              var _arr, _arr2, _i, _len, type;
              for (_arr = [], _arr2 = __toArray(_this.types), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                type = _arr2[_i];
                _arr.push(inspect(type, null, depth != null ? __num(depth) - 1 : null));
              }
              return _arr;
            }()).join(").union(")) + ")";
          };
          _UnionType_prototype.toJSON = function () {
            return { type: "union", types: this.types };
          };
          fromJSONTypes.union = function (_p) {
            var _arr, _i, current, type, types;
            types = _p.types;
            current = Type.none;
            for (_arr = __toArray(types), _i = _arr.length; _i--; ) {
              type = _arr[_i];
              current = current.union(Type.fromJSON(type));
            }
            return current;
          };
          return UnionType;
        }(Type));
        ComplementType = (function (Type) {
          var _ComplementType_prototype, _Type_prototype2;
          function ComplementType(untype) {
            var _this;
            _this = this instanceof ComplementType ? this : __create(_ComplementType_prototype);
            if (!(untype instanceof Type)) {
              throw TypeError("Expected untype to be a " + __name(Type) + ", got " + __typeof(untype));
            }
            _this.untype = untype;
            _this.id = getId();
            return _this;
          }
          _Type_prototype2 = Type.prototype;
          _ComplementType_prototype = ComplementType.prototype = __create(_Type_prototype2);
          _ComplementType_prototype.constructor = ComplementType;
          ComplementType.displayName = "ComplementType";
          if (typeof Type.extended === "function") {
            Type.extended(ComplementType);
          }
          _ComplementType_prototype.toString = function () {
            var _ref;
            if ((_ref = this._name) == null) {
              return this._name = "any \\ " + String(this.untype);
            } else {
              return _ref;
            }
          };
          function become(alpha, bravo) {
            if (!__lte(alpha.id, bravo.id)) {
              return become(bravo, alpha);
            }
            bravo.id = alpha.id;
            return bravo.untype = alpha.untype;
          }
          _ComplementType_prototype.equals = function (other) {
            if (this === other) {
              return true;
            } else if (other instanceof ComplementType) {
              if (this.id === other.id) {
                return true;
              } else if (this.untype.equals(other.untype)) {
                become(this, other);
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          };
          _ComplementType_prototype.compare = function (other) {
            var cmp;
            if (this === other) {
              return 0;
            } else if (other instanceof ComplementType) {
              if (this.id === other.id) {
                return 0;
              } else {
                cmp = this.untype.compare(other.untype);
                if (cmp === 0) {
                  become(this, other);
                }
                return cmp;
              }
            } else {
              return __cmp("ComplementType", other.constructor.displayName);
            }
          };
          function getUntypes(untype) {
            if (untype instanceof UnionType) {
              return untype.types;
            } else {
              return [untype];
            }
          }
          _ComplementType_prototype.union = function (other) {
            var myUntypes, untypes;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType || other instanceof GenericType || other instanceof ObjectType) {
              myUntypes = getUntypes(this.untype);
              untypes = relativeComplement(myUntypes, [other]);
              if (untypes === myUntypes) {
                return this;
              } else {
                return makeUnionType(untypes).complement();
              }
            } else if (other instanceof UnionType) {
              myUntypes = getUntypes(this.untype);
              untypes = relativeComplement(myUntypes, other.types);
              if (untypes === myUntypes) {
                return this;
              } else {
                return makeUnionType(untypes).complement();
              }
            } else if (other instanceof ComplementType) {
              return this.untype.intersect(other.untype).complement();
            } else {
              return other.union(this);
            }
          };
          _ComplementType_prototype.intersect = function (other) {
            var types;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType || other instanceof GenericType || other instanceof ObjectType) {
              if (contains(getUntypes(this.untype), other)) {
                return none;
              } else {
                return other;
              }
            } else if (other instanceof UnionType) {
              types = relativeComplement(other.types, getUntypes(this.untype));
              if (types === other.types) {
                return other;
              } else {
                return makeUnionType(types);
              }
            } else if (other instanceof ComplementType) {
              return this.untype.union(other.untype).complement();
            } else {
              return other.intersect(this);
            }
          };
          _ComplementType_prototype.isSubsetOf = function (other) {
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof ComplementType) {
              return other.untype.isSubsetOf(this.untype);
            } else {
              return other === any;
            }
          };
          _ComplementType_prototype.overlaps = function (other) {
            var _this;
            _this = this;
            if (!(other instanceof Type)) {
              throw TypeError("Expected other to be a " + __name(Type) + ", got " + __typeof(other));
            }
            if (other instanceof SimpleType || other instanceof GenericType) {
              return !this.untype.overlaps(other);
            } else if (other instanceof ObjectType) {
              return (function () {
                var _arr, _i, untype;
                for (_arr = getUntypes(_this.untype), _i = _arr.length; _i--; ) {
                  untype = _arr[_i];
                  if (untype instanceof ObjectType && other.isSubsetOf(untype)) {
                    return false;
                  }
                }
                return true;
              }());
            } else if (other instanceof UnionType) {
              return relativeComplement(other.types, getUntypes(this.untype)).length > 0;
            } else if (other instanceof ComplementType) {
              return true;
            } else {
              return other.overlaps(this);
            }
          };
          _ComplementType_prototype.complement = function () {
            return this.untype;
          };
          _ComplementType_prototype.inspect = function (depth) {
            return __strnum(this.untype.inspect(depth)) + ".complement()";
          };
          _ComplementType_prototype.toJSON = function () {
            return { type: "complement", untype: this.complement() };
          };
          fromJSONTypes.complement = function (_p) {
            var untype;
            untype = _p.untype;
            return Type.fromJSON(untype).complement();
          };
          return ComplementType;
        }(Type));
        any = Type.any = new (AnyType = (function (Type) {
          var _AnyType_prototype, _Type_prototype2;
          function AnyType() {
            var _this;
            _this = this instanceof AnyType ? this : __create(_AnyType_prototype);
            if (any) {
              throw Error("Cannot instantiate more than once");
            }
            return _this;
          }
          _Type_prototype2 = Type.prototype;
          _AnyType_prototype = AnyType.prototype = __create(_Type_prototype2);
          _AnyType_prototype.constructor = AnyType;
          AnyType.displayName = "AnyType";
          if (typeof Type.extended === "function") {
            Type.extended(AnyType);
          }
          _AnyType_prototype.toString = function () {
            return "any";
          };
          _AnyType_prototype.equals = function (other) {
            return this === other;
          };
          _AnyType_prototype.compare = function (other) {
            if (this === other) {
              return 0;
            } else {
              return __cmp("AnyType", other.constructor.displayName);
            }
          };
          _AnyType_prototype.union = function (other) {
            return this;
          };
          _AnyType_prototype.intersect = function (other) {
            return other;
          };
          _AnyType_prototype.isSubsetOf = function (other) {
            return this === other;
          };
          _AnyType_prototype.overlaps = function (other) {
            return true;
          };
          _AnyType_prototype.complement = function () {
            return none;
          };
          _AnyType_prototype.inspect = function () {
            return "Type.any";
          };
          _AnyType_prototype.toJSON = function () {
            return { type: "any" };
          };
          fromJSONTypes.any = function () {
            return any;
          };
          return AnyType;
        }(Type)))();
        none = Type.none = new (NoneType = (function (Type) {
          var _NoneType_prototype, _Type_prototype2;
          function NoneType() {
            var _this;
            _this = this instanceof NoneType ? this : __create(_NoneType_prototype);
            if (none) {
              throw Error("Cannot instantiate more than once");
            }
            return _this;
          }
          _Type_prototype2 = Type.prototype;
          _NoneType_prototype = NoneType.prototype = __create(_Type_prototype2);
          _NoneType_prototype.constructor = NoneType;
          NoneType.displayName = "NoneType";
          if (typeof Type.extended === "function") {
            Type.extended(NoneType);
          }
          _NoneType_prototype.toString = function () {
            return "none";
          };
          _NoneType_prototype.equals = function (other) {
            return this === other;
          };
          _NoneType_prototype.compare = function (other) {
            if (this === other) {
              return 0;
            } else {
              return __cmp("NoneType", other.constructor.displayName);
            }
          };
          _NoneType_prototype.union = function (other) {
            return other;
          };
          _NoneType_prototype.intersect = function (other) {
            return this;
          };
          _NoneType_prototype.isSubsetOf = function (other) {
            return true;
          };
          _NoneType_prototype.overlaps = function (other) {
            return false;
          };
          _NoneType_prototype.complement = function () {
            return any;
          };
          _NoneType_prototype.inspect = function () {
            return "Type.none";
          };
          _NoneType_prototype.toJSON = function () {
            return { type: "none" };
          };
          fromJSONTypes.none = function () {
            return none;
          };
          return NoneType;
        }(Type)))();
        arrayBase = Type.arrayBase = Type.make("Array");
        functionBase = Type.functionBase = Type.make("Function");
        Type["undefined"] = Type.make("undefined");
        Type["null"] = Type.make("null");
        Type.boolean = Type.make("Boolean");
        Type.string = Type.make("String");
        Type.stringArray = Type.string.array();
        Type.number = Type.make("Number");
        Type.numberArray = Type.number.array();
        Type.array = any.array();
        Type.args = Type.make("Arguments");
        Type.object = Type.makeObject({});
        Type["function"] = any["function"]();
        Type.regexp = Type.make("RegExp");
        Type.date = Type.make("Date");
        Type.error = Type.make("Error");
        Type.numeric = Type.number.union(Type["undefined"]).union(Type["null"]).union(Type.boolean);
        Type.stringOrNumber = Type.string.union(Type.number);
        Type.arrayLike = Type.array.union(Type.args);
        Type.undefinedOrNull = Type["undefined"].union(Type["null"]);
        Type.notUndefinedOrNull = Type.undefinedOrNull.complement();
        Type.primitive = Type.undefinedOrNull.union(Type.boolean).union(Type.string).union(Type.number);
        Type.nonPrimitive = Type.primitive.complement();
        Type.alwaysFalsy = Type.undefinedOrNull;
        Type.potentiallyTruthy = Type.alwaysFalsy.complement();
        Type.potentiallyFalsy = Type.alwaysFalsy.union(Type.number).union(Type.string).union(Type.boolean);
        Type.alwaysTruthy = Type.potentiallyFalsy.complement();
        return Type;
      }());
    }.call(this));
    
    return module.exports;
  };
  require['./jsast'] = function () {
    var module = { exports: this };
    var exports = this;
    (function () {
      "use strict";
      var __create, __import, __in, __isArray, __lt, __lte, __name, __num, __owns, __slice, __strnum, __toArray, __typeof, _ref, Arguments, Arr, Binary, Block, BlockExpression, BlockStatement, Break, Call, Comment, Const, Continue, Debugger, DoWhile, Eval, Expression, For, ForIn, fromJSON, Func, getIndent, Ident, If, IfExpression, IfStatement, INDENT, inspect, isAcceptableIdent, Level, Node, Noop, Obj, padLeft, Regex, Return, Root, Statement, Switch, This, Throw, toJSSource, TryCatch, TryFinally, Unary, util, While;
      __create = typeof Object.create === "function" ? Object.create
        : function (x) {
          function F() {}
          F.prototype = x;
          return new F();
        };
      __import = function (dest, source) {
        var k;
        for (k in source) {
          if (__owns.call(source, k)) {
            dest[k] = source[k];
          }
        }
        return dest;
      };
      __in = typeof Array.prototype.indexOf === "function"
        ? (function () {
          var indexOf;
          indexOf = Array.prototype.indexOf;
          return function (child, parent) {
            return indexOf.call(parent, child) !== -1;
          };
        }())
        : function (child, parent) {
          var i, len;
          len = +parent.length;
          i = -1;
          while (++i < len) {
            if (child === parent[i] && i in parent) {
              return true;
            }
          }
          return false;
        };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __lt = function (x, y) {
        var type;
        type = typeof x;
        if (type !== "number" && type !== "string") {
          throw TypeError("Cannot compare a non-number/string: " + type);
        } else if (type !== typeof y) {
          throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
        } else {
          return x < y;
        }
      };
      __lte = function (x, y) {
        var type;
        type = typeof x;
        if (type !== "number" && type !== "string") {
          throw TypeError("Cannot compare a non-number/string: " + type);
        } else if (type !== typeof y) {
          throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
        } else {
          return x <= y;
        }
      };
      __name = function (func) {
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        return func.displayName || func.name || "";
      };
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __owns = Object.prototype.hasOwnProperty;
      __slice = Array.prototype.slice;
      __strnum = function (strnum) {
        var type;
        type = typeof strnum;
        if (type === "string") {
          return strnum;
        } else if (type === "number") {
          return String(strnum);
        } else {
          throw TypeError("Expected a string or number, got " + __typeof(strnum));
        }
      };
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      util = require("util");
      if (util != null) {
        inspect = util.inspect;
      }
      padLeft = require("./utils").padLeft;
      isAcceptableIdent = (_ref = require("./jsutils")).isAcceptableIdent;
      toJSSource = _ref.toJSSource;
      Level = (function () {
        this.block = 1;
        this.insideParentheses = 2;
        this.sequence = 3;
        this.assignment = 4;
        this.inlineCondition = 5;
        this.logicalOr = 6;
        this.logicalAnd = 7;
        this.bitwiseOr = 8;
        this.bitwiseAnd = 9;
        this.bitwiseXor = 10;
        this.equality = 11;
        this.relational = 12;
        this.bitwiseShift = 13;
        this.addition = 14;
        this.multiplication = 15;
        this.unary = 16;
        this.increment = 17;
        this.callOrAccess = 18;
        this.newCall = 19;
        return this;
      }.call({}));
      INDENT = "  ";
      function incIndent(options) {
        var clone;
        clone = __create(options);
        clone.indent = __num(clone.indent) + 1;
        return clone;
      }
      getIndent = (function () {
        var cache;
        cache = [""];
        return function (indent) {
          var i, result;
          if (__num(indent) >= cache.length) {
            result = cache[cache.length - 1];
            for (i = cache.length, __num(indent); i <= indent; ++i) {
              result = __strnum(result) + INDENT;
              cache.push(result);
            }
          }
          return cache[indent];
        };
      }());
      function wrapStringHandler(callback) {
        function cb(item) {
          var len, parts, s;
          s = String(item);
          parts = s.split(/(?:\r\n?|[\n\u2028\u2029])/g);
          if (parts.length === 1) {
            cb.column = __num(cb.column) + __num(parts[0].length);
          } else {
            len = parts.length;
            cb.line = __num(cb.line) + (__num(len) - 1);
            cb.column = __num(parts[__num(len) - 1].length) + 1;
          }
          callback(s);
        }
        cb.line = 1;
        cb.column = 1;
        cb.indent = function (count) {
          callback(getIndent(count));
          cb.column = __num(cb.column) + __num(count);
        };
        return cb;
      }
      function StringWriter(callback) {
        var sb;
        return sb = wrapStringHandler(callback);
      }
      function StringBuilder() {
        var data, sb;
        data = [];
        sb = wrapStringHandler(function (item) {
          data.push(item);
        });
        sb.toString = function () {
          var text;
          switch (data.length) {
          case 0: return "";
          case 1: return data[0];
          default:
            text = data.join("");
            data.splice(0, data.length, text);
            return text;
          }
        };
        return sb;
      }
      exports.Node = Node = (function () {
        var _Node_prototype;
        function Node() {
          var _this;
          _this = this instanceof Node ? this : __create(_Node_prototype);
          throw Error("Node cannot be instantiated directly");
        }
        _Node_prototype = Node.prototype;
        Node.displayName = "Node";
        _Node_prototype.toString = function (options) {
          var sb;
          if (options == null) {
            options = {};
          }
          sb = StringBuilder();
          this.compileAsStatement(
            __import(
              { indent: 0, bare: true },
              options
            ),
            true,
            sb
          );
          return sb.toString();
        };
        _Node_prototype.compile = function () {
          throw Error("Not implemented: " + __name(this.constructor) + ".compile()");
        };
        _Node_prototype.maybeToStatement = function () {
          if (typeof this.toStatement === "function") {
            return this.toStatement();
          } else {
            return this;
          }
        };
        _Node_prototype.isConst = function () {
          return false;
        };
        _Node_prototype.isNoop = function () {
          return false;
        };
        _Node_prototype.constValue = function () {
          throw Error(__strnum(this.constructor.name) + " has no const value");
        };
        _Node_prototype.isLarge = function () {
          return true;
        };
        _Node_prototype.isSmall = function () {
          return !this.isLarge();
        };
        _Node_prototype.mutateLast = function () {
          return this;
        };
        _Node_prototype.exitType = function () {
          return null;
        };
        _Node_prototype.last = function () {
          return this;
        };
        return Node;
      }());
      exports.Expression = Expression = (function (Node) {
        var _Expression_prototype, _Node_prototype;
        function Expression() {
          var _this;
          _this = this instanceof Expression ? this : __create(_Expression_prototype);
          throw Error("Expression cannot be instantiated directly");
        }
        _Node_prototype = Node.prototype;
        _Expression_prototype = Expression.prototype = __create(_Node_prototype);
        _Expression_prototype.constructor = Expression;
        Expression.displayName = "Expression";
        if (typeof Node.extended === "function") {
          Node.extended(Expression);
        }
        _Expression_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          this.compile(options, level, lineStart, sb);
        };
        _Expression_prototype.compileAsStatement = function (options, lineStart, sb) {
          if (typeof this.toStatement === "function") {
            this.toStatement().compileAsStatement(options, lineStart, sb);
          } else {
            this.compile(options, Level.block, lineStart, sb);
            sb(";");
          }
        };
        _Expression_prototype.isLarge = function () {
          return false;
        };
        _Expression_prototype.mutateLast = function (func) {
          return func(this);
        };
        return Expression;
      }(Node));
      exports.Statement = Statement = (function (Node) {
        var _Node_prototype, _Statement_prototype;
        function Statement() {
          var _this;
          _this = this instanceof Statement ? this : __create(_Statement_prototype);
          throw Error("Expression cannot be instantiated directly");
        }
        _Node_prototype = Node.prototype;
        _Statement_prototype = Statement.prototype = __create(_Node_prototype);
        _Statement_prototype.constructor = Statement;
        Statement.displayName = "Statement";
        if (typeof Node.extended === "function") {
          Node.extended(Statement);
        }
        _Statement_prototype.compileAsStatement = function (options, lineStart, sb) {
          return this.compile(options, Level.block, lineStart, sb);
        };
        return Statement;
      }(Node));
      exports.Access = function (pos, parent) {
        var _i, _len, child, children, current;
        children = __slice.call(arguments, 2);
        current = parent;
        for (_i = 0, _len = children.length; _i < _len; ++_i) {
          child = children[_i];
          current = Binary(pos, current, ".", child);
        }
        return current;
      };
      function makePos(line, column, file) {
        var pos;
        if (typeof line !== "number") {
          throw TypeError("Expected line to be a Number, got " + __typeof(line));
        }
        if (typeof column !== "number") {
          throw TypeError("Expected column to be a Number, got " + __typeof(column));
        }
        if (file == null) {
          file = void 0;
        } else if (typeof file !== "string") {
          throw TypeError("Expected file to be one of String or undefined, got " + __typeof(file));
        }
        pos = { line: line, column: column };
        if (file) {
          pos.file = file;
        }
        return pos;
      }
      exports.Arguments = Arguments = (function (Expression) {
        var _Arguments_prototype, _Expression_prototype;
        function Arguments(pos) {
          var _this;
          _this = this instanceof Arguments ? this : __create(_Arguments_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Arguments_prototype = Arguments.prototype = __create(_Expression_prototype);
        _Arguments_prototype.constructor = Arguments;
        Arguments.displayName = "Arguments";
        if (typeof Expression.extended === "function") {
          Expression.extended(Arguments);
        }
        _Arguments_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if ((_ref = options.sourcemap) != null) {
            _ref.add(
              sb.line,
              sb.column,
              this.pos.line,
              this.pos.column,
              this.pos.file
            );
          }
          sb("arguments");
        };
        _Arguments_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
        };
        _Arguments_prototype.walk = function () {
          return this;
        };
        _Arguments_prototype.isNoop = function () {
          return true;
        };
        _Arguments_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Arguments", this.pos);
        };
        _Arguments_prototype.toJSON = function () {
          return { type: "Arguments", line: this.pos.line, column: this.pos.column, file: this.pos.file };
        };
        Arguments.fromJSON = function (_p) {
          var column, file, line;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          return Arguments(makePos(line, column, file));
        };
        return Arguments;
      }(Expression));
      function walkArray(array, walker) {
        var _arr, _i, _len, changed, item, newItem, result;
        if (!__isArray(array)) {
          throw TypeError("Expected array to be an Array, got " + __typeof(array));
        }
        if (typeof walker !== "function") {
          throw TypeError("Expected walker to be a Function, got " + __typeof(walker));
        }
        changed = false;
        for (_arr = [], _i = 0, _len = array.length; _i < _len; ++_i) {
          item = array[_i];
          newItem = walker(item);
          if (newItem == null) {
            newItem = item.walk(walker);
          }
          if (item !== newItem) {
            changed = true;
          }
          _arr.push(newItem);
        }
        result = _arr;
        if (changed) {
          return result;
        } else {
          return array;
        }
      }
      function decDepth(depth) {
        if (depth != null) {
          return __num(depth) - 1;
        } else {
          return null;
        }
      }
      function inspectHelper(depth, name, pos) {
        var _arr, _i, _len, arg, args, d, found, hasLarge, parts;
        args = __slice.call(arguments, 3);
        d = decDepth(depth);
        found = false;
        for (_i = args.length; _i--; ) {
          arg = args[_i];
          if (!arg || arg instanceof Noop || __isArray(arg) && arg.length === 0) {
            args.pop();
          } else {
            break;
          }
        }
        for (_arr = [], _i = 0, _len = args.length; _i < _len; ++_i) {
          arg = args[_i];
          _arr.push(inspect(arg, null, d));
        }
        parts = _arr;
        hasLarge = (function () {
          var _i, _len, part;
          for (_i = 0, _len = parts.length; _i < _len; ++_i) {
            part = parts[_i];
            if (parts.length > 50 || part.indexOf("\n") !== -1) {
              return true;
            }
          }
          return false;
        }());
        if (hasLarge) {
          parts = (function () {
            var _arr, _i, _len, part;
            for (_arr = [], _i = 0, _len = parts.length; _i < _len; ++_i) {
              part = parts[_i];
              _arr.push("  " + __strnum(part.split("\n").join("\n  ")));
            }
            return _arr;
          }());
          return __strnum(name) + "(\n" + __strnum(parts.join(",\n")) + ")";
        } else {
          return __strnum(name) + "(" + __strnum(parts.join(", ")) + ")";
        }
      }
      function simplify(obj) {
        var _arr, _arr2, _i, _len, item;
        if (__isArray(obj)) {
          if (obj.length === 0) {
            return;
          } else {
            for (_arr = [], _arr2 = __toArray(obj), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              item = _arr2[_i];
              _arr.push(simplify(item));
            }
            return _arr;
          }
        } else if (obj instanceof Noop) {
          return;
        } else {
          return obj;
        }
      }
      exports.Arr = Arr = (function (Expression) {
        var _Arr_prototype, _Expression_prototype;
        function Arr(pos, elements) {
          var _i, _this;
          _this = this instanceof Arr ? this : __create(_Arr_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (elements == null) {
            elements = [];
          } else if (!__isArray(elements)) {
            throw TypeError("Expected elements to be an Array, got " + __typeof(elements));
          } else {
            for (_i = elements.length; _i--; ) {
              if (!(elements[_i] instanceof Expression)) {
                throw TypeError("Expected " + ("elements[" + _i + "]") + " to be a " + __name(Expression) + ", got " + __typeof(elements[_i]));
              }
            }
          }
          _this.elements = elements;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Arr_prototype = Arr.prototype = __create(_Expression_prototype);
        _Arr_prototype.constructor = Arr;
        Arr.displayName = "Arr";
        if (typeof Expression.extended === "function") {
          Expression.extended(Arr);
        }
        function compileLarge(elements, options, level, lineStart, sb) {
          var _arr, childOptions, i, item, len;
          childOptions = incIndent(options);
          for (_arr = __toArray(elements), i = 0, len = _arr.length; i < len; ++i) {
            item = _arr[i];
            sb("\n");
            sb.indent(childOptions.indent);
            item.compile(childOptions, Level.sequence, false, sb);
            if (i < len - 1) {
              sb(",");
            }
          }
          sb("\n");
          sb.indent(options.indent);
        }
        function compileSmall(elements, options, level, lineStart, sb) {
          var _arr, _len, i, item;
          for (_arr = __toArray(elements), i = 0, _len = _arr.length; i < _len; ++i) {
            item = _arr[i];
            if (i > 0) {
              sb(",");
              if (!options.minify) {
                sb(" ");
              }
            }
            item.compile(options, Level.sequence, false, sb);
          }
        }
        _Arr_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, f;
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          sb("[");
          if (!options.minify && this.shouldCompileLarge()) {
            f = compileLarge;
          } else {
            f = compileSmall;
          }
          f(
            this.elements,
            options,
            level,
            lineStart,
            sb
          );
          sb("]");
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile();
          }
        };
        _Arr_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          return BlockExpression(this.pos, this.elements).compileAsBlock(options, level, lineStart, sb);
        };
        _Arr_prototype.compileAsStatement = function (options, lineStart, sb) {
          BlockStatement(this.pos, this.elements).compile(options, lineStart, sb);
        };
        _Arr_prototype.shouldCompileLarge = function () {
          switch (this.elements.length) {
          case 0: return false;
          case 1: return this.elements[0].isLarge();
          default: return this.isLarge();
          }
        };
        _Arr_prototype.isSmall = function () {
          switch (this.elements.length) {
          case 0: return true;
          case 1: return this.elements[0].isSmall();
          default: return false;
          }
        };
        _Arr_prototype.isLarge = function () {
          var _ref, _this;
          _this = this;
          if ((_ref = this._isLarge) == null) {
            return this._isLarge = __num(this.elements.length) > 4 || (function () {
              var _arr, _i, element;
              for (_arr = __toArray(_this.elements), _i = _arr.length; _i--; ) {
                element = _arr[_i];
                if (!element.isSmall()) {
                  return true;
                }
              }
              return false;
            }());
          } else {
            return _ref;
          }
        };
        _Arr_prototype.isNoop = function () {
          var _ref, _this;
          _this = this;
          if ((_ref = this._isNoop) == null) {
            return this._isNoop = (function () {
              var _arr, _i, element;
              for (_arr = __toArray(_this.elements), _i = _arr.length; _i--; ) {
                element = _arr[_i];
                if (!element.isNoop()) {
                  return false;
                }
              }
              return true;
            }());
          } else {
            return _ref;
          }
        };
        _Arr_prototype.walk = function (walker) {
          var elements;
          elements = walkArray(this.elements, walker);
          if (this.elements !== elements) {
            return Arr(this.pos, elements);
          } else {
            return this;
          }
        };
        _Arr_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Arr", this.pos, this.elements);
        };
        _Arr_prototype.toJSON = function () {
          return {
            type: "Arr",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            elements: simplify(this.elements)
          };
        };
        Arr.fromJSON = function (_p) {
          var column, elements, file, line;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          elements = _p.elements;
          return Arr(
            makePos(line, column, file),
            arrayFromJSON(elements)
          );
        };
        return Arr;
      }(Expression));
      exports.Assign = function (pos, left, right) {
        return Binary(pos, left, "=", right);
      };
      exports.BinaryChain = function (pos, op) {
        var _i, _len, arg, args, current, i, left, right;
        args = __slice.call(arguments, 2);
        if (op === "+") {
          for (i = args.length - 2; i >= 0; --i) {
            left = args[i];
            right = args[i + 1];
            if ((typeof left === "string" || left instanceof Const && typeof left.value === "string") && (typeof right === "string" || right instanceof Const && typeof right.value === "string")) {
              args.splice(i, 2, __strnum(typeof left === "string" ? left : left.value) + __strnum(typeof right === "string" ? right : right.value));
            }
          }
        }
        current = args[0];
        for (_i = 1, _len = args.length; _i < _len; ++_i) {
          arg = args[_i];
          current = Binary(pos, current, op, arg);
        }
        return current;
      };
      exports.And = function (pos) {
        var _end, args, current, i;
        args = __slice.call(arguments, 1);
        if (args.length === 0) {
          return Const(pos, true);
        } else {
          current = args[0];
          for (i = 1, _end = args.length; i < _end; ++i) {
            current = Binary(pos, current, "&&", args[i]);
          }
          return current;
        }
      };
      exports.Or = function (pos) {
        var _end, args, current, i;
        args = __slice.call(arguments, 1);
        if (args.length === 0) {
          return Const(pos, false);
        } else {
          current = args[0];
          for (i = 1, _end = args.length; i < _end; ++i) {
            current = Binary(pos, current, "||", args[i]);
          }
          return current;
        }
      };
      function toConst(pos, value) {
        if (value instanceof Node) {
          throw Error("Cannot convert " + __typeof(value) + " to a Const");
        } else if (value instanceof RegExp) {
          return Regex(pos, value.source, value.flags);
        } else {
          return Const(pos, value);
        }
      }
      function isNegative(value) {
        if (typeof value !== "number") {
          throw TypeError("Expected value to be a Number, got " + __typeof(value));
        }
        return value < 0 || value === 0 && 1 / value < 0;
      }
      exports.Binary = Binary = (function (Expression) {
        var _Binary_prototype, _Expression_prototype, _o, ASSIGNMENT_OPS, LEVEL_TO_ASSOCIATIVITY, OPERATOR_PRECEDENCE;
        function Binary(pos, left, op, right) {
          var _this;
          _this = this instanceof Binary ? this : __create(_Binary_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (left == null) {
            left = Noop(pos);
          }
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          _this.op = op;
          if (right == null) {
            right = Noop(pos);
          }
          if (!__owns.call(OPERATOR_PRECEDENCE, op)) {
            throw Error("Unknown binary operator: " + __strnum(toJSSource(op)));
          }
          if (!(left instanceof Expression)) {
            left = toConst(pos, left);
          }
          if (!(right instanceof Expression)) {
            right = toConst(pos, right);
          }
          _this.left = left;
          _this.right = right;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Binary_prototype = Binary.prototype = __create(_Expression_prototype);
        _Binary_prototype.constructor = Binary;
        Binary.displayName = "Binary";
        if (typeof Expression.extended === "function") {
          Expression.extended(Binary);
        }
        function compileAccess(op, left, right, options, level, lineStart, sb) {
          var dotAccess, stringLeft, wrap;
          dotAccess = right instanceof Const && typeof right.value === "string" && isAcceptableIdent(right.value);
          wrap = !__lte(level, Level.callOrAccess);
          if (wrap) {
            sb("(");
          }
          if (left instanceof Const && typeof left.value === "number") {
            stringLeft = toJSSource(left.value);
            if (isNegative(left.value) || !isFinite(left.value)) {
              sb("(");
              sb(stringLeft);
              sb(")");
            } else {
              sb(stringLeft);
              if (dotAccess && stringLeft.indexOf("e") === -1 && stringLeft.indexOf(".") === -1) {
                sb(".");
              }
            }
          } else if (left.isConst() && left.constValue() === void 0) {
            sb("(");
            (left instanceof Const ? left : Const(this.pos, void 0)).compile(options, Level.insideParentheses, false, sb);
            sb(")");
          } else {
            left.compile(options, Level.callOrAccess, lineStart, sb);
          }
          if (dotAccess) {
            sb(".");
            sb(right.value);
          } else {
            sb("[");
            right.compile(options, Level.insideParentheses, false, sb);
            sb("]");
          }
          if (wrap) {
            sb(")");
          }
        }
        function compileOther(op, left, right, options, level, lineStart, sb) {
          var associativity, opLevel, spaced, wrap;
          opLevel = OPERATOR_PRECEDENCE[op];
          associativity = LEVEL_TO_ASSOCIATIVITY[opLevel];
          if (associativity === "paren") {
            wrap = !__lt(level, opLevel);
          } else {
            wrap = !__lte(level, opLevel);
          }
          if (wrap) {
            sb("(");
          }
          left.compile(
            options,
            associativity === "right" && left instanceof Binary && OPERATOR_PRECEDENCE[left.op] === opLevel ? __num(opLevel) + 1 : opLevel,
            lineStart && !wrap,
            sb
          );
          spaced = !options.minify || /^\w/.test(op);
          if (spaced) {
            sb(" ");
          }
          sb(op);
          if (spaced) {
            sb(" ");
          }
          right.compile(
            options,
            associativity === "left" && right instanceof Binary && OPERATOR_PRECEDENCE[right.op] === opLevel ? __num(opLevel) + 1 : opLevel,
            false,
            sb
          );
          if (wrap) {
            sb(")");
          }
        }
        _Binary_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, f;
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          if (this.op === ".") {
            f = compileAccess;
          } else {
            f = compileOther;
          }
          f(
            this.op,
            this.left,
            this.right,
            options,
            level,
            lineStart,
            sb
          );
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile();
          }
        };
        _Binary_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          var _ref;
          if (__owns.call(ASSIGNMENT_OPS, this.op) || (_ref = this.op) === "&&" || _ref === "||") {
            _Expression_prototype.compileAsBlock.call(
              this,
              options,
              level,
              lineStart,
              sb
            );
          } else {
            BlockExpression(this.pos, [this.left, this.right]).compileAsBlock(options, level, lineStart, sb);
          }
        };
        _Binary_prototype.compileAsStatement = function (options, lineStart, sb) {
          var _this, left, op;
          _this = this;
          left = this.left;
          op = this.op;
          if (__owns.call(ASSIGNMENT_OPS, op)) {
            if (left instanceof Ident && typeof this.right.toStatement === "function" && false) {
              this.right.toStatement().mutateLast(
                function (node) {
                  return Binary(_this.pos, left, op, node);
                },
                { noop: true }
              ).compileAsStatement(options, lineStart, sb);
            } else {
              _Expression_prototype.compileAsStatement.call(this, options, lineStart, sb);
            }
          } else {
            BlockStatement(this.pos, [this.left, this.right]).compileAsStatement(options, lineStart, sb);
          }
        };
        ASSIGNMENT_OPS = {
          "=": true,
          "+=": true,
          "-=": true,
          "*=": true,
          "/=": true,
          "%=": true,
          "<<=": true,
          ">>=": true,
          ">>>=": true,
          "&=": true,
          "^=": true,
          "|=": true
        };
        OPERATOR_PRECEDENCE = {
          ".": Level.callOrAccess,
          "*": Level.multiplication,
          "/": Level.multiplication,
          "%": Level.multiplication,
          "+": Level.addition,
          "-": Level.addition,
          "<<": Level.bitwiseShift,
          ">>": Level.bitwiseShift,
          ">>>": Level.bitwiseShift,
          "<": Level.relational,
          "<=": Level.relational,
          ">": Level.relational,
          ">=": Level.relational,
          "in": Level.relational,
          "instanceof": Level.relational,
          "==": Level.equality,
          "!=": Level.equality,
          "===": Level.equality,
          "!==": Level.equality,
          "&": Level.bitwiseAnd,
          "^": Level.bitwiseXor,
          "|": Level.bitwiseOr,
          "&&": Level.logicalAnd,
          "||": Level.logicalOr,
          "=": Level.assignment,
          "+=": Level.assignment,
          "-=": Level.assignment,
          "*=": Level.assignment,
          "/=": Level.assignment,
          "%=": Level.assignment,
          "<<=": Level.assignment,
          ">>=": Level.assignment,
          ">>>=": Level.assignment,
          "&=": Level.assignment,
          "^=": Level.assignment,
          "|=": Level.assignment
        };
        LEVEL_TO_ASSOCIATIVITY = (_o = {}, _o[Level.equality] = "paren", _o[Level.relational] = "paren", _o[Level.addition] = "left", _o[Level.multiplication] = "left", _o[Level.bitwiseAnd] = "none", _o[Level.bitwiseOr] = "none", _o[Level.bitwiseXor] = "none", _o[Level.bitwiseShift] = "left", _o[Level.assignment] = "right", _o);
        _Binary_prototype.isLarge = function () {
          var _ref;
          if ((_ref = this._isLarge) == null) {
            return this._isLarge = !this.left.isSmall() || !this.right.isSmall();
          } else {
            return _ref;
          }
        };
        _Binary_prototype.isSmall = function () {
          var _ref;
          if ((_ref = this._isSmall) == null) {
            return this._isSmall = this.left.isSmall() && this.right.isSmall();
          } else {
            return _ref;
          }
        };
        _Binary_prototype.isNoop = function () {
          var _ref;
          if ((_ref = this._isNoop) == null) {
            return this._isNoop = !__owns.call(ASSIGNMENT_OPS, this.op) && this.left.isNoop() && this.right.isNoop();
          } else {
            return _ref;
          }
        };
        _Binary_prototype.walk = function (walker) {
          var _ref, changed, left, right;
          changed = false;
          if ((_ref = walker(this.left)) != null) {
            left = _ref;
          } else {
            left = this.left.walk(walker);
          }
          if ((_ref = walker(this.right)) != null) {
            right = _ref;
          } else {
            right = this.right.walk(walker);
          }
          if (this.left !== left || this.right !== right) {
            return Binary(this.pos, left, this.op, right);
          } else {
            return this;
          }
        };
        _Binary_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "Binary",
            this.pos,
            this.left,
            this.op,
            this.right
          );
        };
        _Binary_prototype.toJSON = function () {
          return {
            type: "Binary",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            left: simplify(this.left),
            op: this.op,
            right: simplify(this.right)
          };
        };
        Binary.fromJSON = function (_p) {
          var column, file, left, line, op, right;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          left = _p.left;
          op = _p.op;
          right = _p.right;
          return Binary(
            makePos(line, column, file),
            fromJSON(left),
            op,
            fromJSON(right)
          );
        };
        return Binary;
      }(Expression));
      exports.BlockStatement = BlockStatement = (function (Statement) {
        var _BlockStatement_prototype, _Statement_prototype;
        function BlockStatement(pos, body, label) {
          var _i, _i2, _len, _this, item, result, statement;
          _this = this instanceof BlockStatement ? this : __create(_BlockStatement_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (body == null) {
            body = [];
          } else if (!__isArray(body)) {
            throw TypeError("Expected body to be an Array, got " + __typeof(body));
          } else {
            for (_i = body.length; _i--; ) {
              if (!(body[_i] instanceof Node)) {
                throw TypeError("Expected " + ("body[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(body[_i]));
              }
            }
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          result = [];
          for (_i2 = 0, _len = body.length; _i2 < _len; ++_i2) {
            item = body[_i2];
            statement = item.maybeToStatement();
            if (statement instanceof BlockStatement && !statement.label && (statement.pos.file === pos.file || !statement.pos.file)) {
              result.push.apply(result, __toArray(statement.body));
            } else if (!(statement instanceof Noop)) {
              result.push(statement);
            }
            if (statement.exitType() != null) {
              break;
            }
          }
          switch (result.length) {
          case 0: return Noop(pos);
          case 1:
            if (pos.file && !result[0].pos.file) {
              result[0].pos.file = pos.file;
            }
            return result[0];
          }
          _this.body = result;
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _BlockStatement_prototype = BlockStatement.prototype = __create(_Statement_prototype);
        _BlockStatement_prototype.constructor = BlockStatement;
        BlockStatement.displayName = "BlockStatement";
        if (typeof Statement.extended === "function") {
          Statement.extended(BlockStatement);
        }
        _BlockStatement_prototype.compile = function (options, level, lineStart, sb) {
          var _arr, _arr2, _i, _len, _ref, childOptions, i, item, minify, node, nodes;
          if (level !== Level.block) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          for (_arr = [], _arr2 = __toArray(this.body), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
            node = _arr2[_i];
            if (!node.isNoop()) {
              _arr.push(node);
            }
          }
          nodes = _arr;
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          if (this.label != null) {
            childOptions = incIndent(options);
          } else {
            childOptions = options;
          }
          minify = options.minify;
          if (this.label != null) {
            this.label.compile(options, level, lineStart, sb);
            lineStart = false;
            sb(":");
            if (!minify) {
              sb(" ");
            }
            sb("{");
            if (!minify) {
              sb("\n");
              sb.indent(childOptions.indent);
              lineStart = true;
            }
          }
          for (i = 0, _len = nodes.length; i < _len; ++i) {
            item = nodes[i];
            if (i > 0 && !minify) {
              sb("\n");
              sb.indent(childOptions.indent);
              lineStart = true;
            }
            item.compileAsStatement(childOptions, lineStart, sb);
            lineStart = false;
          }
          if (this.label != null) {
            if (!minify) {
              sb("\n");
              sb.indent(options.indent);
            }
            sb("}");
          }
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile();
          }
        };
        _BlockStatement_prototype.walk = function (walker) {
          var _ref, body, label;
          body = walkArray(this.body, walker);
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (this.body !== body || this.label !== label) {
            return Block(this.pos, body, label);
          } else {
            return this;
          }
        };
        _BlockStatement_prototype.mutateLast = function (func, options) {
          var body, last, newLast;
          last = this.last();
          newLast = last.mutateLast(func, options);
          if (last !== newLast) {
            body = __slice.call(this.body, 0, -1);
            body.push(newLast);
            return Block(this.pos, body);
          } else {
            return this;
          }
        };
        _BlockStatement_prototype.exitType = function () {
          return this.last().exitType();
        };
        _BlockStatement_prototype.last = function () {
          var _ref;
          return (_ref = this.body)[__num(_ref.length) - 1];
        };
        _BlockStatement_prototype.isNoop = function () {
          var _ref, _this;
          _this = this;
          if ((_ref = this._isNoop) == null) {
            return this._isNoop = (function () {
              var _arr, _i, node;
              for (_arr = __toArray(_this.body), _i = _arr.length; _i--; ) {
                node = _arr[_i];
                if (!node.isNoop()) {
                  return false;
                }
              }
              return true;
            }());
          } else {
            return _ref;
          }
        };
        _BlockStatement_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "BlockStatement",
            this.pos,
            this.body,
            this.label
          );
        };
        _BlockStatement_prototype.toJSON = function () {
          var _ref;
          return {
            type: "BlockStatement",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            body: this.body,
            label: (_ref = this.label) != null ? _ref : void 0
          };
        };
        BlockStatement.fromJSON = function (_p) {
          var body, column, file, label, line;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          body = _p.body;
          label = _p.label;
          return BlockStatement(
            makePos(line, column, file),
            arrayFromJSON(body),
            label != null ? fromJSON(label) : null
          );
        };
        return BlockStatement;
      }(Statement));
      exports.BlockExpression = BlockExpression = (function (Expression) {
        var _BlockExpression_prototype, _Expression_prototype;
        function BlockExpression(pos, body) {
          var _i, _this, i, item, len, result;
          _this = this instanceof BlockExpression ? this : __create(_BlockExpression_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (body == null) {
            body = [];
          } else if (!__isArray(body)) {
            throw TypeError("Expected body to be an Array, got " + __typeof(body));
          } else {
            for (_i = body.length; _i--; ) {
              if (!(body[_i] instanceof Expression)) {
                throw TypeError("Expected " + ("body[" + _i + "]") + " to be a " + __name(Expression) + ", got " + __typeof(body[_i]));
              }
            }
          }
          result = [];
          for (i = 0, len = body.length; i < len; ++i) {
            item = body[i];
            if (i === len - 1 || !(!item instanceof Noop)) {
              if (item instanceof BlockExpression && (item.pos.file === pos.file || !item.pos.file)) {
                result.push.apply(result, __toArray(item.body));
                if (i < len - 1 && result[result.length - 1] instanceof Noop) {
                  result.pop();
                }
              } else if (!(item instanceof Noop)) {
                result.push(item);
              }
            }
          }
          switch (result.length) {
          case 0: return Noop(pos);
          case 1:
            if (pos.file && !result[0].pos.file) {
              result[0].pos.file = pos.file;
            }
            return result[0];
          }
          _this.body = result;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _BlockExpression_prototype = BlockExpression.prototype = __create(_Expression_prototype);
        _BlockExpression_prototype.constructor = BlockExpression;
        BlockExpression.displayName = "BlockExpression";
        if (typeof Expression.extended === "function") {
          Expression.extended(BlockExpression);
        }
        _BlockExpression_prototype.toStatement = function () {
          return BlockStatement(this.pos, this.body);
        };
        _BlockExpression_prototype.compile = function (options, level, lineStart, sb) {
          var _arr, _arr2, _len, _ref, i, item, len, node, nodes, wrap;
          if (level === Level.block) {
            this.toStatement().compile(options, level, lineStart, sb);
          } else {
            for (_arr = [], _arr2 = __toArray(this.body), i = 0, len = _arr2.length; i < len; ++i) {
              node = _arr2[i];
              if (!node.isNoop() || i === len - 1) {
                _arr.push(node);
              }
            }
            nodes = _arr;
            if (options.sourcemap != null && this.pos.file) {
              options.sourcemap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourcemap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            wrap = !__lte(level, Level.insideParentheses) && nodes.length > 1;
            if (wrap) {
              sb("(");
            }
            for (i = 0, _len = nodes.length; i < _len; ++i) {
              item = nodes[i];
              if (i > 0) {
                sb(",");
                if (!options.minify) {
                  sb(" ");
                }
              }
              item.compile(
                options,
                wrap ? Level.sequence : level,
                false,
                sb
              );
            }
            if (wrap) {
              sb(")");
            }
            if (options.sourcemap != null && this.pos.file) {
              options.sourcemap.popFile();
            }
          }
        };
        _BlockExpression_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          var _arr, _arr2, _len, _ref, i, item, len, node, nodes, wrap;
          if (level === Level.block) {
            this.compile(options, level, lineStart, sb);
          } else {
            for (_arr = [], _arr2 = __toArray(this.body), i = 0, len = _arr2.length; i < len; ++i) {
              node = _arr2[i];
              if (!node.isNoop()) {
                _arr.push(node);
              }
            }
            nodes = _arr;
            if (options.sourcemap != null && this.pos.file) {
              options.sourcemap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourcemap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            wrap = !__lte(level, Level.insideParentheses) && nodes.length > 1;
            if (wrap) {
              sb("(");
            }
            for (i = 0, _len = nodes.length; i < _len; ++i) {
              item = nodes[i];
              if (i > 0) {
                sb(", ");
              }
              item.compileAsBlock(
                options,
                wrap ? Level.sequence : level,
                false,
                sb
              );
            }
            if (wrap) {
              sb(")");
            }
            if (options.sourcemap != null && this.pos.file) {
              options.sourcemap.popFile();
            }
          }
        };
        _BlockExpression_prototype.isLarge = function () {
          var _ref, _this;
          _this = this;
          if ((_ref = this._isLarge) == null) {
            return this._isLarge = __num(this.body.length) > 4 || (function () {
              var _arr, _i, part;
              for (_arr = __toArray(_this.body), _i = _arr.length; _i--; ) {
                part = _arr[_i];
                if (part.isLarge()) {
                  return true;
                }
              }
              return false;
            }());
          } else {
            return _ref;
          }
        };
        _BlockExpression_prototype.isSmall = function () {
          return false;
        };
        _BlockExpression_prototype.isNoop = function () {
          var _ref, _this;
          _this = this;
          if ((_ref = this._isNoop) == null) {
            return this._isNoop = (function () {
              var _arr, _i, node;
              for (_arr = __toArray(_this.body), _i = _arr.length; _i--; ) {
                node = _arr[_i];
                if (!node.isNoop()) {
                  return false;
                }
              }
              return true;
            }());
          } else {
            return _ref;
          }
        };
        _BlockExpression_prototype.walk = BlockStatement.prototype.walk;
        _BlockExpression_prototype.last = function () {
          var _ref;
          return (_ref = this.body)[__num(_ref.length) - 1];
        };
        _BlockExpression_prototype.inspect = function (depth) {
          return inspectHelper(depth, "BlockExpression", this.pos, this.body);
        };
        _BlockExpression_prototype.toJSON = function () {
          return {
            type: "BlockExpression",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            body: this.body
          };
        };
        BlockExpression.fromJSON = function (_p) {
          var body, column, file, line;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          body = _p.body;
          return BlockExpression(
            makePos(line, column, file),
            arrayFromJSON(body)
          );
        };
        return BlockExpression;
      }(Expression));
      Block = exports.Block = function (pos, body, label) {
        var _i;
        if (body == null) {
          body = [];
        } else if (!__isArray(body)) {
          throw TypeError("Expected body to be an Array, got " + __typeof(body));
        } else {
          for (_i = body.length; _i--; ) {
            if (!(body[_i] instanceof Node)) {
              throw TypeError("Expected " + ("body[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(body[_i]));
            }
          }
        }
        if (label == null) {
          label = null;
        } else if (!(label instanceof Ident)) {
          throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
        }
        if (body.length === 0) {
          return Noop(pos);
        } else if (label == null && (function () {
          var _i2, item;
          for (_i2 = body.length; _i2--; ) {
            item = body[_i2];
            if (!(item instanceof Expression)) {
              return false;
            }
          }
          return true;
        }())) {
          return BlockExpression(pos, body);
        } else {
          return BlockStatement(pos, body, label);
        }
      };
      exports.Break = Break = (function (Statement) {
        var _Break_prototype, _Statement_prototype;
        function Break(pos, label) {
          var _this;
          _this = this instanceof Break ? this : __create(_Break_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _Break_prototype = Break.prototype = __create(_Statement_prototype);
        _Break_prototype.constructor = Break;
        Break.displayName = "Break";
        if (typeof Statement.extended === "function") {
          Statement.extended(Break);
        }
        _Break_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if (level !== Level.block) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          sb("break");
          if (this.label != null) {
            sb(" ");
            this.label.compile(options, Level.insideParentheses, false, sb);
          }
          sb(";");
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile(this.pos.file);
          }
        };
        _Break_prototype.walk = function () {
          return this;
        };
        _Break_prototype.exitType = function () {
          return "break";
        };
        _Break_prototype.walk = function (walker) {
          var _ref, label;
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (label !== this.label) {
            return Break(this.pos, label);
          } else {
            return this;
          }
        };
        _Break_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Break", this.pos, this.label);
        };
        _Break_prototype.isLarge = function () {
          return false;
        };
        _Break_prototype.toJSON = function () {
          var _ref;
          return {
            type: "Break",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            label: (_ref = this.label) != null ? _ref : void 0
          };
        };
        Break.fromJSON = function (_p) {
          var column, file, label, line;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          label = _p.label;
          return Break(
            makePos(line, column, file),
            label ? fromJSON(label) : null
          );
        };
        return Break;
      }(Statement));
      exports.Call = Call = (function (Expression) {
        var _Call_prototype, _Expression_prototype;
        function Call(pos, func, args, isNew) {
          var _i, _this;
          _this = this instanceof Call ? this : __create(_Call_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (func == null) {
            func = Noop(pos);
          } else if (!(func instanceof Expression)) {
            throw TypeError("Expected func to be a " + __name(Expression) + ", got " + __typeof(func));
          }
          _this.func = func;
          if (args == null) {
            args = [];
          } else if (!__isArray(args)) {
            throw TypeError("Expected args to be an Array, got " + __typeof(args));
          } else {
            for (_i = args.length; _i--; ) {
              if (!(args[_i] instanceof Expression)) {
                throw TypeError("Expected " + ("args[" + _i + "]") + " to be a " + __name(Expression) + ", got " + __typeof(args[_i]));
              }
            }
          }
          _this.args = args;
          if (isNew == null) {
            isNew = false;
          } else if (typeof isNew !== "boolean") {
            throw TypeError("Expected isNew to be a Boolean, got " + __typeof(isNew));
          }
          _this.isNew = isNew;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Call_prototype = Call.prototype = __create(_Expression_prototype);
        _Call_prototype.constructor = Call;
        Call.displayName = "Call";
        if (typeof Expression.extended === "function") {
          Expression.extended(Call);
        }
        function compileLarge(args, options, level, lineStart, sb) {
          var _arr, childOptions, i, item, len;
          sb("(");
          childOptions = incIndent(options);
          for (_arr = __toArray(args), i = 0, len = _arr.length; i < len; ++i) {
            item = _arr[i];
            sb("\n");
            sb.indent(childOptions.indent);
            item.compile(childOptions, Level.sequence, false, sb);
            if (i < len - 1) {
              sb(",");
            }
          }
          sb("\n");
          sb.indent(options.indent);
          sb(")");
        }
        function compileSmall(args, options, level, lineStart, sb) {
          var _arr, _len, arg, i;
          sb("(");
          for (_arr = __toArray(args), i = 0, _len = _arr.length; i < _len; ++i) {
            arg = _arr[i];
            if (i > 0) {
              sb(",");
              if (!options.minify) {
                sb(" ");
              }
            }
            arg.compile(options, Level.sequence, false, sb);
          }
          sb(")");
        }
        _Call_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, f, wrap;
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          wrap = !__lte(level, Level.callOrAccess) || !this.isNew && (this.func instanceof Func || this.func instanceof Binary && this.func.op === "." && this.func.left instanceof Func);
          if (wrap) {
            sb("(");
          }
          if (this.isNew) {
            sb("new ");
          }
          this.func.compile(
            options,
            this.isNew ? Level.newCall : Level.callOrAccess,
            lineStart && !wrap && !this.isNew,
            sb
          );
          if (!options.minify && this.shouldCompileLarge()) {
            f = compileLarge;
          } else {
            f = compileSmall;
          }
          f(
            this.args,
            options,
            level,
            lineStart,
            sb
          );
          if (wrap) {
            sb(")");
          }
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile();
          }
        };
        _Call_prototype.shouldCompileLarge = function () {
          var _this;
          _this = this;
          if (__num(this.args.length) > 4) {
            return true;
          } else {
            return (function () {
              var _arr, _i, _len, arg;
              for (_arr = __toArray(_this.args), _len = _arr.length, _i = _len - 2; _i >= 0; --_i) {
                arg = _arr[_i];
                if (!arg.isSmall()) {
                  return true;
                }
              }
              return false;
            }());
          }
        };
        _Call_prototype.hasLargeArgs = function () {
          var _ref, _this;
          _this = this;
          if ((_ref = this._hasLargeArgs) == null) {
            return this._hasLargeArgs = __num(this.args.length) > 4 ? true
              : (function () {
                var _arr, _i, arg;
                for (_arr = __toArray(_this.args), _i = _arr.length; _i--; ) {
                  arg = _arr[_i];
                  if (!arg.isSmall()) {
                    return true;
                  }
                }
                return false;
              }());
          } else {
            return _ref;
          }
        };
        _Call_prototype.isLarge = function () {
          return this.func.isLarge() || this.hasLargeArgs();
        };
        _Call_prototype.isSmall = function () {
          var _ref, _this;
          _this = this;
          if ((_ref = this._isSmall) == null) {
            return this._isSmall = !this.func.isSmall() ? false
              : (function () {
                switch (_this.args.length) {
                case 0: return true;
                case 1: return _this.args[0].isSmall();
                default: return false;
                }
              }());
          } else {
            return _ref;
          }
        };
        _Call_prototype.walk = function (walker) {
          var _ref, args, func;
          if ((_ref = walker(this.func)) != null) {
            func = _ref;
          } else {
            func = this.func.walk(walker);
          }
          args = walkArray(this.args, walker);
          if (this.func !== func || this.args !== args) {
            return Call(this.pos, func, args, this.isNew);
          } else {
            return this;
          }
        };
        _Call_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "Call",
            this.pos,
            this.func,
            this.args,
            this.isNew
          );
        };
        _Call_prototype.toJSON = function () {
          return {
            type: "Call",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            func: simplify(this.func),
            args: simplify(this.args),
            isNew: this.isNew || void 0
          };
        };
        Call.fromJSON = function (_p) {
          var args, column, file, func, isNew, line;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          func = _p.func;
          args = _p.args;
          isNew = _p.isNew;
          return Call(
            makePos(line, column, file),
            fromJSON(func),
            arrayFromJSON(args),
            isNew
          );
        };
        return Call;
      }(Expression));
      exports.Comment = Comment = (function (Statement) {
        var _Comment_prototype, _Statement_prototype;
        function Comment(pos, text) {
          var _this;
          _this = this instanceof Comment ? this : __create(_Comment_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (typeof text !== "string") {
            throw TypeError("Expected text to be a String, got " + __typeof(text));
          }
          _this.text = text;
          if (text.substring(0, 2) !== "/*") {
            throw Error("Expected text to start with '/*'");
          }
          if (text.slice(-2) !== "*/") {
            throw Error("Expected text to end with '*/'");
          }
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _Comment_prototype = Comment.prototype = __create(_Statement_prototype);
        _Comment_prototype.constructor = Comment;
        Comment.displayName = "Comment";
        if (typeof Statement.extended === "function") {
          Statement.extended(Comment);
        }
        _Comment_prototype.compile = function (options, level, lineStart, sb) {
          var _arr, _len, i, line, lines;
          lines = this.text.split("\n");
          for (_arr = __toArray(lines), i = 0, _len = _arr.length; i < _len; ++i) {
            line = _arr[i];
            if (i > 0) {
              sb("\n");
              if (!options.minify) {
                sb.indent(options.indent);
              }
            }
            sb(line);
          }
        };
        _Comment_prototype.isConst = function () {
          return true;
        };
        _Comment_prototype.constValue = function () {
          return;
        };
        _Comment_prototype.isNoop = function () {
          return false;
        };
        _Comment_prototype.walk = function () {
          return this;
        };
        _Comment_prototype.inspect = function (depth) {
          return inspectHelper("Comment", this.pos, this.text);
        };
        _Comment_prototype.toJSON = function () {
          return {
            type: "Comment",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            text: this.text
          };
        };
        Comment.fromJSON = function (_p) {
          var column, file, line, text;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          text = _p.text;
          return Comment(
            makePos(line, column, file),
            text
          );
        };
        return Comment;
      }(Statement));
      exports.Const = Const = (function (Expression) {
        var _Const_prototype, _Expression_prototype;
        function Const(pos, value) {
          var _this;
          _this = this instanceof Const ? this : __create(_Const_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (value != null && typeof value !== "boolean" && typeof value !== "number" && typeof value !== "string") {
            throw TypeError("Expected value to be one of undefined or null or Boolean or Number or String, got " + __typeof(value));
          }
          _this.value = value;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Const_prototype = Const.prototype = __create(_Expression_prototype);
        _Const_prototype.constructor = Const;
        Const.displayName = "Const";
        if (typeof Expression.extended === "function") {
          Expression.extended(Const);
        }
        _Const_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, value, wrap;
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          value = this.value;
          if (value === void 0 && options.undefinedName != null) {
            sb(options.undefinedName);
          } else {
            wrap = !__lt(level, Level.increment) && (value === void 0 || typeof value === "number" && !isFinite(value));
            if (wrap) {
              sb("(");
            }
            sb(toJSSource(value));
            if (wrap) {
              sb(")");
            }
          }
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile();
          }
        };
        _Const_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
        };
        _Const_prototype.isConst = function () {
          return true;
        };
        _Const_prototype.isNoop = Const.prototype.isConst;
        _Const_prototype.constValue = function () {
          return this.value;
        };
        _Const_prototype.walk = function () {
          return this;
        };
        _Const_prototype.inspect = function (depth) {
          return "Const(" + __strnum(inspect(this.value, null, decDepth(depth))) + ")";
        };
        _Const_prototype.toJSON = function () {
          var _ref, result;
          result = {
            type: "Const",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            value: this.value
          };
          if (typeof this.value === "number" && !isFinite(this.value)) {
            result.infinite = true;
            if (this.value === 1/0) {
              result.value = 1;
            } else if (this.value === -1/0) {
              result.value = -1;
            } else if ((_ref = this.value) !== _ref) {
              result.value = 0;
            }
          } else if (this.value === 0) {
            result.sign = isNegative(this.value) ? -1 : 1;
          }
          return result;
        };
        Const.fromJSON = function (obj) {
          return Const(
            makePos(obj.line, obj.column, obj.file),
            obj.infinite ? __num(obj.value) / 0
              : obj.value === 0 ? (obj.sign && __num(obj.sign) < 0 ? -0 : 0)
              : obj.value
          );
        };
        return Const;
      }(Expression));
      exports.Continue = Continue = (function (Statement) {
        var _Continue_prototype, _Statement_prototype;
        function Continue(pos, label) {
          var _this;
          _this = this instanceof Continue ? this : __create(_Continue_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _Continue_prototype = Continue.prototype = __create(_Statement_prototype);
        _Continue_prototype.constructor = Continue;
        Continue.displayName = "Continue";
        if (typeof Statement.extended === "function") {
          Statement.extended(Continue);
        }
        _Continue_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if (level !== Level.block) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          sb("continue");
          if (this.label != null) {
            sb(" ");
            this.label.compile(options, Level.insideParentheses, false, sb);
          }
          sb(";");
          if (options.sourcemap != null && this.pos.file) {
            return options.sourcemap.popFile();
          }
        };
        _Continue_prototype.walk = function () {
          return this;
        };
        _Continue_prototype.exitType = function () {
          return "continue";
        };
        _Continue_prototype.isLarge = function () {
          return false;
        };
        _Continue_prototype.walk = function (walker) {
          var _ref, label;
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (label !== this.label) {
            return Continue(this.pop, label);
          } else {
            return this;
          }
        };
        _Continue_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Continue", this.pos, this.label);
        };
        _Continue_prototype.toJSON = function () {
          var _ref;
          return {
            type: "Continue",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            label: (_ref = this.label) != null ? _ref : void 0
          };
        };
        Continue.fromJSON = function (_p) {
          var column, file, label, line;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          label = _p.label;
          return Continue(
            makePos(line, column, file),
            label ? fromJSON(label) : null
          );
        };
        return Continue;
      }(Statement));
      exports.Debugger = Debugger = (function (Statement) {
        var _Debugger_prototype, _Statement_prototype;
        function Debugger(pos) {
          var _this;
          _this = this instanceof Debugger ? this : __create(_Debugger_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _Debugger_prototype = Debugger.prototype = __create(_Statement_prototype);
        _Debugger_prototype.constructor = Debugger;
        Debugger.displayName = "Debugger";
        if (typeof Statement.extended === "function") {
          Statement.extended(Debugger);
        }
        _Debugger_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if (level !== Level.block) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(
              sb.line,
              sb.column,
              this.pos.line,
              this.pos.column,
              this.pos.file
            );
          }
          return sb("debugger;");
        };
        _Debugger_prototype.walk = function () {
          return this;
        };
        _Debugger_prototype.isLarge = function () {
          return false;
        };
        _Debugger_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Debugger", this.pos);
        };
        _Debugger_prototype.toJSON = function () {
          return { type: "Debugger", line: this.pos.line, column: this.pos.column, file: this.pos.file };
        };
        Debugger.fromJSON = function (_p) {
          var column, file, line;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          return Debugger(makePos(line, column, file));
        };
        return Debugger;
      }(Statement));
      exports.DoWhile = DoWhile = (function (Statement) {
        var _DoWhile_prototype, _Statement_prototype;
        function DoWhile(pos, body, test, label) {
          var _this;
          _this = this instanceof DoWhile ? this : __create(_DoWhile_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (body == null) {
            body = Noop(pos);
          } else if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (test == null) {
            test = Noop(pos);
          } else if (!(test instanceof Expression)) {
            throw TypeError("Expected test to be a " + __name(Expression) + ", got " + __typeof(test));
          }
          _this.test = test;
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          _this.body = body.maybeToStatement();
          if (test.isConst() && !test.constValue()) {
            return Block(pos, [_this.body], label);
          }
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _DoWhile_prototype = DoWhile.prototype = __create(_Statement_prototype);
        _DoWhile_prototype.constructor = DoWhile;
        DoWhile.displayName = "DoWhile";
        if (typeof Statement.extended === "function") {
          Statement.extended(DoWhile);
        }
        _DoWhile_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, minify;
          if (level !== Level.block) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          minify = options.minify;
          if (this.label != null) {
            this.label.compile(options, level, lineStart, sb);
            lineStart = false;
            sb(":");
            if (!minify) {
              sb(" ");
            }
          }
          sb("do");
          if (this.body.isNoop()) {
            sb(";");
          } else {
            if (!minify) {
              sb(" ");
            }
            sb("{");
            if (!minify) {
              sb("\n");
              sb.indent(__num(options.indent) + 1);
              lineStart = true;
            }
            this.body.compileAsStatement(incIndent(options), lineStart, sb);
            lineStart = false;
            if (!minify) {
              sb("\n");
              sb.indent(options.indent);
            }
            sb("}");
          }
          if (!minify) {
            sb(" ");
          }
          sb("while");
          if (!minify) {
            sb(" ");
          }
          sb("(");
          this.test.compile(options, Level.insideParentheses, false, sb);
          sb(");");
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile();
          }
        };
        _DoWhile_prototype.walk = function (walker) {
          var _ref, body, label, test;
          if ((_ref = walker(this.body)) != null) {
            body = _ref;
          } else {
            body = this.body.walk(walker);
          }
          if ((_ref = walker(this.test)) != null) {
            test = _ref;
          } else {
            test = this.test.walk(walker);
          }
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (body !== this.body || test !== this.test || label !== this.label) {
            return DoWhile(this.pos, body, test, label);
          } else {
            return this;
          }
        };
        _DoWhile_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "DoWhile",
            this.pos,
            this.body,
            this.test,
            this.label
          );
        };
        _DoWhile_prototype.toJSON = function () {
          var _ref;
          return {
            type: "DoWhile",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            body: simplify(this.body),
            test: simplify(this.test),
            label: (_ref = this.label) != null ? _ref : void 0
          };
        };
        DoWhile.fromJSON = function (_p) {
          var body, column, file, label, line, test;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          body = _p.body;
          test = _p.test;
          label = _p.label;
          return DoWhile(
            makePos(line, column, file),
            fromJSON(body),
            fromJSON(test),
            label != null ? fromJSON(label) : null
          );
        };
        return DoWhile;
      }(Statement));
      exports.Eval = Eval = (function (Expression) {
        var _Eval_prototype, _Expression_prototype;
        function Eval(pos, code) {
          var _this;
          _this = this instanceof Eval ? this : __create(_Eval_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (code == null) {
            code = Noop(pos);
          }
          if (!(code instanceof Expression)) {
            code = toConst(pos, code);
          }
          _this.code = code;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Eval_prototype = Eval.prototype = __create(_Expression_prototype);
        _Eval_prototype.constructor = Eval;
        Eval.displayName = "Eval";
        if (typeof Expression.extended === "function") {
          Expression.extended(Eval);
        }
        _Eval_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          if (this.code instanceof Const) {
            sb(String(this.code.value));
          } else {
            sb("eval(");
            this.code.compile(options, Level.sequence, false, sb);
            sb(")");
          }
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile();
          }
        };
        _Eval_prototype.walk = function (walker) {
          var _ref, code;
          if ((_ref = walker(this.code)) != null) {
            code = _ref;
          } else {
            code = this.code.walk(walker);
          }
          if (code !== this.code) {
            return Eval(this.pops, code);
          } else {
            return this;
          }
        };
        _Eval_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Eval", this.pos, this.code);
        };
        _Eval_prototype.toJSON = function () {
          return {
            type: "Eval",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            code: simplify(this.code)
          };
        };
        Eval.fromJSON = function (_p) {
          var code, column, file, line;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          code = _p.code;
          return Eval(
            makePos(line, column, file),
            fromJSON(code)
          );
        };
        return Eval;
      }(Expression));
      exports.For = For = (function (Statement) {
        var _For_prototype, _Statement_prototype;
        function For(pos, init, test, step, body, label) {
          var _this;
          _this = this instanceof For ? this : __create(_For_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (init == null) {
            init = Noop(pos);
          } else if (!(init instanceof Expression)) {
            throw TypeError("Expected init to be a " + __name(Expression) + ", got " + __typeof(init));
          }
          _this.init = init;
          if (test == null) {
            test = Const(pos, true);
          }
          if (step == null) {
            step = Noop(pos);
          } else if (!(step instanceof Expression)) {
            throw TypeError("Expected step to be a " + __name(Expression) + ", got " + __typeof(step));
          }
          _this.step = step;
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          if (!(test instanceof Expression)) {
            test = toConst(pos, test);
          }
          if (test.isConst() && !test.constValue()) {
            return init;
          }
          _this.test = test;
          _this.body = body.maybeToStatement();
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _For_prototype = For.prototype = __create(_Statement_prototype);
        _For_prototype.constructor = For;
        For.displayName = "For";
        if (typeof Statement.extended === "function") {
          Statement.extended(For);
        }
        _For_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, minify, test;
          if (level !== Level.block) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (this.test.isConst() && typeof this.test.constValue() !== "boolean") {
            test = Const(this.pos, !!this.test.constValue());
          } else {
            test = this.test;
          }
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          minify = options.minify;
          if (this.label != null) {
            this.label.compile(options, level, lineStart, sb);
            sb(":");
            if (!minify) {
              sb(" ");
            }
          }
          if (this.init.isNoop() && this.step.isNoop()) {
            sb("while");
            if (!minify) {
              sb(" ");
            }
            sb("(");
            test.compile(options, Level.insideParentheses, false, sb);
          } else {
            sb("for");
            if (!minify) {
              sb(" ");
            }
            sb("(");
            if (!this.init.isNoop()) {
              this.init.compileAsBlock(options, Level.insideParentheses, false, sb);
            }
            sb(";");
            if (!minify) {
              sb(" ");
            }
            if (!test.isConst() || !test.constValue()) {
              test.compile(options, Level.insideParentheses, false, sb);
            }
            sb(";");
            if (!minify) {
              sb(" ");
            }
            if (!this.step.isNoop()) {
              this.step.compileAsBlock(options, Level.insideParentheses, false, sb);
            }
          }
          sb(")");
          if (this.body.isNoop()) {
            sb(";");
          } else {
            if (!minify) {
              sb(" ");
            }
            sb("{");
            if (!minify) {
              sb("\n");
              sb.indent(__num(options.indent) + 1);
            }
            this.body.compileAsStatement(incIndent(options), !minify, sb);
            if (!minify) {
              sb("\n");
              sb.indent(options.indent);
            }
            sb("}");
          }
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile();
          }
        };
        _For_prototype.walk = function (walker) {
          var _ref, body, init, label, step, test;
          if ((_ref = walker(this.init)) != null) {
            init = _ref;
          } else {
            init = this.init.walk(walker);
          }
          if ((_ref = walker(this.test)) != null) {
            test = _ref;
          } else {
            test = this.test.walk(walker);
          }
          if ((_ref = walker(this.step)) != null) {
            step = _ref;
          } else {
            step = this.step.walk(walker);
          }
          if ((_ref = walker(this.body)) != null) {
            body = _ref;
          } else {
            body = this.body.walk(walker);
          }
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (init !== this.init || test !== this.test || step !== this.step || body !== this.body || label !== this.label) {
            return For(
              this.pos,
              init,
              test,
              step,
              body,
              label
            );
          } else {
            return this;
          }
        };
        _For_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "For",
            this.pos,
            this.init,
            this.test,
            this.step,
            this.body,
            this.label
          );
        };
        _For_prototype.toJSON = function () {
          var _ref;
          return {
            type: "For",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            init: simplify(this.init),
            test: simplify(this.test),
            step: simplify(this.step),
            body: simplify(this.body),
            label: (_ref = this.label) != null ? _ref : void 0
          };
        };
        For.fromJSON = function (_p) {
          var body, column, file, init, label, line, step, test;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          init = _p.init;
          test = _p.test;
          step = _p.step;
          body = _p.body;
          label = _p.label;
          return For(
            makePos(line, column, file),
            fromJSON(init),
            fromJSON(test),
            fromJSON(step),
            fromJSON(body),
            label != null ? fromJSON(label) : null
          );
        };
        return For;
      }(Statement));
      exports.ForIn = ForIn = (function (Statement) {
        var _ForIn_prototype, _Statement_prototype;
        function ForIn(pos, key, object, body, label) {
          var _this;
          _this = this instanceof ForIn ? this : __create(_ForIn_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (!(key instanceof Ident)) {
            throw TypeError("Expected key to be a " + __name(Ident) + ", got " + __typeof(key));
          }
          _this.key = key;
          if (object == null) {
            object = Noop(line, column);
          } else if (!(object instanceof Expression)) {
            throw TypeError("Expected object to be a " + __name(Expression) + ", got " + __typeof(object));
          }
          _this.object = object;
          if (body == null) {
            body = Noop(line, column);
          } else if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          _this.body = body.maybeToStatement();
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _ForIn_prototype = ForIn.prototype = __create(_Statement_prototype);
        _ForIn_prototype.constructor = ForIn;
        ForIn.displayName = "ForIn";
        if (typeof Statement.extended === "function") {
          Statement.extended(ForIn);
        }
        _ForIn_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, minify;
          if (level !== Level.block) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          minify = options.minify;
          if (this.label != null) {
            this.label.compile(options, level, lineStart, sb);
            sb(":");
            if (!minify) {
              sb(" ");
            }
          }
          sb("for");
          if (!minify) {
            sb(" ");
          }
          sb("(");
          this.key.compile(options, Level.insideParentheses, false, sb);
          sb(" in ");
          this.object.compile(options, Level.insideParentheses, false, sb);
          sb(")");
          if (this.body.isNoop()) {
            sb(";");
          } else {
            if (!minify) {
              sb(" ");
            }
            sb("{");
            if (!minify) {
              sb("\n");
              sb.indent(__num(options.indent) + 1);
            }
            this.body.compileAsStatement(incIndent(options), !minify, sb);
            if (!minify) {
              sb("\n");
              sb.indent(options.indent);
            }
            sb("}");
          }
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile();
          }
        };
        _ForIn_prototype.walk = function (walker) {
          var _ref, body, key, label, object;
          if ((_ref = walker(this.key)) != null) {
            key = _ref;
          } else {
            key = this.key.walk(walker);
          }
          if ((_ref = walker(this.object)) != null) {
            object = _ref;
          } else {
            object = this.object.walk(walker);
          }
          if ((_ref = walker(this.body)) != null) {
            body = _ref;
          } else {
            body = this.body.walk(walker);
          }
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (key !== this.key || object !== this.object || body !== this.body || label !== this.label) {
            return ForIn(this.pos, key, object, body);
          } else {
            return this;
          }
        };
        _ForIn_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "ForIn",
            this.pos,
            this.key,
            this.object,
            this.body,
            this.label
          );
        };
        _ForIn_prototype.toJSON = function () {
          var _ref;
          return {
            type: "ForIn",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            key: this.key,
            object: simplify(this.object),
            body: simplify(this.body),
            label: (_ref = this.label) != null ? _ref : void 0
          };
        };
        ForIn.fromJSON = function (_p) {
          var body, column, file, key, label, line, object;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          key = _p.key;
          object = _p.object;
          body = _p.body;
          label = _p.label;
          return ForIn(
            makePos(line, column, file),
            fromJSON(key),
            fromJSON(object),
            fromJSON(body),
            label != null ? fromJSON(label) : null
          );
        };
        return ForIn;
      }(Statement));
      function validateFuncParamsAndVariables(params, variables) {
        var _arr, _i, names, param, variable;
        names = [];
        for (_arr = __toArray(params), _i = _arr.length; _i--; ) {
          param = _arr[_i];
          if (__in(param.name, names)) {
            throw Error("Duplicate parameter: " + __strnum(param.name));
          }
          names.push(param.name);
        }
        for (_arr = __toArray(variables), _i = _arr.length; _i--; ) {
          variable = _arr[_i];
          if (__in(variable, names)) {
            throw Error("Duplicate variable: " + __strnum(variable));
          }
          names.push(variable);
        }
      }
      function compileFuncBody(options, sb, declarations, variables, body, lineStart) {
        var _arr, _i, _len, declaration, i, minify, variable;
        minify = options.minify;
        for (_arr = __toArray(declarations), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          declaration = _arr[_i];
          if (!minify) {
            sb.indent(options.indent);
          }
          sb(toJSSource(declaration));
          sb(";");
          lineStart = false;
          if (!minify) {
            sb("\n");
            lineStart = true;
          }
        }
        if (__num(variables.length) > 0) {
          if (!minify) {
            sb.indent(options.indent);
          }
          sb("var ");
          for (_arr = __toArray(variables), i = 0, _len = _arr.length; i < _len; ++i) {
            variable = _arr[i];
            if (i > 0) {
              sb(",");
              if (!minify) {
                sb(" ");
              }
            }
            Ident(body.pos, variables[i], true).compile(options, Level.insideParentheses, false, sb);
          }
          sb(";");
          lineStart = false;
          if (!minify) {
            sb("\n");
            lineStart = true;
          }
        }
        if (!body.isNoop()) {
          if (!minify) {
            sb.indent(options.indent);
          }
          body.compileAsStatement(options, lineStart, sb);
          if (!minify) {
            sb("\n");
          }
        }
      }
      function compileFunc(options, sb, name, params, declarations, variables, body) {
        var _arr, _len, i, minify, param;
        sb("function");
        minify = options.minify;
        if (!minify || name != null) {
          sb(" ");
        }
        if (name != null) {
          name.compile(options, Level.insideParentheses, false, sb);
        }
        sb("(");
        for (_arr = __toArray(params), i = 0, _len = _arr.length; i < _len; ++i) {
          param = _arr[i];
          if (i > 0) {
            sb(",");
            if (!minify) {
              sb(" ");
            }
          }
          param.compile(options, Level.insideParentheses, false, sb);
        }
        sb(")");
        if (!minify) {
          sb(" ");
        }
        sb("{");
        if (variables.length || declarations.length || !body.isNoop()) {
          if (!minify) {
            sb("\n");
          }
          compileFuncBody(
            incIndent(options),
            sb,
            declarations,
            variables,
            body,
            !minify
          );
          if (!minify) {
            sb.indent(options.indent);
          }
        }
        return sb("}");
      }
      exports.Func = Func = (function (Expression) {
        var _Expression_prototype, _Func_prototype;
        function Func(pos, name, params, variables, body, declarations) {
          var _i, _i2, _i3, _this;
          _this = this instanceof Func ? this : __create(_Func_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (name == null) {
            name = null;
          } else if (!(name instanceof Ident)) {
            throw TypeError("Expected name to be one of null or " + __name(Ident) + ", got " + __typeof(name));
          }
          _this.name = name;
          if (params == null) {
            params = [];
          } else if (!__isArray(params)) {
            throw TypeError("Expected params to be an Array, got " + __typeof(params));
          } else {
            for (_i = params.length; _i--; ) {
              if (!(params[_i] instanceof Ident)) {
                throw TypeError("Expected " + ("params[" + _i + "]") + " to be a " + __name(Ident) + ", got " + __typeof(params[_i]));
              }
            }
          }
          _this.params = params;
          if (variables == null) {
            variables = [];
          } else if (!__isArray(variables)) {
            throw TypeError("Expected variables to be an Array, got " + __typeof(variables));
          } else {
            for (_i2 = variables.length; _i2--; ) {
              if (typeof variables[_i2] !== "string") {
                throw TypeError("Expected " + ("variables[" + _i2 + "]") + " to be a String, got " + __typeof(variables[_i2]));
              }
            }
          }
          _this.variables = variables;
          if (body == null) {
            body = Noop(line, column);
          } else if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          _this.body = body;
          if (declarations == null) {
            declarations = [];
          } else if (!__isArray(declarations)) {
            throw TypeError("Expected declarations to be an Array, got " + __typeof(declarations));
          } else {
            for (_i3 = declarations.length; _i3--; ) {
              if (typeof declarations[_i3] !== "string") {
                throw TypeError("Expected " + ("declarations[" + _i3 + "]") + " to be a String, got " + __typeof(declarations[_i3]));
              }
            }
          }
          _this.declarations = declarations;
          validateFuncParamsAndVariables(params, variables);
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Func_prototype = Func.prototype = __create(_Expression_prototype);
        _Func_prototype.constructor = Func;
        Func.displayName = "Func";
        if (typeof Expression.extended === "function") {
          Expression.extended(Func);
        }
        _Func_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, wrap;
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          wrap = lineStart && !this.name;
          if (wrap) {
            sb("(");
          }
          compileFunc(
            options,
            sb,
            this.name,
            this.params,
            this.declarations,
            this.variables,
            this.body
          );
          if (wrap) {
            sb(")");
          }
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile();
          }
        };
        _Func_prototype.compileAsStatement = function (options, lineStart, sb) {
          this.compile(options, Level.block, lineStart, sb);
          if (!lineStart || !this.name) {
            sb(";");
          }
        };
        _Func_prototype.isLarge = function () {
          return true;
        };
        _Func_prototype.isNoop = function () {
          return this.name == null;
        };
        _Func_prototype.walk = function (walker) {
          var _ref, body, name, params;
          if (this.name) {
            if ((_ref = walker(this.name)) != null) {
              name = _ref;
            } else {
              name = this.name.walk(walker);
            }
          } else {
            name = this.name;
          }
          params = walkArray(this.params, walker);
          body = this.body.walk(walker);
          if (name !== this.name || params !== this.params || body !== this.body) {
            return Func(
              this.pos,
              name,
              params,
              this.variables,
              body,
              this.declarations,
              this.meta
            );
          } else {
            return this;
          }
        };
        _Func_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "Func",
            this.pos,
            this.name,
            this.params,
            this.variables,
            this.body,
            this.declarations,
            this.meta
          );
        };
        _Func_prototype.toJSON = function () {
          return {
            type: "Func",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            name: this.name || void 0,
            params: simplify(this.params),
            variables: simplify(this.variables),
            body: simplify(this.body),
            declarations: simplify(this.declarations)
          };
        };
        Func.fromJSON = function (_p) {
          var body, column, declarations, file, line, name, params, variables;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          name = _p.name;
          params = _p.params;
          variables = _p.variables;
          body = _p.body;
          declarations = _p.declarations;
          return Func(
            makePos(line, column, file),
            name ? fromJSON(name) : void 0,
            arrayFromJSON(params),
            variables,
            fromJSON(body),
            declarations
          );
        };
        return Func;
      }(Expression));
      exports.Ident = Ident = (function (Expression) {
        var _Expression_prototype, _Ident_prototype;
        function Ident(pos, name, allowUnacceptable) {
          var _this;
          _this = this instanceof Ident ? this : __create(_Ident_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          _this.name = name;
          if (allowUnacceptable == null) {
            allowUnacceptable = false;
          } else if (typeof allowUnacceptable !== "boolean") {
            throw TypeError("Expected allowUnacceptable to be a Boolean, got " + __typeof(allowUnacceptable));
          }
          if (!allowUnacceptable && !isAcceptableIdent(name, true)) {
            throw Error("Not an acceptable identifier name: " + name);
          }
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Ident_prototype = Ident.prototype = __create(_Expression_prototype);
        _Ident_prototype.constructor = Ident;
        Ident.displayName = "Ident";
        if (typeof Expression.extended === "function") {
          Expression.extended(Ident);
        }
        function unicodeReplacer(m) {
          return "\\u" + __strnum(padLeft(m.charCodeAt(0).toString(16), 4, "0"));
        }
        _Ident_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if ((_ref = options.sourcemap) != null) {
            _ref.add(
              sb.line,
              sb.column,
              this.pos.line,
              this.pos.column,
              this.pos.file
            );
          }
          sb(this.name.replace(/[\u0000-\u001f\u0080-\uffff]/g, unicodeReplacer));
        };
        _Ident_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
        };
        _Ident_prototype.walk = function () {
          return this;
        };
        _Ident_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Ident", this.pos, this.name);
        };
        _Ident_prototype.isNoop = function () {
          return true;
        };
        _Ident_prototype.toJSON = function () {
          return {
            type: "Ident",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            name: this.name
          };
        };
        Ident.fromJSON = function (_p) {
          var column, file, line, name;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          name = _p.name;
          return Ident(
            makePos(line, column, file),
            name
          );
        };
        return Ident;
      }(Expression));
      exports.IfStatement = IfStatement = (function (Statement) {
        var _IfStatement_prototype, _Statement_prototype;
        function IfStatement(pos, test, whenTrue, whenFalse, label) {
          var _this;
          _this = this instanceof IfStatement ? this : __create(_IfStatement_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (test == null) {
            test = Noop(pos);
          } else if (!(test instanceof Expression)) {
            throw TypeError("Expected test to be a " + __name(Expression) + ", got " + __typeof(test));
          }
          if (whenTrue == null) {
            whenTrue = Noop(pos);
          } else if (!(whenTrue instanceof Node)) {
            throw TypeError("Expected whenTrue to be a " + __name(Node) + ", got " + __typeof(whenTrue));
          }
          if (whenFalse == null) {
            whenFalse = Noop(pos);
          } else if (!(whenFalse instanceof Node)) {
            throw TypeError("Expected whenFalse to be a " + __name(Node) + ", got " + __typeof(whenFalse));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          if (test instanceof Unary && test.op === "!" && test.node instanceof Unary && test.node.op === "!") {
            test = test.node.node;
          }
          if (test.isConst()) {
            if (test.constValue()) {
              return Block(pos, [whenTrue], label);
            } else {
              return Block(pos, [whenFalse], label);
            }
          } else {
            whenTrue = whenTrue.maybeToStatement();
            whenFalse = whenFalse.maybeToStatement();
            if (whenTrue instanceof Noop) {
              if (whenFalse instanceof Noop) {
                return test.maybeToStatement();
              } else {
                return IfStatement.call(
                  _this,
                  pos,
                  Unary(test.pos, "!", test),
                  whenFalse,
                  whenTrue,
                  label
                );
              }
            } else if (whenFalse instanceof Noop && whenTrue instanceof IfStatement && whenTrue.whenFalse instanceof Noop && whenTrue.label == null) {
              _this.test = Binary(pos, test, "&&", whenTrue.test);
              _this.whenTrue = whenTrue.whenTrue;
              _this.whenFalse = whenFalse;
            } else {
              _this.test = test;
              _this.whenTrue = whenTrue;
              _this.whenFalse = whenFalse;
            }
          }
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _IfStatement_prototype = IfStatement.prototype = __create(_Statement_prototype);
        _IfStatement_prototype.constructor = IfStatement;
        IfStatement.displayName = "IfStatement";
        if (typeof Statement.extended === "function") {
          Statement.extended(IfStatement);
        }
        _IfStatement_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, childOptions, minify, whenFalse;
          if (level !== Level.block) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (this.whenTrue.isNoop()) {
            if (this.whenFalse.isNoop()) {
              this.test.compileAsStatement(options, true, sb);
            } else {
              IfStatement(
                this.pos,
                Unary(this.test.pos, "!", this.test),
                this.whenFalse,
                this.whenTrue,
                this.label
              ).compile(options, level, lineStart, sb);
            }
          } else {
            if (options.sourcemap != null && this.pos.file) {
              options.sourcemap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourcemap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            minify = options.minify;
            if (this.label != null) {
              this.label.compile(options, level, lineStart, sb);
              sb(":");
              if (!minify) {
                sb(" ");
              }
            }
            sb("if");
            if (!minify) {
              sb(" ");
            }
            sb("(");
            this.test.compile(options, Level.insideParentheses, false, sb);
            sb(")");
            if (!minify) {
              sb(" ");
            }
            sb("{");
            childOptions = incIndent(options);
            if (!minify) {
              sb("\n");
              sb.indent(childOptions.indent);
            }
            this.whenTrue.compileAsStatement(childOptions, !minify, sb);
            if (!minify) {
              sb("\n");
              sb.indent(options.indent);
            }
            sb("}");
            whenFalse = this.whenFalse;
            if (!whenFalse.isNoop()) {
              if (!minify) {
                sb(" ");
              }
              sb("else");
              if (whenFalse instanceof IfStatement && whenFalse.label == null) {
                sb(" ");
                whenFalse.compile(options, level, false, sb);
              } else {
                if (!minify) {
                  sb(" ");
                }
                sb("{");
                if (!minify) {
                  sb("\n");
                  sb.indent(childOptions.indent);
                }
                whenFalse.compileAsStatement(childOptions, !minify, sb);
                if (!minify) {
                  sb("\n");
                  sb.indent(options.indent);
                }
                sb("}");
              }
            }
            if (options.sourcemap != null && this.pos.file) {
              options.sourcemap.popFile();
            }
          }
        };
        _IfStatement_prototype.walk = function (walker) {
          var _ref, label, test, whenFalse, whenTrue;
          if ((_ref = walker(this.test)) != null) {
            test = _ref;
          } else {
            test = this.test.walk(walker);
          }
          if ((_ref = walker(this.whenTrue)) != null) {
            whenTrue = _ref;
          } else {
            whenTrue = this.whenTrue.walk(walker);
          }
          if ((_ref = walker(this.whenFalse)) != null) {
            whenFalse = _ref;
          } else {
            whenFalse = this.whenFalse.walk(walker);
          }
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (test !== this.test || whenTrue !== this.whenTrue || whenFalse !== this.whenFalse || label !== this.label) {
            return If(
              this.pos,
              test,
              whenTrue,
              whenFalse,
              label
            );
          } else {
            return this;
          }
        };
        _IfStatement_prototype.mutateLast = function (func, options) {
          var whenFalse, whenTrue;
          whenTrue = this.whenTrue.mutateLast(func, options);
          whenFalse = this.whenFalse.mutateLast(func, options);
          if (whenTrue !== this.whenTrue || whenFalse !== this.whenFalse) {
            return If(
              this.pos,
              this.test,
              whenTrue,
              whenFalse,
              this.label
            );
          } else {
            return this;
          }
        };
        _IfStatement_prototype.exitType = function () {
          var falseExit, trueExit;
          if (this._exitType === void 0) {
            trueExit = this.whenTrue.exitType();
            falseExit = this.whenFalse.exitType();
            return this._exitType = trueExit === falseExit ? trueExit : null;
          } else {
            return this._exitType;
          }
        };
        _IfStatement_prototype.isNoop = function () {
          var _ref;
          if ((_ref = this._isNoop) == null) {
            return this._isNoop = this.test.isNoop() && this.whenTrue.isNoop() && this.whenFalse.isNoop();
          } else {
            return _ref;
          }
        };
        _IfStatement_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "IfStatement",
            this.pos,
            this.test,
            this.whenTrue,
            this.whenFalse
          );
        };
        _IfStatement_prototype.toJSON = function () {
          var _ref;
          return {
            type: "IfStatement",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            test: simplify(this.test),
            whenTrue: simplify(this.whenTrue),
            whenFalse: simplify(this.whenFalse),
            label: (_ref = this.label) != null ? _ref : void 0
          };
        };
        IfStatement.fromJSON = function (_p) {
          var column, file, label, line, test, whenFalse, whenTrue;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          test = _p.test;
          whenTrue = _p.whenTrue;
          whenFalse = _p.whenFalse;
          label = _p.label;
          return IfStatement(
            makePos(line, column, file),
            fromJSON(test),
            fromJSON(whenTrue),
            fromJSON(whenFalse),
            label != null ? fromJSON(label) : null
          );
        };
        return IfStatement;
      }(Statement));
      exports.IfExpression = IfExpression = (function (Expression) {
        var _Expression_prototype, _IfExpression_prototype;
        function IfExpression(pos, test, whenTrue, whenFalse) {
          var _this;
          _this = this instanceof IfExpression ? this : __create(_IfExpression_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (test == null) {
            test = Noop(pos);
          } else if (!(test instanceof Expression)) {
            throw TypeError("Expected test to be a " + __name(Expression) + ", got " + __typeof(test));
          }
          if (whenTrue == null) {
            whenTrue = Noop(pos);
          }
          if (whenFalse == null) {
            whenFalse = Noop(pos);
          }
          if (!(whenTrue instanceof Expression)) {
            whenTrue = toConst(pos, whenTrue);
          }
          if (!(whenFalse instanceof Expression)) {
            whenFalse = toConst(pos, whenFalse);
          }
          if (test instanceof Unary && test.op === "!" && test.node instanceof Unary && test.node.op === "!") {
            test = test.node.node;
          }
          if (test.isConst()) {
            if (test.constValue()) {
              return whenTrue;
            } else {
              return whenFalse;
            }
          } else if (whenFalse instanceof Noop && whenTrue instanceof IfExpression && whenTrue.whenFalse instanceof Noop) {
            _this.test = Binary(pos, test, "&&", whenTrue.test);
            _this.whenTrue = whenTrue.whenTrue;
            _this.whenFalse = whenFalse;
          } else {
            _this.test = test;
            _this.whenTrue = whenTrue;
            _this.whenFalse = whenFalse;
          }
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _IfExpression_prototype = IfExpression.prototype = __create(_Expression_prototype);
        _IfExpression_prototype.constructor = IfExpression;
        IfExpression.displayName = "IfExpression";
        if (typeof Expression.extended === "function") {
          Expression.extended(IfExpression);
        }
        _IfExpression_prototype.toStatement = function () {
          return IfStatement(this.pos, this.test, this.whenTrue, this.whenFalse);
        };
        function compileSmall(test, whenTrue, whenFalse, options, lineStart, sb) {
          var minify;
          minify = options.minify;
          test.compile(options, Level.inlineCondition, lineStart, sb);
          sb(minify ? "?" : " ? ");
          whenTrue.compile(options, Level.inlineCondition, false, sb);
          sb(minify ? ":" : " : ");
          whenFalse.compile(options, Level.inlineCondition, false, sb);
        }
        function compileLarge(test, whenTrue, whenFalse, options, lineStart, sb) {
          var childOptions, largeWhenTrue, wrapTest, wrapWhenTrue;
          childOptions = incIndent(options);
          wrapTest = test instanceof IfExpression;
          if (wrapTest) {
            sb("(");
          }
          test.compile(
            childOptions,
            wrapTest ? Level.insideParentheses : Level.inlineCondition,
            lineStart && !wrapTest,
            sb
          );
          if (wrapTest) {
            sb(")");
          }
          largeWhenTrue = whenTrue.isLarge();
          if (largeWhenTrue) {
            sb("\n");
            sb.indent(childOptions.indent);
            sb("? ");
          } else {
            sb(" ? ");
          }
          wrapWhenTrue = whenTrue instanceof IfExpression;
          if (wrapWhenTrue) {
            sb("(");
          }
          whenTrue.compile(
            childOptions,
            wrapWhenTrue ? Level.insideParentheses : Level.inlineCondition,
            false,
            sb
          );
          if (wrapWhenTrue) {
            sb(")");
          }
          sb("\n");
          sb.indent(childOptions.indent);
          sb(": ");
          if (whenFalse instanceof IfExpression) {
            compileLarge(
              whenFalse.test,
              whenFalse.whenTrue,
              whenFalse.whenFalse,
              options,
              false,
              sb
            );
          } else {
            whenFalse.compile(childOptions, Level.inlineCondition, false, sb);
          }
        }
        _IfExpression_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, f, wrap;
          if (level === Level.block) {
            this.toStatement().compile(options, level, lineStart, sb);
          } else {
            if (options.sourcemap != null && this.pos.file) {
              options.sourcemap.pushFile(this.pos.file);
            }
            if ((_ref = options.sourcemap) != null) {
              _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
            }
            wrap = !__lte(level, Level.inlineCondition);
            if (wrap) {
              sb("(");
            }
            if (!options.minify && (this.whenTrue.isLarge() || this.whenFalse.isLarge())) {
              f = compileLarge;
            } else {
              f = compileSmall;
            }
            f(
              this.test,
              this.whenTrue,
              this.whenFalse,
              options,
              !wrap && lineStart,
              sb
            );
            if (wrap) {
              sb(")");
            }
            if (options.sourcemap != null && this.pos.file) {
              options.sourcemap.popFile();
            }
          }
        };
        _IfExpression_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          if (this.whenTrue.isNoop()) {
            if (this.whenFalse.isNoop()) {
              this.test.compileAsBlock(options, level, lineStart, sb);
            } else {
              Binary(this.pos, this.test, "||", this.whenFalse).compileAsBlock(options, level, lineStart, sb);
            }
          } else if (this.whenFalse.isNoop()) {
            Binary(this.pos, this.test, "&&", this.whenTrue).compileAsBlock(options, level, lineStart, sb);
          } else {
            this.compile(options, level, lineStart, sb);
          }
        };
        _IfExpression_prototype.isLarge = function () {
          var _ref;
          if ((_ref = this._isLarge) == null) {
            return this._isLarge = !this.test.isSmall() || !this.whenTrue.isSmall() || !this.whenFalse.isSmall();
          } else {
            return _ref;
          }
        };
        _IfExpression_prototype.isSmall = function () {
          return false;
        };
        _IfExpression_prototype.isNoop = function () {
          var _ref;
          if ((_ref = this._isNoop) == null) {
            return this._isNoop = this.test.isNoop() && this.whenTrue.isNoop() && this.whenFalse.isNoop();
          } else {
            return _ref;
          }
        };
        _IfExpression_prototype.walk = IfStatement.prototype.walk;
        _IfExpression_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "IfExpression",
            this.pos,
            this.test,
            this.whenTrue,
            this.whenFalse
          );
        };
        _IfExpression_prototype.toJSON = function () {
          return {
            type: "IfExpression",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            test: simplify(this.test),
            whenTrue: simplify(this.whenTrue),
            whenFalse: simplify(this.whenFalse)
          };
        };
        IfExpression.fromJSON = function (_p) {
          var column, file, line, test, whenFalse, whenTrue;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          test = _p.test;
          whenTrue = _p.whenTrue;
          whenFalse = _p.whenFalse;
          return IfExpression(
            makePos(line, column, file),
            fromJSON(test),
            fromJSON(whenTrue),
            fromJSON(whenFalse)
          );
        };
        return IfExpression;
      }(Expression));
      If = exports.If = function (pos, test, whenTrue, whenFalse, label) {
        if (typeof pos !== "object" || pos === null) {
          throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
        }
        if (whenTrue instanceof Statement || whenFalse instanceof Statement || label != null) {
          return IfStatement(
            pos,
            test,
            whenTrue,
            whenFalse,
            label
          );
        } else {
          return IfExpression(pos, test, whenTrue, whenFalse);
        }
      };
      exports.Noop = Noop = (function (Expression) {
        var _Expression_prototype, _Noop_prototype;
        function Noop(pos) {
          var _this;
          _this = this instanceof Noop ? this : __create(_Noop_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Noop_prototype = Noop.prototype = __create(_Expression_prototype);
        _Noop_prototype.constructor = Noop;
        Noop.displayName = "Noop";
        if (typeof Expression.extended === "function") {
          Expression.extended(Noop);
        }
        _Noop_prototype.compileAsStatement = function () {};
        _Noop_prototype.compile = function (options, level, lineStart, sb) {
          if (!__lte(level, Level.block)) {
            Const(this.pos, void 0).compile(options, level, lineStart, sb);
          }
        };
        _Noop_prototype.isConst = function () {
          return true;
        };
        _Noop_prototype.isNoop = Noop.prototype.isConst;
        _Noop_prototype.constValue = function () {
          return;
        };
        _Noop_prototype.walk = function () {
          return this;
        };
        _Noop_prototype.mutateLast = function (func, options) {
          if (options != null ? options.noop : void 0) {
            return func(this);
          } else {
            return this;
          }
        };
        _Noop_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Noop", this.pos);
        };
        _Noop_prototype.toJSON = function () {
          return { type: "Noop", line: this.pos.line, column: this.pos.column, file: this.pos.file };
        };
        Noop.fromJSON = function (_p) {
          var column, file, line;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          return Noop(makePos(line, column, file));
        };
        return Noop;
      }(Expression));
      exports.Obj = Obj = (function (Expression) {
        var _Expression_prototype, _Obj_prototype, ObjPair;
        function Obj(pos, elements) {
          var _i, _this;
          _this = this instanceof Obj ? this : __create(_Obj_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (elements == null) {
            elements = [];
          } else if (!__isArray(elements)) {
            throw TypeError("Expected elements to be an Array, got " + __typeof(elements));
          } else {
            for (_i = elements.length; _i--; ) {
              if (!(elements[_i] instanceof ObjPair)) {
                throw TypeError("Expected " + ("elements[" + _i + "]") + " to be a " + __name(ObjPair) + ", got " + __typeof(elements[_i]));
              }
            }
          }
          _this.elements = elements;
          validateUniqueKeys(elements);
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Obj_prototype = Obj.prototype = __create(_Expression_prototype);
        _Obj_prototype.constructor = Obj;
        Obj.displayName = "Obj";
        if (typeof Expression.extended === "function") {
          Expression.extended(Obj);
        }
        function validateUniqueKeys(elements) {
          var _arr, _i, key, keys, pair;
          keys = [];
          for (_arr = __toArray(elements), _i = _arr.length; _i--; ) {
            pair = _arr[_i];
            key = pair.key;
            if (__in(key, keys)) {
              throw Error("Found duplicate key: " + __strnum(toJSSource(key)));
            }
            keys.push(key);
          }
        }
        function toSafeKey(key) {
          var num;
          if (isAcceptableIdent(key)) {
            return key;
          } else {
            num = Number(key);
            if (num === num && String(num) === key) {
              return key;
            } else {
              return toJSSource(key);
            }
          }
        }
        function compileLarge(elements, options, sb) {
          var _arr, childOptions, element, i, key, len;
          childOptions = incIndent(options);
          for (_arr = __toArray(elements), i = 0, len = _arr.length; i < len; ++i) {
            element = _arr[i];
            sb("\n");
            sb.indent(childOptions.indent);
            key = element.key;
            sb(toSafeKey(key));
            sb(": ");
            element.value.compile(childOptions, Level.sequence, false, sb);
            if (i < len - 1) {
              sb(",");
            }
          }
          sb("\n");
          sb.indent(options.indent);
        }
        function compileSmall(elements, options, sb) {
          var _arr, _len, element, i, key, minify;
          if (elements.length) {
            minify = options.minify;
            if (!minify) {
              sb(" ");
            }
            for (_arr = __toArray(elements), i = 0, _len = _arr.length; i < _len; ++i) {
              element = _arr[i];
              if (i > 0) {
                sb(",");
                if (!minify) {
                  sb(" ");
                }
              }
              key = element.key;
              sb(toSafeKey(key));
              sb(":");
              if (!minify) {
                sb(" ");
              }
              element.value.compile(options, Level.sequence, false, sb);
            }
            if (!minify) {
              sb(" ");
            }
          }
        }
        _Obj_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, f, wrap;
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          wrap = lineStart;
          if (wrap) {
            sb("(");
          }
          sb("{");
          if (!options.minify && this.shouldCompileLarge()) {
            f = compileLarge;
          } else {
            f = compileSmall;
          }
          f(this.elements, options, sb);
          sb("}");
          if (wrap) {
            sb(")");
          }
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile();
          }
        };
        _Obj_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          var _this;
          _this = this;
          BlockExpression(this.pos, (function () {
            var _arr, _arr2, _i, _len, element;
            for (_arr = [], _arr2 = __toArray(_this.elements), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              element = _arr2[_i];
              _arr.push(element.value);
            }
            return _arr;
          }())).compileAsBlock(options, level, lineStart, sb);
        };
        _Obj_prototype.compileAsStatement = function (options, lineStart, sb) {
          var _this;
          _this = this;
          BlockStatement(this.pos, (function () {
            var _arr, _arr2, _i, _len, element;
            for (_arr = [], _arr2 = __toArray(_this.elements), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              element = _arr2[_i];
              _arr.push(element.value);
            }
            return _arr;
          }())).compileAsStatement(options, lineStart, sb);
        };
        _Obj_prototype.shouldCompileLarge = function () {
          switch (this.elements.length) {
          case 0: return false;
          case 1: return this.elements[0].isLarge();
          default: return this.isLarge();
          }
        };
        _Obj_prototype.isSmall = function () {
          switch (this.elements.length) {
          case 0: return true;
          case 1: return this.elements[0].isSmall();
          default: return false;
          }
        };
        _Obj_prototype.isLarge = function () {
          var _ref, _this;
          _this = this;
          if ((_ref = this._isLarge) == null) {
            return this._isLarge = __num(this.elements.length) > 4 || (function () {
              var _arr, _i, element;
              for (_arr = __toArray(_this.elements), _i = _arr.length; _i--; ) {
                element = _arr[_i];
                if (!element.isSmall()) {
                  return true;
                }
              }
              return false;
            }());
          } else {
            return _ref;
          }
        };
        _Obj_prototype.isNoop = function () {
          var _ref, _this;
          _this = this;
          if ((_ref = this._isNoop) == null) {
            return this._isNoop = (function () {
              var _arr, _i, element;
              for (_arr = __toArray(_this.elements), _i = _arr.length; _i--; ) {
                element = _arr[_i];
                if (!element.isNoop()) {
                  return false;
                }
              }
              return true;
            }());
          } else {
            return _ref;
          }
        };
        _Obj_prototype.walk = function (walker) {
          var elements;
          elements = walkArray(this.elements, walker);
          if (elements !== this.elements) {
            return Obj(this.pos, elements);
          } else {
            return this;
          }
        };
        _Obj_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Obj", this.pos, this.elements);
        };
        _Obj_prototype.toJSON = function () {
          var _this;
          _this = this;
          return {
            type: "Obj",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            elements: simplify((function () {
              var _arr, _arr2, _i, _len, pair;
              for (_arr = [], _arr2 = __toArray(_this.elements), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                pair = _arr2[_i];
                _arr.push({
                  line: pair.pos.line,
                  column: pair.pos.column,
                  file: pair.pos.file,
                  key: pair.key,
                  value: simplify(pair.value)
                });
              }
              return _arr;
            }()))
          };
        };
        Obj.fromJSON = function (_p) {
          var _arr, _i, _len, column, elements, file, line, pair, resultPairs;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          elements = _p.elements;
          resultPairs = [];
          for (_arr = __toArray(elements || []), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            pair = _arr[_i];
            if (!pair || typeof pair !== "object" || pair === null) {
              throw Error("Expecting an object with a key and value");
            }
            resultPairs.push(ObjPair(
              makePos(pair.line, pair.column, pair.file),
              pair.key,
              fromJSON(pair.value)
            ));
          }
          return Obj(
            makePos(line, column, file),
            resultPairs
          );
        };
        Obj.Pair = ObjPair = (function () {
          var _ObjPair_prototype;
          function ObjPair(pos, key, value) {
            var _this;
            _this = this instanceof ObjPair ? this : __create(_ObjPair_prototype);
            if (typeof pos !== "object" || pos === null) {
              throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
            }
            _this.pos = pos;
            if (typeof key !== "string") {
              throw TypeError("Expected key to be a String, got " + __typeof(key));
            }
            _this.key = key;
            if (value == null) {
              value = Noop(line, column);
            }
            if (!(value instanceof Expression)) {
              value = toConst(pos, value);
            }
            _this.value = value;
            return _this;
          }
          _ObjPair_prototype = ObjPair.prototype;
          ObjPair.displayName = "ObjPair";
          _ObjPair_prototype.isSmall = function () {
            return this.value.isSmall();
          };
          _ObjPair_prototype.isLarge = function () {
            return this.value.isLarge();
          };
          _ObjPair_prototype.isNoop = function () {
            return this.value.isNoop();
          };
          _ObjPair_prototype.walk = function (walker) {
            var _ref, value;
            if ((_ref = walker(this.value)) != null) {
              value = _ref;
            } else {
              value = this.value.walk(walker);
            }
            if (value !== this.value) {
              return ObjPair(this.pos, this.key, value);
            } else {
              return this;
            }
          };
          _ObjPair_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "Pair",
              this.pos,
              this.key,
              this.value
            );
          };
          return ObjPair;
        }());
        return Obj;
      }(Expression));
      exports.Regex = Regex = (function (Expression) {
        var _Expression_prototype, _Regex_prototype;
        function Regex(pos, source, flags) {
          var _this;
          _this = this instanceof Regex ? this : __create(_Regex_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (typeof source !== "string") {
            throw TypeError("Expected source to be a String, got " + __typeof(source));
          }
          _this.source = source;
          if (flags == null) {
            flags = "";
          } else if (typeof flags !== "string") {
            throw TypeError("Expected flags to be a String, got " + __typeof(flags));
          }
          _this.flags = flags;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Regex_prototype = Regex.prototype = __create(_Expression_prototype);
        _Regex_prototype.constructor = Regex;
        Regex.displayName = "Regex";
        if (typeof Expression.extended === "function") {
          Expression.extended(Regex);
        }
        _Regex_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if ((_ref = options.sourcemap) != null) {
            _ref.add(
              sb.line,
              sb.column,
              this.pos.line,
              this.pos.column,
              this.pos.file
            );
          }
          sb("/");
          sb(this.source.replace(/(\\\\)*\\?\//g, "$1\\/") || "(?:)");
          sb("/");
          sb(this.flags);
        };
        _Regex_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
        };
        _Regex_prototype.isNoop = function () {
          return true;
        };
        _Regex_prototype.walk = function () {
          return this;
        };
        _Regex_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "Regex",
            this.pos,
            this.source,
            this.flags
          );
        };
        _Regex_prototype.toJSON = function () {
          return {
            type: "Regex",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            source: this.source,
            flags: this.flags
          };
        };
        Regex.fromJSON = function (_p) {
          var column, file, flags, line, source;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          source = _p.source;
          flags = _p.flags;
          return Regex(
            makePos(line, column, file),
            source,
            flags
          );
        };
        return Regex;
      }(Expression));
      exports.Return = Return = (function (Statement) {
        var _Return_prototype, _Statement_prototype;
        function Return(pos, node) {
          var _this;
          _this = this instanceof Return ? this : __create(_Return_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (node == null) {
            node = Noop(pos);
          } else if (!(node instanceof Expression)) {
            throw TypeError("Expected node to be a " + __name(Expression) + ", got " + __typeof(node));
          }
          _this.node = node;
          if (typeof node.toStatement === "function") {
            return node.toStatement().mutateLast(
              function (n) {
                return Return(pos, n);
              },
              { noop: true }
            );
          }
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _Return_prototype = Return.prototype = __create(_Statement_prototype);
        _Return_prototype.constructor = Return;
        Return.displayName = "Return";
        if (typeof Statement.extended === "function") {
          Statement.extended(Return);
        }
        _Return_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          sb("return");
          if (!this.node.isConst() || this.node.constValue() !== void 0) {
            sb(" ");
            this.node.compile(options, Level.insideParentheses, false, sb);
          }
          sb(";");
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile();
          }
        };
        _Return_prototype.walk = function (walker) {
          var _ref, node;
          if ((_ref = walker(this.node)) != null) {
            node = _ref;
          } else {
            node = this.node.walk(walker);
          }
          if (node !== this.node) {
            return Return(this.pos, node);
          } else {
            return this;
          }
        };
        _Return_prototype.exitType = function () {
          return "return";
        };
        _Return_prototype.isSmall = function () {
          return this.node.isSmall();
        };
        _Return_prototype.isLarge = function () {
          return this.node.isLarge();
        };
        _Return_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Return", this.pos, this.node);
        };
        _Return_prototype.mutateLast = function (func, options) {
          var node;
          if (options != null ? options["return"] : void 0) {
            node = this.node.mutateLast(func, options);
            if (node !== this.node) {
              return Return(this.pos, node);
            } else {
              return this;
            }
          } else {
            return this;
          }
        };
        _Return_prototype.toJSON = function () {
          return {
            type: "Return",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            node: simplify(this.node)
          };
        };
        Return.fromJSON = function (_p) {
          var column, file, line, node;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          node = _p.node;
          return Return(
            makePos(line, column, file),
            fromJSON(node)
          );
        };
        return Return;
      }(Statement));
      exports.Root = Root = (function () {
        var _Root_prototype;
        function Root(pos, body, variables, declarations) {
          var _i, _i2, _this;
          _this = this instanceof Root ? this : __create(_Root_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (body == null) {
            body = Noop(pos);
          } else if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          _this.body = body;
          if (variables == null) {
            variables = [];
          } else if (!__isArray(variables)) {
            throw TypeError("Expected variables to be an Array, got " + __typeof(variables));
          } else {
            for (_i = variables.length; _i--; ) {
              if (typeof variables[_i] !== "string") {
                throw TypeError("Expected " + ("variables[" + _i + "]") + " to be a String, got " + __typeof(variables[_i]));
              }
            }
          }
          _this.variables = variables;
          if (declarations == null) {
            declarations = [];
          } else if (!__isArray(declarations)) {
            throw TypeError("Expected declarations to be an Array, got " + __typeof(declarations));
          } else {
            for (_i2 = declarations.length; _i2--; ) {
              if (typeof declarations[_i2] !== "string") {
                throw TypeError("Expected " + ("declarations[" + _i2 + "]") + " to be a String, got " + __typeof(declarations[_i2]));
              }
            }
          }
          _this.declarations = declarations;
          validateFuncParamsAndVariables([], variables);
          return _this;
        }
        _Root_prototype = Root.prototype;
        Root.displayName = "Root";
        _Root_prototype.compile = function (options) {
          var _ref, code, endCompileTime, endUglifyTime, fs, minified, oldWarn_function, os, path, sb, startTime, tmpMap, UglifyJS, writer;
          if (options == null) {
            options = {};
          }
          if (!options.indent) {
            options.indent = 0;
          }
          if (!options.uglify && typeof options.writer === "function") {
            writer = options.writer;
          }
          if (writer) {
            sb = StringWriter(writer);
          } else {
            sb = StringBuilder();
          }
          startTime = new Date().getTime();
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          compileFuncBody(
            options,
            sb,
            this.declarations,
            this.variables,
            this.body,
            true
          );
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile();
          }
          endCompileTime = new Date().getTime();
          if (typeof options.progress === "function") {
            options.progress("compile", __num(endCompileTime) - __num(startTime));
          }
          endUglifyTime = 0;
          if (writer == null) {
            code = sb.toString();
            if (options.uglify) {
              fs = require("fs");
              if (options.sourcemap != null) {
                path = require("path");
                os = require("os");
                tmpMap = path.join(os.tmpDir(), "gs-" + Math.random() * 4294967296 + ".map");
                fs.writeFileSync(tmpMap, options.sourcemap.toString(), "utf8");
              }
              UglifyJS = require("uglify-js");
              if ((_ref = UglifyJS.AST_Node) != null) {
                oldWarn_function = _ref.warn_function;
              }
              if (typeof oldWarn_function === "function") {
                UglifyJS.AST_Node.warn_function = function () {};
              }
              minified = UglifyJS.minify(code, {
                fromString: true,
                inSourceMap: tmpMap,
                outSourceMap: (_ref = options.sourcemap) != null ? _ref.generatedFile : void 0
              });
              if (oldWarn_function != null) {
                UglifyJS.AST_Node.warn_function = oldWarn_function;
              }
              if (tmpMap != null) {
                fs.unlinkSync(tmpMap);
              }
              code = minified.code;
              endUglifyTime = new Date().getTime();
              if (typeof options.progress === "function") {
                options.progress("uglify", endUglifyTime - __num(endCompileTime));
              }
              if (options.sourcemap != null) {
                options.sourcemap = minified.map;
              }
            }
            if (typeof options.writer === "function") {
              options.writer(code);
              code = "";
            }
          }
          return {
            compileTime: __num(endCompileTime) - __num(startTime),
            uglifyTime: options.uglify ? endUglifyTime - __num(endCompileTime) : void 0,
            code: code || ""
          };
        };
        _Root_prototype.toString = function (options) {
          if (options == null) {
            options = {};
          }
          return this.compile(options).code;
        };
        _Root_prototype.isLarge = function () {
          return true;
        };
        _Root_prototype.walk = function (walker) {
          var body;
          body = this.body.walk(walker);
          if (body !== this.body) {
            return Root(this.pos, body, this.variables, this.declarations);
          } else {
            return this;
          }
        };
        _Root_prototype.mutateLast = function (func, options) {
          var body;
          body = this.body.mutateLast(func, options);
          if (body !== this.body) {
            return Root(this.pos, body, this.variables, this.declarations);
          } else {
            return this;
          }
        };
        _Root_prototype.exitType = function () {
          return this.last().exitType();
        };
        _Root_prototype.last = function () {
          var _ref;
          return (_ref = this.body)[__num(_ref.length) - 1];
        };
        _Root_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "Root",
            this.pos,
            this.body,
            this.variables,
            this.declarations
          );
        };
        _Root_prototype.toJSON = function () {
          return {
            type: "Root",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            body: simplify(this.body),
            variables: simplify(this.variables),
            declarations: simplify(this.declarations)
          };
        };
        Root.fromJSON = function (_p) {
          var body, column, declarations, file, line, variables;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          body = _p.body;
          variables = _p.variables;
          declarations = _p.declarations;
          return Root(
            makePos(line, column, file),
            fromJSON(body),
            variables,
            declarations
          );
        };
        return Root;
      }());
      exports.This = This = (function (Expression) {
        var _Expression_prototype, _This_prototype;
        function This(pos) {
          var _this;
          _this = this instanceof This ? this : __create(_This_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _This_prototype = This.prototype = __create(_Expression_prototype);
        _This_prototype.constructor = This;
        This.displayName = "This";
        if (typeof Expression.extended === "function") {
          Expression.extended(This);
        }
        _This_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if ((_ref = options.sourcemap) != null) {
            _ref.add(
              sb.line,
              sb.column,
              this.pos.line,
              this.pos.column,
              this.pos.file
            );
          }
          sb("this");
        };
        _This_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          Noop(this.pos).compileAsBlock(options, level, lineStart, sb);
        };
        _This_prototype.isNoop = function () {
          return true;
        };
        _This_prototype.walk = function () {
          return this;
        };
        _This_prototype.inspect = function (depth) {
          return inspectHelper(depth, "This", this.pos);
        };
        _This_prototype.toJSON = function () {
          return { type: "This", line: this.pos.line, column: this.pos.column, file: this.pos.file };
        };
        This.fromJSON = function (_p) {
          var column, file, line;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          return This(makePos(line, column, file));
        };
        return This;
      }(Expression));
      exports.Throw = Throw = (function (Statement) {
        var _Statement_prototype, _Throw_prototype;
        function Throw(pos, node) {
          var _this;
          _this = this instanceof Throw ? this : __create(_Throw_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (node == null) {
            node = Noop(line, column);
          } else if (!(node instanceof Expression)) {
            throw TypeError("Expected node to be a " + __name(Expression) + ", got " + __typeof(node));
          }
          _this.node = node;
          if (typeof node.toStatement === "function") {
            return node.toStatement().mutateLast(
              function (n) {
                return Throw(_this.pos, n);
              },
              { noop: true }
            );
          }
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _Throw_prototype = Throw.prototype = __create(_Statement_prototype);
        _Throw_prototype.constructor = Throw;
        Throw.displayName = "Throw";
        if (typeof Statement.extended === "function") {
          Statement.extended(Throw);
        }
        _Throw_prototype.compile = function (options, level, lineStart, sb) {
          var _ref;
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          sb("throw ");
          this.node.compile(options, Level.insideParentheses, false, sb);
          sb(";");
          if (options.sourcemap != null && this.pos.file) {
            return options.sourcemap.popFile();
          }
        };
        _Throw_prototype.walk = function (walker) {
          var _ref, node;
          if ((_ref = walker(this.node)) != null) {
            node = _ref;
          } else {
            node = this.node.walk(walker);
          }
          if (node !== this.node) {
            return Throw(this.pos, node);
          } else {
            return this;
          }
        };
        _Throw_prototype.exitType = function () {
          return "throw";
        };
        _Throw_prototype.isSmall = function () {
          return this.node.isSmall();
        };
        _Throw_prototype.isLarge = function () {
          return this.node.isLarge();
        };
        _Throw_prototype.inspect = function (depth) {
          return inspectHelper(depth, "Throw", this.pos, this.node);
        };
        _Throw_prototype.toJSON = function () {
          return {
            type: "Throw",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            node: simplify(this.node)
          };
        };
        Throw.fromJSON = function (_p) {
          var column, file, line, node;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          node = _p.node;
          return Throw(
            makePos(line, column, file),
            fromJSON(node)
          );
        };
        return Throw;
      }(Statement));
      exports.Switch = Switch = (function (Statement) {
        var _Statement_prototype, _Switch_prototype, SwitchCase;
        function Switch(pos, node, cases, defaultCase, label) {
          var _i, _this;
          _this = this instanceof Switch ? this : __create(_Switch_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (node == null) {
            node = Noop(pos);
          }
          if (cases == null) {
            cases = [];
          } else if (!__isArray(cases)) {
            throw TypeError("Expected cases to be an Array, got " + __typeof(cases));
          } else {
            for (_i = cases.length; _i--; ) {
              if (!(cases[_i] instanceof SwitchCase)) {
                throw TypeError("Expected " + ("cases[" + _i + "]") + " to be a " + __name(SwitchCase) + ", got " + __typeof(cases[_i]));
              }
            }
          }
          _this.cases = cases;
          if (defaultCase == null) {
            defaultCase = Noop(pos);
          } else if (!(defaultCase instanceof Node)) {
            throw TypeError("Expected defaultCase to be a " + __name(Node) + ", got " + __typeof(defaultCase));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          if (!(node instanceof Expression)) {
            node = toConst(pos, node);
          }
          _this.node = node;
          _this.defaultCase = defaultCase.maybeToStatement();
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _Switch_prototype = Switch.prototype = __create(_Statement_prototype);
        _Switch_prototype.constructor = Switch;
        Switch.displayName = "Switch";
        if (typeof Statement.extended === "function") {
          Statement.extended(Switch);
        }
        _Switch_prototype.compile = function (options, level, lineStart, sb) {
          var _arr, _i, _len, _ref, case_, childOptions, minify;
          if (level !== Level.block) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          minify = options.minify;
          if (this.label != null) {
            this.label.compile(options, level, lineStart, sb);
            sb(":");
            if (!minify) {
              sb(" ");
            }
          }
          sb("switch");
          if (!minify) {
            sb(" ");
          }
          sb("(");
          this.node.compile(options, Level.insideParentheses, false, sb);
          sb(")");
          if (!minify) {
            sb(" ");
          }
          sb("{");
          childOptions = incIndent(options);
          for (_arr = __toArray(this.cases), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            case_ = _arr[_i];
            if (!minify) {
              sb("\n");
              sb.indent(options.indent);
            }
            sb("case ");
            case_.node.compile(options, Level.insideParentheses, false, sb);
            sb(":");
            if (!case_.body.isNoop()) {
              if (case_.node.isSmall() && case_.body.isSmall()) {
                if (!minify) {
                  sb(" ");
                }
                case_.body.compileAsStatement(options, true, sb);
              } else {
                if (!minify) {
                  sb("\n");
                  sb.indent(childOptions.indent);
                }
                case_.body.compileAsStatement(childOptions, true, sb);
              }
            }
          }
          if (!this.defaultCase.isNoop()) {
            if (!minify) {
              sb("\n");
              sb.indent(options.indent);
            }
            sb("default:");
            if (this.defaultCase.isSmall()) {
              if (!minify) {
                sb(" ");
              }
              this.defaultCase.compileAsStatement(options, true, sb);
            } else {
              if (!minify) {
                sb("\n");
                sb.indent(childOptions.indent);
              }
              this.defaultCase.compileAsStatement(childOptions, true, sb);
            }
          }
          if (!minify) {
            sb("\n");
            sb.indent(options.indent);
          }
          sb("}");
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile();
          }
        };
        _Switch_prototype.walk = function (walker) {
          var _ref, cases, defaultCase, label, node;
          if ((_ref = walker(this.node)) != null) {
            node = _ref;
          } else {
            node = this.node.walk(walker);
          }
          cases = walkArray(this.cases, walker);
          if ((_ref = walker(this.defaultCase)) != null) {
            defaultCase = _ref;
          } else {
            defaultCase = this.defaultCase.walk(walker);
          }
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (node !== this.node || cases !== this.cases || defaultCase !== this.defaultCase || label !== this.label) {
            return Switch(
              this.pos,
              node,
              cases,
              defaultCase,
              label
            );
          } else {
            return this;
          }
        };
        _Switch_prototype.inspect = function (depth) {
          return this.inspectHelper(
            depth,
            "Switch",
            this.pos,
            this.node,
            this.cases,
            this.defaultCase,
            this.label
          );
        };
        _Switch_prototype.toJSON = function () {
          var _ref, _this;
          _this = this;
          return {
            type: "Switch",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            node: simplify(this.node),
            cases: simplify((function () {
              var _arr, _arr2, _i, _len, case_;
              for (_arr = [], _arr2 = __toArray(_this.cases), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                case_ = _arr2[_i];
                _arr.push({
                  line: case_.pos.line,
                  column: case_.pos.column,
                  file: case_.pos.file,
                  node: simplify(case_.node),
                  body: simplify(case_.body)
                });
              }
              return _arr;
            }())),
            defaultCase: simplify(this.defaultCase),
            label: (_ref = this.label) != null ? _ref : void 0
          };
        };
        Switch.fromJSON = function (_p) {
          var _arr, _i, _len, case_, cases, column, defaultCase, file, label, line, node, resultCases;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          node = _p.node;
          cases = _p.cases;
          defaultCase = _p.defaultCase;
          label = _p.label;
          resultCases = [];
          for (_arr = __toArray(cases || []), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            case_ = _arr[_i];
            if (typeof case_ !== "object" || case_ === null) {
              throw Error("Expected an object with a node and body");
            }
            resultCases.push(SwitchCase(
              makePos(case_.line, case_.column, case_.file),
              fromJSON(case_.node),
              fromJSON(case_.body)
            ));
          }
          return Switch(
            makePos(line, column, file),
            fromJSON(node),
            resultCases,
            fromJSON(defaultCase),
            label != null ? fromJSON(label) : null
          );
        };
        Switch.Case = SwitchCase = (function () {
          var _SwitchCase_prototype;
          function SwitchCase(pos, node, body) {
            var _this;
            _this = this instanceof SwitchCase ? this : __create(_SwitchCase_prototype);
            if (typeof pos !== "object" || pos === null) {
              throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
            }
            _this.pos = pos;
            if (node == null) {
              node = Noop(pos);
            }
            if (body == null) {
              body = Noop(pos);
            } else if (!(body instanceof Node)) {
              throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
            }
            if (!(node instanceof Expression)) {
              node = toConst(pos, node);
            }
            _this.node = node;
            _this.body = body.maybeToStatement();
            return _this;
          }
          _SwitchCase_prototype = SwitchCase.prototype;
          SwitchCase.displayName = "SwitchCase";
          _SwitchCase_prototype.isLarge = function () {
            return true;
          };
          _SwitchCase_prototype.isSmall = function () {
            return false;
          };
          _SwitchCase_prototype.walk = function (walker) {
            var _ref, body, node;
            if ((_ref = walker(this.node)) != null) {
              node = _ref;
            } else {
              node = this.node.walk(walker);
            }
            if ((_ref = walker(this.body)) != null) {
              body = _ref;
            } else {
              body = this.body.walk(walker);
            }
            if (node !== this.node || body !== this.body) {
              return SwitchCase(this.pos, node, body);
            } else {
              return this;
            }
          };
          _SwitchCase_prototype.inspect = function (depth) {
            return inspectHelper(
              depth,
              "Case",
              this.pos,
              this.node,
              this.body
            );
          };
          return SwitchCase;
        }());
        return Switch;
      }(Statement));
      exports.TryCatch = TryCatch = (function (Statement) {
        var _Statement_prototype, _TryCatch_prototype;
        function TryCatch(pos, tryBody, catchIdent, catchBody, label) {
          var _this;
          _this = this instanceof TryCatch ? this : __create(_TryCatch_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (tryBody == null) {
            tryBody = Noop(pos);
          } else if (!(tryBody instanceof Node)) {
            throw TypeError("Expected tryBody to be a " + __name(Node) + ", got " + __typeof(tryBody));
          }
          if (!(catchIdent instanceof Ident)) {
            throw TypeError("Expected catchIdent to be a " + __name(Ident) + ", got " + __typeof(catchIdent));
          }
          _this.catchIdent = catchIdent;
          if (catchBody == null) {
            catchBody = Noop(pos);
          } else if (!(catchBody instanceof Node)) {
            throw TypeError("Expected catchBody to be a " + __name(Node) + ", got " + __typeof(catchBody));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          _this.tryBody = tryBody.maybeToStatement();
          if (_this.tryBody.isNoop()) {
            return _this.tryBody;
          }
          _this.catchBody = catchBody.maybeToStatement();
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _TryCatch_prototype = TryCatch.prototype = __create(_Statement_prototype);
        _TryCatch_prototype.constructor = TryCatch;
        TryCatch.displayName = "TryCatch";
        if (typeof Statement.extended === "function") {
          Statement.extended(TryCatch);
        }
        _TryCatch_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, childOptions, minify;
          if (level !== Level.block) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          minify = options.minify;
          if (this.label != null) {
            this.label.compile(options, level, lineStart, sb);
            sb(":");
            if (!minify) {
              sb(" ");
            }
          }
          sb(minify ? "try{" : "try {\n");
          childOptions = incIndent(options);
          if (!minify) {
            sb.indent(childOptions.indent);
          }
          this.tryBody.compileAsStatement(childOptions, true, sb);
          if (!minify) {
            sb("\n");
            sb.indent(options.indent);
          }
          sb(minify ? "}catch(" : "} catch (");
          this.catchIdent.compile(options, Level.insideParentheses, false, sb);
          sb(minify ? "){" : ") {");
          if (!this.catchBody.isNoop()) {
            if (!minify) {
              sb("\n");
              sb.indent(childOptions.indent);
            }
            this.catchBody.compileAsStatement(childOptions, true, sb);
            if (!minify) {
              sb("\n");
              sb.indent(options.indent);
            }
          }
          sb("}");
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile();
          }
        };
        _TryCatch_prototype.walk = function (walker) {
          var _ref, catchBody, catchIdent, label, tryBody;
          if ((_ref = walker(this.tryBody)) != null) {
            tryBody = _ref;
          } else {
            tryBody = this.tryBody.walk(walker);
          }
          if ((_ref = walker(this.catchIdent)) != null) {
            catchIdent = _ref;
          } else {
            catchIdent = this.catchIdent.walk(walker);
          }
          if ((_ref = walker(this.catchBody)) != null) {
            catchBody = _ref;
          } else {
            catchBody = this.catchBody.walk(walker);
          }
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (tryBody !== this.tryBody || catchIdent !== this.catchIdent || catchBody !== this.catchBody || label !== this.label) {
            return TryCatch(
              this.pos,
              tryBody,
              catchIdent,
              catchBody,
              label
            );
          } else {
            return this;
          }
        };
        _TryCatch_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "TryCatch",
            this.pos,
            this.tryBody,
            this.catchIdent,
            this.catchBody,
            this.label
          );
        };
        _TryCatch_prototype.toJSON = function () {
          var _ref;
          return {
            type: "TryCatch",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            tryBody: simplify(this.tryBody),
            catchIdent: this.catchIdent,
            catchBody: simplify(this.catchBody),
            label: (_ref = this.label) != null ? _ref : void 0
          };
        };
        TryCatch.fromJSON = function (_p) {
          var catchBody, catchIdent, column, file, label, line, tryBody;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          tryBody = _p.tryBody;
          catchIdent = _p.catchIdent;
          catchBody = _p.catchBody;
          label = _p.label;
          return TryCatch(
            makePos(line, column, file),
            fromJSON(tryBody),
            fromJSON(catchIdent),
            fromJSON(catchBody),
            label != null ? fromJSON(label) : null
          );
        };
        return TryCatch;
      }(Statement));
      exports.TryFinally = TryFinally = (function (Statement) {
        var _Statement_prototype, _TryFinally_prototype;
        function TryFinally(pos, tryBody, finallyBody, label) {
          var _this;
          _this = this instanceof TryFinally ? this : __create(_TryFinally_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (tryBody == null) {
            tryBody = Noop(pos);
          } else if (!(tryBody instanceof Node)) {
            throw TypeError("Expected tryBody to be a " + __name(Node) + ", got " + __typeof(tryBody));
          }
          if (finallyBody == null) {
            finallyBody = Noop(pos);
          } else if (!(finallyBody instanceof Node)) {
            throw TypeError("Expected finallyBody to be a " + __name(Node) + ", got " + __typeof(finallyBody));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof Ident)) {
            throw TypeError("Expected label to be one of " + (__name(Ident) + " or null") + ", got " + __typeof(label));
          }
          _this.label = label;
          _this.tryBody = tryBody.maybeToStatement();
          _this.finallyBody = finallyBody.maybeToStatement();
          if (label == null) {
            if (_this.tryBody.isNoop()) {
              return _this.finallyBody;
            } else if (_this.finallyBody.isNoop()) {
              return _this.tryBody;
            }
          }
          return _this;
        }
        _Statement_prototype = Statement.prototype;
        _TryFinally_prototype = TryFinally.prototype = __create(_Statement_prototype);
        _TryFinally_prototype.constructor = TryFinally;
        TryFinally.displayName = "TryFinally";
        if (typeof Statement.extended === "function") {
          Statement.extended(TryFinally);
        }
        _TryFinally_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, childOptions, minify;
          if (level !== Level.block) {
            throw Error("Cannot compile a statement except on the Block level");
          }
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          minify = options.minify;
          if (this.label != null) {
            this.label.compile(options, level, lineStart, sb);
            sb(":");
            if (!minify) {
              sb(" ");
            }
          }
          sb(minify ? "try{" : "try {\n");
          childOptions = incIndent(options);
          if (!minify) {
            sb.indent(childOptions.indent);
          }
          if (this.tryBody instanceof TryCatch && this.tryBody.label == null) {
            this.tryBody.tryBody.compileAsStatement(childOptions, true, sb);
            if (!minify) {
              sb("\n");
              sb.indent(options.indent);
            }
            sb(minify ? "}catch(" : "} catch (");
            this.tryBody.catchIdent.compile(options, Level.insideParentheses, false, sb);
            sb(minify ? "){" : ") {");
            if (!this.tryBody.catchBody.isNoop()) {
              if (!minify) {
                sb("\n");
                sb.indent(childOptions.indent);
              }
              this.tryBody.catchBody.compileAsStatement(childOptions, true, sb);
              if (!minify) {
                sb("\n");
                sb.indent(options.indent);
              }
            }
          } else {
            this.tryBody.compileAsStatement(childOptions, true, sb);
            if (!minify) {
              sb("\n");
              sb.indent(options.indent);
            }
          }
          sb(minify ? "}finally{" : "} finally {\n");
          if (!minify) {
            sb.indent(childOptions.indent);
          }
          this.finallyBody.compileAsStatement(childOptions, true, sb);
          if (!minify) {
            sb("\n");
            sb.indent(options.indent);
          }
          sb("}");
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile();
          }
        };
        _TryFinally_prototype.walk = function (walker) {
          var _ref, finallyBody, label, tryBody;
          if ((_ref = walker(this.tryBody)) != null) {
            tryBody = _ref;
          } else {
            tryBody = this.tryBody.walk(walker);
          }
          if ((_ref = walker(this.finallyBody)) != null) {
            finallyBody = _ref;
          } else {
            finallyBody = this.finallyBody.walk(walker);
          }
          if (this.label != null) {
            if ((_ref = walker(this.label)) != null) {
              label = _ref;
            } else {
              label = this.label.walk(walker);
            }
          } else {
            label = this.label;
          }
          if (tryBody !== this.tryBody || finallyBody !== this.finallyBody || label !== this.label) {
            return TryFinally(this.pos, tryBody, finallyBody, label);
          } else {
            return this;
          }
        };
        _TryFinally_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "TryFinally",
            this.pos,
            this.tryBody,
            this.finallyBody,
            this.label
          );
        };
        _TryFinally_prototype.toJSON = function () {
          var _ref;
          return {
            type: "TryFinally",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            tryBody: simplify(this.tryBody),
            finallyBody: simplify(this.finallyBody),
            label: (_ref = this.label) != null ? _ref : void 0
          };
        };
        TryFinally.fromJSON = function (_p) {
          var column, file, finallyBody, label, line, tryBody;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          tryBody = _p.tryBody;
          finallyBody = _p.finallyBody;
          label = _p.label;
          return TryFinally(
            makePos(line, column, file),
            fromJSON(tryBody),
            fromJSON(finallyBody),
            label != null ? fromJSON(label) : null
          );
        };
        return TryFinally;
      }(Statement));
      exports.Unary = Unary = (function (Expression) {
        var _Expression_prototype, _Unary_prototype, ASSIGNMENT_OPERATORS, KNOWN_OPERATORS;
        function Unary(pos, op, node) {
          var _this;
          _this = this instanceof Unary ? this : __create(_Unary_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          _this.op = op;
          if (node == null) {
            node = Noop(line, column);
          }
          if (!__in(op, KNOWN_OPERATORS)) {
            throw Error("Unknown unary operator: " + op);
          }
          if (!(node instanceof Expression)) {
            node = toConst(line, column, node);
          }
          if (op === "delete" && (!(node instanceof Binary) || node.op !== ".")) {
            throw Error("Cannot use delete operator on a non-access");
          }
          _this.node = node;
          return _this;
        }
        _Expression_prototype = Expression.prototype;
        _Unary_prototype = Unary.prototype = __create(_Expression_prototype);
        _Unary_prototype.constructor = Unary;
        Unary.displayName = "Unary";
        if (typeof Expression.extended === "function") {
          Expression.extended(Unary);
        }
        _Unary_prototype.compile = function (options, level, lineStart, sb) {
          var _ref, op;
          op = this.op;
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.pushFile(this.pos.file);
          }
          if ((_ref = options.sourcemap) != null) {
            _ref.add(sb.line, sb.column, this.pos.line, this.pos.column);
          }
          if (op === "++post" || op === "--post") {
            this.node.compile(options, Level.unary, false, sb);
            sb(op.substring(0, 2));
          } else {
            sb(op);
            if (op === "typeof" || op === "void" || op === "delete" || (op === "+" || op === "-" || op === "++" || op === "--") && (this.node instanceof Unary && (op === "+" || op === "-" || op === "++" || op === "--") || this.node instanceof Const && typeof this.node.value === "number" && isNegative(this.node.value))) {
              sb(" ");
            }
            this.node.compile(options, Level.unary, false, sb);
          }
          if (options.sourcemap != null && this.pos.file) {
            options.sourcemap.popFile();
          }
        };
        _Unary_prototype.compileAsBlock = function (options, level, lineStart, sb) {
          var op;
          op = this.op;
          if (__owns.call(ASSIGNMENT_OPERATORS, op)) {
            this.compile(options, level, lineStart, sb);
          } else {
            this.node.compileAsBlock(options, level, lineStart, sb);
          }
        };
        _Unary_prototype.compileAsStatement = function (options, lineStart, sb) {
          var op;
          op = this.op;
          if (__owns.call(ASSIGNMENT_OPERATORS, op)) {
            _Expression_prototype.compileAsStatement.call(this, options, lineStart, sb);
          } else {
            this.node.compileAsStatement(options, lineStart, sb);
          }
        };
        KNOWN_OPERATORS = [
          "++",
          "--",
          "++post",
          "--post",
          "!",
          "~",
          "+",
          "-",
          "typeof",
          "void",
          "delete"
        ];
        ASSIGNMENT_OPERATORS = {
          "++": true,
          "--": true,
          "++post": true,
          "--post": true,
          "delete": true
        };
        _Unary_prototype.isLarge = function () {
          return this.node.isLarge();
        };
        _Unary_prototype.isSmall = function () {
          return this.node.isSmall();
        };
        _Unary_prototype.isNoop = function () {
          var _ref;
          if ((_ref = this._isNoop) == null) {
            return this._isNoop = !__owns.call(ASSIGNMENT_OPERATORS, this.op) && this.node.isNoop();
          } else {
            return _ref;
          }
        };
        _Unary_prototype.walk = function (walker) {
          var _ref, node;
          if ((_ref = walker(this.node)) != null) {
            node = _ref;
          } else {
            node = this.node.walk(walker);
          }
          if (node !== this.node) {
            return Unary(this.pos, this.op, node);
          } else {
            return this;
          }
        };
        _Unary_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "Unary",
            this.pos,
            this.op,
            this.node
          );
        };
        _Unary_prototype.toJSON = function () {
          return {
            type: "Unary",
            line: this.pos.line,
            column: this.pos.column,
            file: this.pos.file,
            op: this.op,
            node: simplify(this.node)
          };
        };
        Unary.fromJSON = function (_p) {
          var column, file, line, node, op;
          line = _p.line;
          column = _p.column;
          file = _p.file;
          op = _p.op;
          node = _p.node;
          return Unary(
            makePos(line, column, file),
            op,
            fromJSON(node)
          );
        };
        return Unary;
      }(Expression));
      While = exports.While = function (pos, test, body, label) {
        return For(
          pos,
          null,
          test,
          null,
          body,
          label
        );
      };
      fromJSON = exports.fromJSON = function (obj) {
        if (obj == null) {
          return Noop(makePos(0, 0));
        }
        if (typeof obj !== "object" || obj === null) {
          throw TypeError("Must provide an object to deserialize");
        }
        if (__isArray(obj)) {
          throw TypeError("Not expecting an array");
        }
        if (typeof obj.type !== "string") {
          throw Error("Expected an object with a string 'type' key");
        }
        if (!__owns.call(exports, obj.type)) {
          throw Error("Unknown node type: " + __strnum(obj.type));
        }
        return exports[obj.type].fromJSON(obj);
      };
      function arrayFromJSON(array) {
        var _arr, _arr2, _i, _len, item;
        if (array == null) {
          return [];
        } else if (__isArray(array)) {
          for (_arr = [], _arr2 = __toArray(array), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
            item = _arr2[_i];
            _arr.push(fromJSON(item));
          }
          return _arr;
        } else {
          throw Error("Expected an array, got " + __typeof(array));
        }
      }
    }.call(this));
    
    return module.exports;
  };
  require['./parser'] = function () {
    var module = { exports: this };
    var exports = this;
    (function (GLOBAL) {
      "use strict";
      var __async, __asyncResult, __bind, __cmp, __create, __curry, __import, __in, __isArray, __lt, __lte, __name, __num, __once, __owns, __slice, __str, __strnum, __toArray, __typeof, _asterixAsArrayLength, _Block, _FunctionBody, _inAst, _inEvilAst, _inFunctionTypeParams, _inGenerator, _inMacro, _Name, _NameOrSymbol, _position, _preventUnclosedObjectLiteral, _Space, _Symbol, AccessMultiNode, AccessNode, Advance, AnyArrayLiteral, AnyChar, AnyObjectLiteral, ArgsNode, ArgumentsLiteral, ArrayLiteral, ArrayNode, ArrayParameter, ArrayType, Assignment, AssignmentAsExpression, AssignNode, Ast, Asterix, asterixAsArrayLength, AstExpression, AstExpressionToken, AsToken, AstStatement, AstToken, AtSign, Backslash, BackslashEscapeSequence, BackslashStringLiteral, BasicInvocationOrAccess, BinaryDigit, BinaryNode, BinaryNumber, Block, BlockNode, Body, BOM, BracketedObjectKey, BreakNode, CallNode, Caret, CheckIndent, CheckStop, CloseCurlyBrace, ClosedArguments, CloseParenthesis, CloseSquareBracket, Colon, ColonChar, ColonEqual, Comma, CommaOrNewline, CommaOrNewlineWithCheckIndent, CommentNode, ComplexAssignable, ConstantLiteral, ConstNode, ConstObjectKey, ContinueNode, convertInvocationOrAccess, CountIndent, CURRENT_ARRAY_LENGTH_NAME, CustomBinaryOperator, CustomOperatorCloseParenthesis, CustomPostfixUnary, CustomPrefixUnary, DebuggerNode, DecimalDigit, DecimalNumber, DeclareEqualSymbol, DedentedBody, DefineHelper, DefineHelperStart, DefineMacro, DefineOperator, DefineOperatorStart, DefineSyntax, DefineSyntaxStart, DefNode, DollarSign, DoubleColon, DoubleQuote, DoubleStringArrayLiteral, DoubleStringLiteral, DoubleStringLiteralInner, DualObjectKey, EmptyLine, EmptyLines, Eval, EvalNode, EvalToken, Expression, ExpressionAsStatement, ExpressionOrAssignment, FailureManager, FalseLiteral, ForInNode, ForNode, freeze, fromCharCode, FunctionBody, FunctionDeclaration, FunctionFlag, FunctionFlags, FunctionLiteral, FunctionNode, FunctionType, generateCacheKey, GeneratorFunctionBody, GenericDefinitionPart, GenericPart, GetSetToken, getTmpId, getUseCustomBinaryOperator, HashSign, HexDigit, HexEscapeSequence, HexNumber, Identifier, IdentifierNameConst, IdentifierNameConstOrNumberLiteral, IdentifierOrAccess, IdentifierOrAccessPart, IdentifierOrAccessStart, IdentifierOrSimpleAccess, IdentifierOrSimpleAccessPart, IdentifierOrSimpleAccessStart, IdentifierParameter, IdentNode, IfNode, inAst, IndentedUnclosedArrayLiteral, IndentedUnclosedArrayLiteralInner, IndentedUnclosedObjectLiteral, IndentedUnclosedObjectLiteralInner, INDENTS, Index, inEvilAst, inExpression, InfinityLiteral, inFunctionTypeParams, inMacro, inspect, inStatement, InvocationArguments, InvocationOrAccess, InvocationOrAccessPart, KeyValuePair, KvpParameter, LessThanSign, Letter, LicenseComment, Line, Literal, Logic, LowerR, LowerU, LowerX, MacroAccessNode, MacroBody, MacroError, MacroHelper, MacroHolder, MacroName, MacroNames, MacroOptions, MacroSyntax, MacroSyntaxChoiceParameters, MacroSyntaxParameter, MacroSyntaxParameters, MacroSyntaxParameterType, MacroToken, MapKeyValuePair, MapLiteral, MapLiteralToken, MaybeAdvance, MaybeAsType, MaybeComma, MaybeCommaOrNewline, MaybeComment, MaybeExclamationPointNoSpace, MaybeExistentialSymbolNoSpace, MaybeNotToken, MaybeSpreadToken, MethodDeclaration, Minus, Name, NameChar, NamePart, NameStart, NaNLiteral, Newline, NewlineWithCheckIndent, nextTick, Node, nodeToType, NonUnionType, NoSpace, NotColon, Nothing, NOTHING, NothingNode, notInFunctionTypeParams, NullLiteral, NumberChar, NumberLiteral, ObjectKey, ObjectKeyColon, ObjectKeyNotColon, ObjectLiteral, ObjectNode, ObjectParameter, ObjectType, ObjectTypePair, OctalDigit, OctalNumber, OpenCurlyBrace, OpenCurlyBraceChar, OpenParenthesis, OpenSquareBracket, OpenSquareBracketChar, ParamDualObjectKey, Parameter, ParameterOrNothing, Parameters, ParameterSequence, ParamNode, ParamSingularObjectKey, Parenthetical, ParserError, PercentSign, PercentSignDoubleQuote, PercentSignTripleDoubleQuote, Period, Pipe, Plus, PlusOrMinus, PopIndent, preventUnclosedObjectLiteral, PrimaryExpression, PropertyDualObjectKey, PropertyObjectKeyColon, PropertyOrDualObjectKey, PropertyOrDualObjectKeyOrMethodDeclaration, PushFakeIndent, PushIndent, RadixNumber, RegexComment, RegexDoubleToken, RegexFlags, RegexLiteral, RegexpNode, RegexSingleToken, RegexTripleDoubleToken, RegexTripleSingleToken, RESERVED_IDENTS, ReturnNode, RootNode, Scope, Semicolon, SetLiteral, SetLiteralToken, Shebang, SHORT_CIRCUIT, SimpleAssignable, SimpleConstantLiteral, SingleEscapeCharacter, SingleQuote, SingleStringLiteral, SingularObjectKey, SomeEmptyLines, SomeEmptyLinesWithCheckIndent, Space, SpaceChar, SpreadNode, SpreadOrExpression, Stack, State, Statement, StringIndent, StringInterpolation, StringLiteral, SuperInvocation, SuperNode, SuperToken, SwitchNode, Symbol, SymbolChar, SyntaxChoiceNode, SyntaxManyNode, SyntaxParamNode, SyntaxSequenceNode, SyntaxToken, ThisLiteral, ThisNode, ThisOrShorthandLiteral, ThisOrShorthandLiteralPeriod, ThisShorthandLiteral, ThrowNode, TmpNode, TmpWrapperNode, TripleDoubleQuote, TripleDoubleStringArrayLiteral, TripleDoubleStringLine, TripleDoubleStringLiteral, TripleSingleQuote, TripleSingleStringLine, TripleSingleStringLiteral, TrueLiteral, TryCatchNode, TryFinallyNode, Type, TypeFunctionNode, TypeGenericNode, TypeObjectNode, TypeReference, TypeUnionNode, UnaryNode, UnclosedArguments, UnclosedArrayLiteralElement, UnclosedObjectLiteral, Underscore, UnicodeEscapeSequence, UseMacro, util, VarNode, VoidLiteral, YieldNode, Zero;
      __async = function (limit, length, onValue, onComplete) {
        var broken, index, slotsUsed, sync;
        if (length <= 0) {
          return onComplete(null);
        }
        if (limit < 1 || limit !== limit) {
          limit = 1/0;
        }
        broken = null;
        slotsUsed = 0;
        sync = false;
        function onValueCallback(err) {
          --slotsUsed;
          if (err != null && broken == null) {
            broken = err;
          }
          if (!sync) {
            return next();
          }
        }
        index = 0;
        function next() {
          var f, i;
          while (broken == null && slotsUsed < limit && index < length) {
            ++slotsUsed;
            i = index;
            ++index;
            sync = true;
            onValue(i, __once(onValueCallback));
            sync = false;
          }
          if (broken != null || slotsUsed === 0) {
            f = onComplete;
            onComplete = void 0;
            if (f) {
              return f(broken);
            }
          }
        }
        return next();
      };
      __asyncResult = function (limit, length, onValue, onComplete) {
        var broken, index, result, slotsUsed, sync;
        if (length <= 0) {
          return onComplete(null, []);
        }
        if (limit < 1 || limit !== limit) {
          limit = 1/0;
        }
        broken = null;
        slotsUsed = 0;
        sync = false;
        result = [];
        function onValueCallback(err, value) {
          --slotsUsed;
          if (err != null && broken == null) {
            broken = err;
          }
          if (broken == null && arguments.length > 1) {
            result.push(value);
          }
          if (!sync) {
            return next();
          }
        }
        index = 0;
        function next() {
          var f, i;
          while (broken == null && slotsUsed < limit && index < length) {
            ++slotsUsed;
            i = index;
            ++index;
            sync = true;
            onValue(i, __once(onValueCallback));
            sync = false;
          }
          if (broken != null || slotsUsed === 0) {
            f = onComplete;
            onComplete = void 0;
            if (f) {
              if (broken != null) {
                return f(broken);
              } else {
                return f(null, result);
              }
            }
          }
        }
        return next();
      };
      __bind = function (parent, child) {
        var func;
        if (parent == null) {
          throw TypeError("Expected parent to be an object, got " + __typeof(parent));
        }
        func = parent[child];
        if (typeof func !== "function") {
          throw Error("Trying to bind child '" + String(child) + "' which is not a function");
        }
        return function () {
          return func.apply(parent, arguments);
        };
      };
      __cmp = function (left, right) {
        var type;
        if (left === right) {
          return 0;
        } else {
          type = typeof left;
          if (type !== "number" && type !== "string") {
            throw TypeError("Cannot compare a non-number/string: " + type);
          } else if (type !== typeof right) {
            throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof right);
          } else if (left < right) {
            return -1;
          } else {
            return 1;
          }
        }
      };
      __create = typeof Object.create === "function" ? Object.create
        : function (x) {
          function F() {}
          F.prototype = x;
          return new F();
        };
      __curry = function (numArgs, f) {
        var currier;
        if (typeof numArgs !== "number") {
          throw TypeError("Expected numArgs to be a Number, got " + __typeof(numArgs));
        }
        if (typeof f !== "function") {
          throw TypeError("Expected f to be a Function, got " + __typeof(f));
        }
        if (numArgs > 1) {
          currier = function (args) {
            var ret;
            if (__num(args.length) >= numArgs) {
              return f.apply(this, args);
            } else {
              ret = function () {
                if (arguments.length === 0) {
                  return ret;
                } else {
                  return currier.call(this, args.concat(__slice.call(arguments)));
                }
              };
              return ret;
            }
          };
          return currier([]);
        } else {
          return f;
        }
      };
      __import = function (dest, source) {
        var k;
        for (k in source) {
          if (__owns.call(source, k)) {
            dest[k] = source[k];
          }
        }
        return dest;
      };
      __in = typeof Array.prototype.indexOf === "function"
        ? (function () {
          var indexOf;
          indexOf = Array.prototype.indexOf;
          return function (child, parent) {
            return indexOf.call(parent, child) !== -1;
          };
        }())
        : function (child, parent) {
          var i, len;
          len = +parent.length;
          i = -1;
          while (++i < len) {
            if (child === parent[i] && i in parent) {
              return true;
            }
          }
          return false;
        };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __lt = function (x, y) {
        var type;
        type = typeof x;
        if (type !== "number" && type !== "string") {
          throw TypeError("Cannot compare a non-number/string: " + type);
        } else if (type !== typeof y) {
          throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
        } else {
          return x < y;
        }
      };
      __lte = function (x, y) {
        var type;
        type = typeof x;
        if (type !== "number" && type !== "string") {
          throw TypeError("Cannot compare a non-number/string: " + type);
        } else if (type !== typeof y) {
          throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
        } else {
          return x <= y;
        }
      };
      __name = function (func) {
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        return func.displayName || func.name || "";
      };
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __once = function (func) {
        if (typeof func !== "function") {
          throw Error("Expected func to be a Function, got " + __typeof(func));
        }
        return function () {
          var f;
          f = func;
          func = null;
          return f.apply(this, arguments);
        };
      };
      __owns = Object.prototype.hasOwnProperty;
      __slice = Array.prototype.slice;
      __str = function (str) {
        if (typeof str !== "string") {
          throw TypeError("Expected a string, got " + __typeof(str));
        } else {
          return str;
        }
      };
      __strnum = function (strnum) {
        var type;
        type = typeof strnum;
        if (type === "string") {
          return strnum;
        } else if (type === "number") {
          return String(strnum);
        } else {
          throw TypeError("Expected a string or number, got " + __typeof(strnum));
        }
      };
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      Type = require("./types");
      util = require("util");
      if (util != null) {
        inspect = util.inspect;
      }
      if (typeof Object.freeze === "function") {
        freeze = Object.freeze;
      } else {
        freeze = function (o) {
          return o;
        };
      }
      if (typeof process !== "undefined" && typeof process.nextTick === "function") {
        nextTick = process.nextTick;
      } else {
        nextTick = function (f) {
          return setTimeout(f, 0);
        };
      }
      SHORT_CIRCUIT = freeze({
        toString: function () {
          return "short-circuit";
        }
      });
      NOTHING = freeze({
        toString: function () {
          return "";
        }
      });
      generateCacheKey = (function () {
        var id;
        id = -1;
        return function () {
          return ++id;
        };
      }());
      function assert(value) {
        if (!value) {
          throw Error("Assertion failed: " + String(value));
        }
        return value;
      }
      function named(name, func) {
        if (name == null) {
          name = null;
        } else if (typeof name !== "string") {
          throw TypeError("Expected name to be one of null or String, got " + __typeof(name));
        }
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        if (name) {
          func.parserName = name;
        }
        return func;
      }
      function identity(x) {
        return x;
      }
      function retThis() {
        return this;
      }
      getTmpId = (function () {
        var id;
        id = -1;
        return function () {
          return ++id;
        };
      }());
      function cache(rule, dontCache) {
        var cacheKey;
        if (typeof rule !== "function") {
          throw TypeError("Expected rule to be a Function, got " + __typeof(rule));
        }
        if (dontCache == null) {
          dontCache = false;
        } else if (typeof dontCache !== "boolean") {
          throw TypeError("Expected dontCache to be a Boolean, got " + __typeof(dontCache));
        }
        if (dontCache) {
          return rule;
        } else {
          cacheKey = generateCacheKey();
          return named(rule.parserName, function (o) {
            var _ref, _ref2, cache, indent, indentCache, index, inner, item, result;
            cache = o.cache;
            index = o.index;
            indent = o.indent.peek();
            if ((_ref = cache[_ref2 = indent - 1]) != null) {
              indentCache = _ref;
            } else {
              indentCache = cache[_ref2] = [];
            }
            if ((_ref = indentCache[_ref2 = index % 16]) != null) {
              inner = _ref;
            } else {
              inner = indentCache[_ref2] = [];
            }
            item = inner[cacheKey];
            if (item && item[0] === index) {
              o.index = item[1];
              o.line = item[2];
              return item[3];
            } else {
              result = rule(o);
              if (o.indent.peek() !== indent) {
                throw Error("Changed indent during cache process: from " + __strnum(indent) + " to " + __strnum(o.indent.peek()));
              }
              inner[cacheKey] = [index, o.index, o.line, result];
              return result;
            }
          });
        }
      }
      function sequential(array, mutator, dontCache) {
        var _len, i, item, key, mapping, name, rule, ruleName, rules, shouldWrapName;
        if (!__isArray(array)) {
          throw TypeError("Expected array to be an Array, got " + __typeof(array));
        }
        if (dontCache == null) {
          dontCache = false;
        } else if (typeof dontCache !== "boolean") {
          throw TypeError("Expected dontCache to be a Boolean, got " + __typeof(dontCache));
        }
        if (array.length === 0) {
          throw Error("Cannot provide an empty array");
        }
        name = [];
        rules = [];
        mapping = [];
        shouldWrapName = false;
        for (i = 0, _len = array.length; i < _len; ++i) {
          item = array[i];
          key = void 0;
          rule = void 0;
          if (__isArray(item)) {
            if (item.length !== 2) {
              throw Error("Found an array with " + __strnum(item.length) + " length at index #" + i);
            }
            if (typeof item[0] !== "string") {
              throw TypeError("Array in index #" + i + " has an improper key: " + __typeof(item[0]));
            }
            if (typeof item[1] !== "function") {
              throw TypeError("Array in index #" + i + " has an improper rule: " + __typeof(item[1]));
            }
            key = item[0];
            rule = item[1];
          } else if (typeof item === "function") {
            rule = item;
          } else {
            throw TypeError("Found a non-array, non-function in index #" + i + ": " + __typeof(item));
          }
          rules.push(rule);
          mapping.push(key);
          ruleName = rule.parserName || "<unknown>";
          if (i > 0 && name[name.length - 1].slice(-1) === '"' && ruleName.charCodeAt(0) === 34 && ruleName.slice(-1) === '"') {
            name[name.length - 1] = name[name.length - 1].substring(0, __num(name[name.length - 1].length) - 1);
            name.push(ruleName.substring(1));
          } else {
            if (i > 0) {
              name.push(" ");
              shouldWrapName = true;
            }
            name.push(ruleName);
          }
        }
        if (shouldWrapName) {
          name.splice(0, 0, "(");
          name.push(")");
        }
        name = name.join("");
        return (function () {
          var _rule;
          _rule = named(name, function (o) {
            var _len, clone, i, item, key, result, rule;
            clone = o.clone();
            result = {};
            for (i = 0, _len = rules.length; i < _len; ++i) {
              rule = rules[i];
              item = rule(clone);
              if (!item) {
                return false;
              }
              key = mapping[i];
              if (key) {
                if (key === "this") {
                  result = item;
                } else {
                  result[key] = item;
                }
              }
            }
            o.update(clone);
            return result;
          });
          return named(_rule != null && _rule.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule(o);
            if (!result) {
              return false;
            } else if (typeof mutator === "function") {
              return mutator(result, o, index, line);
            } else if (mutator !== void 0) {
              return mutator;
            } else {
              return result;
            }
          });
        }());
      }
      function ruleEqual(rule, text, mutator) {
        var failureMessage;
        failureMessage = JSON.stringify(text);
        return (function () {
          var _rule;
          _rule = (function () {
            var _rule2;
            _rule2 = named(failureMessage, function (o) {
              var clone, result;
              clone = o.clone();
              result = rule(clone);
              if (result === text) {
                o.update(clone);
                return result;
              } else {
                o.fail(failureMessage);
                return false;
              }
            });
            return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule2(o);
              if (!result) {
                return false;
              } else if (typeof mutator === "function") {
                return mutator(result, o, index, line);
              } else if (mutator !== void 0) {
                return mutator;
              } else {
                return result;
              }
            });
          }());
          return function (o) {
            var clone, result;
            clone = o.clone();
            clone.preventFail();
            result = _rule(clone);
            clone.unpreventFail();
            if (result) {
              o.update(clone);
              return result;
            } else {
              o.fail(failureMessage);
              return false;
            }
          };
        }());
      }
      function word(text, mutator) {
        return ruleEqual(Name, text, mutator);
      }
      function symbol(text, mutator) {
        return ruleEqual(Symbol, text, mutator);
      }
      function wordOrSymbol(text, mutator) {
        var parts;
        parts = [Space];
        parts.push.apply(parts, (function () {
          var _arr, _arr2, _len, i, part;
          for (_arr = [], _arr2 = __toArray(text.split(/([a-z]+)/ig)), i = 0, _len = _arr2.length; i < _len; ++i) {
            part = _arr2[i];
            if (part) {
              if (i % 2 === 0) {
                _arr.push(ruleEqual(_Symbol, part));
              } else {
                _arr.push(ruleEqual(_Name, part));
              }
            }
          }
          return _arr;
        }()));
        return sequential(parts, mutator || text);
      }
      function macroName(text, mutator) {
        var failureMessage;
        failureMessage = JSON.stringify(text);
        return (function () {
          var _rule;
          _rule = named(failureMessage, function (o) {
            var clone, result;
            clone = o.clone();
            result = MacroName(clone);
            if (result === text) {
              o.update(clone);
              return result;
            } else {
              o.fail(failureMessage);
              return false;
            }
          });
          return named(_rule != null && _rule.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule(o);
            if (!result) {
              return false;
            } else if (typeof mutator === "function") {
              return mutator(result, o, index, line);
            } else if (mutator !== void 0) {
              return mutator;
            } else {
              return result;
            }
          });
        }());
      }
      function getFuncName(func) {
        var match;
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        if (func.displayName) {
          return func.displayName;
        } else if (func.name) {
          return func.name;
        } else {
          match = RegExp("^function\\s*(.*?)").exec(func.toString());
          return match && match[1] || func.parserName || "(anonymous)";
        }
      }
      function wrap(func, name) {
        var id;
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        if (name == null) {
          name = getFuncName(func);
        }
        id = -1;
        return named(func.parserName, function (o) {
          var i, result;
          ++id;
          i = id;
          console.log(i + "-" + __strnum(name) + " starting at line #" + __strnum(o.line) + ", index " + __strnum(o.index) + ", indent " + __strnum(o.indent.peek()));
          result = func(o);
          if (!result) {
            console.log(i + "-" + __strnum(name) + " failure at line #" + __strnum(o.line) + ", index " + __strnum(o.index) + ", indent " + __strnum(o.indent.peek()));
          } else {
            console.log(i + "-" + __strnum(name) + " success at line #" + __strnum(o.line) + ", index " + __strnum(o.index) + ", indent " + __strnum(o.indent.peek()), result);
          }
          return result;
        });
      }
      Stack = (function () {
        var _Stack_prototype;
        function Stack(initial, data) {
          var _this;
          _this = this instanceof Stack ? this : __create(_Stack_prototype);
          if (data == null) {
            data = [];
          }
          _this.initial = initial;
          _this.data = data;
          return _this;
        }
        _Stack_prototype = Stack.prototype;
        Stack.displayName = "Stack";
        _Stack_prototype.push = function (value) {
          return this.data.push(value);
        };
        _Stack_prototype.pop = function () {
          var data, len;
          data = this.data;
          len = data.length;
          if (len === 0) {
            throw Error("Cannot pop");
          }
          return data.pop();
        };
        _Stack_prototype.canPop = function () {
          return __num(this.data.length) > 0;
        };
        _Stack_prototype.peek = function () {
          var data, len;
          data = this.data;
          len = data.length;
          if (len === 0) {
            return this.initial;
          } else {
            return data[__num(len) - 1];
          }
        };
        _Stack_prototype.clone = function () {
          return Stack(this.initial, this.data.slice());
        };
        return Stack;
      }());
      function makeAlterStack(stack, value) {
        if (!(stack instanceof Stack)) {
          throw TypeError("Expected stack to be a " + __name(Stack) + ", got " + __typeof(stack));
        }
        return function (func) {
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          return named(func.parserName, function (o) {
            stack.push(value);
            try {
              return func(o);
            } finally {
              stack.pop();
            }
          });
        };
      }
      _position = Stack("statement");
      inStatement = makeAlterStack(_position, "statement");
      inExpression = makeAlterStack(_position, "expression");
      _inMacro = Stack(false);
      inMacro = makeAlterStack(_inMacro, true);
      _inAst = Stack(false);
      inAst = makeAlterStack(_inAst, true);
      _inEvilAst = Stack(false);
      inEvilAst = makeAlterStack(_inEvilAst, true);
      _preventUnclosedObjectLiteral = Stack(false);
      preventUnclosedObjectLiteral = makeAlterStack(_preventUnclosedObjectLiteral, true);
      _asterixAsArrayLength = Stack(false);
      asterixAsArrayLength = makeAlterStack(_asterixAsArrayLength, true);
      SpaceChar = cache(named("SpaceChar", function (o) {
        var c;
        c = o.data.charCodeAt(o.index);
        if (c < 128 ? c === 9 || c === 11 || c === 12 || c === 32 : c === 160 || c === 5760 || c === 6158 || c >= 8192 && c <= 8202 || c === 8239 || c === 8287 || c === 12288 || c === 65263) {
          o.index = __num(o.index) + 1;
          return c;
        } else {
          o.fail("space");
          return false;
        }
      }));
      _Space = named("_Space", function (o) {
        while (SpaceChar(o));
        return true;
      });
      Newline = cache(named("Newline", function (o) {
        var c, data, index;
        data = o.data;
        index = o.index;
        c = data.charCodeAt(index);
        if (c === 13 || c === 10 || c === 8232 || c === 8233) {
          ++index;
          if (c === 13 && data.charCodeAt(index) === 10) {
            ++index;
          }
          o.index = index;
          ++o.line;
          return true;
        } else {
          o.fail("newline");
          return false;
        }
      }));
      CheckStop = named("CheckStop", (function () {
        var Eof, Stop;
        Eof = named("Eof", function (o) {
          return !__lt(o.index, o.data.length);
        });
        Stop = named("Stop", function (o) {
          return Newline(o) || Eof(o);
        });
        return function (o) {
          return Stop(o.clone());
        };
      }()));
      NewlineWithCheckIndent = cache(named("NewlineWithCheckIndent", function (o) {
        var clone;
        clone = o.clone();
        return Newline(clone) && EmptyLines(clone) && CheckIndent(clone) && (o.update(clone), true);
      }));
      MaybeComment = cache(named("MaybeComment", (function () {
        var MultiLineComment, SingleLineComment;
        SingleLineComment = named("SingleLineComment", function (o) {
          var _ref, data, index, len;
          data = o.data;
          index = o.index;
          if (data.charCodeAt(index) === 47 && data.charCodeAt(+index + 1) === 47) {
            len = data.length;
            index = __num(index) + 2;
            for (; ; ++index) {
              if (index >= len || (_ref = data.charCodeAt(index)) === 13 || _ref === 10) {
                o.index = index;
                return true;
              }
            }
          } else {
            return false;
          }
        });
        MultiLineComment = named("MultiLineComment", function (o) {
          var ch, data, index, len;
          data = o.data;
          index = o.index;
          if (data.charCodeAt(index) === 47 && data.charCodeAt(+index + 1) === 42 && data.charCodeAt(+index + 2) !== 33) {
            len = data.length;
            index = __num(index) + 2;
            for (; ; ++index) {
              if (index >= len) {
                o.error("Multi-line comment never ends");
              } else {
                ch = data.charCodeAt(index);
                if (ch === 42 && data.charCodeAt(+index + 1) === 47) {
                  o.index = +index + 2;
                  Space(o);
                  return true;
                } else if (ch === 13 || ch === 10 || ch === 8232 || ch === 8233) {
                  if (ch === 13 && data.charCodeAt(+index + 1) === 10) {
                    ++index;
                  }
                  ++o.line;
                }
              }
            }
          } else {
            return false;
          }
        });
        return (function () {
          function _rule(o) {
            return SingleLineComment(o) || MultiLineComment(o);
          }
          return named(__strnum(_rule != null && _rule.parserName || "<unknown>") + "?", function (o) {
            return _rule(o) || true;
          });
        }());
      }())));
      fromCharCode = (function () {
        var f;
        f = String.fromCharCode;
        return function (x) {
          if (x === -1) {
            return "\u0000";
          } else {
            return f(x);
          }
        };
      }());
      function processCharCodes(codes, array) {
        var _arr, _i, _len, v;
        if (array == null) {
          array = [];
        }
        for (_arr = __toArray(codes), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          v = _arr[_i];
          array.push(fromCharCode(v));
        }
        return array;
      }
      LicenseComment = cache(named("LicenseComment", (function () {
        function _rule(o) {
          var _len, ch, data, i, index, l, len, line, lines, result, startIndex;
          data = o.data;
          index = o.index;
          if (data.charCodeAt(index) === 47 && data.charCodeAt(+index + 1) === 42 && data.charCodeAt(+index + 2) === 33) {
            line = [47, 42, 33];
            lines = [line];
            len = data.length;
            startIndex = index;
            index = __num(index) + 3;
            for (; ; ++index) {
              if (index >= len) {
                o.error("Multi-line license comment never ends");
              } else {
                ch = data.charCodeAt(index);
                if (ch === 42 && data.charCodeAt(+index + 1) === 47) {
                  o.index = +index + 2;
                  line.push(42, 47);
                  result = [];
                  for (i = 0, _len = lines.length; i < _len; ++i) {
                    l = lines[i];
                    if (i > 0) {
                      result.push("\n");
                    }
                    processCharCodes(l, result);
                  }
                  return o.comment(startIndex, result.join(""));
                } else if (ch === 13 || ch === 10 || ch === 8232 || ch === 8233) {
                  if (ch === 13 && data.charCodeAt(+index + 1) === 10) {
                    ++index;
                  }
                  ++o.line;
                  lines.push(line = []);
                  o.index = +index + 1;
                  if (!StringIndent(o)) {
                    o.error("Improper indent in multi-line license comment");
                  }
                  index = o.index - 1;
                } else {
                  line.push(ch);
                }
              }
            }
          } else {
            return false;
          }
        }
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return _Space(clone) && (_result = _rule(clone)) && Space(clone) && (o.update(clone), _result);
        };
      }())));
      Space = cache(named("Space", function (o) {
        var clone;
        clone = o.clone();
        return _Space(clone) && MaybeComment(clone) && (o.update(clone), true);
      }));
      NoSpace = cache(named("NoSpace", function (o) {
        return !SpaceChar(o.clone());
      }));
      EmptyLine = cache(named("EmptyLine", function (o) {
        var _result, clone;
        clone = o.clone();
        _result = void 0;
        return Space(clone) && (_result = Newline(clone)) && (o.update(clone), _result);
      }));
      EmptyLines = cache(named("EmptyLines", function (o) {
        while (EmptyLine(o));
        return true;
      }));
      SomeEmptyLines = cache(named("SomeEmptyLines", function (o) {
        if (!EmptyLine(o)) {
          return false;
        } else {
          while (EmptyLine(o));
          return true;
        }
      }));
      INDENTS = { 9: 4, 32: 1 };
      CountIndent = cache(named("CountIndent", (function () {
        var _rule;
        _rule = named(__strnum(SpaceChar != null && SpaceChar.parserName || "SpaceChar") + "*", function (o) {
          var clone, item, result;
          clone = o.clone();
          result = [];
          while (item = SpaceChar(clone)) {
            result.push(item);
          }
          o.update(clone);
          return result;
        });
        function _mutator(x) {
          var _arr, _i, c, count;
          count = 1;
          for (_arr = __toArray(x), _i = _arr.length; _i--; ) {
            c = _arr[_i];
            if (!__owns.call(INDENTS, c)) {
              throw Error("Unexpected indent char: " + __str(JSON.stringify(c)));
            }
            count += __num(INDENTS[c]);
          }
          return count;
        }
        return named(_rule != null && _rule.parserName || "<unknown>", function (o) {
          var index, line, result;
          index = o.index;
          line = o.line;
          result = _rule(o);
          if (!result) {
            return false;
          } else {
            return _mutator(result, o, index, line);
          }
        });
      }())));
      CheckIndent = cache(named("CheckIndent", function (o) {
        var clone, indent;
        clone = o.clone();
        indent = CountIndent(clone);
        if (indent === clone.indent.peek()) {
          o.update(clone);
          return true;
        } else {
          return false;
        }
      }));
      Advance = named("Advance", function (o) {
        var clone, indent;
        clone = o.clone();
        indent = CountIndent(clone);
        if (!__lte(indent, clone.indent.peek())) {
          o.indent.push(indent);
          return true;
        } else {
          return false;
        }
      });
      MaybeAdvance = named("MaybeAdvance", function (o) {
        var clone, indent;
        clone = o.clone();
        indent = CountIndent(clone);
        o.indent.push(indent);
        return true;
      });
      PushIndent = named("PushIndent", (function () {
        function _mutator(indent, o) {
          o.indent.push(indent);
          return true;
        }
        return named(CountIndent != null && CountIndent.parserName || "CountIndent", function (o) {
          var index, line, result;
          index = o.index;
          line = o.line;
          result = CountIndent(o);
          if (!result) {
            return false;
          } else {
            return _mutator(result, o, index, line);
          }
        });
      }()));
      PushFakeIndent = (function () {
        var cache;
        cache = [];
        return function (n) {
          var _ref;
          if ((_ref = cache[n]) == null) {
            return cache[n] = named("PushFakeIndent(" + __strnum(n) + ")", function (o) {
              o.indent.push(__num(o.indent.peek()) + __num(n));
              return true;
            });
          } else {
            return _ref;
          }
        };
      }());
      PopIndent = named("PopIndent", function (o) {
        if (o.indent.canPop()) {
          o.indent.pop();
          return true;
        } else {
          return o.error("Unexpected dedent");
        }
      });
      Zero = cache(named("Zero", function (o) {
        if (o.data.charCodeAt(o.index) === 48) {
          o.index = __num(o.index) + 1;
          return 48;
        } else {
          o.fail('"0"');
          return false;
        }
      }));
      DecimalDigit = cache(named("DecimalDigit", function (o) {
        var c;
        c = o.data.charCodeAt(o.index);
        if (c >= 48 && c <= 57) {
          o.index = __num(o.index) + 1;
          return c;
        } else {
          o.fail("[0-9]");
          return false;
        }
      }));
      Period = cache(named("Period", function (o) {
        if (o.data.charCodeAt(o.index) === 46) {
          o.index = __num(o.index) + 1;
          return 46;
        } else {
          o.fail('"."');
          return false;
        }
      }));
      ColonChar = cache(named("ColonChar", function (o) {
        if (o.data.charCodeAt(o.index) === 58) {
          o.index = __num(o.index) + 1;
          return 58;
        } else {
          o.fail('":"');
          return false;
        }
      }));
      Pipe = cache(named("Pipe", (function () {
        function _rule(o) {
          if (o.data.charCodeAt(o.index) === 124) {
            o.index = __num(o.index) + 1;
            return 124;
          } else {
            o.fail('"|"');
            return false;
          }
        }
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Space(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }())));
      DoubleColon = cache(named("DoubleColon", function (o) {
        var clone;
        clone = o.clone();
        return ColonChar(clone) && ColonChar(clone) && (o.update(clone), "::");
      }));
      ColonEqual = cache(named("ColonEqual", (function () {
        var _rule;
        _rule = (function () {
          function _rule2(o) {
            if (o.data.charCodeAt(o.index) === 61) {
              o.index = __num(o.index) + 1;
              return 61;
            } else {
              o.fail('"="');
              return false;
            }
          }
          return function (o) {
            var clone;
            clone = o.clone();
            return ColonChar(clone) && _rule2(clone) && (o.update(clone), ":=");
          };
        }());
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Space(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }())));
      Minus = named("Minus", function (o) {
        if (o.data.charCodeAt(o.index) === 45) {
          o.index = __num(o.index) + 1;
          return 45;
        } else {
          o.fail('"-"');
          return false;
        }
      });
      Plus = named("Plus", function (o) {
        if (o.data.charCodeAt(o.index) === 43) {
          o.index = __num(o.index) + 1;
          return 43;
        } else {
          o.fail('"+"');
          return false;
        }
      });
      PlusOrMinus = named("PlusOrMinus", function (o) {
        var c;
        c = o.data.charCodeAt(o.index);
        if (c === 43 || c === 45) {
          o.index = __num(o.index) + 1;
          return c;
        } else {
          o.fail("[+\\-]");
          return false;
        }
      });
      Letter = named("Letter", function (o) {
        var c;
        c = o.data.charCodeAt(o.index);
        if (c < 128 ? c >= 65 && c <= 90 || c >= 97 && c <= 122 : c === 170 || c === 181 || c === 186 || c >= 192 && c <= 214 || c >= 216 && c <= 246 || c >= 248 && c <= 705 || c >= 710 && c <= 721 || c >= 736 && c <= 740 || c === 748 || c === 750 || c >= 880 && c <= 884 || c === 886 || c === 887 || c >= 890 && c <= 893 || c === 902 || c >= 904 && c <= 906 || c === 908 || c >= 910 && c <= 929 || c >= 931 && c <= 1013 || c >= 1015 && c <= 1153 || c >= 1162 && c <= 1317 || c >= 1329 && c <= 1366 || c === 1369 || c >= 1377 && c <= 1415 || c >= 1488 && c <= 1514 || c >= 1520 && c <= 1522 || c >= 1569 && c <= 1610 || c === 1646 || c === 1647 || c >= 1649 && c <= 1747 || c === 1749 || c === 1765 || c === 1766 || c === 1774 || c === 1775 || c >= 1786 && c <= 1788 || c === 1791 || c === 1808 || c >= 1810 && c <= 1839 || c >= 1869 && c <= 1957 || c === 1969 || c >= 1994 && c <= 2026 || c === 2036 || c === 2037 || c === 2042 || c >= 2048 && c <= 2069 || c === 2074 || c === 2084 || c === 2088 || c >= 2308 && c <= 2361 || c === 2365 || c === 2384 || c >= 2392 && c <= 2401 || c === 2417 || c === 2418 || c >= 2425 && c <= 2431 || c >= 2437 && c <= 2444 || c === 2447 || c === 2448 || c >= 2451 && c <= 2472 || c >= 2474 && c <= 2480 || c === 2482 || c >= 2486 && c <= 2489 || c === 2493 || c === 2510 || c === 2524 || c === 2525 || c >= 2527 && c <= 2529 || c === 2544 || c === 2545 || c >= 2565 && c <= 2570 || c === 2575 || c === 2576 || c >= 2579 && c <= 2600 || c >= 2602 && c <= 2608 || c === 2610 || c === 2611 || c === 2613 || c === 2614 || c === 2616 || c === 2617 || c >= 2649 && c <= 2652 || c === 2654 || c >= 2674 && c <= 2676 || c >= 2693 && c <= 2701 || c >= 2703 && c <= 2705 || c >= 2707 && c <= 2728 || c >= 2730 && c <= 2736 || c === 2738 || c === 2739 || c >= 2741 && c <= 2745 || c === 2749 || c === 2768 || c === 2784 || c === 2785 || c >= 2821 && c <= 2828 || c === 2831 || c === 2832 || c >= 2835 && c <= 2856 || c >= 2858 && c <= 2864 || c === 2866 || c === 2867 || c >= 2869 && c <= 2873 || c === 2877 || c === 2908 || c === 2909 || c >= 2911 && c <= 2913 || c === 2929 || c === 2947 || c >= 2949 && c <= 2954 || c >= 2958 && c <= 2960 || c >= 2962 && c <= 2965 || c === 2969 || c === 2970 || c === 2972 || c === 2974 || c === 2975 || c === 2979 || c === 2980 || c >= 2984 && c <= 2986 || c >= 2990 && c <= 3001 || c === 3024 || c >= 3077 && c <= 3084 || c >= 3086 && c <= 3088 || c >= 3090 && c <= 3112 || c >= 3114 && c <= 3123 || c >= 3125 && c <= 3129 || c === 3133 || c === 3160 || c === 3161 || c === 3168 || c === 3169 || c >= 3205 && c <= 3212 || c >= 3214 && c <= 3216 || c >= 3218 && c <= 3240 || c >= 3242 && c <= 3251 || c >= 3253 && c <= 3257 || c === 3261 || c === 3294 || c === 3296 || c === 3297 || c >= 3333 && c <= 3340 || c >= 3342 && c <= 3344 || c >= 3346 && c <= 3368 || c >= 3370 && c <= 3385 || c === 3389 || c === 3424 || c === 3425 || c >= 3450 && c <= 3455 || c >= 3461 && c <= 3478 || c >= 3482 && c <= 3505 || c >= 3507 && c <= 3515 || c === 3517 || c >= 3520 && c <= 3526 || c >= 3585 && c <= 3632 || c === 3634 || c === 3635 || c >= 3648 && c <= 3654 || c === 3713 || c === 3714 || c === 3716 || c === 3719 || c === 3720 || c === 3722 || c === 3725 || c >= 3732 && c <= 3735 || c >= 3737 && c <= 3743 || c >= 3745 && c <= 3747 || c === 3749 || c === 3751 || c === 3754 || c === 3755 || c >= 3757 && c <= 3760 || c === 3762 || c === 3763 || c === 3773 || c >= 3776 && c <= 3780 || c === 3782 || c === 3804 || c === 3805 || c === 3840 || c >= 3904 && c <= 3911 || c >= 3913 && c <= 3948 || c >= 3976 && c <= 3979 || c >= 4096 && c <= 4138 || c === 4159 || c >= 4176 && c <= 4181 || c >= 4186 && c <= 4189 || c === 4193 || c === 4197 || c === 4198 || c >= 4206 && c <= 4208 || c >= 4213 && c <= 4225 || c === 4238 || c >= 4256 && c <= 4293 || c >= 4304 && c <= 4346 || c === 4348 || c >= 4352 && c <= 4680 || c >= 4682 && c <= 4685 || c >= 4688 && c <= 4694 || c === 4696 || c >= 4698 && c <= 4701 || c >= 4704 && c <= 4744 || c >= 4746 && c <= 4749 || c >= 4752 && c <= 4784 || c >= 4786 && c <= 4789 || c >= 4792 && c <= 4798 || c === 4800 || c >= 4802 && c <= 4805 || c >= 4808 && c <= 4822 || c >= 4824 && c <= 4880 || c >= 4882 && c <= 4885 || c >= 4888 && c <= 4954 || c >= 4992 && c <= 5007 || c >= 5024 && c <= 5108 || c >= 5121 && c <= 5740 || c >= 5743 && c <= 5759 || c >= 5761 && c <= 5786 || c >= 5792 && c <= 5866 || c >= 5888 && c <= 5900 || c >= 5902 && c <= 5905 || c >= 5920 && c <= 5937 || c >= 5952 && c <= 5969 || c >= 5984 && c <= 5996 || c >= 5998 && c <= 6000 || c >= 6016 && c <= 6067 || c === 6103 || c === 6108 || c >= 6176 && c <= 6263 || c >= 6272 && c <= 6312 || c === 6314 || c >= 6320 && c <= 6389 || c >= 6400 && c <= 6428 || c >= 6480 && c <= 6509 || c >= 6512 && c <= 6516 || c >= 6528 && c <= 6571 || c >= 6593 && c <= 6599 || c >= 6656 && c <= 6678 || c >= 6688 && c <= 6740 || c === 6823 || c >= 6917 && c <= 6963 || c >= 6981 && c <= 6987 || c >= 7043 && c <= 7072 || c === 7086 || c === 7087 || c >= 7168 && c <= 7203 || c >= 7245 && c <= 7247 || c >= 7258 && c <= 7293 || c >= 7401 && c <= 7404 || c >= 7406 && c <= 7409 || c >= 7424 && c <= 7615 || c >= 7680 && c <= 7957 || c >= 7960 && c <= 7965 || c >= 7968 && c <= 8005 || c >= 8008 && c <= 8013 || c >= 8016 && c <= 8023 || c === 8025 || c === 8027 || c === 8029 || c >= 8031 && c <= 8061 || c >= 8064 && c <= 8116 || c >= 8118 && c <= 8124 || c === 8126 || c >= 8130 && c <= 8132 || c >= 8134 && c <= 8140 || c >= 8144 && c <= 8147 || c >= 8150 && c <= 8155 || c >= 8160 && c <= 8172 || c >= 8178 && c <= 8180 || c >= 8182 && c <= 8188 || c === 8305 || c === 8319 || c >= 8336 && c <= 8340 || c === 8450 || c === 8455 || c >= 8458 && c <= 8467 || c === 8469 || c >= 8473 && c <= 8477 || c === 8484 || c === 8486 || c === 8488 || c >= 8490 && c <= 8493 || c >= 8495 && c <= 8505 || c >= 8508 && c <= 8511 || c >= 8517 && c <= 8521 || c === 8526 || c === 8579 || c === 8580 || c >= 11264 && c <= 11310 || c >= 11312 && c <= 11358 || c >= 11360 && c <= 11492 || c >= 11499 && c <= 11502 || c >= 11520 && c <= 11557 || c >= 11568 && c <= 11621 || c === 11631 || c >= 11648 && c <= 11670 || c >= 11680 && c <= 11686 || c >= 11688 && c <= 11694 || c >= 11696 && c <= 11702 || c >= 11704 && c <= 11710 || c >= 11712 && c <= 11718 || c >= 11720 && c <= 11726 || c >= 11728 && c <= 11734 || c >= 11736 && c <= 11742 || c === 11823 || c === 12293 || c === 12294 || c >= 12337 && c <= 12341 || c === 12347 || c === 12348 || c >= 12353 && c <= 12438 || c >= 12445 && c <= 12447 || c >= 12449 && c <= 12538 || c >= 12540 && c <= 12543 || c >= 12549 && c <= 12589 || c >= 12593 && c <= 12686 || c >= 12704 && c <= 12727 || c >= 12784 && c <= 12799 || c >= 13312 && c <= 19893 || c >= 19968 && c <= 40907 || c >= 40960 && c <= 42124 || c >= 42192 && c <= 42237 || c >= 42240 && c <= 42508 || c >= 42512 && c <= 42527 || c === 42538 || c === 42539 || c >= 42560 && c <= 42591 || c >= 42594 && c <= 42606 || c >= 42623 && c <= 42647 || c >= 42656 && c <= 42725 || c >= 42775 && c <= 42783 || c >= 42786 && c <= 42888 || c === 42891 || c === 42892 || c >= 43003 && c <= 43009 || c >= 43011 && c <= 43013 || c >= 43015 && c <= 43018 || c >= 43020 && c <= 43042 || c >= 43072 && c <= 43123 || c >= 43138 && c <= 43187 || c >= 43250 && c <= 43255 || c === 43259 || c >= 43274 && c <= 43301 || c >= 43312 && c <= 43334 || c >= 43360 && c <= 43388 || c >= 43396 && c <= 43442 || c === 43471 || c >= 43520 && c <= 43560 || c >= 43584 && c <= 43586 || c >= 43588 && c <= 43595 || c >= 43616 && c <= 43638 || c === 43642 || c >= 43648 && c <= 43695 || c === 43697 || c === 43701 || c === 43702 || c >= 43705 && c <= 43709 || c === 43712 || c === 43714 || c >= 43739 && c <= 43741 || c >= 43968 && c <= 44002 || c >= 44032 && c <= 55203 || c >= 55216 && c <= 55238 || c >= 55243 && c <= 55291 || c >= 63744 && c <= 64045 || c >= 64048 && c <= 64109 || c >= 64112 && c <= 64217 || c >= 64256 && c <= 64262 || c >= 64275 && c <= 64279 || c === 64285 || c >= 64287 && c <= 64296 || c >= 64298 && c <= 64310 || c >= 64312 && c <= 64316 || c === 64318 || c === 64320 || c === 64321 || c === 64323 || c === 64324 || c >= 64326 && c <= 64433 || c >= 64467 && c <= 64829 || c >= 64848 && c <= 64911 || c >= 64914 && c <= 64967 || c >= 65008 && c <= 65019 || c >= 65136 && c <= 65140 || c >= 65142 && c <= 65262 || c >= 65264 && c <= 65276 || c >= 65313 && c <= 65338 || c >= 65345 && c <= 65370 || c >= 65382 && c <= 65470 || c >= 65474 && c <= 65479 || c >= 65482 && c <= 65487 || c >= 65490 && c <= 65495 || c >= 65498 && c <= 65500) {
          o.index = __num(o.index) + 1;
          return c;
        } else {
          o.fail("letter");
          return false;
        }
      });
      NumberChar = named("NumberChar", function (o) {
        var c;
        c = o.data.charCodeAt(o.index);
        if (c < 128 ? c >= 48 && c <= 57 : c === 178 || c === 179 || c === 185 || c >= 188 && c <= 190 || c >= 1632 && c <= 1641 || c >= 1776 && c <= 1785 || c >= 1984 && c <= 1993 || c >= 2406 && c <= 2415 || c >= 2534 && c <= 2543 || c >= 2548 && c <= 2553 || c >= 2662 && c <= 2671 || c >= 2790 && c <= 2799 || c >= 2918 && c <= 2927 || c >= 3046 && c <= 3058 || c >= 3174 && c <= 3183 || c >= 3192 && c <= 3198 || c >= 3302 && c <= 3311 || c >= 3430 && c <= 3445 || c >= 3664 && c <= 3673 || c >= 3792 && c <= 3801 || c >= 3872 && c <= 3891 || c >= 4160 && c <= 4169 || c >= 4240 && c <= 4249 || c >= 4969 && c <= 4988 || c >= 5870 && c <= 5872 || c >= 6112 && c <= 6121 || c >= 6128 && c <= 6137 || c >= 6160 && c <= 6169 || c >= 6470 && c <= 6479 || c >= 6608 && c <= 6618 || c >= 6784 && c <= 6793 || c >= 6800 && c <= 6809 || c >= 6992 && c <= 7001 || c >= 7088 && c <= 7097 || c >= 7232 && c <= 7241 || c >= 7248 && c <= 7257 || c === 8304 || c >= 8308 && c <= 8313 || c >= 8320 && c <= 8329 || c >= 8528 && c <= 8578 || c >= 8581 && c <= 8585 || c >= 9312 && c <= 9371 || c >= 9450 && c <= 9471 || c >= 10102 && c <= 10131 || c === 11517 || c === 12295 || c >= 12321 && c <= 12329 || c >= 12344 && c <= 12346 || c >= 12690 && c <= 12693 || c >= 12832 && c <= 12841 || c >= 12881 && c <= 12895 || c >= 12928 && c <= 12937 || c >= 12977 && c <= 12991 || c >= 42528 && c <= 42537 || c >= 42726 && c <= 42735 || c >= 43056 && c <= 43061 || c >= 43216 && c <= 43225 || c >= 43264 && c <= 43273 || c >= 43472 && c <= 43481 || c >= 43600 && c <= 43609 || c >= 44016 && c <= 44025 || c >= 65296 && c <= 65305) {
          o.index = __num(o.index) + 1;
          return c;
        } else {
          o.fail("number");
          return false;
        }
      });
      Underscore = cache(named("Underscore", function (o) {
        if (o.data.charCodeAt(o.index) === 95) {
          o.index = __num(o.index) + 1;
          return 95;
        } else {
          o.fail('"_"');
          return false;
        }
      }));
      DollarSign = cache(named("DollarSign", function (o) {
        if (o.data.charCodeAt(o.index) === 36) {
          o.index = __num(o.index) + 1;
          return 36;
        } else {
          o.fail('"$"');
          return false;
        }
      }));
      AtSign = cache(named("AtSign", function (o) {
        if (o.data.charCodeAt(o.index) === 64) {
          o.index = __num(o.index) + 1;
          return 64;
        } else {
          o.fail('"@"');
          return false;
        }
      }));
      HashSign = cache(named("HashSign", (function () {
        function _rule(o) {
          if (o.data.charCodeAt(o.index) === 35) {
            o.index = __num(o.index) + 1;
            return 35;
          } else {
            o.fail('"#"');
            return false;
          }
        }
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Space(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }())));
      PercentSign = cache(named("PercentSign", function (o) {
        if (o.data.charCodeAt(o.index) === 37) {
          o.index = __num(o.index) + 1;
          return 37;
        } else {
          o.fail('"%"');
          return false;
        }
      }));
      SymbolChar = cache(named("SymbolChar", function (o) {
        var c;
        c = o.data.charCodeAt(o.index);
        if (c < 128 ? c === 33 || c === 35 || c === 37 || c === 38 || c === 42 || c === 43 || c === 45 || c === 47 || c >= 60 && c <= 63 || c === 92 || c === 94 || c === 96 || c === 124 || c === 126 || c === 127 : c >= 128 && c <= 159 || c >= 161 && c <= 169 || c >= 171 && c <= 177 || c === 180 || c >= 182 && c <= 184 || c === 187 || c === 191 || c === 215 || c === 247 || c >= 706 && c <= 709 || c >= 722 && c <= 735 || c >= 741 && c <= 747 || c === 749 || c >= 751 && c <= 879 || c === 885 || c === 888 || c === 889 || c >= 894 && c <= 901 || c === 903 || c === 907 || c === 909 || c === 930 || c === 1014 || c >= 1154 && c <= 1161 || c >= 1318 && c <= 1328 || c === 1367 || c === 1368 || c >= 1370 && c <= 1376 || c >= 1416 && c <= 1487 || c >= 1515 && c <= 1519 || c >= 1523 && c <= 1568 || c >= 1611 && c <= 1631 || c >= 1642 && c <= 1645 || c === 1648 || c === 1748 || c >= 1750 && c <= 1764 || c >= 1767 && c <= 1773 || c === 1789 || c === 1790 || c >= 1792 && c <= 1807 || c === 1809 || c >= 1840 && c <= 1868 || c >= 1958 && c <= 1968 || c >= 1970 && c <= 1983 || c >= 2027 && c <= 2035 || c >= 2038 && c <= 2041 || c >= 2043 && c <= 2047 || c >= 2070 && c <= 2073 || c >= 2075 && c <= 2083 || c >= 2085 && c <= 2087 || c >= 2089 && c <= 2307 || c >= 2362 && c <= 2364 || c >= 2366 && c <= 2383 || c >= 2385 && c <= 2391 || c >= 2402 && c <= 2405 || c === 2416 || c >= 2419 && c <= 2424 || c >= 2432 && c <= 2436 || c === 2445 || c === 2446 || c === 2449 || c === 2450 || c === 2473 || c === 2481 || c >= 2483 && c <= 2485 || c >= 2490 && c <= 2492 || c >= 2494 && c <= 2509 || c >= 2511 && c <= 2523 || c === 2526 || c >= 2530 && c <= 2533 || c === 2546 || c === 2547 || c >= 2554 && c <= 2564 || c >= 2571 && c <= 2574 || c === 2577 || c === 2578 || c === 2601 || c === 2609 || c === 2612 || c === 2615 || c >= 2618 && c <= 2648 || c === 2653 || c >= 2655 && c <= 2661 || c === 2672 || c === 2673 || c >= 2677 && c <= 2692 || c === 2702 || c === 2706 || c === 2729 || c === 2737 || c === 2740 || c >= 2746 && c <= 2748 || c >= 2750 && c <= 2767 || c >= 2769 && c <= 2783 || c >= 2786 && c <= 2789 || c >= 2800 && c <= 2820 || c === 2829 || c === 2830 || c === 2833 || c === 2834 || c === 2857 || c === 2865 || c === 2868 || c >= 2874 && c <= 2876 || c >= 2878 && c <= 2907 || c === 2910 || c >= 2914 && c <= 2917 || c === 2928 || c >= 2930 && c <= 2946 || c === 2948 || c >= 2955 && c <= 2957 || c === 2961 || c >= 2966 && c <= 2968 || c === 2971 || c === 2973 || c >= 2976 && c <= 2978 || c >= 2981 && c <= 2983 || c >= 2987 && c <= 2989 || c >= 3002 && c <= 3023 || c >= 3025 && c <= 3045 || c >= 3059 && c <= 3076 || c === 3085 || c === 3089 || c === 3113 || c === 3124 || c >= 3130 && c <= 3132 || c >= 3134 && c <= 3159 || c >= 3162 && c <= 3167 || c >= 3170 && c <= 3173 || c >= 3184 && c <= 3191 || c >= 3199 && c <= 3204 || c === 3213 || c === 3217 || c === 3241 || c === 3252 || c >= 3258 && c <= 3260 || c >= 3262 && c <= 3293 || c === 3295 || c >= 3298 && c <= 3301 || c >= 3312 && c <= 3332 || c === 3341 || c === 3345 || c === 3369 || c >= 3386 && c <= 3388 || c >= 3390 && c <= 3423 || c >= 3426 && c <= 3429 || c >= 3446 && c <= 3449 || c >= 3456 && c <= 3460 || c >= 3479 && c <= 3481 || c === 3506 || c === 3516 || c === 3518 || c === 3519 || c >= 3527 && c <= 3584 || c === 3633 || c >= 3636 && c <= 3647 || c >= 3655 && c <= 3663 || c >= 3674 && c <= 3712 || c === 3715 || c === 3717 || c === 3718 || c === 3721 || c === 3723 || c === 3724 || c >= 3726 && c <= 3731 || c === 3736 || c === 3744 || c === 3748 || c === 3750 || c === 3752 || c === 3753 || c === 3756 || c === 3761 || c >= 3764 && c <= 3772 || c === 3774 || c === 3775 || c === 3781 || c >= 3783 && c <= 3791 || c === 3802 || c === 3803 || c >= 3806 && c <= 3839 || c >= 3841 && c <= 3871 || c >= 3892 && c <= 3903 || c === 3912 || c >= 3949 && c <= 3975 || c >= 3980 && c <= 4095 || c >= 4139 && c <= 4158 || c >= 4170 && c <= 4175 || c >= 4182 && c <= 4185 || c >= 4190 && c <= 4192 || c >= 4194 && c <= 4196 || c >= 4199 && c <= 4205 || c >= 4209 && c <= 4212 || c >= 4226 && c <= 4237 || c === 4239 || c >= 4250 && c <= 4255 || c >= 4294 && c <= 4303 || c === 4347 || c >= 4349 && c <= 4351 || c === 4681 || c === 4686 || c === 4687 || c === 4695 || c === 4697 || c === 4702 || c === 4703 || c === 4745 || c === 4750 || c === 4751 || c === 4785 || c === 4790 || c === 4791 || c === 4799 || c === 4801 || c === 4806 || c === 4807 || c === 4823 || c === 4881 || c === 4886 || c === 4887 || c >= 4955 && c <= 4968 || c >= 4989 && c <= 4991 || c >= 5008 && c <= 5023 || c >= 5109 && c <= 5120 || c === 5741 || c === 5742 || c >= 5787 && c <= 5791 || c >= 5867 && c <= 5869 || c >= 5873 && c <= 5887 || c === 5901 || c >= 5906 && c <= 5919 || c >= 5938 && c <= 5951 || c >= 5970 && c <= 5983 || c === 5997 || c >= 6001 && c <= 6015 || c >= 6068 && c <= 6102 || c >= 6104 && c <= 6107 || c >= 6109 && c <= 6111 || c >= 6122 && c <= 6127 || c >= 6138 && c <= 6157 || c === 6159 || c >= 6170 && c <= 6175 || c >= 6264 && c <= 6271 || c === 6313 || c >= 6315 && c <= 6319 || c >= 6390 && c <= 6399 || c >= 6429 && c <= 6469 || c === 6510 || c === 6511 || c >= 6517 && c <= 6527 || c >= 6572 && c <= 6592 || c >= 6600 && c <= 6607 || c >= 6619 && c <= 6655 || c >= 6679 && c <= 6687 || c >= 6741 && c <= 6783 || c >= 6794 && c <= 6799 || c >= 6810 && c <= 6822 || c >= 6824 && c <= 6916 || c >= 6964 && c <= 6980 || c >= 6988 && c <= 6991 || c >= 7002 && c <= 7042 || c >= 7073 && c <= 7085 || c >= 7098 && c <= 7167 || c >= 7204 && c <= 7231 || c >= 7242 && c <= 7244 || c >= 7294 && c <= 7400 || c === 7405 || c >= 7410 && c <= 7423 || c >= 7616 && c <= 7679 || c === 7958 || c === 7959 || c === 7966 || c === 7967 || c === 8006 || c === 8007 || c === 8014 || c === 8015 || c === 8024 || c === 8026 || c === 8028 || c === 8030 || c === 8062 || c === 8063 || c === 8117 || c === 8125 || c >= 8127 && c <= 8129 || c === 8133 || c >= 8141 && c <= 8143 || c === 8148 || c === 8149 || c >= 8156 && c <= 8159 || c >= 8173 && c <= 8177 || c === 8181 || c >= 8189 && c <= 8191 || c >= 8203 && c <= 8231 || c >= 8234 && c <= 8238 || c >= 8240 && c <= 8286 || c >= 8288 && c <= 8303 || c === 8306 || c === 8307 || c >= 8314 && c <= 8318 || c >= 8330 && c <= 8335 || c >= 8341 && c <= 8449 || c >= 8451 && c <= 8454 || c === 8456 || c === 8457 || c === 8468 || c >= 8470 && c <= 8472 || c >= 8478 && c <= 8483 || c === 8485 || c === 8487 || c === 8489 || c === 8494 || c === 8506 || c === 8507 || c >= 8512 && c <= 8516 || c >= 8522 && c <= 8525 || c === 8527 || c >= 8586 && c <= 9311 || c >= 9372 && c <= 9449 || c >= 9472 && c <= 10101 || c >= 10132 && c <= 11263 || c === 11311 || c === 11359 || c >= 11493 && c <= 11498 || c >= 11503 && c <= 11516 || c === 11518 || c === 11519 || c >= 11558 && c <= 11567 || c >= 11622 && c <= 11630 || c >= 11632 && c <= 11647 || c >= 11671 && c <= 11679 || c === 11687 || c === 11695 || c === 11703 || c === 11711 || c === 11719 || c === 11727 || c === 11735 || c >= 11743 && c <= 11822 || c >= 11824 && c <= 12287 || c >= 12289 && c <= 12292 || c >= 12296 && c <= 12320 || c >= 12330 && c <= 12336 || c === 12342 || c === 12343 || c >= 12349 && c <= 12352 || c >= 12439 && c <= 12444 || c === 12448 || c === 12539 || c >= 12544 && c <= 12548 || c >= 12590 && c <= 12592 || c >= 12687 && c <= 12689 || c >= 12694 && c <= 12703 || c >= 12728 && c <= 12783 || c >= 12800 && c <= 12831 || c >= 12842 && c <= 12880 || c >= 12896 && c <= 12927 || c >= 12938 && c <= 12976 || c >= 12992 && c <= 13311 || c >= 19894 && c <= 19967 || c >= 40908 && c <= 40959 || c >= 42125 && c <= 42191 || c === 42238 || c === 42239 || c >= 42509 && c <= 42511 || c >= 42540 && c <= 42559 || c === 42592 || c === 42593 || c >= 42607 && c <= 42622 || c >= 42648 && c <= 42655 || c >= 42736 && c <= 42774 || c === 42784 || c === 42785 || c === 42889 || c === 42890 || c >= 42893 && c <= 43002 || c === 43010 || c === 43014 || c === 43019 || c >= 43043 && c <= 43055 || c >= 43062 && c <= 43071 || c >= 43124 && c <= 43137 || c >= 43188 && c <= 43215 || c >= 43226 && c <= 43249 || c >= 43256 && c <= 43258 || c >= 43260 && c <= 43263 || c >= 43302 && c <= 43311 || c >= 43335 && c <= 43359 || c >= 43389 && c <= 43395 || c >= 43443 && c <= 43470 || c >= 43482 && c <= 43519 || c >= 43561 && c <= 43583 || c === 43587 || c >= 43596 && c <= 43599 || c >= 43610 && c <= 43615 || c >= 43639 && c <= 43641 || c >= 43643 && c <= 43647 || c === 43696 || c >= 43698 && c <= 43700 || c === 43703 || c === 43704 || c === 43710 || c === 43711 || c === 43713 || c >= 43715 && c <= 43738 || c >= 43742 && c <= 43967 || c >= 44003 && c <= 44015 || c >= 44026 && c <= 44031 || c >= 55204 && c <= 55215 || c >= 55239 && c <= 55242 || c >= 55292 && c <= 63743 || c === 64046 || c === 64047 || c === 64110 || c === 64111 || c >= 64218 && c <= 64255 || c >= 64263 && c <= 64274 || c >= 64280 && c <= 64284 || c === 64286 || c === 64297 || c === 64311 || c === 64317 || c === 64319 || c === 64322 || c === 64325 || c >= 64434 && c <= 64466 || c >= 64830 && c <= 64847 || c === 64912 || c === 64913 || c >= 64968 && c <= 65007 || c >= 65020 && c <= 65135 || c === 65141 || c >= 65277 && c <= 65295 || c >= 65306 && c <= 65312 || c >= 65339 && c <= 65344 || c >= 65371 && c <= 65381 || c >= 65471 && c <= 65473 || c === 65480 || c === 65481 || c === 65488 || c === 65489 || c === 65496 || c === 65497 || c >= 65501 && c <= 65535) {
          o.index = __num(o.index) + 1;
          return c;
        } else {
          o.fail("symbolic");
          return false;
        }
      }));
      DoubleQuote = cache(named("DoubleQuote", function (o) {
        if (o.data.charCodeAt(o.index) === 34) {
          o.index = __num(o.index) + 1;
          return 34;
        } else {
          o.fail("'\"'");
          return false;
        }
      }));
      SingleQuote = cache(named("SingleQuote", function (o) {
        if (o.data.charCodeAt(o.index) === 39) {
          o.index = __num(o.index) + 1;
          return 39;
        } else {
          o.fail('"\'"');
          return false;
        }
      }));
      TripleDoubleQuote = cache(named("TripleDoubleQuote", function (o) {
        var clone;
        clone = o.clone();
        return DoubleQuote(clone) && DoubleQuote(clone) && DoubleQuote(clone) && (o.update(clone), '"""');
      }));
      TripleSingleQuote = cache(named("TripleSingleQuote", function (o) {
        var clone;
        clone = o.clone();
        return SingleQuote(clone) && SingleQuote(clone) && SingleQuote(clone) && (o.update(clone), "'''");
      }));
      Semicolon = cache(named("Semicolon", (function () {
        function _rule(o) {
          if (o.data.charCodeAt(o.index) === 59) {
            o.index = __num(o.index) + 1;
            return 59;
          } else {
            o.fail('";"');
            return false;
          }
        }
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Space(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }())));
      Asterix = named("Asterix", function (o) {
        if (o.data.charCodeAt(o.index) === 42) {
          o.index = __num(o.index) + 1;
          return 42;
        } else {
          o.fail('"*"');
          return false;
        }
      });
      Caret = named("Caret", function (o) {
        if (o.data.charCodeAt(o.index) === 94) {
          o.index = __num(o.index) + 1;
          return 94;
        } else {
          o.fail('"^"');
          return false;
        }
      });
      OpenParenthesis = cache(named("OpenParenthesis", (function () {
        function _rule(o) {
          if (o.data.charCodeAt(o.index) === 40) {
            o.index = __num(o.index) + 1;
            return 40;
          } else {
            o.fail('"("');
            return false;
          }
        }
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Space(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }())));
      CloseParenthesis = cache(named("CloseParenthesis", (function () {
        function _rule(o) {
          if (o.data.charCodeAt(o.index) === 41) {
            o.index = __num(o.index) + 1;
            return 41;
          } else {
            o.fail('")"');
            return false;
          }
        }
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Space(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }())));
      OpenSquareBracketChar = cache(named("OpenSquareBracketChar", function (o) {
        if (o.data.charCodeAt(o.index) === 91) {
          o.index = __num(o.index) + 1;
          return 91;
        } else {
          o.fail('"["');
          return false;
        }
      }));
      OpenSquareBracket = cache(named("OpenSquareBracket", function (o) {
        var _result, clone;
        clone = o.clone();
        _result = void 0;
        return Space(clone) && (_result = OpenSquareBracketChar(clone)) && (o.update(clone), _result);
      }));
      CloseSquareBracket = cache(named("CloseSquareBracket", (function () {
        function _rule(o) {
          if (o.data.charCodeAt(o.index) === 93) {
            o.index = __num(o.index) + 1;
            return 93;
          } else {
            o.fail('"]"');
            return false;
          }
        }
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Space(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }())));
      OpenCurlyBraceChar = cache(named("OpenCurlyBraceChar", function (o) {
        if (o.data.charCodeAt(o.index) === 123) {
          o.index = __num(o.index) + 1;
          return 123;
        } else {
          o.fail('"{"');
          return false;
        }
      }));
      OpenCurlyBrace = cache(named("OpenCurlyBrace", function (o) {
        var _result, clone;
        clone = o.clone();
        _result = void 0;
        return Space(clone) && (_result = OpenCurlyBraceChar(clone)) && (o.update(clone), _result);
      }));
      CloseCurlyBrace = cache(named("CloseCurlyBrace", (function () {
        function _rule(o) {
          if (o.data.charCodeAt(o.index) === 125) {
            o.index = __num(o.index) + 1;
            return 125;
          } else {
            o.fail('"}"');
            return false;
          }
        }
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Space(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }())));
      Backslash = cache(named("Backslash", function (o) {
        if (o.data.charCodeAt(o.index) === 92) {
          o.index = __num(o.index) + 1;
          return 92;
        } else {
          o.fail('"\\\\"');
          return false;
        }
      }));
      Comma = cache(named("Comma", (function () {
        function _rule(o) {
          if (o.data.charCodeAt(o.index) === 44) {
            o.index = __num(o.index) + 1;
            return 44;
          } else {
            o.fail('","');
            return false;
          }
        }
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Space(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }())));
      LessThanSign = cache(named("LessThanSign", function (o) {
        if (o.data.charCodeAt(o.index) === 60) {
          o.index = __num(o.index) + 1;
          return 60;
        } else {
          o.fail('"<"');
          return false;
        }
      }));
      MaybeComma = cache(named("MaybeComma", function (o) {
        return Comma(o) || true;
      }));
      CommaOrNewline = cache(named("CommaOrNewline", (function () {
        function _rule(o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return (_result = Comma(clone)) && EmptyLines(clone) && (o.update(clone), _result);
        }
        return function (o) {
          return _rule(o) || SomeEmptyLines(o);
        };
      }())));
      SomeEmptyLinesWithCheckIndent = named("SomeEmptyLinesWithCheckIndent", function (o) {
        var clone;
        clone = o.clone();
        return SomeEmptyLines(clone) && CheckIndent(clone) && (o.update(clone), true);
      });
      CommaOrNewlineWithCheckIndent = named("CommaOrNewlineWithCheckIndent", (function () {
        var _rule;
        _rule = (function () {
          var _rule2;
          _rule2 = named(__strnum(SomeEmptyLinesWithCheckIndent != null && SomeEmptyLinesWithCheckIndent.parserName || "SomeEmptyLinesWithCheckIndent") + "?", function (o) {
            return SomeEmptyLinesWithCheckIndent(o) || true;
          });
          return function (o) {
            var clone;
            clone = o.clone();
            return Comma(clone) && _rule2(clone) && (o.update(clone), true);
          };
        }());
        return function (o) {
          return _rule(o) || SomeEmptyLinesWithCheckIndent(o);
        };
      }()));
      MaybeCommaOrNewline = named("MaybeCommaOrNewline", function (o) {
        return CommaOrNewline(o) || true;
      });
      NameStart = named("NameStart", function (o) {
        return Letter(o) || Underscore(o) || DollarSign(o);
      });
      NameChar = named("NameChar", function (o) {
        return NameStart(o) || NumberChar(o);
      });
      NamePart = named("NamePart", function (o) {
        var clone, item, result;
        clone = o.clone();
        result = [];
        while (item = NameChar(clone)) {
          result.push(item);
        }
        if (result.length < 1) {
          return false;
        } else {
          o.update(clone);
          return result;
        }
      });
      _Name = cache(named("_Name", (function () {
        return (function () {
          var _rule, _rule2;
          _rule = (function () {
            var _rule3;
            _rule3 = named(__strnum(NameChar != null && NameChar.parserName || "NameChar") + "*", function (o) {
              var clone, item, result;
              clone = o.clone();
              result = [];
              while (item = NameChar(clone)) {
                result.push(item);
              }
              o.update(clone);
              return result;
            });
            return function (o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.head = NameStart(clone)) && (_result.tail = _rule3(clone)) && (o.update(clone), _result);
            };
          }());
          _rule2 = (function () {
            function _rule3(o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return Minus(clone) && (_result = NamePart(clone)) && (o.update(clone), _result);
            }
            return named(__strnum(_rule3 != null && _rule3.parserName || "<unknown>") + "*", function (o) {
              var clone, item, result;
              clone = o.clone();
              result = [];
              while (item = _rule3(clone)) {
                result.push(item);
              }
              o.update(clone);
              return result;
            });
          }());
          return (function () {
            function _rule3(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.head = _rule(clone)) && (_result.tail = _rule2(clone)) && (o.update(clone), _result);
            }
            function _mutator(x) {
              var _arr, _i, _len, part, parts;
              parts = [fromCharCode(x.head.head)];
              processCharCodes(x.head.tail, parts);
              for (_arr = __toArray(x.tail), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                part = _arr[_i];
                parts.push(fromCharCode(part[0]).toUpperCase());
                processCharCodes(
                  __slice.call(part, 1),
                  parts
                );
              }
              return parts.join("");
            }
            return named(_rule3 != null && _rule3.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule3(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
      }())));
      Name = cache(named("Name", (function () {
        function _rule(o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Space(clone) && (_result = _Name(clone)) && (o.update(clone), _result);
        }
        return function (o) {
          var clone, result;
          clone = o.clone();
          clone.preventFail();
          result = _rule(clone);
          clone.unpreventFail();
          if (result) {
            o.update(clone);
            return result;
          } else {
            o.fail("name");
            return false;
          }
        };
      }())));
      _Symbol = cache(named("_Symbol", (function () {
        var _rule;
        _rule = named(__strnum(SymbolChar != null && SymbolChar.parserName || "SymbolChar") + "+", function (o) {
          var clone, item, result;
          clone = o.clone();
          result = [];
          while (item = SymbolChar(clone)) {
            result.push(item);
          }
          if (result.length < 1) {
            return false;
          } else {
            o.update(clone);
            return result;
          }
        });
        function _mutator(x) {
          return processCharCodes(x).join("");
        }
        return named(_rule != null && _rule.parserName || "<unknown>", function (o) {
          var index, line, result;
          index = o.index;
          line = o.line;
          result = _rule(o);
          if (!result) {
            return false;
          } else {
            return _mutator(result, o, index, line);
          }
        });
      }())));
      Symbol = cache(named("Symbol", (function () {
        function _rule(o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Space(clone) && (_result = _Symbol(clone)) && (o.update(clone), _result);
        }
        return function (o) {
          var clone, result;
          clone = o.clone();
          clone.preventFail();
          result = _rule(clone);
          clone.unpreventFail();
          if (result) {
            o.update(clone);
            return result;
          } else {
            o.fail("symbol");
            return false;
          }
        };
      }())));
      _NameOrSymbol = (function () {
        function _rule(o) {
          return _Name(o) || _Symbol(o) || ColonEqual(o);
        }
        return (function () {
          var _rule2;
          _rule2 = named(__strnum(_rule != null && _rule.parserName || "<unknown>") + "+", function (o) {
            var clone, item, result;
            clone = o.clone();
            result = [];
            while (item = _rule(clone)) {
              result.push(item);
            }
            if (result.length < 1) {
              return false;
            } else {
              o.update(clone);
              return result;
            }
          });
          function _mutator(x) {
            return x.join("");
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }());
      function NameOrSymbol(o) {
        var _result, clone;
        clone = o.clone();
        _result = void 0;
        return Space(clone) && (_result = _NameOrSymbol(clone)) && (o.update(clone), _result);
      }
      AnyChar = named("AnyChar", function (o) {
        var data, index;
        data = o.data;
        index = o.index;
        if (!__lt(index, data.length)) {
          o.fail("any");
          return false;
        } else {
          ++o.index;
          return o.data.charCodeAt(index);
        }
      });
      ThisLiteral = cache(named("ThisLiteral", word("this", function (x, o, i) {
        return o["this"](i);
      })));
      ThisShorthandLiteral = cache(named("ThisShorthandLiteral", (function () {
        function _rule(o) {
          var clone;
          clone = o.clone();
          return Space(clone) && AtSign(clone) && (o.update(clone), true);
        }
        function _mutator(x, o, i) {
          return o["this"](i);
        }
        return named(_rule != null && _rule.parserName || "<unknown>", function (o) {
          var index, line, result;
          index = o.index;
          line = o.line;
          result = _rule(o);
          if (!result) {
            return false;
          } else {
            return _mutator(result, o, index, line);
          }
        });
      }())));
      ThisOrShorthandLiteral = cache(named("ThisOrShorthandLiteral", function (o) {
        return ThisLiteral(o) || ThisShorthandLiteral(o);
      }));
      ThisOrShorthandLiteralPeriod = named("ThisOrShorthandLiteralPeriod", (function () {
        var _rule2;
        function _rule(o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return (_result = ThisLiteral(clone)) && Period(clone) && (o.update(clone), _result);
        }
        _rule2 = (function () {
          var _rule3;
          _rule3 = named(__strnum(Period != null && Period.parserName || "Period") + "?", function (o) {
            return Period(o) || true;
          });
          return function (o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return (_result = ThisShorthandLiteral(clone)) && _rule3(clone) && (o.update(clone), _result);
          };
        }());
        return function (o) {
          return _rule(o) || _rule2(o);
        };
      }()));
      DecimalNumber = cache(named("DecimalNumber", (function () {
        var DecimalDigits, RawDecimalDigits;
        RawDecimalDigits = named("RawDecimalDigits", function (o) {
          var clone, item, result;
          clone = o.clone();
          result = [];
          while (item = DecimalDigit(clone)) {
            result.push(item);
          }
          if (result.length < 1) {
            return false;
          } else {
            o.update(clone);
            return result;
          }
        });
        DecimalDigits = named("DecimalDigits", (function () {
          var _rule;
          _rule = (function () {
            var _rule2;
            _rule2 = (function () {
              var _rule3;
              _rule3 = named(__strnum(Underscore != null && Underscore.parserName || "Underscore") + "+", function (o) {
                var clone, item, result;
                clone = o.clone();
                result = [];
                while (item = Underscore(clone)) {
                  result.push(item);
                }
                if (result.length < 1) {
                  return false;
                } else {
                  o.update(clone);
                  return result;
                }
              });
              return function (o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return _rule3(clone) && (_result = RawDecimalDigits(clone)) && (o.update(clone), _result);
              };
            }());
            return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "*", function (o) {
              var clone, item, result;
              clone = o.clone();
              result = [];
              while (item = _rule2(clone)) {
                result.push(item);
              }
              o.update(clone);
              return result;
            });
          }());
          return (function () {
            function _rule2(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.head = RawDecimalDigits(clone)) && (_result.tail = _rule(clone)) && (o.update(clone), _result);
            }
            function _mutator(x) {
              var _arr, _i, _len, part, parts;
              parts = processCharCodes(x.head);
              for (_arr = __toArray(x.tail), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                part = _arr[_i];
                processCharCodes(part, parts);
              }
              return parts.join("");
            }
            return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule2(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }()));
        return (function () {
          var _rule, _rule2, _rule3;
          _rule = (function () {
            var _rule4;
            _rule4 = (function () {
              function _rule5(o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return Period(clone) && (_result = DecimalDigits(clone)) && (o.update(clone), _result);
              }
              function _mutator(x) {
                return "." + __strnum(x);
              }
              return named(_rule5 != null && _rule5.parserName || "<unknown>", function (o) {
                var index, line, result;
                index = o.index;
                line = o.line;
                result = _rule5(o);
                if (!result) {
                  return false;
                } else {
                  return _mutator(result, o, index, line);
                }
              });
            }());
            return named(__strnum(_rule4 != null && _rule4.parserName || "<unknown>") + "?", function (o) {
              var index, line;
              index = o.index;
              line = o.line;
              return _rule4(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
            });
          }());
          _rule2 = (function () {
            var _rule4;
            _rule4 = (function () {
              var _rule6;
              function _rule5(o) {
                var c;
                c = o.data.charCodeAt(o.index);
                if (c === 69 || c === 101) {
                  o.index = __num(o.index) + 1;
                  return c;
                } else {
                  o.fail("[Ee]");
                  return false;
                }
              }
              _rule6 = named(__strnum(PlusOrMinus != null && PlusOrMinus.parserName || "PlusOrMinus") + "?", function (o) {
                var index, line;
                index = o.index;
                line = o.line;
                return PlusOrMinus(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
              });
              return (function () {
                function _rule7(o) {
                  var _result, clone;
                  clone = o.clone();
                  _result = {};
                  return (_result.e = _rule5(clone)) && (_result.op = _rule6(clone)) && (_result.digits = DecimalDigits(clone)) && (o.update(clone), _result);
                }
                function _mutator(x) {
                  return __strnum(fromCharCode(x.e)) + __strnum(x.op !== NOTHING ? fromCharCode(x.op) : "") + __strnum(x.digits);
                }
                return named(_rule7 != null && _rule7.parserName || "<unknown>", function (o) {
                  var index, line, result;
                  index = o.index;
                  line = o.line;
                  result = _rule7(o);
                  if (!result) {
                    return false;
                  } else {
                    return _mutator(result, o, index, line);
                  }
                });
              }());
            }());
            return named(__strnum(_rule4 != null && _rule4.parserName || "<unknown>") + "?", function (o) {
              var index, line;
              index = o.index;
              line = o.line;
              return _rule4(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
            });
          }());
          _rule3 = (function () {
            function _rule4(o) {
              var clone;
              clone = o.clone();
              return Underscore(clone) && NamePart(clone) && (o.update(clone), true);
            }
            return named(__strnum(_rule4 != null && _rule4.parserName || "<unknown>") + "?", function (o) {
              return _rule4(o) || true;
            });
          }());
          return (function () {
            function _rule4(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.integer = DecimalDigits(clone)) && (_result.decimal = _rule(clone)) && (_result.scientific = _rule2(clone)) && _rule3(clone) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              var decimal, scientific, text, value;
              decimal = x.decimal;
              scientific = x.scientific;
              if (decimal === NOTHING) {
                decimal = "";
              }
              if (scientific === NOTHING) {
                scientific = "";
              }
              text = __strnum(x.integer) + __strnum(decimal) + __strnum(scientific);
              value = Number(text);
              if (!isFinite(value)) {
                o.error("Unable to parse number: " + text);
              }
              return o["const"](i, value);
            }
            return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule4(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
      }())));
      function makeRadixNumber(radix, separator, digit) {
        var digits;
        digits = (function () {
          var _rule, _rule2;
          _rule = named(__strnum(digit != null && digit.parserName || "digit") + "+", function (o) {
            var clone, item, result;
            clone = o.clone();
            result = [];
            while (item = digit(clone)) {
              result.push(item);
            }
            if (result.length < 1) {
              return false;
            } else {
              o.update(clone);
              return result;
            }
          });
          _rule2 = (function () {
            var _rule3;
            _rule3 = (function () {
              var _rule4, _rule5;
              _rule4 = named(__strnum(Underscore != null && Underscore.parserName || "Underscore") + "+", function (o) {
                var clone, item, result;
                clone = o.clone();
                result = [];
                while (item = Underscore(clone)) {
                  result.push(item);
                }
                if (result.length < 1) {
                  return false;
                } else {
                  o.update(clone);
                  return result;
                }
              });
              _rule5 = named(__strnum(digit != null && digit.parserName || "digit") + "+", function (o) {
                var clone, item, result;
                clone = o.clone();
                result = [];
                while (item = digit(clone)) {
                  result.push(item);
                }
                if (result.length < 1) {
                  return false;
                } else {
                  o.update(clone);
                  return result;
                }
              });
              return function (o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return _rule4(clone) && (_result = _rule5(clone)) && (o.update(clone), _result);
              };
            }());
            return named(__strnum(_rule3 != null && _rule3.parserName || "<unknown>") + "*", function (o) {
              var clone, item, result;
              clone = o.clone();
              result = [];
              while (item = _rule3(clone)) {
                result.push(item);
              }
              o.update(clone);
              return result;
            });
          }());
          return (function () {
            function _rule3(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.head = _rule(clone)) && (_result.tail = _rule2(clone)) && (o.update(clone), _result);
            }
            function _mutator(x) {
              var _arr, _i, _len, part, parts;
              parts = processCharCodes(x.head);
              for (_arr = __toArray(x.tail), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                part = _arr[_i];
                processCharCodes(part, parts);
              }
              return parts.join("");
            }
            return named(_rule3 != null && _rule3.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule3(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        return (function () {
          var _rule;
          _rule = (function () {
            function _rule2(o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return Period(clone) && (_result = digits(clone)) && (o.update(clone), _result);
            }
            return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "?", function (o) {
              var index, line;
              index = o.index;
              line = o.line;
              return _rule2(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
            });
          }());
          return (function () {
            function _rule2(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return Zero(clone) && (_result.separator = separator(clone)) && (_result.integer = digits(clone)) && (_result.decimal = _rule(clone)) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              var decimal, decimalNum, decimalText, integer, value;
              integer = x.integer;
              decimal = x.decimal;
              if (decimal === NOTHING) {
                decimal = "";
              }
              value = parseInt(integer, radix);
              if (!isFinite(value)) {
                if (decimal) {
                  decimalText = "." + __strnum(decimal);
                } else {
                  decimalText = "";
                }
                o.error("Unable to parse number: 0" + __strnum(fromCharCode(x.separator)) + __strnum(integer) + decimalText);
              }
              if (decimal) {
                while (true) {
                  decimalNum = parseInt(decimal, radix);
                  if (isFinite(decimalNum)) {
                    value += decimalNum / Math.pow(__num(radix), __num(decimal.length));
                    break;
                  } else {
                    decimal = decimal.slice(0, -1);
                  }
                }
              }
              return o["const"](i, value);
            }
            return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule2(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
      }
      HexDigit = named("HexDigit", function (o) {
        var c;
        c = o.data.charCodeAt(o.index);
        if (c >= 48 && c <= 57 || c >= 65 && c <= 70 || c >= 97 && c <= 102) {
          o.index = __num(o.index) + 1;
          return c;
        } else {
          o.fail("[0-9A-Fa-f]");
          return false;
        }
      });
      HexNumber = named("HexNumber", makeRadixNumber(
        16,
        function (o) {
          var c;
          c = o.data.charCodeAt(o.index);
          if (c === 88 || c === 120) {
            o.index = __num(o.index) + 1;
            return c;
          } else {
            o.fail("[Xx]");
            return false;
          }
        },
        HexDigit
      ));
      OctalDigit = named("OctalDigit", function (o) {
        var c;
        c = o.data.charCodeAt(o.index);
        if (c >= 48 && c <= 55) {
          o.index = __num(o.index) + 1;
          return c;
        } else {
          o.fail("[0-7]");
          return false;
        }
      });
      OctalNumber = named("OctalNumber", makeRadixNumber(
        8,
        function (o) {
          var c;
          c = o.data.charCodeAt(o.index);
          if (c === 79 || c === 111) {
            o.index = __num(o.index) + 1;
            return c;
          } else {
            o.fail("[Oo]");
            return false;
          }
        },
        OctalDigit
      ));
      BinaryDigit = named("BinaryDigit", function (o) {
        var c;
        c = o.data.charCodeAt(o.index);
        if (c === 48 || c === 49) {
          o.index = __num(o.index) + 1;
          return c;
        } else {
          o.fail("[01]");
          return false;
        }
      });
      BinaryNumber = named("BinaryNumber", makeRadixNumber(
        2,
        function (o) {
          var c;
          c = o.data.charCodeAt(o.index);
          if (c === 66 || c === 98) {
            o.index = __num(o.index) + 1;
            return c;
          } else {
            o.fail("[Bb]");
            return false;
          }
        },
        BinaryDigit
      ));
      RadixNumber = named("RadixNumber", (function () {
        var GetDigits, Radix;
        GetDigits = (function () {
          var digitCache;
          digitCache = [];
          return function (radix) {
            var _ref;
            if ((_ref = digitCache[radix]) == null) {
              return digitCache[radix] = (function () {
                var _end, chars, digit, i;
                switch (radix) {
                case 2:
                  digit = BinaryDigit;
                  break;
                case 8:
                  digit = OctalDigit;
                  break;
                case 10:
                  digit = DecimalDigit;
                  break;
                case 16:
                  digit = HexDigit;
                  break;
                default:
                  chars = [];
                  for (i = 0, _end = __num(radix) > 10 ? __num(radix) : 10; i < _end; ++i) {
                    chars[i + 48] = true;
                  }
                  for (i = 0, _end = (__num(radix) > 36 ? __num(radix) : 36) - 10; i < _end; ++i) {
                    chars[i + 97] = true;
                    chars[i + 65] = true;
                  }
                  digit = function (o) {
                    var c;
                    c = o.data.charCodeAt(o.index);
                    if (chars[c]) {
                      o.index = __num(o.index) + 1;
                      return c;
                    } else {
                      return false;
                    }
                  };
                }
                return (function () {
                  var _rule, _rule2;
                  _rule = named(__strnum(digit != null && digit.parserName || "digit") + "+", function (o) {
                    var clone, item, result;
                    clone = o.clone();
                    result = [];
                    while (item = digit(clone)) {
                      result.push(item);
                    }
                    if (result.length < 1) {
                      return false;
                    } else {
                      o.update(clone);
                      return result;
                    }
                  });
                  _rule2 = (function () {
                    var _rule3;
                    _rule3 = (function () {
                      var _rule4, _rule5;
                      _rule4 = named(__strnum(Underscore != null && Underscore.parserName || "Underscore") + "+", function (o) {
                        var clone, item, result;
                        clone = o.clone();
                        result = [];
                        while (item = Underscore(clone)) {
                          result.push(item);
                        }
                        if (result.length < 1) {
                          return false;
                        } else {
                          o.update(clone);
                          return result;
                        }
                      });
                      _rule5 = named(__strnum(digit != null && digit.parserName || "digit") + "+", function (o) {
                        var clone, item, result;
                        clone = o.clone();
                        result = [];
                        while (item = digit(clone)) {
                          result.push(item);
                        }
                        if (result.length < 1) {
                          return false;
                        } else {
                          o.update(clone);
                          return result;
                        }
                      });
                      return function (o) {
                        var _result, clone;
                        clone = o.clone();
                        _result = void 0;
                        return _rule4(clone) && (_result = _rule5(clone)) && (o.update(clone), _result);
                      };
                    }());
                    return named(__strnum(_rule3 != null && _rule3.parserName || "<unknown>") + "*", function (o) {
                      var clone, item, result;
                      clone = o.clone();
                      result = [];
                      while (item = _rule3(clone)) {
                        result.push(item);
                      }
                      o.update(clone);
                      return result;
                    });
                  }());
                  return (function () {
                    function _rule3(o) {
                      var _result, clone;
                      clone = o.clone();
                      _result = {};
                      return (_result.head = _rule(clone)) && (_result.tail = _rule2(clone)) && (o.update(clone), _result);
                    }
                    function _mutator(x) {
                      var _arr, _i, _len, part, parts;
                      parts = processCharCodes(x.head);
                      for (_arr = __toArray(x.tail), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                        part = _arr[_i];
                        processCharCodes(part, parts);
                      }
                      return parts.join("");
                    }
                    return named(_rule3 != null && _rule3.parserName || "<unknown>", function (o) {
                      var index, line, result;
                      index = o.index;
                      line = o.line;
                      result = _rule3(o);
                      if (!result) {
                        return false;
                      } else {
                        return _mutator(result, o, index, line);
                      }
                    });
                  }());
                }());
              }());
            } else {
              return _ref;
            }
          };
        }());
        Radix = named(__strnum(DecimalDigit != null && DecimalDigit.parserName || "DecimalDigit") + "{1,2}", function (o) {
          var clone, item, result;
          clone = o.clone();
          result = [];
          while (result.length < 2 && (item = DecimalDigit(clone))) {
            result.push(item);
          }
          if (result.length < 1) {
            return false;
          } else {
            o.update(clone);
            return result;
          }
        });
        return function (o) {
          var clone, decimal, decimalNum, digits, integer, radix, radixNum, startIndex, subClone, value;
          startIndex = o.index;
          clone = o.clone();
          radix = Radix(clone);
          if (!radix) {
            return false;
          }
          radix = processCharCodes(radix).join("");
          if (!LowerR(clone)) {
            return false;
          }
          radixNum = Number(radix);
          if (!isFinite(radixNum)) {
            o.error("Unable to parse radix: " + __strnum(radix));
          } else if (radixNum < 2 || radixNum > 36) {
            o.error("Radix must be at least 2 and at most 36, not " + radixNum);
          }
          digits = GetDigits(radixNum);
          integer = digits(clone);
          if (!integer) {
            return false;
          }
          value = parseInt(integer, radixNum);
          if (!isFinite(value)) {
            o.error("Unable to parse number: " + radixNum + "r" + __strnum(integer));
          }
          subClone = clone.clone();
          if (Period(subClone)) {
            decimal = digits(subClone);
            if (decimal) {
              clone.update(subClone);
              while (true) {
                decimalNum = parseInt(decimal, radixNum);
                if (decimalNum !== decimalNum) {
                  o.error("Unable to parse number: " + radixNum + "r" + __strnum(integer) + "." + __strnum(decimal));
                } else if (isFinite(decimalNum)) {
                  value += decimalNum / Math.pow(radixNum, __num(decimal.length));
                  break;
                } else {
                  decimal = decimal.slice(0, -1);
                }
              }
            }
          }
          o.update(clone);
          return o["const"](startIndex, value);
        };
      }()));
      NumberLiteral = cache(named("NumberLiteral", (function () {
        function _rule(o) {
          return HexNumber(o) || OctalNumber(o) || BinaryNumber(o) || RadixNumber(o) || DecimalNumber(o);
        }
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Space(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }())));
      function makeConstLiteral(name, value) {
        return word(name, function (x, o, i) {
          return o["const"](i, value);
        });
      }
      NullLiteral = cache(named("NullLiteral", makeConstLiteral("null", null)));
      VoidLiteral = cache(named("VoidLiteral", (function () {
        var _rule, _rule2;
        _rule = makeConstLiteral("undefined", void 0);
        _rule2 = makeConstLiteral("void", void 0);
        return function (o) {
          return _rule(o) || _rule2(o);
        };
      }())));
      InfinityLiteral = named("InfinityLiteral", makeConstLiteral("Infinity", 1/0));
      NaNLiteral = named("NaNLiteral", makeConstLiteral("NaN", 0/0));
      TrueLiteral = named("TrueLiteral", makeConstLiteral("true", true));
      FalseLiteral = named("FalseLiteral", makeConstLiteral("false", false));
      SimpleConstantLiteral = named("SimpleConstantLiteral", function (o) {
        return NullLiteral(o) || VoidLiteral(o) || InfinityLiteral(o) || NaNLiteral(o) || TrueLiteral(o) || FalseLiteral(o);
      });
      LowerX = cache(named("LowerX", function (o) {
        if (o.data.charCodeAt(o.index) === 120) {
          o.index = __num(o.index) + 1;
          return 120;
        } else {
          o.fail('"x"');
          return false;
        }
      }));
      HexEscapeSequence = named("HexEscapeSequence", (function () {
        var _backend;
        _backend = (function () {
          var _rule;
          _rule = named(__strnum(HexDigit != null && HexDigit.parserName || "HexDigit") + "{2}", function (o) {
            var clone, item, result;
            clone = o.clone();
            result = [];
            while (result.length < 2 && (item = HexDigit(clone))) {
              result.push(item);
            }
            if (result.length < 2) {
              return false;
            } else {
              o.update(clone);
              return result;
            }
          });
          return (function () {
            function _rule2(o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return LowerX(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
            }
            function _mutator(x) {
              return parseInt(processCharCodes(x).join(""), 16) || -1;
            }
            return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule2(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!LowerX(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      LowerU = cache(named("LowerU", function (o) {
        if (o.data.charCodeAt(o.index) === 117) {
          o.index = __num(o.index) + 1;
          return 117;
        } else {
          o.fail('"u"');
          return false;
        }
      }));
      UnicodeEscapeSequence = named("UnicodeEscapeSequence", (function () {
        var _backend;
        _backend = (function () {
          var _rule;
          _rule = named(__strnum(HexDigit != null && HexDigit.parserName || "HexDigit") + "{4}", function (o) {
            var clone, item, result;
            clone = o.clone();
            result = [];
            while (result.length < 4 && (item = HexDigit(clone))) {
              result.push(item);
            }
            if (result.length < 4) {
              return false;
            } else {
              o.update(clone);
              return result;
            }
          });
          return (function () {
            function _rule2(o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return LowerU(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
            }
            function _mutator(x) {
              return parseInt(processCharCodes(x).join(""), 16) || -1;
            }
            return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule2(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!LowerU(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      SingleEscapeCharacter = named("SingleEscapeCharacter", (function () {
        var ESCAPED_CHARACTERS;
        ESCAPED_CHARACTERS = {
          98: 8,
          102: 12,
          114: 13,
          110: 10,
          116: 9,
          118: 11,
          48: -1,
          49: 1,
          50: 2,
          51: 3,
          52: 4,
          53: 5,
          54: 6,
          55: 7
        };
        return (function () {
          function _mutator(c) {
            if (__owns.call(ESCAPED_CHARACTERS, c)) {
              return ESCAPED_CHARACTERS[c];
            } else {
              return c;
            }
          }
          return named(AnyChar != null && AnyChar.parserName || "AnyChar", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = AnyChar(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      BackslashEscapeSequence = named("BackslashEscapeSequence", (function () {
        function _rule(o) {
          return HexEscapeSequence(o) || UnicodeEscapeSequence(o) || SingleEscapeCharacter(o);
        }
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Backslash(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }()));
      Nothing = named("Nothing", function (o) {
        return o.nothing(o.index);
      });
      StringInterpolation = named("StringInterpolation", (function () {
        var _backend;
        _backend = (function () {
          var _rule;
          _rule = (function () {
            var _rule2;
            _rule2 = (function () {
              function _rule3(o) {
                return Expression(o) || Nothing(o);
              }
              return function (o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return OpenParenthesis(clone) && (_result = _rule3(clone)) && CloseParenthesis(clone) && (o.update(clone), _result);
              };
            }());
            return function (o) {
              return Identifier(o) || _rule2(o);
            };
          }());
          return function (o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return DollarSign(clone) && NoSpace(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
          };
        }());
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!DollarSign(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      SingleStringLiteral = named("SingleStringLiteral", (function () {
        var _backend;
        _backend = (function () {
          var _rule;
          _rule = (function () {
            var _rule2;
            _rule2 = (function () {
              var _rule3;
              _rule3 = (function () {
                function _rule4(o) {
                  return SingleQuote(o) || Newline(o);
                }
                return named("!" + __strnum(_rule4 != null && _rule4.parserName || "<unknown>"), function (o) {
                  return !_rule4(o.clone()) && AnyChar(o);
                });
              }());
              return function (o) {
                return BackslashEscapeSequence(o) || _rule3(o);
              };
            }());
            return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "*", function (o) {
              var clone, item, result;
              clone = o.clone();
              result = [];
              while (item = _rule2(clone)) {
                result.push(item);
              }
              o.update(clone);
              return result;
            });
          }());
          return (function () {
            function _rule2(o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return SingleQuote(clone) && (_result = _rule(clone)) && SingleQuote(clone) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              return o["const"](i, processCharCodes(x).join(""));
            }
            return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule2(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!SingleQuote(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      DoubleStringLiteralInner = named("DoubleStringLiteralInner", (function () {
        var _rule;
        _rule = (function () {
          var _rule2;
          _rule2 = (function () {
            function _rule3(o) {
              return DoubleQuote(o) || Newline(o);
            }
            return named("!" + __strnum(_rule3 != null && _rule3.parserName || "<unknown>"), function (o) {
              return !_rule3(o.clone()) && AnyChar(o);
            });
          }());
          return function (o) {
            return BackslashEscapeSequence(o) || StringInterpolation(o) || _rule2(o);
          };
        }());
        return named(__strnum(_rule != null && _rule.parserName || "<unknown>") + "*", function (o) {
          var clone, item, result;
          clone = o.clone();
          result = [];
          while (item = _rule(clone)) {
            result.push(item);
          }
          o.update(clone);
          return result;
        });
      }()));
      function doubleStringLiteralHandler(x, o, i) {
        var _arr, _i, _len, currentLiteral, part, stringParts;
        stringParts = [];
        currentLiteral = [];
        for (_arr = __toArray(x), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          part = _arr[_i];
          if (typeof part === "number") {
            currentLiteral.push(part);
          } else if (!(part instanceof NothingNode)) {
            stringParts.push(o["const"](i, processCharCodes(currentLiteral).join("")));
            currentLiteral = [];
            stringParts.push(part);
          }
        }
        if (currentLiteral.length > 0) {
          stringParts.push(o["const"](i, processCharCodes(currentLiteral).join("")));
        }
        return stringParts;
      }
      DoubleStringLiteral = named("DoubleStringLiteral", (function () {
        var _backend;
        _backend = (function () {
          function _rule(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return DoubleQuote(clone) && (_result = DoubleStringLiteralInner(clone)) && DoubleQuote(clone) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            var _arr, _arr2, _i, _len, part, stringParts;
            for (_arr = [], _arr2 = __toArray(doubleStringLiteralHandler(x, o, i)), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              part = _arr2[_i];
              if (!part.isConst() || part.constValue() !== "") {
                _arr.push(part);
              }
            }
            stringParts = _arr;
            if (stringParts.length === 0) {
              return o["const"](i, "");
            } else if (stringParts.length === 1 && stringParts[0].isConst() && typeof stringParts[0].constValue() === "string") {
              return stringParts[0];
            } else {
              return o.string(i, stringParts);
            }
          }
          return named(_rule != null && _rule.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!DoubleQuote(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      PercentSignDoubleQuote = cache(named("PercentSignDoubleQuote", function (o) {
        var clone;
        clone = o.clone();
        return PercentSign(clone) && DoubleQuote(clone) && (o.update(clone), true);
      }));
      DoubleStringArrayLiteral = named("DoubleStringArrayLiteral", (function () {
        var _backend;
        _backend = (function () {
          function _rule(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return PercentSignDoubleQuote(clone) && (_result = DoubleStringLiteralInner(clone)) && DoubleQuote(clone) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            var stringParts;
            stringParts = doubleStringLiteralHandler(x, o, i);
            return o.array(i, stringParts);
          }
          return named(_rule != null && _rule.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!PercentSignDoubleQuote(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      StringIndent = named("StringIndent", function (o) {
        var c, clone, count, currentIndent;
        clone = o.clone();
        count = 1;
        currentIndent = clone.indent.peek();
        while (count < __num(currentIndent)) {
          c = SpaceChar(clone);
          if (!c) {
            break;
          }
          if (!__owns.call(INDENTS, c)) {
            throw Error("Unexpected indent char: " + __str(JSON.stringify(c)));
          }
          count += __num(INDENTS[c]);
        }
        if (count > __num(currentIndent)) {
          return o.error("Mixed tabs and spaces in string literal");
        } else if (count < __num(currentIndent) && !Newline(clone.clone())) {
          return false;
        } else {
          o.update(clone);
          return count;
        }
      });
      TripleSingleStringLine = named("TripleSingleStringLine", (function () {
        var _rule;
        _rule = (function () {
          var _rule2;
          _rule2 = (function () {
            function _rule3(o) {
              return TripleSingleQuote(o) || Newline(o);
            }
            return named("!" + __strnum(_rule3 != null && _rule3.parserName || "<unknown>"), function (o) {
              return !_rule3(o.clone()) && AnyChar(o);
            });
          }());
          return function (o) {
            return BackslashEscapeSequence(o) || _rule2(o);
          };
        }());
        return (function () {
          var _rule2;
          _rule2 = named(__strnum(_rule != null && _rule.parserName || "<unknown>") + "*", function (o) {
            var clone, item, result;
            clone = o.clone();
            result = [];
            while (item = _rule(clone)) {
              result.push(item);
            }
            o.update(clone);
            return result;
          });
          function _mutator(x) {
            return [processCharCodes(x).join("").replace(/[\t ]+$/, "")];
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      TripleDoubleStringLine = named("TripleDoubleStringLine", (function () {
        var _rule;
        _rule = (function () {
          var _rule2;
          _rule2 = (function () {
            function _rule3(o) {
              return TripleDoubleQuote(o) || Newline(o);
            }
            return named("!" + __strnum(_rule3 != null && _rule3.parserName || "<unknown>"), function (o) {
              return !_rule3(o.clone()) && AnyChar(o);
            });
          }());
          return function (o) {
            return BackslashEscapeSequence(o) || StringInterpolation(o) || _rule2(o);
          };
        }());
        return (function () {
          var _rule2;
          _rule2 = named(__strnum(_rule != null && _rule.parserName || "<unknown>") + "*", function (o) {
            var clone, item, result;
            clone = o.clone();
            result = [];
            while (item = _rule(clone)) {
              result.push(item);
            }
            o.update(clone);
            return result;
          });
          function _mutator(x) {
            var _arr, _i, _len, currentLiteral, part, stringParts;
            stringParts = [];
            currentLiteral = [];
            for (_arr = __toArray(x), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              part = _arr[_i];
              if (typeof part === "number") {
                currentLiteral.push(part);
              } else if (!(part instanceof NothingNode)) {
                stringParts.push(processCharCodes(currentLiteral).join(""));
                currentLiteral = [];
                stringParts.push(part);
              }
            }
            if (currentLiteral.length > 0) {
              stringParts.push(processCharCodes(currentLiteral).join("").replace(/[\t ]+$/, ""));
            }
            return stringParts;
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      function tripleStringHandler(x, o, i) {
        var _end, _len, j, len, line, lines, part, stringParts;
        lines = [x.first];
        if (lines[0].length === 0 || lines[0].length === 1 && lines[0][0] === "") {
          lines.shift();
        }
        for (j = 1, _end = __num(x.emptyLines.length); j < _end; ++j) {
          lines.push([""]);
        }
        lines.push.apply(lines, __toArray(x.rest));
        len = lines.length;
        if (len > 0 && (lines[len - 1].length === 0 || lines[len - 1].length === 1 && lines[len - 1][0] === "")) {
          lines.pop();
          --len;
        }
        stringParts = [];
        for (j = 0, _len = lines.length; j < _len; ++j) {
          line = lines[j];
          if (j > 0) {
            stringParts.push("\n");
          }
          stringParts.push.apply(stringParts, __toArray(line));
        }
        for (j = stringParts.length - 2; j >= 0; --j) {
          if (typeof stringParts[j] === "string" && typeof stringParts[j + 1] === "string") {
            stringParts.splice(j, 2, "" + stringParts[j] + stringParts[j + 1]);
          }
        }
        for (j = 0, _len = stringParts.length; j < _len; ++j) {
          part = stringParts[j];
          if (typeof part === "string") {
            stringParts[j] = o["const"](i, part);
          }
        }
        return stringParts;
      }
      function makeTripleString(quote, line) {
        return (function () {
          var _backend;
          _backend = (function () {
            var _rule, _rule2;
            _rule = (function () {
              function _rule3(o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return _Space(clone) && (_result = Newline(clone)) && (o.update(clone), _result);
              }
              return named(__strnum(_rule3 != null && _rule3.parserName || "<unknown>") + "*", function (o) {
                var clone, item, result;
                clone = o.clone();
                result = [];
                while (item = _rule3(clone)) {
                  result.push(item);
                }
                o.update(clone);
                return result;
              });
            }());
            _rule2 = (function () {
              var _rule3;
              _rule3 = (function () {
                var _rule4, _rule5;
                _rule4 = (function () {
                  var _rule6;
                  _rule6 = (function () {
                    var _rule7;
                    _rule7 = (function () {
                      function _rule8(o) {
                        var _result, clone;
                        clone = o.clone();
                        _result = void 0;
                        return Newline(clone) && StringIndent(clone) && (_result = line(clone)) && (o.update(clone), _result);
                      }
                      return named(__strnum(_rule8 != null && _rule8.parserName || "<unknown>") + "*", function (o) {
                        var clone, item, result;
                        clone = o.clone();
                        result = [];
                        while (item = _rule8(clone)) {
                          result.push(item);
                        }
                        o.update(clone);
                        return result;
                      });
                    }());
                    return (function () {
                      function _rule8(o) {
                        var _result, clone;
                        clone = o.clone();
                        _result = {};
                        return StringIndent(clone) && (_result.head = line(clone)) && (_result.tail = _rule7(clone)) && (o.update(clone), _result);
                      }
                      function _mutator(x) {
                        return [x.head].concat(__toArray(x.tail));
                      }
                      return named(_rule8 != null && _rule8.parserName || "<unknown>", function (o) {
                        var index, line, result;
                        index = o.index;
                        line = o.line;
                        result = _rule8(o);
                        if (!result) {
                          return false;
                        } else {
                          return _mutator(result, o, index, line);
                        }
                      });
                    }());
                  }());
                  function _missing2() {
                    return [];
                  }
                  return named(__strnum(_rule6 != null && _rule6.parserName || "<unknown>") + "?", function (o) {
                    var index, line;
                    index = o.index;
                    line = o.line;
                    return _rule6(o) || _missing2(void 0, o, index, line);
                  });
                }());
                _rule5 = named(__strnum(Newline != null && Newline.parserName || "Newline") + "?", function (o) {
                  return Newline(o) || true;
                });
                return function (o) {
                  var _result, clone;
                  clone = o.clone();
                  _result = void 0;
                  return MaybeAdvance(clone) && (_result = _rule4(clone)) && _rule5(clone) && PopIndent(clone) && (o.update(clone), _result);
                };
              }());
              function _missing() {
                return [];
              }
              return named(__strnum(_rule3 != null && _rule3.parserName || "<unknown>") + "?", function (o) {
                var index, line;
                index = o.index;
                line = o.line;
                return _rule3(o) || _missing(void 0, o, index, line);
              });
            }());
            return (function () {
              function _rule3(o) {
                var _result, clone;
                clone = o.clone();
                _result = {};
                return quote(clone) && (_result.first = line(clone)) && (_result.emptyLines = _rule(clone)) && (_result.rest = _rule2(clone)) && quote(clone) && (o.update(clone), _result);
              }
              function _mutator(x, o, i) {
                var _arr, _arr2, _i, _len, part, stringParts;
                for (_arr = [], _arr2 = __toArray(tripleStringHandler(x, o, i)), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  part = _arr2[_i];
                  if (!part.isConst() || part.constValue() !== "") {
                    _arr.push(part);
                  }
                }
                stringParts = _arr;
                if (stringParts.length === 0) {
                  return o["const"](i, "");
                } else if (stringParts.length === 1 && stringParts[0].isConst() && typeof stringParts[0].constValue() === "string") {
                  return stringParts[0];
                } else {
                  return o.string(i, stringParts);
                }
              }
              return named(_rule3 != null && _rule3.parserName || "<unknown>", function (o) {
                var index, line, result;
                index = o.index;
                line = o.line;
                result = _rule3(o);
                if (!result) {
                  return false;
                } else {
                  return _mutator(result, o, index, line);
                }
              });
            }());
          }());
          return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
            var result;
            if (!quote(o.clone())) {
              return false;
            } else {
              result = _backend(o);
              if (!result) {
                throw SHORT_CIRCUIT;
              }
              return result;
            }
          });
        }());
      }
      TripleSingleStringLiteral = named("TripleSingleStringLiteral", makeTripleString(TripleSingleQuote, TripleSingleStringLine));
      TripleDoubleStringLiteral = named("TripleDoubleStringLiteral", makeTripleString(TripleDoubleQuote, TripleDoubleStringLine));
      PercentSignTripleDoubleQuote = cache(named("PercentSignTripleDoubleQuote", function (o) {
        var clone;
        clone = o.clone();
        return PercentSign(clone) && TripleDoubleQuote(clone) && (o.update(clone), true);
      }));
      TripleDoubleStringArrayLiteral = named("TripleDoubleStringArrayLiteral", (function () {
        var _backend;
        _backend = (function () {
          var _rule, _rule2;
          _rule = (function () {
            function _rule3(o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return _Space(clone) && (_result = Newline(clone)) && (o.update(clone), _result);
            }
            return named(__strnum(_rule3 != null && _rule3.parserName || "<unknown>") + "*", function (o) {
              var clone, item, result;
              clone = o.clone();
              result = [];
              while (item = _rule3(clone)) {
                result.push(item);
              }
              o.update(clone);
              return result;
            });
          }());
          _rule2 = (function () {
            var _rule3;
            _rule3 = (function () {
              var _rule4, _rule5;
              _rule4 = (function () {
                var _rule6;
                _rule6 = (function () {
                  var _rule7;
                  _rule7 = (function () {
                    function _rule8(o) {
                      var _result, clone;
                      clone = o.clone();
                      _result = void 0;
                      return Newline(clone) && StringIndent(clone) && (_result = TripleDoubleStringLine(clone)) && (o.update(clone), _result);
                    }
                    return named(__strnum(_rule8 != null && _rule8.parserName || "<unknown>") + "*", function (o) {
                      var clone, item, result;
                      clone = o.clone();
                      result = [];
                      while (item = _rule8(clone)) {
                        result.push(item);
                      }
                      o.update(clone);
                      return result;
                    });
                  }());
                  return (function () {
                    function _rule8(o) {
                      var _result, clone;
                      clone = o.clone();
                      _result = {};
                      return StringIndent(clone) && (_result.head = TripleDoubleStringLine(clone)) && (_result.tail = _rule7(clone)) && (o.update(clone), _result);
                    }
                    function _mutator(x) {
                      return [x.head].concat(__toArray(x.tail));
                    }
                    return named(_rule8 != null && _rule8.parserName || "<unknown>", function (o) {
                      var index, line, result;
                      index = o.index;
                      line = o.line;
                      result = _rule8(o);
                      if (!result) {
                        return false;
                      } else {
                        return _mutator(result, o, index, line);
                      }
                    });
                  }());
                }());
                function _missing2() {
                  return [];
                }
                return named(__strnum(_rule6 != null && _rule6.parserName || "<unknown>") + "?", function (o) {
                  var index, line;
                  index = o.index;
                  line = o.line;
                  return _rule6(o) || _missing2(void 0, o, index, line);
                });
              }());
              _rule5 = named(__strnum(Newline != null && Newline.parserName || "Newline") + "?", function (o) {
                return Newline(o) || true;
              });
              return function (o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return MaybeAdvance(clone) && (_result = _rule4(clone)) && _rule5(clone) && PopIndent(clone) && (o.update(clone), _result);
              };
            }());
            function _missing() {
              return [];
            }
            return named(__strnum(_rule3 != null && _rule3.parserName || "<unknown>") + "?", function (o) {
              var index, line;
              index = o.index;
              line = o.line;
              return _rule3(o) || _missing(void 0, o, index, line);
            });
          }());
          return (function () {
            function _rule3(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return PercentSignTripleDoubleQuote(clone) && (_result.first = TripleDoubleStringLine(clone)) && (_result.emptyLines = _rule(clone)) && (_result.rest = _rule2(clone)) && TripleDoubleQuote(clone) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              var stringParts;
              stringParts = tripleStringHandler(x, o, i);
              return o.array(i, stringParts);
            }
            return named(_rule3 != null && _rule3.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule3(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!PercentSignTripleDoubleQuote(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      LowerR = cache(named("LowerR", function (o) {
        if (o.data.charCodeAt(o.index) === 114) {
          o.index = __num(o.index) + 1;
          return 114;
        } else {
          o.fail('"r"');
          return false;
        }
      }));
      RegexTripleSingleToken = cache(named("RegexTripleSingleToken", function (o) {
        var clone;
        clone = o.clone();
        return LowerR(clone) && TripleSingleQuote(clone) && (o.update(clone), true);
      }));
      RegexTripleDoubleToken = cache(named("RegexTripleDoubleToken", function (o) {
        var clone;
        clone = o.clone();
        return LowerR(clone) && TripleDoubleQuote(clone) && (o.update(clone), true);
      }));
      RegexSingleToken = cache(named("RegexSingleToken", function (o) {
        var clone;
        clone = o.clone();
        return LowerR(clone) && SingleQuote(clone) && (o.update(clone), true);
      }));
      RegexDoubleToken = cache(named("RegexDoubleToken", function (o) {
        var clone;
        clone = o.clone();
        return LowerR(clone) && DoubleQuote(clone) && (o.update(clone), true);
      }));
      RegexFlags = named("RegexFlags", (function () {
        function _missing() {
          return [];
        }
        return named(__strnum(NamePart != null && NamePart.parserName || "NamePart") + "?", function (o) {
          var index, line;
          index = o.index;
          line = o.line;
          return NamePart(o) || _missing(void 0, o, index, line);
        });
      }()));
      RegexComment = named("RegexComment", (function () {
        var _rule;
        _rule = (function () {
          var _rule2;
          _rule2 = named("!" + __strnum(Newline != null && Newline.parserName || "Newline"), function (o) {
            return !Newline(o.clone()) && AnyChar(o);
          });
          return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "*", function (o) {
            var clone, item, result;
            clone = o.clone();
            result = [];
            while (item = _rule2(clone)) {
              result.push(item);
            }
            o.update(clone);
            return result;
          });
        }());
        return (function () {
          function _rule2(o) {
            var clone;
            clone = o.clone();
            return HashSign(clone) && _rule(clone) && (o.update(clone), true);
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else if (typeof NOTHING === "function") {
              return NOTHING(result, o, index, line);
            } else if (NOTHING !== void 0) {
              return NOTHING;
            } else {
              return result;
            }
          });
        }());
      }()));
      RegexLiteral = named("RegexLiteral", (function () {
        var _rule;
        _rule = (function () {
          var _rule2, _rule3, _rule4, _rule5;
          _rule2 = (function () {
            var _backend;
            _backend = (function () {
              var _rule6;
              _rule6 = (function () {
                var _rule7;
                _rule7 = (function () {
                  var _rule10, _rule11, _rule9;
                  function _rule8(o) {
                    var clone;
                    clone = o.clone();
                    return Backslash(clone) && DollarSign(clone) && (o.update(clone), 36);
                  }
                  _rule9 = named(SpaceChar != null && SpaceChar.parserName || "SpaceChar", function (o) {
                    var index, line, result;
                    index = o.index;
                    line = o.line;
                    result = SpaceChar(o);
                    if (!result) {
                      return false;
                    } else if (typeof NOTHING === "function") {
                      return NOTHING(result, o, index, line);
                    } else if (NOTHING !== void 0) {
                      return NOTHING;
                    } else {
                      return result;
                    }
                  });
                  _rule10 = named(Newline != null && Newline.parserName || "Newline", function (o) {
                    var index, line, result;
                    index = o.index;
                    line = o.line;
                    result = Newline(o);
                    if (!result) {
                      return false;
                    } else if (typeof NOTHING === "function") {
                      return NOTHING(result, o, index, line);
                    } else if (NOTHING !== void 0) {
                      return NOTHING;
                    } else {
                      return result;
                    }
                  });
                  _rule11 = named("!" + __strnum(TripleDoubleQuote != null && TripleDoubleQuote.parserName || "TripleDoubleQuote"), function (o) {
                    return !TripleDoubleQuote(o.clone()) && AnyChar(o);
                  });
                  return function (o) {
                    return _rule8(o) || _rule9(o) || _rule10(o) || RegexComment(o) || StringInterpolation(o) || _rule11(o);
                  };
                }());
                return named(__strnum(_rule7 != null && _rule7.parserName || "<unknown>") + "*", function (o) {
                  var clone, item, result;
                  clone = o.clone();
                  result = [];
                  while (item = _rule7(clone)) {
                    result.push(item);
                  }
                  o.update(clone);
                  return result;
                });
              }());
              return function (o) {
                var _result, clone;
                clone = o.clone();
                _result = {};
                return RegexTripleDoubleToken(clone) && (_result.text = _rule6(clone)) && TripleDoubleQuote(clone) && (_result.flags = RegexFlags(clone)) && (o.update(clone), _result);
              };
            }());
            return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
              var result;
              if (!RegexTripleDoubleToken(o.clone())) {
                return false;
              } else {
                result = _backend(o);
                if (!result) {
                  throw SHORT_CIRCUIT;
                }
                return result;
              }
            });
          }());
          _rule3 = (function () {
            var _backend;
            _backend = (function () {
              var _rule6;
              _rule6 = (function () {
                var _rule7;
                _rule7 = (function () {
                  var _rule10, _rule8, _rule9;
                  _rule8 = named(SpaceChar != null && SpaceChar.parserName || "SpaceChar", function (o) {
                    var index, line, result;
                    index = o.index;
                    line = o.line;
                    result = SpaceChar(o);
                    if (!result) {
                      return false;
                    } else if (typeof NOTHING === "function") {
                      return NOTHING(result, o, index, line);
                    } else if (NOTHING !== void 0) {
                      return NOTHING;
                    } else {
                      return result;
                    }
                  });
                  _rule9 = named(Newline != null && Newline.parserName || "Newline", function (o) {
                    var index, line, result;
                    index = o.index;
                    line = o.line;
                    result = Newline(o);
                    if (!result) {
                      return false;
                    } else if (typeof NOTHING === "function") {
                      return NOTHING(result, o, index, line);
                    } else if (NOTHING !== void 0) {
                      return NOTHING;
                    } else {
                      return result;
                    }
                  });
                  _rule10 = named("!" + __strnum(TripleSingleQuote != null && TripleSingleQuote.parserName || "TripleSingleQuote"), function (o) {
                    return !TripleSingleQuote(o.clone()) && AnyChar(o);
                  });
                  return function (o) {
                    return _rule8(o) || _rule9(o) || RegexComment(o) || _rule10(o);
                  };
                }());
                return named(__strnum(_rule7 != null && _rule7.parserName || "<unknown>") + "*", function (o) {
                  var clone, item, result;
                  clone = o.clone();
                  result = [];
                  while (item = _rule7(clone)) {
                    result.push(item);
                  }
                  o.update(clone);
                  return result;
                });
              }());
              return function (o) {
                var _result, clone;
                clone = o.clone();
                _result = {};
                return RegexTripleSingleToken(clone) && (_result.text = _rule6(clone)) && TripleSingleQuote(clone) && (_result.flags = RegexFlags(clone)) && (o.update(clone), _result);
              };
            }());
            return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
              var result;
              if (!RegexTripleSingleToken(o.clone())) {
                return false;
              } else {
                result = _backend(o);
                if (!result) {
                  throw SHORT_CIRCUIT;
                }
                return result;
              }
            });
          }());
          _rule4 = (function () {
            var _backend;
            _backend = (function () {
              var _rule6;
              _rule6 = (function () {
                var _rule7;
                _rule7 = (function () {
                  var _rule10;
                  function _rule8(o) {
                    var clone;
                    clone = o.clone();
                    return DoubleQuote(clone) && DoubleQuote(clone) && (o.update(clone), 34);
                  }
                  function _rule9(o) {
                    var clone;
                    clone = o.clone();
                    return Backslash(clone) && DollarSign(clone) && (o.update(clone), 36);
                  }
                  _rule10 = (function () {
                    function _rule11(o) {
                      return DoubleQuote(o) || Newline(o) || DollarSign(o);
                    }
                    return named("!" + __strnum(_rule11 != null && _rule11.parserName || "<unknown>"), function (o) {
                      return !_rule11(o.clone()) && AnyChar(o);
                    });
                  }());
                  return function (o) {
                    return _rule8(o) || _rule9(o) || _rule10(o) || StringInterpolation(o);
                  };
                }());
                return named(__strnum(_rule7 != null && _rule7.parserName || "<unknown>") + "*", function (o) {
                  var clone, item, result;
                  clone = o.clone();
                  result = [];
                  while (item = _rule7(clone)) {
                    result.push(item);
                  }
                  o.update(clone);
                  return result;
                });
              }());
              return function (o) {
                var _result, clone;
                clone = o.clone();
                _result = {};
                return RegexDoubleToken(clone) && (_result.text = _rule6(clone)) && DoubleQuote(clone) && (_result.flags = RegexFlags(clone)) && (o.update(clone), _result);
              };
            }());
            return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
              var result;
              if (!RegexDoubleToken(o.clone())) {
                return false;
              } else {
                result = _backend(o);
                if (!result) {
                  throw SHORT_CIRCUIT;
                }
                return result;
              }
            });
          }());
          _rule5 = (function () {
            var _backend;
            _backend = (function () {
              var _rule6;
              _rule6 = (function () {
                var _rule7;
                _rule7 = (function () {
                  var _rule9;
                  function _rule8(o) {
                    var clone;
                    clone = o.clone();
                    return SingleQuote(clone) && SingleQuote(clone) && (o.update(clone), 39);
                  }
                  _rule9 = (function () {
                    function _rule10(o) {
                      return SingleQuote(o) || Newline(o);
                    }
                    return named("!" + __strnum(_rule10 != null && _rule10.parserName || "<unknown>"), function (o) {
                      return !_rule10(o.clone()) && AnyChar(o);
                    });
                  }());
                  return function (o) {
                    return _rule8(o) || _rule9(o);
                  };
                }());
                return named(__strnum(_rule7 != null && _rule7.parserName || "<unknown>") + "*", function (o) {
                  var clone, item, result;
                  clone = o.clone();
                  result = [];
                  while (item = _rule7(clone)) {
                    result.push(item);
                  }
                  o.update(clone);
                  return result;
                });
              }());
              return function (o) {
                var _result, clone;
                clone = o.clone();
                _result = {};
                return RegexSingleToken(clone) && (_result.text = _rule6(clone)) && SingleQuote(clone) && (_result.flags = RegexFlags(clone)) && (o.update(clone), _result);
              };
            }());
            return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
              var result;
              if (!RegexSingleToken(o.clone())) {
                return false;
              } else {
                result = _backend(o);
                if (!result) {
                  throw SHORT_CIRCUIT;
                }
                return result;
              }
            });
          }());
          return (function () {
            function _rule6(o) {
              return _rule2(o) || _rule3(o) || _rule4(o) || _rule5(o);
            }
            function _mutator(x, o, i) {
              var _arr, _i, _len, currentLiteral, flag, flags, part, seenFlags, stringParts, text;
              stringParts = [];
              currentLiteral = [];
              for (_arr = __toArray(x.text), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                part = _arr[_i];
                if (typeof part === "number") {
                  currentLiteral.push(part);
                } else if (part !== NOTHING && !(part instanceof NothingNode)) {
                  if (currentLiteral.length > 0) {
                    stringParts.push(o["const"](i, processCharCodes(currentLiteral).join("")));
                    currentLiteral = [];
                  }
                  stringParts.push(part);
                }
              }
              if (currentLiteral.length > 0) {
                stringParts.push(o["const"](i, processCharCodes(currentLiteral).join("")));
              }
              flags = processCharCodes(x.flags).join("");
              if (stringParts.length === 0) {
                text = o["const"](i, "");
              } else if (stringParts.length === 1 && stringParts[0].isConst() && typeof stringParts[0].constValue() === "string") {
                text = stringParts[0];
              } else {
                text = o.string(i, stringParts);
              }
              if (text.isConst()) {
                try {
                  RegExp(String(text.constValue()));
                } catch (e) {
                  o.error(e.message);
                }
              }
              seenFlags = [];
              for (_arr = __toArray(flags), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                flag = _arr[_i];
                if (__in(flag, seenFlags)) {
                  o.error("Specified flag '" + __strnum(flag) + "' in regular expression more than once");
                } else if (flag !== "g" && flag !== "i" && flag !== "m" && flag !== "y") {
                  o.error("Unknown regular expression flag '" + __strnum(flag) + "'");
                }
                seenFlags.push(flag);
              }
              return o.regexp(i, text, flags);
            }
            return named(_rule6 != null && _rule6.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule6(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Space(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }()));
      BackslashStringLiteral = named("BackslashStringLiteral", function (o) {
        var _result, clone;
        clone = o.clone();
        _result = void 0;
        return Backslash(clone) && NoSpace(clone) && (_result = IdentifierNameConst(clone)) && (o.update(clone), _result);
      });
      StringLiteral = cache(named("StringLiteral", (function () {
        function _rule(o) {
          return BackslashStringLiteral(o) || TripleSingleStringLiteral(o) || TripleDoubleStringLiteral(o) || TripleDoubleStringArrayLiteral(o) || SingleStringLiteral(o) || DoubleStringLiteral(o) || DoubleStringArrayLiteral(o);
        }
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Space(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }())));
      ConstantLiteral = cache(named("ConstantLiteral", function (o) {
        return SimpleConstantLiteral(o) || NumberLiteral(o) || StringLiteral(o) || RegexLiteral(o);
      }));
      ArgumentsLiteral = cache(named("ArgumentsLiteral", word("arguments", function (x, o, i) {
        return o.args(i);
      })));
      Literal = named("Literal", function (o) {
        return ThisOrShorthandLiteral(o) || ArgumentsLiteral(o) || ConstantLiteral(o);
      });
      IdentifierNameConst = named("IdentifierNameConst", function (o) {
        var index, result;
        index = o.index;
        result = Name(o);
        if (result) {
          return o["const"](index, result);
        } else {
          return false;
        }
      });
      IdentifierNameConstOrNumberLiteral = cache(named("IdentifierNameConstOrNumberLiteral", function (o) {
        return IdentifierNameConst(o) || NumberLiteral(o);
      }));
      RESERVED_IDENTS = [
        "as",
        "AST",
        "arguments",
        "break",
        "case",
        "catch",
        "class",
        "const",
        "continue",
        "debugger",
        "default",
        "delete",
        "do",
        "else",
        "enum",
        "eval",
        "export",
        "extends",
        "false",
        "finally",
        "for",
        "function",
        "if",
        "import",
        "Infinity",
        "instanceof",
        "in",
        "let",
        "macro",
        "mutable",
        "NaN",
        "new",
        "not",
        "null",
        "package",
        "private",
        "protected",
        "public",
        "return",
        "static",
        "super",
        "switch",
        "then",
        "this",
        "throw",
        "true",
        "try",
        "typeof",
        "undefined",
        "var",
        "void",
        "while",
        "with",
        "yield"
      ];
      Identifier = cache(named("Identifier", (function () {
        var _rule;
        _rule = (function () {
          function _rule3(o) {
            return _inAst.peek();
          }
          return (function () {
            function _rule4(o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return _rule3(clone) && Space(clone) && DollarSign(clone) && NoSpace(clone) && (_result = InvocationArguments(clone)) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              return o.call(
                i,
                o.ident(i, "$"),
                x
              );
            }
            return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule4(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        function _rule2(o) {
          var clone, index, result;
          index = o.index;
          clone = o.clone();
          result = Name(clone);
          if (!result || __in(result, RESERVED_IDENTS) || o.macros.hasMacroOrOperator(result)) {
            o.fail("identifier");
            return false;
          } else {
            o.update(clone);
            return o.ident(index, result);
          }
        }
        return function (o) {
          return _rule(o) || _rule2(o);
        };
      }())));
      MaybeNotToken = cache(named("MaybeNotToken", (function () {
        var _rule;
        _rule = word("not");
        return named(__strnum(_rule != null && _rule.parserName || "<unknown>") + "?", function (o) {
          return _rule(o) || true;
        });
      }())));
      MaybeExistentialSymbolNoSpace = cache(named("MaybeExistentialSymbolNoSpace", (function () {
        var _rule;
        _rule = (function () {
          function _rule2(o) {
            if (o.data.charCodeAt(o.index) === 63) {
              o.index = __num(o.index) + 1;
              return 63;
            } else {
              o.fail('"?"');
              return false;
            }
          }
          return function (o) {
            var clone;
            clone = o.clone();
            return NoSpace(clone) && _rule2(clone) && (o.update(clone), "?");
          };
        }());
        return named(__strnum(_rule != null && _rule.parserName || "<unknown>") + "?", function (o) {
          return _rule(o) || true;
        });
      }())));
      function mutateFunction(func, o, index, line) {
        var mutateFunctionMacro;
        mutateFunctionMacro = o.macros.getByLabel("mutateFunction");
        if (!mutateFunctionMacro) {
          return func;
        } else {
          return mutateFunctionMacro.func(
            { op: "", node: func },
            o,
            index,
            line
          );
        }
      }
      CustomOperatorCloseParenthesis = named("CustomOperatorCloseParenthesis", (function () {
        function handleUnaryOperator(operator, o, i, line) {
          var clone, node, op;
          clone = o.clone(o.cloneScope());
          op = operator.rule(clone);
          if (op && CloseParenthesis(clone)) {
            o.update(clone);
            node = clone.ident(i, "x");
            clone.scope.add(node, false, Type.any);
            return mutateFunction(
              o["function"](
                i,
                [clone.param(i, node)],
                operator.func(
                  { op: op, node: node },
                  clone,
                  i,
                  line
                ),
                true,
                false
              ),
              o,
              i,
              line
            );
          }
        }
        return function (o) {
          var _arr, _arr2, _i, _i2, _len, _ref, clone, i, inverted, left, line, op, operator, operators, result, right;
          i = o.index;
          line = o.line;
          for (_arr = __toArray(o.macros.binaryOperators), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            operators = _arr[_i];
            if (operators) {
              for (_arr2 = __toArray(operators), _i2 = _arr2.length; _i2--; ) {
                operator = _arr2[_i2];
                clone = o.clone(o.cloneScope());
                inverted = false;
                if (operator.invertible) {
                  inverted = MaybeNotToken(clone);
                  if (!inverted) {
                    continue;
                  }
                }
                op = operator.rule(clone);
                if (op && CloseParenthesis(clone)) {
                  left = o.ident(i, "x");
                  right = o.ident(i, "y");
                  clone.scope.add(left, false, Type.any);
                  clone.scope.add(right, false, Type.any);
                  result = o["function"](
                    i,
                    [
                      clone.param(i, left),
                      clone.param(i, right)
                    ],
                    operator.func(
                      { left: left, inverted: inverted === "not", op: op, right: right },
                      clone,
                      i,
                      line
                    ),
                    true,
                    false,
                    true
                  );
                  o.update(clone);
                  return mutateFunction(result, o, i, line);
                }
              }
            }
          }
          for (_arr = __toArray(o.macros.prefixUnaryOperators), _i = _arr.length; _i--; ) {
            operator = _arr[_i];
            if ((_ref = handleUnaryOperator(operator, o, i, line)) != null) {
              return _ref;
            }
          }
          for (_arr = __toArray(o.macros.postfixUnaryOperators), _i = _arr.length; _i--; ) {
            operator = _arr[_i];
            if ((_ref = handleUnaryOperator(operator, o, i, line)) != null) {
              return _ref;
            }
          }
          return false;
        };
      }()));
      CustomBinaryOperator = named("CustomBinaryOperator", function (o) {
        var _arr, _arr2, _i, _i2, _len, clone, i, inverted, op, operator, operators;
        i = o.index;
        for (_arr = __toArray(o.macros.binaryOperators), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          operators = _arr[_i];
          if (operators) {
            for (_arr2 = __toArray(operators), _i2 = _arr2.length; _i2--; ) {
              operator = _arr2[_i2];
              clone = o.clone();
              inverted = false;
              if (operator.invertible) {
                inverted = MaybeNotToken(clone);
                if (!inverted) {
                  continue;
                }
              }
              op = operator.rule(clone);
              if (op) {
                o.update(clone);
                return { op: op, operator: operator, inverted: inverted === "not" };
              }
            }
          }
        }
        return false;
      });
      Parenthetical = named("Parenthetical", (function () {
        var _rule;
        _rule = (function () {
          var _rule3, _rule4, _rule5;
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return (_result = AssignmentAsExpression(clone)) && CloseParenthesis(clone) && (o.update(clone), _result);
          }
          _rule3 = (function () {
            var _rule6;
            _rule6 = named(__strnum(CustomBinaryOperator != null && CustomBinaryOperator.parserName || "CustomBinaryOperator") + "?", function (o) {
              var index, line;
              index = o.index;
              line = o.line;
              return CustomBinaryOperator(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
            });
            return (function () {
              function _rule7(o) {
                var _result, clone;
                clone = o.clone();
                _result = {};
                return (_result.left = Expression(clone)) && (_result.operator = _rule6(clone)) && CloseParenthesis(clone) && (o.update(clone), _result);
              }
              function _mutator(_p, o, i, line) {
                var clone, left, operator, right;
                left = _p.left;
                operator = _p.operator;
                if (operator === NOTHING) {
                  return left;
                } else {
                  clone = o.clone(o.cloneScope());
                  right = o.tmp(i, getTmpId(), "x");
                  clone.scope.add(right, false, Type.any);
                  return mutateFunction(
                    o["function"](
                      i,
                      [clone.param(i, right)],
                      operator.operator.func(
                        {
                          left: left.rescope(clone.scope.id, clone),
                          inverted: operator.inverted,
                          op: operator.op,
                          right: right
                        },
                        clone,
                        i,
                        line
                      ),
                      true,
                      false
                    ),
                    o,
                    i,
                    line
                  );
                }
              }
              return named(_rule7 != null && _rule7.parserName || "<unknown>", function (o) {
                var index, line, result;
                index = o.index;
                line = o.line;
                result = _rule7(o);
                if (!result) {
                  return false;
                } else {
                  return _mutator(result, o, index, line);
                }
              });
            }());
          }());
          _rule4 = (function () {
            function _rule6(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.operator = CustomBinaryOperator(clone)) && (_result.right = Expression(clone)) && CloseParenthesis(clone) && (o.update(clone), _result);
            }
            function _mutator(_p, o, i, line) {
              var _p2, clone, inverted, left, op, operator, right;
              right = _p.right;
              _p2 = _p.operator;
              op = _p2.op;
              operator = _p2.operator;
              inverted = _p2.inverted;
              clone = o.clone(o.cloneScope());
              left = o.tmp(i, getTmpId(), "x");
              clone.scope.add(left, false, Type.any);
              return mutateFunction(
                o["function"](
                  i,
                  [clone.param(i, left)],
                  operator.func(
                    {
                      left: left,
                      inverted: inverted,
                      op: op,
                      right: right.rescope(clone.scope.id, clone)
                    },
                    clone,
                    i,
                    line
                  ),
                  true,
                  false
                ),
                o,
                i,
                line
              );
            }
            return named(_rule6 != null && _rule6.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule6(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
          _rule5 = (function () {
            var _rule6;
            _rule6 = named(__strnum(typeof InvocationOrAccessPart !== "undefined" && InvocationOrAccessPart !== null && InvocationOrAccessPart.parserName || "InvocationOrAccessPart") + "+", function (o) {
              var clone, item, result;
              clone = o.clone();
              result = [];
              while (item = InvocationOrAccessPart(clone)) {
                result.push(item);
              }
              if (result.length < 1) {
                return false;
              } else {
                o.update(clone);
                return result;
              }
            });
            return (function () {
              function _rule7(o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return (_result = _rule6(clone)) && CloseParenthesis(clone) && (o.update(clone), _result);
              }
              function _mutator(x, o, i, line) {
                var clone, left;
                clone = o.clone(o.cloneScope());
                left = o.tmp(i, getTmpId(), "x");
                clone.scope.add(left, false, Type.any);
                return mutateFunction(
                  o["function"](
                    i,
                    [clone.param(i, left)],
                    convertInvocationOrAccess(
                      false,
                      { type: "normal", existential: false, node: left, generic: [] },
                      x,
                      o,
                      i
                    ).rescope(clone.scope.id, clone),
                    true,
                    false
                  ),
                  o,
                  i,
                  line
                );
              }
              return named(_rule7 != null && _rule7.parserName || "<unknown>", function (o) {
                var index, line, result;
                index = o.index;
                line = o.line;
                result = _rule7(o);
                if (!result) {
                  return false;
                } else {
                  return _mutator(result, o, index, line);
                }
              });
            }());
          }());
          return function (o) {
            return _rule2(o) || _rule3(o) || CustomOperatorCloseParenthesis(o) || _rule4(o) || _rule5(o);
          };
        }());
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return OpenParenthesis(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }()));
      MaybeSpreadToken = named("MaybeSpreadToken", (function () {
        function _rule(o) {
          var clone;
          clone = o.clone();
          return Space(clone) && Period(clone) && Period(clone) && Period(clone) && (o.update(clone), "...");
        }
        return named(__strnum(_rule != null && _rule.parserName || "<unknown>") + "?", function (o) {
          return _rule(o) || true;
        });
      }()));
      SpreadOrExpression = named("SpreadOrExpression", (function () {
        function _rule(o) {
          var _result, clone;
          clone = o.clone();
          _result = {};
          return (_result.spread = MaybeSpreadToken(clone)) && (_result.node = Expression(clone)) && (o.update(clone), _result);
        }
        function _mutator(x, o, i) {
          if (x.spread === "...") {
            return o.spread(i, x.node.doWrap(o));
          } else {
            return x.node;
          }
        }
        return named(_rule != null && _rule.parserName || "<unknown>", function (o) {
          var index, line, result;
          index = o.index;
          line = o.line;
          result = _rule(o);
          if (!result) {
            return false;
          } else {
            return _mutator(result, o, index, line);
          }
        });
      }()));
      ArrayLiteral = named("ArrayLiteral", preventUnclosedObjectLiteral((function () {
        var _rule, _rule2;
        _rule = (function () {
          var _rule3;
          _rule3 = (function () {
            var _rule4;
            _rule4 = (function () {
              function _rule5(o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return Comma(clone) && (_result = SpreadOrExpression(clone)) && (o.update(clone), _result);
              }
              return named(__strnum(_rule5 != null && _rule5.parserName || "<unknown>") + "*", function (o) {
                var clone, item, result;
                clone = o.clone();
                result = [];
                while (item = _rule5(clone)) {
                  result.push(item);
                }
                o.update(clone);
                return result;
              });
            }());
            return (function () {
              function _rule5(o) {
                var _result, clone;
                clone = o.clone();
                _result = {};
                return (_result.head = SpreadOrExpression(clone)) && (_result.tail = _rule4(clone)) && MaybeComma(clone) && (o.update(clone), _result);
              }
              function _mutator(x) {
                return [x.head].concat(__toArray(x.tail));
              }
              return named(_rule5 != null && _rule5.parserName || "<unknown>", function (o) {
                var index, line, result;
                index = o.index;
                line = o.line;
                result = _rule5(o);
                if (!result) {
                  return false;
                } else {
                  return _mutator(result, o, index, line);
                }
              });
            }());
          }());
          function _missing() {
            return [];
          }
          return named(__strnum(_rule3 != null && _rule3.parserName || "<unknown>") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return _rule3(o) || _missing(void 0, o, index, line);
          });
        }());
        _rule2 = (function () {
          var _rule3;
          _rule3 = (function () {
            var _rule4;
            _rule4 = (function () {
              var _rule5;
              _rule5 = (function () {
                var _rule6;
                _rule6 = (function () {
                  function _rule7(o) {
                    var _result, clone;
                    clone = o.clone();
                    _result = void 0;
                    return CommaOrNewlineWithCheckIndent(clone) && (_result = SpreadOrExpression(clone)) && (o.update(clone), _result);
                  }
                  return named(__strnum(_rule7 != null && _rule7.parserName || "<unknown>") + "*", function (o) {
                    var clone, item, result;
                    clone = o.clone();
                    result = [];
                    while (item = _rule7(clone)) {
                      result.push(item);
                    }
                    o.update(clone);
                    return result;
                  });
                }());
                return (function () {
                  function _rule7(o) {
                    var _result, clone;
                    clone = o.clone();
                    _result = {};
                    return CheckIndent(clone) && (_result.head = SpreadOrExpression(clone)) && (_result.tail = _rule6(clone)) && (o.update(clone), _result);
                  }
                  function _mutator(x) {
                    return [x.head].concat(__toArray(x.tail));
                  }
                  return named(_rule7 != null && _rule7.parserName || "<unknown>", function (o) {
                    var index, line, result;
                    index = o.index;
                    line = o.line;
                    result = _rule7(o);
                    if (!result) {
                      return false;
                    } else {
                      return _mutator(result, o, index, line);
                    }
                  });
                }());
              }());
              function _missing2() {
                return [];
              }
              return named(__strnum(_rule5 != null && _rule5.parserName || "<unknown>") + "?", function (o) {
                var index, line;
                index = o.index;
                line = o.line;
                return _rule5(o) || _missing2(void 0, o, index, line);
              });
            }());
            return function (o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return SomeEmptyLines(clone) && MaybeAdvance(clone) && (_result = _rule4(clone)) && EmptyLines(clone) && MaybeCommaOrNewline(clone) && PopIndent(clone) && (o.update(clone), _result);
            };
          }());
          function _missing() {
            return [];
          }
          return named(__strnum(_rule3 != null && _rule3.parserName || "<unknown>") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return _rule3(o) || _missing(void 0, o, index, line);
          });
        }());
        return (function () {
          function _rule3(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return OpenSquareBracket(clone) && Space(clone) && (_result.first = _rule(clone)) && (_result.rest = _rule2(clone)) && CloseSquareBracket(clone) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            return o.array(i, __toArray(x.first).concat(__toArray(x.rest)));
          }
          return named(_rule3 != null && _rule3.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule3(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }())));
      SetLiteralToken = cache(named("SetLiteralToken", function (o) {
        var clone;
        clone = o.clone();
        return Space(clone) && PercentSign(clone) && OpenSquareBracketChar(clone) && (o.update(clone), true);
      }));
      SetLiteral = named("SetLiteral", (function () {
        var _backend;
        _backend = (function () {
          function _rule(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return Space(clone) && PercentSign(clone) && (_result = ArrayLiteral(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i, line) {
            var constructSet;
            constructSet = o.macros.getByLabel("constructSet");
            if (!constructSet) {
              throw Error("Cannot use literal set until the construct-set macro has been defined");
            }
            return constructSet.func(
              { op: "", node: x },
              o,
              i,
              line
            );
          }
          return named(_rule != null && _rule.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!SetLiteralToken(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      BracketedObjectKey = named("BracketedObjectKey", function (o) {
        var _result, clone;
        clone = o.clone();
        _result = void 0;
        return OpenSquareBracket(clone) && (_result = ExpressionOrAssignment(clone)) && CloseSquareBracket(clone) && (o.update(clone), _result);
      });
      ConstObjectKey = named("ConstObjectKey", (function () {
        var _rule;
        _rule = (function () {
          function _mutator(x, o, i) {
            return o["const"](i, String(x.value));
          }
          return named(NumberLiteral != null && NumberLiteral.parserName || "NumberLiteral", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = NumberLiteral(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
        return function (o) {
          return StringLiteral(o) || _rule(o) || IdentifierNameConst(o);
        };
      }()));
      ObjectKey = cache(named("ObjectKey", function (o) {
        return BracketedObjectKey(o) || ConstObjectKey(o);
      }));
      Colon = cache(named("Colon", (function () {
        var _rule;
        _rule = named("!" + __strnum(ColonChar != null && ColonChar.parserName || "ColonChar"), function (o) {
          return !ColonChar(o.clone());
        });
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Space(clone) && (_result = ColonChar(clone)) && _rule(clone) && (o.update(clone), _result);
        };
      }())));
      NotColon = cache(named("NotColon", function (o) {
        return !Colon(o.clone());
      }));
      ObjectKeyColon = cache(named("ObjectKeyColon", (function () {
        var _rule;
        _rule = (function () {
          var _rule2;
          _rule2 = (function () {
            function _rule3(o) {
              if (o.data.charCodeAt(o.index) === 61) {
                o.index = __num(o.index) + 1;
                return 61;
              } else {
                o.fail('"="');
                return false;
              }
            }
            return named("!" + __strnum(_rule3 != null && _rule3.parserName || "<unknown>"), function (o) {
              return !_rule3(o.clone());
            });
          }());
          return function (o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return (_result = ObjectKey(clone)) && Colon(clone) && _rule2(clone) && (o.update(clone), _result);
          };
        }());
        return function (o) {
          var clone, result;
          clone = o.clone();
          clone.preventFail();
          result = _rule(clone);
          clone.unpreventFail();
          if (result) {
            o.update(clone);
            return result;
          } else {
            o.fail('key ":"');
            return false;
          }
        };
      }())));
      ObjectKeyNotColon = cache(named("ObjectKeyNotColon", function (o) {
        var _result, clone;
        clone = o.clone();
        _result = void 0;
        return (_result = ObjectKey(clone)) && NotColon(clone) && (o.update(clone), _result);
      }));
      DualObjectKey = named("DualObjectKey", (function () {
        function _backend(o) {
          var _result, clone;
          clone = o.clone();
          _result = {};
          return (_result.key = ObjectKeyColon(clone)) && (_result.value = Expression(clone)) && (o.update(clone), _result);
        }
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!ObjectKeyColon(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      GetSetToken = cache(named("GetSetToken", (function () {
        var _rule, _rule2;
        _rule = word("get");
        _rule2 = word("set");
        return function (o) {
          return _rule(o) || _rule2(o);
        };
      }())));
      PropertyObjectKeyColon = cache(named("PropertyObjectKeyColon", (function () {
        var _rule;
        _rule = (function () {
          var _rule2;
          _rule2 = word("property");
          return function (o) {
            return _rule2(o) || GetSetToken(o);
          };
        }());
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = {};
          return (_result.property = _rule(clone)) && Space(clone) && (_result.key = ObjectKeyColon(clone)) && (o.update(clone), _result);
        };
      }())));
      PropertyDualObjectKey = named("PropertyDualObjectKey", (function () {
        var _backend;
        _backend = (function () {
          function _rule(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.propertyKey = PropertyObjectKeyColon(clone)) && (_result.value = Expression(clone)) && (o.update(clone), _result);
          }
          function _mutator(x) {
            return { key: x.propertyKey.key, value: x.value, property: x.propertyKey.property };
          }
          return named(_rule != null && _rule.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!PropertyObjectKeyColon(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      MethodDeclaration = named("MethodDeclaration", (function () {
        var _rule;
        _rule = (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return (_result = GetSetToken(clone)) && Space(clone) && (o.update(clone), _result);
          }
          return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return _rule2(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
          });
        }());
        return (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.property = _rule(clone)) && (_result.key = ObjectKeyNotColon(clone)) && (_result.value = FunctionDeclaration(clone)) && (o.update(clone), _result);
          }
          function _mutator(x) {
            return {
              key: x.key,
              value: x.value,
              property: x.property !== NOTHING ? x.property : void 0
            };
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      PropertyOrDualObjectKey = named("PropertyOrDualObjectKey", function (o) {
        return PropertyDualObjectKey(o) || DualObjectKey(o);
      });
      PropertyOrDualObjectKeyOrMethodDeclaration = named("PropertyOrDualObjectKeyOrMethodDeclaration", function (o) {
        return PropertyOrDualObjectKey(o) || MethodDeclaration(o);
      });
      IdentifierOrSimpleAccessStart = named("IdentifierOrSimpleAccessStart", (function () {
        var _rule, _rule2, _rule3;
        _rule = (function () {
          function _rule4(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.parent = ThisOrShorthandLiteralPeriod(clone)) && (_result.child = IdentifierNameConstOrNumberLiteral(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            return o.access(i, x.parent, x.child);
          }
          return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule4(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
        _rule2 = (function () {
          function _rule4(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.parent = ThisOrShorthandLiteral(clone)) && DoubleColon(clone) && (_result.child = IdentifierNameConstOrNumberLiteral(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            return o.access(
              i,
              o.access(i, x.parent, o["const"](i, "prototype")),
              x.child
            );
          }
          return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule4(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
        _rule3 = (function () {
          var _rule4;
          _rule4 = named(__strnum(DoubleColon != null && DoubleColon.parserName || "DoubleColon") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return DoubleColon(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
          });
          return (function () {
            function _rule5(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.parent = ThisOrShorthandLiteral(clone)) && (_result.isProto = _rule4(clone)) && OpenSquareBracketChar(clone) && (_result.child = Expression(clone)) && CloseSquareBracket(clone) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              var parent;
              parent = x.parent;
              if (x.isProto !== NOTHING) {
                parent = o.access(i, parent, o["const"](i, "prototype"));
              }
              return o.access(i, parent, x.child);
            }
            return named(_rule5 != null && _rule5.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule5(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        return function (o) {
          return Identifier(o) || _rule(o) || _rule2(o) || _rule3(o);
        };
      }()));
      IdentifierOrSimpleAccessPart = named("IdentifierOrSimpleAccessPart", (function () {
        var _rule, _rule2;
        _rule = (function () {
          function _rule3(o) {
            return Period(o) || DoubleColon(o);
          }
          return (function () {
            function _rule4(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.type = _rule3(clone)) && (_result.child = IdentifierNameConstOrNumberLiteral(clone)) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              var child, isProto;
              isProto = x.type === "::";
              child = x.child;
              return function (parent) {
                return o.access(
                  i,
                  isProto
                    ? o.access(i, parent, o["const"](i, "prototype"))
                    : parent,
                  child
                );
              };
            }
            return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule4(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        _rule2 = (function () {
          var _rule3;
          _rule3 = named(__strnum(DoubleColon != null && DoubleColon.parserName || "DoubleColon") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return DoubleColon(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
          });
          return (function () {
            function _rule4(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.type = _rule3(clone)) && OpenSquareBracketChar(clone) && (_result.child = Expression(clone)) && CloseSquareBracket(clone) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              var child, isProto;
              isProto = x.type !== NOTHING;
              child = x.child;
              return function (parent) {
                return o.access(
                  i,
                  isProto
                    ? o.access(i, parent, o["const"](i, "prototype"))
                    : parent,
                  child
                );
              };
            }
            return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule4(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        return function (o) {
          return _rule(o) || _rule2(o);
        };
      }()));
      IdentifierOrSimpleAccess = cache(named("IdentifierOrSimpleAccess", (function () {
        var _rule;
        _rule = named(__strnum(IdentifierOrSimpleAccessPart != null && IdentifierOrSimpleAccessPart.parserName || "IdentifierOrSimpleAccessPart") + "*", function (o) {
          var clone, item, result;
          clone = o.clone();
          result = [];
          while (item = IdentifierOrSimpleAccessPart(clone)) {
            result.push(item);
          }
          o.update(clone);
          return result;
        });
        return (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.head = IdentifierOrSimpleAccessStart(clone)) && (_result.tail = _rule(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            var _arr, _i, _len, creator, current;
            current = x.head;
            for (_arr = __toArray(x.tail), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              creator = _arr[_i];
              current = creator(current);
            }
            return current;
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }())));
      SingularObjectKey = named("SingularObjectKey", (function () {
        var _rule, _rule2, _rule3, _rule4, _rule5;
        _rule = (function () {
          function _rule6(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return (_result = IdentifierOrSimpleAccess(clone)) && NotColon(clone) && (o.update(clone), _result);
          }
          function _mutator(ident, o, i) {
            var key;
            if (ident instanceof AccessNode) {
              key = ident.child;
            } else if (ident instanceof IdentNode) {
              key = o["const"](i, ident.name);
            } else {
              key = o.error("Unknown ident type: " + __typeof(ident));
            }
            return { key: key, value: ident };
          }
          return named(_rule6 != null && _rule6.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule6(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
        _rule2 = (function () {
          function _rule6(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return (_result = ConstantLiteral(clone)) && NotColon(clone) && (o.update(clone), _result);
          }
          function _mutator(node, o, i) {
            var key;
            if (node.isConst() && typeof node.constValue() !== "string") {
              key = o["const"](i, String(node.constValue()));
            } else {
              key = node;
            }
            return { key: key, value: node };
          }
          return named(_rule6 != null && _rule6.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule6(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
        _rule3 = (function () {
          function _rule6(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return (_result = ThisLiteral(clone)) && NotColon(clone) && (o.update(clone), _result);
          }
          function _mutator(node, o, i) {
            return {
              key: o["const"](i, "this"),
              value: node
            };
          }
          return named(_rule6 != null && _rule6.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule6(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
        _rule4 = (function () {
          function _rule6(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return (_result = ArgumentsLiteral(clone)) && NotColon(clone) && (o.update(clone), _result);
          }
          function _mutator(node, o, i) {
            return {
              key: o["const"](i, "arguments"),
              value: node
            };
          }
          return named(_rule6 != null && _rule6.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule6(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
        _rule5 = (function () {
          function _rule6(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return (_result = BracketedObjectKey(clone)) && NotColon(clone) && (o.update(clone), _result);
          }
          function _mutator(node) {
            return { key: node, value: node };
          }
          return named(_rule6 != null && _rule6.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule6(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
        return function (o) {
          return _rule(o) || _rule2(o) || _rule3(o) || _rule4(o) || _rule5(o);
        };
      }()));
      KeyValuePair = cache(named("KeyValuePair", (function () {
        var _rule;
        _rule = (function () {
          var _rule2;
          _rule2 = named(__strnum(PlusOrMinus != null && PlusOrMinus.parserName || "PlusOrMinus") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return PlusOrMinus(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
          });
          return (function () {
            function _rule3(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return Space(clone) && (_result.bool = _rule2(clone)) && (_result.pair = SingularObjectKey(clone)) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              if (x.bool !== NOTHING) {
                return {
                  key: x.pair.key,
                  value: o["const"](i, x.bool === 43),
                  property: x.pair.property
                };
              } else {
                return x.pair;
              }
            }
            return named(_rule3 != null && _rule3.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule3(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        return function (o) {
          return PropertyOrDualObjectKeyOrMethodDeclaration(o) || _rule(o);
        };
      }())));
      ObjectLiteral = named("ObjectLiteral", (function () {
        var _rule, _rule2, _rule3;
        _rule = (function () {
          var _rule4;
          _rule4 = (function () {
            var _rule5, _rule6, _rule7;
            _rule5 = word("extends");
            _rule6 = preventUnclosedObjectLiteral(function (o) {
              return Logic(o);
            });
            _rule7 = (function () {
              function _rule8(o) {
                return Newline(o.clone());
              }
              function _rule9(o) {
                return CloseCurlyBrace(o.clone());
              }
              return function (o) {
                return Comma(o) || _rule8(o) || _rule9(o);
              };
            }());
            return function (o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return _rule5(clone) && (_result = _rule6(clone)) && Space(clone) && _rule7(clone) && (o.update(clone), _result);
            };
          }());
          return named(__strnum(_rule4 != null && _rule4.parserName || "<unknown>") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return _rule4(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
          });
        }());
        _rule2 = (function () {
          var _rule4;
          _rule4 = (function () {
            var _rule5;
            _rule5 = (function () {
              function _rule6(o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return Comma(clone) && (_result = KeyValuePair(clone)) && (o.update(clone), _result);
              }
              return named(__strnum(_rule6 != null && _rule6.parserName || "<unknown>") + "*", function (o) {
                var clone, item, result;
                clone = o.clone();
                result = [];
                while (item = _rule6(clone)) {
                  result.push(item);
                }
                o.update(clone);
                return result;
              });
            }());
            return (function () {
              function _rule6(o) {
                var _result, clone;
                clone = o.clone();
                _result = {};
                return (_result.head = KeyValuePair(clone)) && (_result.tail = _rule5(clone)) && MaybeComma(clone) && (o.update(clone), _result);
              }
              function _mutator(x) {
                return [x.head].concat(__toArray(x.tail));
              }
              return named(_rule6 != null && _rule6.parserName || "<unknown>", function (o) {
                var index, line, result;
                index = o.index;
                line = o.line;
                result = _rule6(o);
                if (!result) {
                  return false;
                } else {
                  return _mutator(result, o, index, line);
                }
              });
            }());
          }());
          function _missing() {
            return [];
          }
          return named(__strnum(_rule4 != null && _rule4.parserName || "<unknown>") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return _rule4(o) || _missing(void 0, o, index, line);
          });
        }());
        _rule3 = (function () {
          var _rule4;
          _rule4 = (function () {
            var _rule5;
            _rule5 = (function () {
              var _rule6;
              _rule6 = (function () {
                var _rule7;
                _rule7 = (function () {
                  function _rule8(o) {
                    var _result, clone;
                    clone = o.clone();
                    _result = void 0;
                    return CommaOrNewlineWithCheckIndent(clone) && (_result = KeyValuePair(clone)) && (o.update(clone), _result);
                  }
                  return named(__strnum(_rule8 != null && _rule8.parserName || "<unknown>") + "*", function (o) {
                    var clone, item, result;
                    clone = o.clone();
                    result = [];
                    while (item = _rule8(clone)) {
                      result.push(item);
                    }
                    o.update(clone);
                    return result;
                  });
                }());
                return (function () {
                  function _rule8(o) {
                    var _result, clone;
                    clone = o.clone();
                    _result = {};
                    return CheckIndent(clone) && (_result.head = KeyValuePair(clone)) && (_result.tail = _rule7(clone)) && (o.update(clone), _result);
                  }
                  function _mutator(x) {
                    return [x.head].concat(__toArray(x.tail));
                  }
                  return named(_rule8 != null && _rule8.parserName || "<unknown>", function (o) {
                    var index, line, result;
                    index = o.index;
                    line = o.line;
                    result = _rule8(o);
                    if (!result) {
                      return false;
                    } else {
                      return _mutator(result, o, index, line);
                    }
                  });
                }());
              }());
              function _missing2() {
                return [];
              }
              return named(__strnum(_rule6 != null && _rule6.parserName || "<unknown>") + "?", function (o) {
                var index, line;
                index = o.index;
                line = o.line;
                return _rule6(o) || _missing2(void 0, o, index, line);
              });
            }());
            return function (o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return SomeEmptyLines(clone) && MaybeAdvance(clone) && (_result = _rule5(clone)) && EmptyLines(clone) && MaybeCommaOrNewline(clone) && PopIndent(clone) && (o.update(clone), _result);
            };
          }());
          function _missing() {
            return [];
          }
          return named(__strnum(_rule4 != null && _rule4.parserName || "<unknown>") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return _rule4(o) || _missing(void 0, o, index, line);
          });
        }());
        return (function () {
          function _rule4(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return OpenCurlyBrace(clone) && Space(clone) && (_result.prototype = _rule(clone)) && (_result.first = _rule2(clone)) && (_result.rest = _rule3(clone)) && CloseCurlyBrace(clone) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            return o.object(i, __toArray(x.first).concat(__toArray(x.rest)), x.prototype !== NOTHING ? x.prototype : void 0);
          }
          return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule4(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      MapKeyValuePair = DualObjectKey;
      MapLiteralToken = cache(named("MapLiteralToken", function (o) {
        var clone;
        clone = o.clone();
        return Space(clone) && PercentSign(clone) && OpenCurlyBraceChar(clone) && (o.update(clone), true);
      }));
      MapLiteral = named("MapLiteral", (function () {
        var _backend;
        _backend = (function () {
          var _rule, _rule2;
          _rule = (function () {
            var _rule3;
            _rule3 = (function () {
              var _rule4;
              _rule4 = (function () {
                function _rule5(o) {
                  var _result, clone;
                  clone = o.clone();
                  _result = void 0;
                  return Comma(clone) && (_result = MapKeyValuePair(clone)) && (o.update(clone), _result);
                }
                return named(__strnum(_rule5 != null && _rule5.parserName || "<unknown>") + "*", function (o) {
                  var clone, item, result;
                  clone = o.clone();
                  result = [];
                  while (item = _rule5(clone)) {
                    result.push(item);
                  }
                  o.update(clone);
                  return result;
                });
              }());
              return (function () {
                function _rule5(o) {
                  var _result, clone;
                  clone = o.clone();
                  _result = {};
                  return (_result.head = MapKeyValuePair(clone)) && (_result.tail = _rule4(clone)) && MaybeComma(clone) && (o.update(clone), _result);
                }
                function _mutator(x) {
                  return [x.head].concat(__toArray(x.tail));
                }
                return named(_rule5 != null && _rule5.parserName || "<unknown>", function (o) {
                  var index, line, result;
                  index = o.index;
                  line = o.line;
                  result = _rule5(o);
                  if (!result) {
                    return false;
                  } else {
                    return _mutator(result, o, index, line);
                  }
                });
              }());
            }());
            function _missing() {
              return [];
            }
            return named(__strnum(_rule3 != null && _rule3.parserName || "<unknown>") + "?", function (o) {
              var index, line;
              index = o.index;
              line = o.line;
              return _rule3(o) || _missing(void 0, o, index, line);
            });
          }());
          _rule2 = (function () {
            var _rule3;
            _rule3 = (function () {
              var _rule4;
              _rule4 = (function () {
                var _rule5;
                _rule5 = (function () {
                  var _rule6;
                  _rule6 = (function () {
                    function _rule7(o) {
                      var _result, clone;
                      clone = o.clone();
                      _result = void 0;
                      return CommaOrNewlineWithCheckIndent(clone) && (_result = MapKeyValuePair(clone)) && (o.update(clone), _result);
                    }
                    return named(__strnum(_rule7 != null && _rule7.parserName || "<unknown>") + "*", function (o) {
                      var clone, item, result;
                      clone = o.clone();
                      result = [];
                      while (item = _rule7(clone)) {
                        result.push(item);
                      }
                      o.update(clone);
                      return result;
                    });
                  }());
                  return (function () {
                    function _rule7(o) {
                      var _result, clone;
                      clone = o.clone();
                      _result = {};
                      return CheckIndent(clone) && (_result.head = MapKeyValuePair(clone)) && (_result.tail = _rule6(clone)) && (o.update(clone), _result);
                    }
                    function _mutator(x) {
                      return [x.head].concat(__toArray(x.tail));
                    }
                    return named(_rule7 != null && _rule7.parserName || "<unknown>", function (o) {
                      var index, line, result;
                      index = o.index;
                      line = o.line;
                      result = _rule7(o);
                      if (!result) {
                        return false;
                      } else {
                        return _mutator(result, o, index, line);
                      }
                    });
                  }());
                }());
                function _missing2() {
                  return [];
                }
                return named(__strnum(_rule5 != null && _rule5.parserName || "<unknown>") + "?", function (o) {
                  var index, line;
                  index = o.index;
                  line = o.line;
                  return _rule5(o) || _missing2(void 0, o, index, line);
                });
              }());
              return function (o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return SomeEmptyLines(clone) && MaybeAdvance(clone) && (_result = _rule4(clone)) && EmptyLines(clone) && MaybeCommaOrNewline(clone) && PopIndent(clone) && (o.update(clone), _result);
              };
            }());
            function _missing() {
              return [];
            }
            return named(__strnum(_rule3 != null && _rule3.parserName || "<unknown>") + "?", function (o) {
              var index, line;
              index = o.index;
              line = o.line;
              return _rule3(o) || _missing(void 0, o, index, line);
            });
          }());
          return (function () {
            function _rule3(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return MapLiteralToken(clone) && Space(clone) && (_result.first = _rule(clone)) && (_result.rest = _rule2(clone)) && CloseCurlyBrace(clone) && (o.update(clone), _result);
            }
            function _mutator(x, o, i, line) {
              var constructMap;
              constructMap = o.macros.getByLabel("constructMap");
              if (!constructMap) {
                throw Error("Cannot use literal map until the construct-map macro has been defined");
              }
              return constructMap.func(
                {
                  op: "",
                  node: o.object(i, __toArray(x.first).concat(__toArray(x.rest)))
                },
                o,
                i,
                line
              );
            }
            return named(_rule3 != null && _rule3.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule3(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!MapLiteralToken(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      Body = named("Body", function (o) {
        var _result, clone;
        clone = o.clone();
        _result = void 0;
        return Space(clone) && Newline(clone) && EmptyLines(clone) && Advance(clone) && (_result = Block(clone)) && PopIndent(clone) && (o.update(clone), _result);
      });
      DedentedBody = named("DedentedBody", (function () {
        var _rule;
        _rule = (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return Newline(clone) && EmptyLines(clone) && (_result = Block(clone)) && (o.update(clone), _result);
          }
          return function (o) {
            return _rule2(o) || Nothing(o);
          };
        }());
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Space(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }()));
      DeclareEqualSymbol = named("DeclareEqualSymbol", (function () {
        function _rule(o) {
          if (o.data.charCodeAt(o.index) === 61) {
            o.index = __num(o.index) + 1;
            return 61;
          } else {
            o.fail('"="');
            return false;
          }
        }
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Space(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }()));
      ArrayType = cache(named("ArrayType", (function () {
        var _rule;
        _rule = named(__strnum(typeof TypeReference !== "undefined" && TypeReference !== null && TypeReference.parserName || "TypeReference") + "?", function (o) {
          var index, line;
          index = o.index;
          line = o.line;
          return TypeReference(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
        });
        return (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return OpenSquareBracket(clone) && (_result = _rule(clone)) && CloseSquareBracket(clone) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            var arrayIdent;
            arrayIdent = o.ident(i, "Array");
            if (x === NOTHING) {
              return arrayIdent;
            } else {
              return o.typeGeneric(i, arrayIdent, [x]);
            }
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }())));
      ObjectTypePair = named("ObjectTypePair", function (o) {
        var _result, clone;
        clone = o.clone();
        _result = {};
        return (_result.key = ConstObjectKey(clone)) && Colon(clone) && (_result.value = TypeReference(clone)) && (o.update(clone), _result);
      });
      ObjectType = cache(named("ObjectType", (function () {
        var _rule;
        _rule = (function () {
          var _rule2;
          _rule2 = (function () {
            var _rule3;
            _rule3 = (function () {
              function _rule4(o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return CommaOrNewline(clone) && (_result = ObjectTypePair(clone)) && (o.update(clone), _result);
              }
              return named(__strnum(_rule4 != null && _rule4.parserName || "<unknown>") + "*", function (o) {
                var clone, item, result;
                clone = o.clone();
                result = [];
                while (item = _rule4(clone)) {
                  result.push(item);
                }
                o.update(clone);
                return result;
              });
            }());
            return (function () {
              function _rule4(o) {
                var _result, clone;
                clone = o.clone();
                _result = {};
                return (_result.head = ObjectTypePair(clone)) && (_result.tail = _rule3(clone)) && MaybeComma(clone) && (o.update(clone), _result);
              }
              function _mutator(x) {
                return [x.head].concat(__toArray(x.tail));
              }
              return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
                var index, line, result;
                index = o.index;
                line = o.line;
                result = _rule4(o);
                if (!result) {
                  return false;
                } else {
                  return _mutator(result, o, index, line);
                }
              });
            }());
          }());
          function _missing() {
            return [];
          }
          return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return _rule2(o) || _missing(void 0, o, index, line);
          });
        }());
        return (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return OpenCurlyBrace(clone) && (_result = _rule(clone)) && CloseCurlyBrace(clone) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            var _arr, _i, _len, key, keys, keyValue;
            if (x.length === 0) {
              return o.ident(i, "Object");
            } else {
              keys = [];
              for (_arr = __toArray(x), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                key = _arr[_i].key;
                if (!(key instanceof ConstNode)) {
                  o.error("Expected a constant key, got " + __typeof(key));
                } else {
                  keyValue = String(key.value);
                  if (__in(keyValue, keys)) {
                    o.error("Duplicate object key: " + keyValue);
                  }
                  keys.push(keyValue);
                }
              }
              return o.typeObject(i, x);
            }
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }())));
      _inFunctionTypeParams = Stack(false);
      inFunctionTypeParams = makeAlterStack(_inFunctionTypeParams, true);
      notInFunctionTypeParams = makeAlterStack(_inFunctionTypeParams, false);
      FunctionType = named("FunctionType", (function () {
        var _rule, _rule2, _rule3;
        _rule = (function () {
          var _rule4, _rule5;
          _rule4 = (function () {
            var _rule6;
            _rule6 = (function () {
              function _rule7(o) {
                var clone;
                clone = o.clone();
                return CommaOrNewline(clone) && TypeReference(clone) && (o.update(clone), true);
              }
              return named(__strnum(_rule7 != null && _rule7.parserName || "<unknown>") + "*", function (o) {
                var clone, item, result;
                clone = o.clone();
                result = [];
                while (item = _rule7(clone)) {
                  result.push(item);
                }
                o.update(clone);
                return result;
              });
            }());
            return function (o) {
              var clone;
              clone = o.clone();
              return OpenParenthesis(clone) && TypeReference(clone) && _rule6(clone) && CloseParenthesis(clone) && (o.update(clone), true);
            };
          }());
          _rule5 = inFunctionTypeParams(function (o) {
            return TypeReference(o);
          });
          return function (o) {
            return _rule4(o) || _rule5(o) || Nothing(o);
          };
        }());
        _rule2 = (function () {
          function _rule4(o) {
            if (o.data.charCodeAt(o.index) === 62) {
              o.index = __num(o.index) + 1;
              return 62;
            } else {
              o.fail('">"');
              return false;
            }
          }
          return function (o) {
            var clone;
            clone = o.clone();
            return Space(clone) && Minus(clone) && _rule4(clone) && (o.update(clone), true);
          };
        }());
        _rule3 = named(__strnum(typeof TypeReference !== "undefined" && TypeReference !== null && TypeReference.parserName || "TypeReference") + "?", function (o) {
          var index, line;
          index = o.index;
          line = o.line;
          return TypeReference(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
        });
        return (function () {
          function _rule4(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return _rule(clone) && _rule2(clone) && (_result = _rule3(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            var functionIdent;
            functionIdent = o.ident(i, "Function");
            if (x === NOTHING) {
              return functionIdent;
            } else {
              return o.typeGeneric(i, functionIdent, [x]);
            }
          }
          return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule4(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      NonUnionType = named("NonUnionType", (function () {
        var _rule2, _rule3;
        function _rule(o) {
          if (!_inFunctionTypeParams.peek()) {
            return FunctionType(o);
          }
        }
        _rule2 = (function () {
          var _rule4;
          _rule4 = notInFunctionTypeParams(function (o) {
            return TypeReference(o);
          });
          return function (o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return OpenParenthesis(clone) && (_result = _rule4(clone)) && CloseParenthesis(clone) && (o.update(clone), _result);
          };
        }());
        _rule3 = (function () {
          var _rule4;
          _rule4 = (function () {
            var _rule5;
            _rule5 = (function () {
              var _backend;
              _backend = (function () {
                var _rule6;
                _rule6 = (function () {
                  function _rule8(o) {
                    var _result, clone;
                    clone = o.clone();
                    _result = void 0;
                    return Comma(clone) && (_result = TypeReference(clone)) && (o.update(clone), _result);
                  }
                  return named(__strnum(_rule8 != null && _rule8.parserName || "<unknown>") + "*", function (o) {
                    var clone, item, result;
                    clone = o.clone();
                    result = [];
                    while (item = _rule8(clone)) {
                      result.push(item);
                    }
                    o.update(clone);
                    return result;
                  });
                }());
                function _rule7(o) {
                  if (o.data.charCodeAt(o.index) === 62) {
                    o.index = __num(o.index) + 1;
                    return 62;
                  } else {
                    o.fail('">"');
                    return false;
                  }
                }
                return (function () {
                  function _rule8(o) {
                    var _result, clone;
                    clone = o.clone();
                    _result = {};
                    return LessThanSign(clone) && (_result.head = TypeReference(clone)) && (_result.tail = _rule6(clone)) && Space(clone) && _rule7(clone) && (o.update(clone), _result);
                  }
                  function _mutator(x) {
                    return [x.head].concat(__toArray(x.tail));
                  }
                  return named(_rule8 != null && _rule8.parserName || "<unknown>", function (o) {
                    var index, line, result;
                    index = o.index;
                    line = o.line;
                    result = _rule8(o);
                    if (!result) {
                      return false;
                    } else {
                      return _mutator(result, o, index, line);
                    }
                  });
                }());
              }());
              return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
                var result;
                if (!LessThanSign(o.clone())) {
                  return false;
                } else {
                  result = _backend(o);
                  if (!result) {
                    throw SHORT_CIRCUIT;
                  }
                  return result;
                }
              });
            }());
            function _missing() {
              return [];
            }
            return named(__strnum(_rule5 != null && _rule5.parserName || "<unknown>") + "?", function (o) {
              var index, line;
              index = o.index;
              line = o.line;
              return _rule5(o) || _missing(void 0, o, index, line);
            });
          }());
          return (function () {
            function _rule5(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.base = IdentifierOrSimpleAccess(clone)) && (_result.args = _rule4(clone)) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              if (x.args.length === 0) {
                return x.base;
              } else {
                return o.typeGeneric(i, x.base, x.args);
              }
            }
            return named(_rule5 != null && _rule5.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule5(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        return function (o) {
          return _rule(o) || _rule2(o) || ArrayType(o) || ObjectType(o) || _rule3(o) || VoidLiteral(o) || NullLiteral(o);
        };
      }()));
      TypeReference = cache(named("TypeReference", (function () {
        var _rule;
        _rule = (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return Pipe(clone) && (_result = NonUnionType(clone)) && (o.update(clone), _result);
          }
          return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "*", function (o) {
            var clone, item, result;
            clone = o.clone();
            result = [];
            while (item = _rule2(clone)) {
              result.push(item);
            }
            o.update(clone);
            return result;
          });
        }());
        return (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.head = NonUnionType(clone)) && (_result.tail = _rule(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            var j, type, types;
            types = [x.head].concat(__toArray(x.tail));
            if (types.length === 1) {
              return types[0];
            } else {
              for (j = types.length; j--; ) {
                type = types[j];
                if (type instanceof TypeUnionNode) {
                  types.splice.apply(types, [j, 1].concat(__toArray(type.types)));
                }
              }
              if (types.length === 1) {
                return types[0];
              } else {
                return o.typeUnion(i, types);
              }
            }
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }())));
      AsToken = cache(named("AsToken", word("as")));
      MaybeAsType = named("MaybeAsType", (function () {
        var _rule;
        _rule = (function () {
          function _backend(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return AsToken(clone) && (_result = TypeReference(clone)) && (o.update(clone), _result);
          }
          return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
            var result;
            if (!AsToken(o.clone())) {
              return false;
            } else {
              result = _backend(o);
              if (!result) {
                throw SHORT_CIRCUIT;
              }
              return result;
            }
          });
        }());
        return named(__strnum(_rule != null && _rule.parserName || "<unknown>") + "?", function (o) {
          var index, line;
          index = o.index;
          line = o.line;
          return _rule(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
        });
      }()));
      IdentifierParameter = named("IdentifierParameter", (function () {
        var _rule, _rule2, _rule3;
        _rule = (function () {
          var _rule4;
          _rule4 = word("mutable");
          return named(__strnum(_rule4 != null && _rule4.parserName || "<unknown>") + "?", function (o) {
            return _rule4(o) || true;
          });
        }());
        _rule2 = named(__strnum(ThisOrShorthandLiteralPeriod != null && ThisOrShorthandLiteralPeriod.parserName || "ThisOrShorthandLiteralPeriod") + "?", function (o) {
          var index, line;
          index = o.index;
          line = o.line;
          return ThisOrShorthandLiteralPeriod(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
        });
        _rule3 = (function () {
          function _rule4(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return DeclareEqualSymbol(clone) && (_result = Expression(clone)) && (o.update(clone), _result);
          }
          return named(__strnum(_rule4 != null && _rule4.parserName || "<unknown>") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return _rule4(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
          });
        }());
        return (function () {
          function _rule4(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.isMutable = _rule(clone)) && (_result.spread = MaybeSpreadToken(clone)) && (_result.parent = _rule2(clone)) && (_result.ident = Identifier(clone)) && (_result.asType = MaybeAsType(clone)) && (_result.defaultValue = _rule3(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            var name;
            if (x.parent !== NOTHING) {
              name = o.access(i, x.parent, o["const"](i, x.ident.name));
            } else {
              name = x.ident;
            }
            if (x.spread === "..." && x.defaultValue !== NOTHING) {
              o.error("Cannot specify a default value for a spread parameter");
            }
            return o.param(
              i,
              name,
              x.defaultValue !== NOTHING ? x.defaultValue : void 0,
              x.spread === "...",
              x.isMutable === "mutable",
              x.asType !== NOTHING ? x.asType : void 0
            );
          }
          return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule4(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      Parameter = named("Parameter", function (o) {
        return IdentifierParameter(o) || ArrayParameter(o) || ObjectParameter(o);
      });
      ParameterOrNothing = named("ParameterOrNothing", function (o) {
        return Parameter(o) || Nothing(o);
      });
      function validateSpreadParameters(params, o) {
        var _arr, _i, param, spreadCount;
        spreadCount = 0;
        for (_arr = __toArray(params), _i = _arr.length; _i--; ) {
          param = _arr[_i];
          if (param instanceof ParamNode && param.spread) {
            ++spreadCount;
            if (spreadCount > 1) {
              o.error("Cannot have more than one spread parameter");
            }
          }
        }
        return params;
      }
      function removeTrailingNothings(array) {
        if (!__isArray(array)) {
          throw TypeError("Expected array to be an Array, got " + __typeof(array));
        }
        while (array.length && array[array.length - 1] instanceof NothingNode) {
          array.pop();
        }
        return array;
      }
      ArrayParameter = named("ArrayParameter", (function () {
        var _rule;
        _rule = (function () {
          var _rule2;
          _rule2 = (function () {
            var _rule3;
            _rule3 = (function () {
              function _rule4(o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return CommaOrNewline(clone) && (_result = ParameterOrNothing(clone)) && (o.update(clone), _result);
              }
              return named(__strnum(_rule4 != null && _rule4.parserName || "<unknown>") + "*", function (o) {
                var clone, item, result;
                clone = o.clone();
                result = [];
                while (item = _rule4(clone)) {
                  result.push(item);
                }
                o.update(clone);
                return result;
              });
            }());
            return (function () {
              function _rule4(o) {
                var _result, clone;
                clone = o.clone();
                _result = {};
                return (_result.head = ParameterOrNothing(clone)) && (_result.tail = _rule3(clone)) && (o.update(clone), _result);
              }
              function _mutator(x) {
                return removeTrailingNothings([x.head].concat(__toArray(x.tail)));
              }
              return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
                var index, line, result;
                index = o.index;
                line = o.line;
                result = _rule4(o);
                if (!result) {
                  return false;
                } else {
                  return _mutator(result, o, index, line);
                }
              });
            }());
          }());
          function _missing() {
            return [];
          }
          return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return _rule2(o) || _missing(void 0, o, index, line);
          });
        }());
        return (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return OpenSquareBracket(clone) && EmptyLines(clone) && (_result = _rule(clone)) && EmptyLines(clone) && MaybeCommaOrNewline(clone) && CloseSquareBracket(clone) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            return o.arrayParam(i, validateSpreadParameters(x, o));
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      ParamDualObjectKey = named("ParamDualObjectKey", function (o) {
        var _result, clone;
        clone = o.clone();
        _result = {};
        return (_result.key = ObjectKeyColon(clone)) && (_result.value = Parameter(clone)) && (o.update(clone), _result);
      });
      ParamSingularObjectKey = named("ParamSingularObjectKey", (function () {
        function _rule(o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return (_result = IdentifierParameter(clone)) && NotColon(clone) && (o.update(clone), _result);
        }
        function _mutator(param, o, i) {
          var ident, key;
          ident = param.ident;
          if (ident instanceof IdentNode) {
            key = o["const"](i, ident.name);
          } else if (ident instanceof AccessNode) {
            key = ident.child;
          } else {
            throw Error("Unknown object key type: " + __typeof(ident));
          }
          return { key: key, value: param };
        }
        return named(_rule != null && _rule.parserName || "<unknown>", function (o) {
          var index, line, result;
          index = o.index;
          line = o.line;
          result = _rule(o);
          if (!result) {
            return false;
          } else {
            return _mutator(result, o, index, line);
          }
        });
      }()));
      KvpParameter = named("KvpParameter", function (o) {
        return ParamDualObjectKey(o) || ParamSingularObjectKey(o);
      });
      ObjectParameter = named("ObjectParameter", (function () {
        var _rule;
        _rule = (function () {
          var _rule2;
          _rule2 = (function () {
            var _rule3;
            _rule3 = (function () {
              function _rule4(o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return CommaOrNewline(clone) && (_result = KvpParameter(clone)) && (o.update(clone), _result);
              }
              return named(__strnum(_rule4 != null && _rule4.parserName || "<unknown>") + "*", function (o) {
                var clone, item, result;
                clone = o.clone();
                result = [];
                while (item = _rule4(clone)) {
                  result.push(item);
                }
                o.update(clone);
                return result;
              });
            }());
            return (function () {
              function _rule4(o) {
                var _result, clone;
                clone = o.clone();
                _result = {};
                return (_result.head = KvpParameter(clone)) && (_result.tail = _rule3(clone)) && (o.update(clone), _result);
              }
              function _mutator(x) {
                return [x.head].concat(__toArray(x.tail));
              }
              return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
                var index, line, result;
                index = o.index;
                line = o.line;
                result = _rule4(o);
                if (!result) {
                  return false;
                } else {
                  return _mutator(result, o, index, line);
                }
              });
            }());
          }());
          function _missing() {
            return [];
          }
          return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return _rule2(o) || _missing(void 0, o, index, line);
          });
        }());
        return (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return OpenCurlyBrace(clone) && EmptyLines(clone) && (_result = _rule(clone)) && EmptyLines(clone) && MaybeCommaOrNewline(clone) && CloseCurlyBrace(clone) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            return o.objectParam(i, x);
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      Parameters = named("Parameters", (function () {
        var _rule;
        _rule = (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return CommaOrNewline(clone) && (_result = ParameterOrNothing(clone)) && (o.update(clone), _result);
          }
          return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "*", function (o) {
            var clone, item, result;
            clone = o.clone();
            result = [];
            while (item = _rule2(clone)) {
              result.push(item);
            }
            o.update(clone);
            return result;
          });
        }());
        return (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.head = ParameterOrNothing(clone)) && (_result.tail = _rule(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            return validateSpreadParameters(removeTrailingNothings([x.head].concat(__toArray(x.tail))), o);
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      ParameterSequence = named("ParameterSequence", (function () {
        var _rule;
        _rule = (function () {
          function _missing() {
            return [];
          }
          return named(__strnum(Parameters != null && Parameters.parserName || "Parameters") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return Parameters(o) || _missing(void 0, o, index, line);
          });
        }());
        return (function () {
          var _mutator;
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return OpenParenthesis(clone) && EmptyLines(clone) && (_result = _rule(clone)) && EmptyLines(clone) && MaybeCommaOrNewline(clone) && CloseParenthesis(clone) && (o.update(clone), _result);
          }
          _mutator = (function () {
            function check(names, duplicates, param) {
              var _arr, _i, element, name, pair;
              if (param instanceof ParamNode) {
                if (param.ident instanceof IdentNode) {
                  name = param.ident.name;
                } else if (param.ident instanceof AccessNode) {
                  if (!(param.ident.child instanceof ConstNode) || typeof param.ident.child.value !== "string") {
                    throw Error("Expected constant access: " + __typeof(param.ident.child));
                  }
                  name = param.ident.child.value;
                } else {
                  throw Error("Unknown param ident: " + __typeof(param.ident));
                }
                if (__in(name, names)) {
                  if (!__in(name, duplicates)) {
                    duplicates.push(name);
                  }
                } else {
                  names.push(name);
                }
              } else if (param instanceof ArrayNode) {
                for (_arr = __toArray(param.elements), _i = _arr.length; _i--; ) {
                  element = _arr[_i];
                  check(names, duplicates, element);
                }
              } else if (param instanceof ObjectNode) {
                for (_arr = __toArray(param.pairs), _i = _arr.length; _i--; ) {
                  pair = _arr[_i];
                  check(names, duplicates, pair.value);
                }
              } else if (!(param instanceof NothingNode)) {
                throw Error("Unknown param node: " + __typeof(param));
              }
            }
            return function (x, o, i) {
              var _arr, _i, duplicates, names, param;
              names = [];
              duplicates = [];
              for (_arr = __toArray(x), _i = _arr.length; _i--; ) {
                param = _arr[_i];
                check(names, duplicates, param);
              }
              if (duplicates.length) {
                o.error("Duplicate parameter name: " + __strnum(duplicates.sort().join(", ")));
              }
              return x;
            };
          }());
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      function addParamToScope(o, param, forceMutable) {
        var _arr, _i, _ref, element, pair;
        if (param instanceof ParamNode) {
          if ((_ref = param.ident) instanceof IdentNode || _ref instanceof TmpNode) {
            o.scope.add(param.ident, forceMutable || param.isMutable, param.asType ? nodeToType(param.asType) : param.spread ? Type.array : Type.any);
          } else if (param.ident instanceof AccessNode) {
            if (!(param.ident.child instanceof ConstNode) || typeof param.ident.child.value !== "string") {
              throw Error("Expected constant access: " + __typeof(param.ident.child));
            }
            o.scope.add(
              IdentNode(param.line, param.column, param.scopeId, param.ident.child.value),
              forceMutable || param.isMutable,
              param.asType ? nodeToType(param.asType) : param.spread ? Type.array : Type.any
            );
          } else {
            throw Error("Unknown param ident: " + __typeof(param.ident));
          }
        } else if (param instanceof ArrayNode) {
          for (_arr = __toArray(param.elements), _i = _arr.length; _i--; ) {
            element = _arr[_i];
            addParamToScope(o, element, forceMutable);
          }
        } else if (param instanceof ObjectNode) {
          for (_arr = __toArray(param.pairs), _i = _arr.length; _i--; ) {
            pair = _arr[_i];
            addParamToScope(o, pair.value, forceMutable);
          }
        } else if (!(param instanceof NothingNode)) {
          throw Error("Unknown param node type: " + __typeof(param));
        }
      }
      FunctionFlag = named("FunctionFlag", (function () {
        function _rule(o) {
          if (o.data.charCodeAt(o.index) === 33) {
            o.index = __num(o.index) + 1;
            return 33;
          } else {
            o.fail('"!"');
            return false;
          }
        }
        return function (o) {
          return _rule(o) || AtSign(o) || Asterix(o) || Caret(o);
        };
      }()));
      FunctionFlags = named("FunctionFlags", (function () {
        var _rule;
        _rule = named(__strnum(FunctionFlag != null && FunctionFlag.parserName || "FunctionFlag") + "*", function (o) {
          var clone, item, result;
          clone = o.clone();
          result = [];
          while (item = FunctionFlag(clone)) {
            result.push(item);
          }
          o.update(clone);
          return result;
        });
        function _mutator(x, o, i) {
          var _arr, _i, _len, c, flags, uniqueChars;
          flags = { autoReturn: true, bound: false, generator: false, curry: false };
          uniqueChars = [];
          for (_arr = __toArray(x), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            c = _arr[_i];
            if (__in(c, uniqueChars)) {
              o.error("Function flag " + __strnum(fromCharCode(c)) + " specified more than once");
            } else {
              uniqueChars.push(c);
              switch (c) {
              case 33:
                flags.autoReturn = false;
                break;
              case 64:
                flags.bound = true;
                break;
              case 42:
                flags.generator = true;
                break;
              case 94:
                flags.curry = true;
                break;
              }
            }
          }
          return flags;
        }
        return named(_rule != null && _rule.parserName || "<unknown>", function (o) {
          var index, line, result;
          index = o.index;
          line = o.line;
          result = _rule(o);
          if (!result) {
            return false;
          } else {
            return _mutator(result, o, index, line);
          }
        });
      }()));
      _inGenerator = Stack(false);
      _FunctionBody = named("_FunctionBody", (function () {
        var _rule;
        _rule = (function () {
          var _rule2, _rule3;
          _rule2 = symbol("->");
          _rule3 = (function () {
            function _missing(x, o, i) {
              return o.nothing(i);
            }
            return named(__strnum(typeof Statement !== "undefined" && Statement !== null && Statement.parserName || "Statement") + "?", function (o) {
              var index, line;
              index = o.index;
              line = o.line;
              return Statement(o) || _missing(void 0, o, index, line);
            });
          }());
          return function (o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return _rule2(clone) && (_result = _rule3(clone)) && (o.update(clone), _result);
          };
        }());
        return function (o) {
          return _rule(o) || Body(o);
        };
      }()));
      FunctionBody = named("FunctionBody", makeAlterStack(_inGenerator, false)(_FunctionBody));
      GeneratorFunctionBody = named("GeneratorFunctionBody", makeAlterStack(_inGenerator, true)(_FunctionBody));
      FunctionDeclaration = named("FunctionDeclaration", (function () {
        var paramsRule, restRule;
        paramsRule = (function () {
          function _missing() {
            return [];
          }
          return named(__strnum(ParameterSequence != null && ParameterSequence.parserName || "ParameterSequence") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return ParameterSequence(o) || _missing(void 0, o, index, line);
          });
        }());
        restRule = (function () {
          var _rule;
          _rule = inFunctionTypeParams(MaybeAsType);
          return function (o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.flags = FunctionFlags(clone)) && (_result.asType = _rule(clone)) && (o.update(clone), _result);
          };
        }());
        function bodyRule(generator) {
          if (generator) {
            return GeneratorFunctionBody;
          } else {
            return FunctionBody;
          }
        }
        return function (o) {
          var _arr, _i, asType, body, clone, flags, func, generic, index, line, param, params, rest;
          index = o.index;
          line = o.line;
          clone = o.clone(o.cloneScope());
          generic = GenericDefinitionPart(clone);
          if (!generic) {
            return false;
          }
          params = paramsRule(clone);
          if (!params) {
            return false;
          }
          for (_arr = __toArray(params), _i = _arr.length; _i--; ) {
            param = _arr[_i];
            addParamToScope(clone, param);
          }
          rest = restRule(clone);
          if (!rest) {
            return false;
          }
          flags = rest.flags;
          asType = rest.asType;
          if (!flags.autoReturn && flags.generator) {
            o.error("A function cannot be both non-returning (!) and a generator (*)");
          }
          body = bodyRule(flags.generator)(clone);
          if (!body) {
            return false;
          }
          o.update(clone);
          func = o["function"](
            index,
            params,
            body,
            flags.autoReturn,
            flags.bound,
            flags.curry,
            asType !== NOTHING ? asType : void 0,
            flags.generator,
            generic
          );
          return mutateFunction(func, o, index, line);
        };
      }()));
      FunctionLiteral = named("FunctionLiteral", (function () {
        function _backend(o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return HashSign(clone) && (_result = FunctionDeclaration(clone)) && (o.update(clone), _result);
        }
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!HashSign(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      AssignmentAsExpression = cache(named("AssignmentAsExpression", inExpression(function (o) {
        return Assignment(o);
      })));
      ExpressionOrAssignment = named("ExpressionOrAssignment", function (o) {
        return AssignmentAsExpression(o) || Expression(o);
      });
      AstExpressionToken = cache(named("AstExpressionToken", word("ASTE")));
      AstExpression = named("AstExpression", (function () {
        var _backend;
        _backend = (function () {
          var _rule2;
          function _rule(o) {
            if (!_inMacro.peek()) {
              return o.error("Can only use AST inside a macro");
            } else if (_inAst.peek()) {
              return o.error("Cannot use AST inside an AST");
            } else {
              return true;
            }
          }
          _rule2 = (function () {
            var evilRule, rule;
            rule = inAst(ExpressionOrAssignment);
            evilRule = inEvilAst(rule);
            return function (o) {
              if (MaybeExclamationPointNoSpace(o) === "!") {
                return evilRule(o);
              } else {
                return rule(o);
              }
            };
          }());
          return function (o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return _rule(clone) && AstExpressionToken(clone) && (_result = _rule2(clone)) && (o.update(clone), _result);
          };
        }());
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!AstExpressionToken(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      AstToken = cache(named("AstToken", word("AST")));
      AstStatement = named("AstStatement", (function () {
        var _backend;
        _backend = (function () {
          var _rule2;
          function _rule(o) {
            if (!_inMacro.peek()) {
              return o.error("Can only use AST inside a macro");
            } else if (_inAst.peek()) {
              return o.error("Cannot use AST inside an AST");
            } else {
              return true;
            }
          }
          _rule2 = (function () {
            var evilRule, rule;
            rule = inAst(function (o) {
              return Body(o) || Statement(o) || Nothing(o);
            });
            evilRule = inEvilAst(rule);
            return function (o) {
              if (MaybeExclamationPointNoSpace(o) === "!") {
                return evilRule(o);
              } else {
                return rule(o);
              }
            };
          }());
          return function (o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return _rule(clone) && AstToken(clone) && (_result = _rule2(clone)) && (o.update(clone), _result);
          };
        }());
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!AstToken(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      Ast = named("Ast", (function () {
        function _rule(o) {
          return AstExpression(o) || AstStatement(o);
        }
        function _mutator(x, o, i) {
          var position;
          position = o.getPosition(i);
          return MacroHelper.constifyObject(x, position.line, position.column, o.scope.id);
        }
        return named(_rule != null && _rule.parserName || "<unknown>", function (o) {
          var index, line, result;
          index = o.index;
          line = o.line;
          result = _rule(o);
          if (!result) {
            return false;
          } else {
            return _mutator(result, o, index, line);
          }
        });
      }()));
      MacroName = cache(named("MacroName", (function () {
        var _rule;
        _rule = (function () {
          var _rule2;
          _rule2 = (function () {
            var _rule3;
            _rule3 = (function () {
              function _rule4(o) {
                return _Symbol(o) || _Name(o);
              }
              return (function () {
                var _rule5;
                _rule5 = named(__strnum(_rule4 != null && _rule4.parserName || "<unknown>") + "+", function (o) {
                  var clone, item, result;
                  clone = o.clone();
                  result = [];
                  while (item = _rule4(clone)) {
                    result.push(item);
                  }
                  if (result.length < 1) {
                    return false;
                  } else {
                    o.update(clone);
                    return result;
                  }
                });
                function _mutator(x) {
                  return x.join("");
                }
                return named(_rule5 != null && _rule5.parserName || "<unknown>", function (o) {
                  var index, line, result;
                  index = o.index;
                  line = o.line;
                  result = _rule5(o);
                  if (!result) {
                    return false;
                  } else {
                    return _mutator(result, o, index, line);
                  }
                });
              }());
            }());
            return function (o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return (_result = _rule3(clone)) && NotColon(clone) && (o.update(clone), _result);
            };
          }());
          return function (o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return Space(clone) && (_result = _rule2(clone)) && (o.update(clone), _result);
          };
        }());
        return function (o) {
          var clone, result;
          clone = o.clone();
          clone.preventFail();
          result = _rule(clone);
          clone.unpreventFail();
          if (result) {
            o.update(clone);
            return result;
          } else {
            o.fail("macro-name");
            return false;
          }
        };
      }())));
      MacroNames = named("MacroNames", (function () {
        var _rule;
        _rule = (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return Comma(clone) && (_result = MacroName(clone)) && (o.update(clone), _result);
          }
          return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "*", function (o) {
            var clone, item, result;
            clone = o.clone();
            result = [];
            while (item = _rule2(clone)) {
              result.push(item);
            }
            o.update(clone);
            return result;
          });
        }());
        return (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.head = MacroName(clone)) && (_result.tail = _rule(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            return [x.head].concat(__toArray(x.tail));
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      UseMacro = named("UseMacro", function (o) {
        var clone, m, macros, name;
        clone = o.clone();
        macros = clone.macros;
        name = MacroName(clone);
        if (name) {
          m = macros.getByName(name);
          if (m) {
            return m(o);
          }
        }
        return false;
      });
      MacroSyntaxParameterType = named("MacroSyntaxParameterType", (function () {
        var _rule, _rule2;
        _rule = (function () {
          var _rule3, _rule4;
          _rule3 = (function () {
            function _rule5(o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return OpenParenthesis(clone) && EmptyLines(clone) && (_result = MacroSyntaxParameters(clone)) && EmptyLines(clone) && MaybeCommaOrNewline(clone) && CloseParenthesis(clone) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              return o.syntaxSequence(i, x);
            }
            return named(_rule5 != null && _rule5.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule5(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
          _rule4 = (function () {
            function _rule5(o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return OpenParenthesis(clone) && EmptyLines(clone) && (_result = MacroSyntaxChoiceParameters(clone)) && EmptyLines(clone) && CloseParenthesis(clone) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              return o.syntaxChoice(i, x);
            }
            return named(_rule5 != null && _rule5.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule5(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
          return function (o) {
            return Identifier(o) || StringLiteral(o) || _rule3(o) || _rule4(o);
          };
        }());
        _rule2 = (function () {
          var _rule3;
          _rule3 = (function () {
            var _rule4, _rule5, _rule6;
            _rule4 = symbol("?");
            _rule5 = symbol("*");
            _rule6 = symbol("+");
            return function (o) {
              return _rule4(o) || _rule5(o) || _rule6(o);
            };
          }());
          return named(__strnum(_rule3 != null && _rule3.parserName || "<unknown>") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return _rule3(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
          });
        }());
        return (function () {
          function _rule3(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.type = _rule(clone)) && (_result.multiplier = _rule2(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            if (x.multiplier === NOTHING) {
              return x.type;
            } else {
              return o.syntaxMany(i, x.type, x.multiplier);
            }
          }
          return named(_rule3 != null && _rule3.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule3(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      MacroSyntaxParameter = named("MacroSyntaxParameter", (function () {
        var _rule;
        _rule = (function () {
          var _rule3;
          function _rule2(o) {
            return ThisOrShorthandLiteral(o) || Identifier(o);
          }
          _rule3 = (function () {
            function _rule4(o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return AsToken(clone) && (_result = MacroSyntaxParameterType(clone)) && (o.update(clone), _result);
            }
            return named(__strnum(_rule4 != null && _rule4.parserName || "<unknown>") + "?", function (o) {
              var index, line;
              index = o.index;
              line = o.line;
              return _rule4(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
            });
          }());
          return (function () {
            function _rule4(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.ident = _rule2(clone)) && (_result.type = _rule3(clone)) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              return o.syntaxParam(i, x.ident, x.type !== NOTHING ? x.type : void 0);
            }
            return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule4(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        return function (o) {
          return StringLiteral(o) || _rule(o);
        };
      }()));
      MacroSyntaxParameters = named("MacroSyntaxParameters", (function () {
        var _rule;
        _rule = (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return Comma(clone) && (_result = MacroSyntaxParameter(clone)) && (o.update(clone), _result);
          }
          return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "*", function (o) {
            var clone, item, result;
            clone = o.clone();
            result = [];
            while (item = _rule2(clone)) {
              result.push(item);
            }
            o.update(clone);
            return result;
          });
        }());
        return (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.head = MacroSyntaxParameter(clone)) && (_result.tail = _rule(clone)) && (o.update(clone), _result);
          }
          function _mutator(x) {
            return [x.head].concat(__toArray(x.tail));
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      MacroSyntaxChoiceParameters = named("MacroSyntaxChoiceParameters", (function () {
        var _rule;
        _rule = (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return Pipe(clone) && (_result = MacroSyntaxParameterType(clone)) && (o.update(clone), _result);
          }
          return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "*", function (o) {
            var clone, item, result;
            clone = o.clone();
            result = [];
            while (item = _rule2(clone)) {
              result.push(item);
            }
            o.update(clone);
            return result;
          });
        }());
        return (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.head = MacroSyntaxParameterType(clone)) && (_result.tail = _rule(clone)) && (o.update(clone), _result);
          }
          function _mutator(x) {
            return [x.head].concat(__toArray(x.tail));
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      MacroOptions = named("MacroOptions", (function () {
        var _rule;
        _rule = (function () {
          var _rule2;
          _rule2 = word("with");
          return (function () {
            function _rule3(o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return _rule2(clone) && (_result = UnclosedObjectLiteral(clone)) && (o.update(clone), _result);
            }
            function _mutator(x, o) {
              var _arr, _i, _len, _ref, key, options, value;
              options = {};
              for (_arr = __toArray(x.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                key = (_ref = _arr[_i]).key;
                value = _ref.value;
                if (!key.isConst()) {
                  o.error("Cannot have non-const keys in the options");
                }
                if (!value.isConst()) {
                  o.error("Cannot have non-const value in the options");
                }
                options[key.constValue()] = value.constValue();
              }
              return options;
            }
            return named(_rule3 != null && _rule3.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule3(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        function _missing() {
          return {};
        }
        return named(__strnum(_rule != null && _rule.parserName || "<unknown>") + "?", function (o) {
          var index, line;
          index = o.index;
          line = o.line;
          return _rule(o) || _missing(void 0, o, index, line);
        });
      }()));
      function addMacroSyntaxParametersToScope(params, o) {
        var _arr, _i, _len, ident, param;
        for (_arr = __toArray(params), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          param = _arr[_i];
          if (param instanceof SyntaxParamNode) {
            ident = param.ident;
            if (ident instanceof IdentNode) {
              o.scope.add(ident, true, Type.any);
            }
          }
        }
      }
      SyntaxToken = cache(named("SyntaxToken", word("syntax")));
      MacroSyntax = named("MacroSyntax", (function () {
        var _rule;
        _rule = (function () {
          var _backend;
          _backend = (function () {
            function _rule2(o) {
              var body, clone, i, options, params;
              i = o.index;
              clone = o.clone(o.cloneScope());
              params = MacroSyntaxParameters(clone);
              if (!params) {
                throw SHORT_CIRCUIT;
              }
              options = MacroOptions(clone);
              clone.startMacroSyntax(i, params, options);
              addMacroSyntaxParametersToScope(params, clone);
              clone.scope.add(
                clone.ident(i, "macroName"),
                true,
                Type.string
              );
              body = FunctionBody(clone);
              if (!body) {
                throw SHORT_CIRCUIT;
              }
              clone.macroSyntax(
                i,
                "syntax",
                params,
                options,
                body
              );
              o.update(clone);
              return true;
            }
            return function (o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return SyntaxToken(clone) && (_result = _rule2(clone)) && (o.update(clone), _result);
            };
          }());
          return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
            var result;
            if (!SyntaxToken(o.clone())) {
              return false;
            } else {
              result = _backend(o);
              if (!result) {
                throw SHORT_CIRCUIT;
              }
              return result;
            }
          });
        }());
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return CheckIndent(clone) && (_result = _rule(clone)) && Space(clone) && CheckStop(clone) && (o.update(clone), _result);
        };
      }()));
      MacroBody = named("MacroBody", (function () {
        var _rule;
        _rule = (function () {
          var _rule3;
          _rule3 = (function () {
            var _rule4;
            _rule4 = (function () {
              function _rule5(o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return Newline(clone) && EmptyLines(clone) && (_result = MacroSyntax(clone)) && (o.update(clone), _result);
              }
              return named(__strnum(_rule5 != null && _rule5.parserName || "<unknown>") + "*", function (o) {
                var clone, item, result;
                clone = o.clone();
                result = [];
                while (item = _rule5(clone)) {
                  result.push(item);
                }
                o.update(clone);
                return result;
              });
            }());
            return function (o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return Advance(clone) && (_result.head = MacroSyntax(clone)) && (_result.tail = _rule4(clone)) && PopIndent(clone) && (o.update(clone), _result);
            };
          }());
          return (function () {
            function _rule4(o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return Space(clone) && Newline(clone) && EmptyLines(clone) && (_result = _rule3(clone)) && (o.update(clone), _result);
            }
            function _mutator(x) {
              return true;
            }
            return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule4(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        function _rule2(o) {
          var _arr, _i, body, clone, i, options, param, params;
          i = o.index;
          clone = o.clone(o.cloneScope());
          params = ParameterSequence(clone);
          if (!params) {
            return false;
          }
          for (_arr = __toArray(params), _i = _arr.length; _i--; ) {
            param = _arr[_i];
            addParamToScope(clone, param, true);
          }
          options = MacroOptions(clone);
          body = FunctionBody(clone);
          if (!body) {
            return false;
          }
          clone.macroSyntax(
            i,
            "call",
            params,
            options,
            body
          );
          o.update(clone);
          return true;
        }
        return function (o) {
          return _rule(o) || _rule2(o);
        };
      }()));
      MacroToken = cache(named("MacroToken", word("macro")));
      DefineMacro = named("DefineMacro", inMacro((function () {
        var _backend;
        _backend = (function () {
          var _rule;
          _rule = named("(identifier MacroBody)", function (o) {
            var names;
            names = MacroNames(o);
            if (names) {
              return o.enterMacro(names, function () {
                return MacroBody(o);
              });
            } else {
              return false;
            }
          });
          return (function () {
            function _rule2(o) {
              var clone;
              clone = o.clone();
              return MacroToken(clone) && _rule(clone) && (o.update(clone), true);
            }
            function _mutator(x, o, i) {
              return o.nothing(i);
            }
            return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule2(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!MacroToken(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }())));
      DefineSyntaxStart = cache(named("DefineSyntaxStart", (function () {
        var _rule, _rule2;
        _rule = word("define");
        _rule2 = word("syntax");
        return function (o) {
          var clone;
          clone = o.clone();
          return _rule(clone) && _rule2(clone) && (o.update(clone), true);
        };
      }())));
      DefineSyntax = named("DefineSyntax", (function () {
        var _backend;
        _backend = (function () {
          function _rule(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return DefineSyntaxStart(clone) && (_result.name = Identifier(clone)) && DeclareEqualSymbol(clone) && (_result.value = MacroSyntaxParameters(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            var body, clone;
            clone = o.clone(o.cloneScope());
            addMacroSyntaxParametersToScope(x.value, clone);
            body = FunctionBody(clone);
            o.update(clone);
            return o.defineSyntax(i, x.name.name, x.value, body || void 0);
          }
          return named(_rule != null && _rule.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!DefineSyntaxStart(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      DefineHelperStart = cache(named("DefineHelperStart", (function () {
        var _rule, _rule2;
        _rule = word("define");
        _rule2 = word("helper");
        return function (o) {
          var clone;
          clone = o.clone();
          return _rule(clone) && _rule2(clone) && (o.update(clone), true);
        };
      }())));
      DefineHelper = named("DefineHelper", (function () {
        var _backend;
        _backend = (function () {
          function _rule(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return DefineHelperStart(clone) && (_result.name = Identifier(clone)) && DeclareEqualSymbol(clone) && (_result.value = Expression(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            return o.defineHelper(i, x.name, x.value);
          }
          return named(_rule != null && _rule.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!DefineHelperStart(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      DefineOperatorStart = cache(named("DefineOperatorStart", (function () {
        var _rule, _rule2;
        _rule = word("define");
        _rule2 = word("operator");
        return function (o) {
          var clone;
          clone = o.clone();
          return _rule(clone) && _rule2(clone) && (o.update(clone), true);
        };
      }())));
      DefineOperator = named("DefineOperator", (function () {
        var _backend;
        _backend = inMacro((function () {
          var mainRule, nodeType;
          mainRule = (function () {
            var _rule, _rule2;
            _rule = (function () {
              var _rule3, _rule4, _rule5;
              _rule3 = wordOrSymbol("binary");
              _rule4 = wordOrSymbol("assign");
              _rule5 = wordOrSymbol("unary");
              return function (o) {
                return _rule3(o) || _rule4(o) || _rule5(o);
              };
            }());
            _rule2 = (function () {
              function _rule3(o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return Comma(clone) && (_result = NameOrSymbol(clone)) && (o.update(clone), _result);
              }
              return named(__strnum(_rule3 != null && _rule3.parserName || "<unknown>") + "*", function (o) {
                var clone, item, result;
                clone = o.clone();
                result = [];
                while (item = _rule3(clone)) {
                  result.push(item);
                }
                o.update(clone);
                return result;
              });
            }());
            return function (o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return DefineOperatorStart(clone) && (_result.type = _rule(clone)) && (_result.head = NameOrSymbol(clone)) && (_result.tail = _rule2(clone)) && (_result.options = MacroOptions(clone)) && (o.update(clone), _result);
            };
          }());
          nodeType = Type.object.union(Type["undefined"]);
          return function (o) {
            var body, clone, i, ops, ret, x;
            i = o.index;
            x = mainRule(o);
            if (!x) {
              throw SHORT_CIRCUIT;
            }
            clone = o.clone(o.cloneScope());
            switch (x.type) {
            case "binary":
            case "assign":
              clone.scope.add(
                clone.ident(i, "left"),
                true,
                nodeType
              );
              clone.scope.add(
                clone.ident(i, "op"),
                true,
                Type.string
              );
              clone.scope.add(
                clone.ident(i, "right"),
                true,
                nodeType
              );
              break;
            case "unary":
              clone.scope.add(
                clone.ident(i, "op"),
                true,
                Type.string
              );
              clone.scope.add(
                clone.ident(i, "node"),
                true,
                nodeType
              );
              break;
            }
            body = FunctionBody(clone);
            if (!body) {
              throw SHORT_CIRCUIT;
            }
            ops = [x.head].concat(__toArray(x.tail));
            switch (x.type) {
            case "binary":
              ret = clone.defineBinaryOperator(i, ops, x.options, body);
              break;
            case "assign":
              ret = clone.defineAssignOperator(i, ops, x.options, body);
              break;
            case "unary":
              ret = clone.defineUnaryOperator(i, ops, x.options, body);
              break;
            default: throw Error();
            }
            o.update(clone);
            return ret;
          };
        }()));
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!DefineOperatorStart(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      Index = cache(named("Index", (function () {
        var ExpressionWithAsterixAsArrayLength;
        ExpressionWithAsterixAsArrayLength = named("ExpressionWithAsterixAsArrayLength", asterixAsArrayLength(function (o) {
          return Expression(o);
        }));
        return (function () {
          var _rule;
          _rule = (function () {
            function _rule2(o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return CommaOrNewline(clone) && (_result = ExpressionWithAsterixAsArrayLength(clone)) && (o.update(clone), _result);
            }
            return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "*", function (o) {
              var clone, item, result;
              clone = o.clone();
              result = [];
              while (item = _rule2(clone)) {
                result.push(item);
              }
              o.update(clone);
              return result;
            });
          }());
          return (function () {
            function _rule2(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.head = ExpressionWithAsterixAsArrayLength(clone)) && (_result.tail = _rule(clone)) && (o.update(clone), _result);
            }
            function _mutator(x) {
              if (__num(x.tail.length) > 0) {
                return { type: "multi", elements: [x.head].concat(__toArray(x.tail)) };
              } else {
                return { type: "single", node: x.head };
              }
            }
            return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule2(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
      }())));
      IdentifierOrAccessStart = named("IdentifierOrAccessStart", (function () {
        var _rule, _rule2, _rule3;
        _rule = (function () {
          function _rule4(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.parent = ThisOrShorthandLiteralPeriod(clone)) && (_result.child = IdentifierNameConstOrNumberLiteral(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            return o.access(i, x.parent, x.child);
          }
          return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule4(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
        _rule2 = (function () {
          function _rule4(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.parent = ThisOrShorthandLiteral(clone)) && DoubleColon(clone) && (_result.child = IdentifierNameConstOrNumberLiteral(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            return o.access(
              i,
              o.access(i, x.parent, o["const"](i, "prototype")),
              x.child
            );
          }
          return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule4(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
        _rule3 = (function () {
          var _rule4;
          _rule4 = named(__strnum(DoubleColon != null && DoubleColon.parserName || "DoubleColon") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return DoubleColon(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
          });
          return (function () {
            function _rule5(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.parent = ThisOrShorthandLiteral(clone)) && (_result.isProto = _rule4(clone)) && OpenSquareBracketChar(clone) && (_result.child = Index(clone)) && CloseSquareBracket(clone) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              var parent;
              parent = x.parent;
              if (x.isProto !== NOTHING) {
                parent = o.access(i, parent, o["const"](i, "prototype"));
              }
              if (x.child.type === "single") {
                return o.access(i, parent, x.child.node);
              } else if (x.child.type === "multi") {
                return o.accessMulti(i, parent, x.child.elements);
              } else {
                throw Error();
              }
            }
            return named(_rule5 != null && _rule5.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule5(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        return function (o) {
          return Identifier(o) || _rule(o) || _rule2(o) || _rule3(o);
        };
      }()));
      IdentifierOrAccessPart = named("IdentifierOrAccessPart", (function () {
        var _rule, _rule2;
        _rule = (function () {
          function _rule3(o) {
            return Period(o) || DoubleColon(o);
          }
          return (function () {
            function _rule4(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.type = _rule3(clone)) && (_result.child = IdentifierNameConstOrNumberLiteral(clone)) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              return function (parent) {
                if (x.type === "::") {
                  parent = o.access(i, parent, o["const"](i, "prototype"));
                }
                return o.access(i, parent, x.child);
              };
            }
            return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule4(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        _rule2 = (function () {
          var _rule3;
          _rule3 = named(__strnum(DoubleColon != null && DoubleColon.parserName || "DoubleColon") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return DoubleColon(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
          });
          return (function () {
            function _rule4(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.type = _rule3(clone)) && OpenSquareBracketChar(clone) && (_result.child = Index(clone)) && CloseSquareBracket(clone) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              return function (parent) {
                if (x.type !== NOTHING) {
                  parent = o.access(i, parent, o["const"](i, "prototype"));
                }
                if (x.child.type === "single") {
                  return o.access(i, parent, x.child.node);
                } else if (x.child.type === "multi") {
                  return o.accessMulti(i, parent, x.child.elements);
                } else {
                  throw Error();
                }
              };
            }
            return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule4(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        return function (o) {
          return _rule(o) || _rule2(o);
        };
      }()));
      IdentifierOrAccess = cache(named("IdentifierOrAccess", (function () {
        var _rule;
        _rule = named(__strnum(IdentifierOrAccessPart != null && IdentifierOrAccessPart.parserName || "IdentifierOrAccessPart") + "*", function (o) {
          var clone, item, result;
          clone = o.clone();
          result = [];
          while (item = IdentifierOrAccessPart(clone)) {
            result.push(item);
          }
          o.update(clone);
          return result;
        });
        return (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.head = IdentifierOrAccessStart(clone)) && (_result.tail = _rule(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            var _arr, _i, _len, current, part;
            current = x.head;
            for (_arr = __toArray(x.tail), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              part = _arr[_i];
              current = part(current);
            }
            return current;
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }())));
      SimpleAssignable = named("SimpleAssignable", IdentifierOrAccess);
      ComplexAssignable = named("ComplexAssignable", SimpleAssignable);
      Assignment = cache(named("Assignment", function (o) {
        var _arr, _i, clone, left, line, op, operator, right, rule, startIndex, subClone;
        startIndex = o.index;
        line = o.line;
        clone = o.clone();
        left = SimpleAssignable(clone);
        if (left) {
          for (_arr = __toArray(o.macros.assignOperators), _i = _arr.length; _i--; ) {
            operator = _arr[_i];
            subClone = clone.clone();
            rule = operator.rule;
            op = rule(subClone);
            if (!op) {
              continue;
            }
            right = ExpressionOrAssignment(subClone);
            if (!right) {
              continue;
            }
            o.update(subClone);
            return operator.func(
              { left: left, op: op, right: right },
              o,
              startIndex,
              line
            );
          }
        }
        return false;
      }));
      UnclosedObjectLiteral = named("UnclosedObjectLiteral", (function () {
        var _rule;
        _rule = (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return Comma(clone) && (_result = PropertyOrDualObjectKey(clone)) && (o.update(clone), _result);
          }
          return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "*", function (o) {
            var clone, item, result;
            clone = o.clone();
            result = [];
            while (item = _rule2(clone)) {
              result.push(item);
            }
            o.update(clone);
            return result;
          });
        }());
        return (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.head = PropertyOrDualObjectKey(clone)) && (_result.tail = _rule(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            return o.object(i, [x.head].concat(__toArray(x.tail)));
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      IndentedUnclosedObjectLiteralInner = named("IndentedUnclosedObjectLiteralInner", (function () {
        var _rule;
        _rule = (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return CommaOrNewlineWithCheckIndent(clone) && (_result = PropertyOrDualObjectKey(clone)) && (o.update(clone), _result);
          }
          return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "*", function (o) {
            var clone, item, result;
            clone = o.clone();
            result = [];
            while (item = _rule2(clone)) {
              result.push(item);
            }
            o.update(clone);
            return result;
          });
        }());
        return (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.head = PropertyOrDualObjectKey(clone)) && (_result.tail = _rule(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            return o.object(i, [x.head].concat(__toArray(x.tail)));
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      IndentedUnclosedObjectLiteral = named("IndentedUnclosedObjectLiteral", (function () {
        function _rule(o) {
          return !_preventUnclosedObjectLiteral.peek();
        }
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return _rule(clone) && Space(clone) && Newline(clone) && EmptyLines(clone) && Advance(clone) && CheckIndent(clone) && (_result = IndentedUnclosedObjectLiteralInner(clone)) && PopIndent(clone) && (o.update(clone), _result);
        };
      }()));
      UnclosedArrayLiteralElement = named("UnclosedArrayLiteralElement", (function () {
        var _rule;
        _rule = (function () {
          var _rule2;
          _rule2 = (function () {
            var _rule3;
            _rule3 = PushFakeIndent(2);
            function _rule4(o) {
              return IndentedUnclosedObjectLiteralInner(o) || IndentedUnclosedArrayLiteralInner(o) || SpreadOrExpression(o);
            }
            return function (o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return _rule3(clone) && (_result = _rule4(clone)) && PopIndent(clone) && (o.update(clone), _result);
            };
          }());
          return function (o) {
            return _rule2(o) || SpreadOrExpression(o);
          };
        }());
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return Asterix(clone) && Space(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }()));
      IndentedUnclosedArrayLiteralInner = named("IndentedUnclosedArrayLiteralInner", (function () {
        var _rule;
        _rule = (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return MaybeComma(clone) && SomeEmptyLinesWithCheckIndent(clone) && (_result = UnclosedArrayLiteralElement(clone)) && (o.update(clone), _result);
          }
          return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "*", function (o) {
            var clone, item, result;
            clone = o.clone();
            result = [];
            while (item = _rule2(clone)) {
              result.push(item);
            }
            o.update(clone);
            return result;
          });
        }());
        return (function () {
          function _rule2(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.head = UnclosedArrayLiteralElement(clone)) && (_result.tail = _rule(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            return o.array(i, [x.head].concat(__toArray(x.tail)));
          }
          return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule2(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      IndentedUnclosedArrayLiteral = named("IndentedUnclosedArrayLiteral", (function () {
        function _rule(o) {
          return !_preventUnclosedObjectLiteral.peek();
        }
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return _rule(clone) && Space(clone) && Newline(clone) && EmptyLines(clone) && Advance(clone) && CheckIndent(clone) && (_result = IndentedUnclosedArrayLiteralInner(clone)) && PopIndent(clone) && (o.update(clone), _result);
        };
      }()));
      CURRENT_ARRAY_LENGTH_NAME = "__currentArrayLength";
      PrimaryExpression = cache(named("PrimaryExpression", (function () {
        function _rule(o) {
          var i;
          if (_asterixAsArrayLength.peek()) {
            i = o.index;
            if (Asterix(o)) {
              return o.ident(i, CURRENT_ARRAY_LENGTH_NAME);
            }
          }
        }
        return function (o) {
          return UnclosedObjectLiteral(o) || Literal(o) || ArrayLiteral(o) || ObjectLiteral(o) || SetLiteral(o) || MapLiteral(o) || Ast(o) || Parenthetical(o) || FunctionLiteral(o) || UseMacro(o) || Identifier(o) || _rule(o) || IndentedUnclosedObjectLiteral(o) || IndentedUnclosedArrayLiteral(o);
        };
      }())));
      ClosedArguments = named("ClosedArguments", (function () {
        var _rule, _rule2;
        _rule = (function () {
          var _rule3;
          _rule3 = (function () {
            var _rule4;
            _rule4 = (function () {
              function _rule5(o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return Comma(clone) && (_result = SpreadOrExpression(clone)) && (o.update(clone), _result);
              }
              return named(__strnum(_rule5 != null && _rule5.parserName || "<unknown>") + "*", function (o) {
                var clone, item, result;
                clone = o.clone();
                result = [];
                while (item = _rule5(clone)) {
                  result.push(item);
                }
                o.update(clone);
                return result;
              });
            }());
            return (function () {
              function _rule5(o) {
                var _result, clone;
                clone = o.clone();
                _result = {};
                return (_result.head = SpreadOrExpression(clone)) && (_result.tail = _rule4(clone)) && MaybeComma(clone) && (o.update(clone), _result);
              }
              function _mutator(x) {
                return [x.head].concat(__toArray(x.tail));
              }
              return named(_rule5 != null && _rule5.parserName || "<unknown>", function (o) {
                var index, line, result;
                index = o.index;
                line = o.line;
                result = _rule5(o);
                if (!result) {
                  return false;
                } else {
                  return _mutator(result, o, index, line);
                }
              });
            }());
          }());
          function _missing() {
            return [];
          }
          return named(__strnum(_rule3 != null && _rule3.parserName || "<unknown>") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return _rule3(o) || _missing(void 0, o, index, line);
          });
        }());
        _rule2 = (function () {
          var _rule3;
          _rule3 = (function () {
            var _rule4;
            _rule4 = (function () {
              var _rule5;
              _rule5 = (function () {
                var _rule6;
                _rule6 = (function () {
                  function _rule7(o) {
                    var _result, clone;
                    clone = o.clone();
                    _result = void 0;
                    return CommaOrNewlineWithCheckIndent(clone) && (_result = SpreadOrExpression(clone)) && (o.update(clone), _result);
                  }
                  return named(__strnum(_rule7 != null && _rule7.parserName || "<unknown>") + "*", function (o) {
                    var clone, item, result;
                    clone = o.clone();
                    result = [];
                    while (item = _rule7(clone)) {
                      result.push(item);
                    }
                    o.update(clone);
                    return result;
                  });
                }());
                return (function () {
                  function _rule7(o) {
                    var _result, clone;
                    clone = o.clone();
                    _result = {};
                    return CheckIndent(clone) && (_result.head = SpreadOrExpression(clone)) && (_result.tail = _rule6(clone)) && (o.update(clone), _result);
                  }
                  function _mutator(x) {
                    return [x.head].concat(__toArray(x.tail));
                  }
                  return named(_rule7 != null && _rule7.parserName || "<unknown>", function (o) {
                    var index, line, result;
                    index = o.index;
                    line = o.line;
                    result = _rule7(o);
                    if (!result) {
                      return false;
                    } else {
                      return _mutator(result, o, index, line);
                    }
                  });
                }());
              }());
              function _missing2() {
                return [];
              }
              return named(__strnum(_rule5 != null && _rule5.parserName || "<unknown>") + "?", function (o) {
                var index, line;
                index = o.index;
                line = o.line;
                return _rule5(o) || _missing2(void 0, o, index, line);
              });
            }());
            return function (o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return SomeEmptyLines(clone) && MaybeAdvance(clone) && (_result = _rule4(clone)) && EmptyLines(clone) && MaybeCommaOrNewline(clone) && PopIndent(clone) && (o.update(clone), _result);
            };
          }());
          function _missing() {
            return [];
          }
          return named(__strnum(_rule3 != null && _rule3.parserName || "<unknown>") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return _rule3(o) || _missing(void 0, o, index, line);
          });
        }());
        return (function () {
          function _rule3(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return NoSpace(clone) && OpenParenthesis(clone) && Space(clone) && (_result.first = _rule(clone)) && (_result.rest = _rule2(clone)) && CloseParenthesis(clone) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            return __toArray(x.first).concat(__toArray(x.rest));
          }
          return named(_rule3 != null && _rule3.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule3(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      UnclosedArguments = named("UnclosedArguments", (function () {
        var _rule, _rule2, _rule3;
        _rule = (function () {
          var _rule4;
          _rule4 = (function () {
            var _rule5;
            _rule5 = named(__strnum(SpaceChar != null && SpaceChar.parserName || "SpaceChar") + "+", function (o) {
              if (!SpaceChar(o)) {
                return false;
              } else {
                while (SpaceChar(o));
                return true;
              }
            });
            return function (o) {
              var clone;
              clone = o.clone();
              return _rule5(clone) && MaybeComment(clone) && (o.update(clone), true);
            };
          }());
          return function (o) {
            return _rule4(o) || CheckStop(o);
          };
        }());
        _rule2 = (function () {
          var _rule4;
          _rule4 = (function () {
            function _rule5(o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return Comma(clone) && (_result = SpreadOrExpression(clone)) && (o.update(clone), _result);
            }
            return named(__strnum(_rule5 != null && _rule5.parserName || "<unknown>") + "*", function (o) {
              var clone, item, result;
              clone = o.clone();
              result = [];
              while (item = _rule5(clone)) {
                result.push(item);
              }
              o.update(clone);
              return result;
            });
          }());
          return (function () {
            function _rule5(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.head = SpreadOrExpression(clone)) && (_result.tail = _rule4(clone)) && (o.update(clone), _result);
            }
            function _mutator(x) {
              return [x.head].concat(__toArray(x.tail));
            }
            return named(_rule5 != null && _rule5.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule5(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        _rule3 = (function () {
          var _rule4, _rule5;
          _rule4 = (function () {
            var _rule6;
            _rule6 = (function () {
              function _rule7(o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return CommaOrNewlineWithCheckIndent(clone) && (_result = SpreadOrExpression(clone)) && (o.update(clone), _result);
              }
              return named(__strnum(_rule7 != null && _rule7.parserName || "<unknown>") + "*", function (o) {
                var clone, item, result;
                clone = o.clone();
                result = [];
                while (item = _rule7(clone)) {
                  result.push(item);
                }
                o.update(clone);
                return result;
              });
            }());
            return (function () {
              function _rule7(o) {
                var _result, clone;
                clone = o.clone();
                _result = {};
                return Comma(clone) && SomeEmptyLines(clone) && Advance(clone) && CheckIndent(clone) && (_result.head = SpreadOrExpression(clone)) && (_result.tail = _rule6(clone)) && MaybeComma(clone) && PopIndent(clone) && (o.update(clone), _result);
              }
              function _mutator(x) {
                return [x.head].concat(__toArray(x.tail));
              }
              return named(_rule7 != null && _rule7.parserName || "<unknown>", function (o) {
                var index, line, result;
                index = o.index;
                line = o.line;
                result = _rule7(o);
                if (!result) {
                  return false;
                } else {
                  return _mutator(result, o, index, line);
                }
              });
            }());
          }());
          _rule5 = (function () {
            function _mutator() {
              return [];
            }
            return named(MaybeComma != null && MaybeComma.parserName || "MaybeComma", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = MaybeComma(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
          return function (o) {
            return _rule4(o) || _rule5(o);
          };
        }());
        return (function () {
          function _rule4(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return _rule(clone) && (_result.first = _rule2(clone)) && (_result.rest = _rule3(clone)) && (o.update(clone), _result);
          }
          function _mutator(x, o, i) {
            return __toArray(x.first).concat(__toArray(x.rest));
          }
          return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule4(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      InvocationArguments = cache(named("InvocationArguments", function (o) {
        return ClosedArguments(o) || UnclosedArguments(o);
      }));
      GenericPart = cache(named("GenericPart", (function () {
        var _rule;
        _rule = (function () {
          var _rule2;
          _rule2 = (function () {
            function _rule4(o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return Comma(clone) && (_result = BasicInvocationOrAccess(clone)) && (o.update(clone), _result);
            }
            return named(__strnum(_rule4 != null && _rule4.parserName || "<unknown>") + "*", function (o) {
              var clone, item, result;
              clone = o.clone();
              result = [];
              while (item = _rule4(clone)) {
                result.push(item);
              }
              o.update(clone);
              return result;
            });
          }());
          function _rule3(o) {
            if (o.data.charCodeAt(o.index) === 62) {
              o.index = __num(o.index) + 1;
              return 62;
            } else {
              o.fail('">"');
              return false;
            }
          }
          return (function () {
            function _rule4(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return LessThanSign(clone) && (_result.head = BasicInvocationOrAccess(clone)) && (_result.tail = _rule2(clone)) && _rule3(clone) && (o.update(clone), _result);
            }
            function _mutator(x) {
              return [x.head].concat(__toArray(x.tail));
            }
            return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule4(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        function _missing() {
          return [];
        }
        return named(__strnum(_rule != null && _rule.parserName || "<unknown>") + "?", function (o) {
          var index, line;
          index = o.index;
          line = o.line;
          return _rule(o) || _missing(void 0, o, index, line);
        });
      }())));
      GenericDefinitionPart = cache(named("GenericDefinitionPart", (function () {
        var _rule;
        _rule = (function () {
          var _rule2;
          _rule2 = (function () {
            function _rule4(o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return Comma(clone) && (_result = Identifier(clone)) && (o.update(clone), _result);
            }
            return named(__strnum(_rule4 != null && _rule4.parserName || "<unknown>") + "*", function (o) {
              var clone, item, result;
              clone = o.clone();
              result = [];
              while (item = _rule4(clone)) {
                result.push(item);
              }
              o.update(clone);
              return result;
            });
          }());
          function _rule3(o) {
            if (o.data.charCodeAt(o.index) === 62) {
              o.index = __num(o.index) + 1;
              return 62;
            } else {
              o.fail('">"');
              return false;
            }
          }
          return (function () {
            function _rule4(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return LessThanSign(clone) && (_result.head = Identifier(clone)) && (_result.tail = _rule2(clone)) && _rule3(clone) && (o.update(clone), _result);
            }
            function _mutator(x) {
              return [x.head].concat(__toArray(x.tail));
            }
            return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule4(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        function _missing() {
          return [];
        }
        return named(__strnum(_rule != null && _rule.parserName || "<unknown>") + "?", function (o) {
          var index, line;
          index = o.index;
          line = o.line;
          return _rule(o) || _missing(void 0, o, index, line);
        });
      }())));
      MaybeExclamationPointNoSpace = cache(named("MaybeExclamationPointNoSpace", (function () {
        var _rule;
        _rule = (function () {
          function _rule2(o) {
            if (o.data.charCodeAt(o.index) === 33) {
              o.index = __num(o.index) + 1;
              return 33;
            } else {
              o.fail('"!"');
              return false;
            }
          }
          return function (o) {
            var clone;
            clone = o.clone();
            return NoSpace(clone) && _rule2(clone) && (o.update(clone), "!");
          };
        }());
        return named(__strnum(_rule != null && _rule.parserName || "<unknown>") + "?", function (o) {
          return _rule(o) || true;
        });
      }())));
      InvocationOrAccessPart = named("InvocationOrAccessPart", (function () {
        var _rule, _rule2, _rule3;
        _rule = (function () {
          var _rule4;
          _rule4 = named(__strnum(AtSign != null && AtSign.parserName || "AtSign") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return AtSign(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
          });
          function _rule5(o) {
            return Period(o) || DoubleColon(o);
          }
          return (function () {
            function _rule6(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.existential = MaybeExistentialSymbolNoSpace(clone)) && (_result.owns = MaybeExclamationPointNoSpace(clone)) && (_result.bind = _rule4(clone)) && EmptyLines(clone) && Space(clone) && (_result.type = _rule5(clone)) && (_result.child = IdentifierNameConstOrNumberLiteral(clone)) && (_result.generic = GenericPart(clone)) && (o.update(clone), _result);
            }
            function _mutator(x) {
              return {
                type: x.type === "::" ? "protoAccess" : "access",
                child: x.child,
                existential: x.existential === "?",
                owns: x.owns === "!",
                bind: x.bind !== NOTHING,
                generic: x.generic
              };
            }
            return named(_rule6 != null && _rule6.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule6(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        _rule2 = (function () {
          var _rule4, _rule5;
          _rule4 = named(__strnum(AtSign != null && AtSign.parserName || "AtSign") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return AtSign(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
          });
          _rule5 = named(__strnum(DoubleColon != null && DoubleColon.parserName || "DoubleColon") + "?", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = DoubleColon(o);
            if (!result) {
              return "accessIndex";
            } else {
              return "protoAccessIndex";
            }
          });
          return (function () {
            function _rule6(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.existential = MaybeExistentialSymbolNoSpace(clone)) && (_result.owns = MaybeExclamationPointNoSpace(clone)) && (_result.bind = _rule4(clone)) && (_result.type = _rule5(clone)) && OpenSquareBracketChar(clone) && (_result.child = Index(clone)) && CloseSquareBracket(clone) && (_result.generic = GenericPart(clone)) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              if (x.child.type === "single") {
                return {
                  type: x.type === "accessIndex" ? "access" : "protoAccess",
                  child: x.child.node,
                  existential: x.existential === "?",
                  owns: x.owns === "!",
                  bind: x.bind !== NOTHING,
                  generic: x.generic
                };
              } else {
                if (x.owns === "!") {
                  o.error("Cannot use ! when using a multiple or slicing index");
                }
                if (x.bind !== NOTHING) {
                  o.error("Cannot use @ when using a multiple or slicing index");
                }
                if (__num(x.generic.length) > 0) {
                  o.error("Cannot use <> when using a multiple or slicing index");
                }
                return { type: x.type, child: x.child, existential: x.existential === "?" };
              }
            }
            return named(_rule6 != null && _rule6.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule6(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        _rule3 = (function () {
          var _rule4;
          _rule4 = named(__strnum(AtSign != null && AtSign.parserName || "AtSign") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return AtSign(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
          });
          return (function () {
            function _rule5(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.existential = MaybeExistentialSymbolNoSpace(clone)) && (_result.isApply = _rule4(clone)) && (_result.args = InvocationArguments(clone)) && (o.update(clone), _result);
            }
            function _mutator(x) {
              return {
                type: "call",
                args: x.args,
                existential: x.existential === "?",
                isNew: false,
                isApply: x.isApply !== NOTHING
              };
            }
            return named(_rule5 != null && _rule5.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule5(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        return function (o) {
          return _rule(o) || _rule2(o) || _rule3(o);
        };
      }()));
      convertInvocationOrAccess = (function () {
        var linkTypes;
        linkTypes = {
          access: (function () {
            var indexTypes;
            indexTypes = {
              multi: function (o, i, child) {
                return function (parent) {
                  var result, setParent, tmp, tmpIds;
                  setParent = parent;
                  tmpIds = [];
                  if (parent.cacheable) {
                    tmp = o.tmp(i, getTmpId(), "ref", parent.type(o));
                    tmpIds.push(tmp.id);
                    setParent = o.assign(i, tmp, "=", parent.doWrap(o));
                    parent = tmp;
                  }
                  result = o.array(i, (function () {
                    var _arr, _arr2, _len, element, j;
                    for (_arr = [], _arr2 = __toArray(child.elements), j = 0, _len = _arr2.length; j < _len; ++j) {
                      element = _arr2[j];
                      _arr.push(o.access(
                        i,
                        j === 0 ? setParent : parent,
                        element
                      ));
                    }
                    return _arr;
                  }()));
                  if (tmpIds.length) {
                    return o.tmpWrapper(i, result, tmpIds);
                  } else {
                    return result;
                  }
                };
              }
            };
            return function (o, i, head, link, j, links) {
              var bindAccess, child, existentialOp, makeAccess, result, setChild, setHead, tmp, tmpIds;
              if (link.bind) {
                bindAccess = function (parent, child) {
                  return o.call(
                    i,
                    o.ident(i, "__bind"),
                    [parent, child]
                  );
                };
              } else {
                bindAccess = function (parent, child) {
                  return o.access(i, parent, child);
                };
              }
              if (link.owns) {
                tmpIds = [];
                setHead = head;
                if (head.cacheable) {
                  tmp = o.tmp(i, getTmpId(), "ref", head.type(o));
                  tmpIds.push(tmp.id);
                  setHead = o.assign(i, tmp, "=", head.doWrap(o));
                  head = tmp;
                }
                child = link.child;
                setChild = child;
                if (child.cacheable) {
                  tmp = o.tmp(i, getTmpId(), "ref", child.type(o));
                  tmpIds.push(tmp.id);
                  setChild = o.assign(i, tmp, "=", child.doWrap(o));
                  child = tmp;
                }
                result = o["if"](
                  i,
                  (function () {
                    var existentialOp, ownershipOp;
                    ownershipOp = o.macros.getByLabel("ownership");
                    if (!ownershipOp) {
                      throw Error("Cannot use ownership access until the ownership operator has been defined");
                    }
                    if (link.existential) {
                      existentialOp = o.macros.getByLabel("existential");
                      if (!existentialOp) {
                        throw Error("Cannot use existential access until the existential operator has been defined");
                      }
                      return o.binary(
                        i,
                        existentialOp.func(
                          { op: "", node: setHead },
                          o,
                          i,
                          o.line
                        ),
                        "&&",
                        ownershipOp.func(
                          { left: head, op: "", right: setChild },
                          o,
                          i,
                          o.line
                        )
                      );
                    } else {
                      return ownershipOp.func(
                        { left: setHead, op: "", right: setChild },
                        o,
                        i,
                        o.line
                      );
                    }
                  }()),
                  convertCallChain(
                    o,
                    i,
                    bindAccess(head, child),
                    __num(j) + 1,
                    links
                  )
                );
                if (tmpIds.length) {
                  return o.tmpWrapper(i, result, tmpIds);
                } else {
                  return result;
                }
              } else {
                switch (link.type) {
                case "access":
                  makeAccess = function (parent) {
                    return bindAccess(parent, link.child);
                  };
                  break;
                case "accessIndex":
                  if (!__owns.call(indexTypes, link.child.type)) {
                    throw Error("Unknown index type: " + __strnum(link.child.type));
                  }
                  makeAccess = indexTypes[link.child.type](o, i, link.child);
                  break;
                default: throw Error("Unknown link type: " + __strnum(link.type));
                }
                if (link.existential) {
                  tmpIds = [];
                  setHead = head;
                  if (head.cacheable) {
                    tmp = o.tmp(i, getTmpId(), "ref", head.type(o));
                    tmpIds.push(tmp.id);
                    setHead = o.assign(i, tmp, "=", head.doWrap(o));
                    head = tmp;
                  }
                  existentialOp = o.macros.getByLabel("existential");
                  if (!existentialOp) {
                    throw Error("Cannot use existential access until the existential operator has been defined");
                  }
                  result = o["if"](
                    i,
                    existentialOp.func(
                      { op: "", node: setHead },
                      o,
                      i,
                      o.line
                    ),
                    convertCallChain(
                      o,
                      i,
                      makeAccess(head),
                      __num(j) + 1,
                      links
                    )
                  );
                  if (tmpIds.length) {
                    return o.tmpWrapper(i, result, tmpIds);
                  } else {
                    return result;
                  }
                } else {
                  return convertCallChain(
                    o,
                    i,
                    makeAccess(head),
                    __num(j) + 1,
                    links
                  );
                }
              }
            };
          }()),
          call: (function () {
            return function (o, i, head, link, j, links) {
              var child, parent, result, setChild, setHead, setParent, tmp, tmpIds;
              if (!link.existential) {
                return convertCallChain(
                  o,
                  i,
                  o.call(
                    i,
                    head,
                    link.args,
                    link.isNew,
                    link.isApply
                  ),
                  __num(j) + 1,
                  links
                );
              } else {
                tmpIds = [];
                setHead = head;
                if (head instanceof AccessNode && !link.isApply && !link.isNew) {
                  parent = head.parent;
                  child = head.child;
                  setParent = parent;
                  setChild = child;
                  if (parent.cacheable) {
                    tmp = o.tmp(i, getTmpId(), "ref", parent.type(o));
                    tmpIds.push(tmp.id);
                    setParent = o.assign(i, tmp, "=", parent.doWrap(o));
                    parent = tmp;
                  }
                  if (child.cacheable) {
                    tmp = o.tmp(i, getTmpId(), "ref", child.type(o));
                    tmpIds.push(tmp.id);
                    setChild = o.assign(i, tmp, "=", child.doWrap(o));
                    child = tmp;
                  }
                  if (parent !== setParent || child !== setChild) {
                    setHead = o.access(i, setParent, setChild);
                    head = o.access(i, parent, child);
                  }
                } else if (head.cacheable) {
                  tmp = o.tmp(i, getTmpId(), "ref", head.type(o));
                  tmpIds.push(tmp.id);
                  setHead = o.assign(i, tmp, "=", head.doWrap(o));
                  head = tmp;
                }
                result = o["if"](
                  i,
                  o.binary(
                    i,
                    o.unary(i, "typeof", setHead),
                    "===",
                    o["const"](i, "function")
                  ),
                  convertCallChain(
                    o,
                    i,
                    o.call(
                      i,
                      head,
                      link.args,
                      link.isNew,
                      link.isApply
                    ),
                    __num(j) + 1,
                    links
                  )
                );
                if (tmpIds.length) {
                  return o.tmpWrapper(i, result, tmpIds);
                } else {
                  return result;
                }
              }
            };
          }())
        };
        linkTypes.accessIndex = linkTypes.access;
        function convertCallChain(o, i, head, j, links) {
          var link;
          if (!__lt(j, links.length)) {
            return head;
          } else {
            link = links[j];
            if (!__owns.call(linkTypes, link.type)) {
              throw Error("Unknown call-chain link: " + __strnum(link.type));
            }
            return linkTypes[link.type](
              o,
              i,
              head,
              link,
              j,
              links
            );
          }
        }
        return function (isNew, head, tail, o, i) {
          var _arr, _i, _len, _ref, links, part;
          if (tail.length === 0 && !isNew && head.type === "normal" && (!head.generic || head.generic.length === 0)) {
            return head.node;
          }
          links = [];
          if (head.type === "thisAccess") {
            links.push({ type: "access", child: head.child, existential: head.existential });
          }
          if (head.generic && head.generic.length !== 0) {
            links.push({
              type: "access",
              child: o["const"](i, "generic"),
              existential: false
            });
            links.push({ type: "call", args: head.generic, existential: false });
          }
          for (_arr = __toArray(tail), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            part = _arr[_i];
            switch (part.type) {
            case "protoAccess":
            case "protoAccessIndex":
              links.push({
                type: "access",
                child: o["const"](i, "prototype"),
                existential: part.existential
              });
              links.push(((_ref = __import({}, part)).type = part.type === "protoAccess" ? "access" : "accessIndex", _ref));
              if (part.generic && part.generic.length !== 0) {
                links.push({
                  type: "access",
                  child: o["const"](i, "generic"),
                  existential: false
                });
                links.push({ type: "call", args: part.generic, existential: false });
              }
              break;
            case "access":
            case "accessIndex":
              links.push(part);
              if (part.generic && part.generic.length !== 0) {
                links.push({
                  type: "access",
                  child: o["const"](i, "generic"),
                  existential: false
                });
                links.push({ type: "call", args: part.generic, existential: false });
              }
              break;
            case "call":
              if (isNew && part.isApply) {
                o.error("Cannot call with both new and @ at the same time");
              }
              links.push(((_ref = __import({}, part)).isNew = isNew, _ref));
              isNew = false;
              break;
            default: o.error("Unknown link type: " + __strnum(part.type));
            }
          }
          if (isNew) {
            links.push({
              type: "call",
              args: [],
              existential: false,
              isNew: true,
              isApply: false
            });
          }
          return convertCallChain(
            o,
            i,
            head.node,
            0,
            links
          );
        };
      }());
      BasicInvocationOrAccess = named("BasicInvocationOrAccess", (function () {
        var _rule, _rule2, _rule3;
        _rule = (function () {
          var _rule4;
          _rule4 = word("new");
          return named(__strnum(_rule4 != null && _rule4.parserName || "<unknown>") + "?", function (o) {
            var index, line;
            index = o.index;
            line = o.line;
            return _rule4(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
          });
        }());
        _rule2 = (function () {
          var _rule4, _rule5;
          _rule4 = (function () {
            var _rule6;
            _rule6 = named(__strnum(AtSign != null && AtSign.parserName || "AtSign") + "?", function (o) {
              var index, line;
              index = o.index;
              line = o.line;
              return AtSign(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
            });
            return (function () {
              function _rule7(o) {
                var _result, clone;
                clone = o.clone();
                _result = {};
                return (_result.node = ThisShorthandLiteral(clone)) && (_result.existential = MaybeExistentialSymbolNoSpace(clone)) && (_result.owns = MaybeExclamationPointNoSpace(clone)) && (_result.bind = _rule6(clone)) && (_result.child = IdentifierNameConstOrNumberLiteral(clone)) && (o.update(clone), _result);
              }
              function _mutator(x, o, i) {
                return {
                  type: "thisAccess",
                  node: x.node,
                  child: x.child,
                  existential: x.existential === "?",
                  owns: x.owns === "!",
                  bind: x.bind !== NOTHING
                };
              }
              return named(_rule7 != null && _rule7.parserName || "<unknown>", function (o) {
                var index, line, result;
                index = o.index;
                line = o.line;
                result = _rule7(o);
                if (!result) {
                  return false;
                } else {
                  return _mutator(result, o, index, line);
                }
              });
            }());
          }());
          _rule5 = (function () {
            function _mutator(x) {
              return { type: "normal", node: x };
            }
            return named(PrimaryExpression != null && PrimaryExpression.parserName || "PrimaryExpression", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = PrimaryExpression(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
          return function (o) {
            return _rule4(o) || _rule5(o);
          };
        }());
        _rule3 = named(__strnum(InvocationOrAccessPart != null && InvocationOrAccessPart.parserName || "InvocationOrAccessPart") + "*", function (o) {
          var clone, item, result;
          clone = o.clone();
          result = [];
          while (item = InvocationOrAccessPart(clone)) {
            result.push(item);
          }
          o.update(clone);
          return result;
        });
        return (function () {
          function _rule4(o) {
            var _result, clone;
            clone = o.clone();
            _result = {};
            return (_result.isNew = _rule(clone)) && (_result.head = _rule2(clone)) && (_result.generic = GenericPart(clone)) && (_result.tail = _rule3(clone)) && (o.update(clone), _result);
          }
          function _mutator(_p, o, i) {
            var _ref, generic, head, isNew, tail;
            isNew = _p.isNew;
            head = _p.head;
            generic = _p.generic;
            tail = _p.tail;
            return convertInvocationOrAccess(
              isNew !== NOTHING,
              ((_ref = __import({}, head)).generic = generic, _ref),
              tail,
              o,
              i
            );
          }
          return named(_rule4 != null && _rule4.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule4(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
      }()));
      SuperToken = cache(named("SuperToken", word("super")));
      SuperInvocation = named("SuperInvocation", (function () {
        var _backend;
        _backend = (function () {
          var _rule;
          _rule = (function () {
            var _rule2;
            _rule2 = (function () {
              function _rule3(o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return EmptyLines(clone) && Space(clone) && Period(clone) && (_result = IdentifierNameConstOrNumberLiteral(clone)) && (o.update(clone), _result);
              }
              function _rule4(o) {
                var _result, clone;
                clone = o.clone();
                _result = void 0;
                return OpenSquareBracketChar(clone) && (_result = Expression(clone)) && CloseSquareBracket(clone) && (o.update(clone), _result);
              }
              return function (o) {
                return _rule3(o) || _rule4(o);
              };
            }());
            return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "?", function (o) {
              var index, line;
              index = o.index;
              line = o.line;
              return _rule2(o) || (typeof NOTHING === "function" ? NOTHING(void 0, o, index, line) : NOTHING);
            });
          }());
          return (function () {
            function _rule2(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return SuperToken(clone) && (_result.child = _rule(clone)) && (_result.args = InvocationArguments(clone)) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              return o["super"](
                i,
                x.child !== NOTHING ? x.child : void 0,
                x.args
              );
            }
            return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule2(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!SuperToken(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      EvalToken = cache(named("EvalToken", word("eval")));
      Eval = named("Eval", (function () {
        var _backend;
        _backend = (function () {
          function _rule(o) {
            var _result, clone;
            clone = o.clone();
            _result = void 0;
            return EvalToken(clone) && (_result = InvocationArguments(clone)) && (o.update(clone), _result);
          }
          function _mutator(args, o, i) {
            if (args.length !== 1) {
              o.error("Expected only one argument to eval");
            }
            return o["eval"](i, args[0]);
          }
          return named(_rule != null && _rule.parserName || "<unknown>", function (o) {
            var index, line, result;
            index = o.index;
            line = o.line;
            result = _rule(o);
            if (!result) {
              return false;
            } else {
              return _mutator(result, o, index, line);
            }
          });
        }());
        return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
          var result;
          if (!EvalToken(o.clone())) {
            return false;
          } else {
            result = _backend(o);
            if (!result) {
              throw SHORT_CIRCUIT;
            }
            return result;
          }
        });
      }()));
      InvocationOrAccess = named("InvocationOrAccess", (function () {
        function _rule(o) {
          var args, clone, i;
          if (_inAst.peek()) {
            i = o.index;
            clone = o.clone();
            Space(clone);
            if (!DollarSign(clone)) {
              return false;
            }
            _inAst.push(false);
            try {
              args = InvocationArguments(clone);
              if (!args) {
                return false;
              }
              o.update(clone);
              return o.call(
                i,
                o.ident(i, "$"),
                args
              );
            } finally {
              _inAst.pop();
            }
          }
        }
        return function (o) {
          return _rule(o) || BasicInvocationOrAccess(o) || SuperInvocation(o) || Eval(o);
        };
      }()));
      CustomPostfixUnary = named("CustomPostfixUnary", function (o) {
        var _arr, _i, clone, line, node, op, operator, rule, startIndex;
        startIndex = o.index;
        line = o.line;
        node = InvocationOrAccess(o);
        if (!node) {
          return false;
        } else {
          for (_arr = __toArray(o.macros.postfixUnaryOperators), _i = _arr.length; _i--; ) {
            operator = _arr[_i];
            clone = o.clone();
            rule = operator.rule;
            op = rule(clone);
            if (!op) {
              continue;
            }
            o.update(clone);
            return operator.func(
              { op: op, node: node },
              o,
              startIndex,
              line
            );
          }
          return node;
        }
      });
      CustomPrefixUnary = named("CustomPrefixUnary", function (o) {
        var _arr, _i, clone, line, node, op, operator, rule, startIndex;
        startIndex = o.index;
        line = o.line;
        for (_arr = __toArray(o.macros.prefixUnaryOperators), _i = _arr.length; _i--; ) {
          operator = _arr[_i];
          clone = o.clone();
          rule = operator.rule;
          op = rule(clone);
          if (!op) {
            continue;
          }
          node = CustomPrefixUnary(clone);
          if (!node) {
            continue;
          }
          o.update(clone);
          return operator.func(
            { op: op, node: node },
            o,
            startIndex,
            line
          );
        }
        return CustomPostfixUnary(o);
      });
      getUseCustomBinaryOperator = (function () {
        var precedenceCache;
        precedenceCache = [];
        return function (precedence) {
          var _ref;
          if ((_ref = precedenceCache[precedence]) == null) {
            return precedenceCache[precedence] = cache(function (o) {
              var _arr, _i, _i2, _len, binaryOperators, clone, head, inverted, j, left, line, nextRule, node, op, operator, operators, part, right, rule, startIndex, tail;
              startIndex = o.index;
              line = o.line;
              binaryOperators = o.macros.binaryOperators;
              if (__lt(binaryOperators.length, precedence)) {
                return CustomPrefixUnary(o);
              } else {
                nextRule = getUseCustomBinaryOperator(__num(precedence) + 1);
                head = nextRule(o);
                if (!head) {
                  return false;
                } else {
                  operators = binaryOperators[precedence];
                  if (operators) {
                    for (_arr = __toArray(operators), _i = _arr.length; _i--; ) {
                      operator = _arr[_i];
                      rule = operator.rule;
                      tail = [];
                      while (true) {
                        clone = o.clone();
                        inverted = false;
                        if (operator.invertible) {
                          inverted = MaybeNotToken(clone);
                          if (!inverted) {
                            break;
                          }
                        }
                        op = rule(clone);
                        if (!op) {
                          break;
                        }
                        node = nextRule(clone);
                        if (!node) {
                          break;
                        }
                        o.update(clone);
                        tail.push({ inverted: inverted === "not", op: op, node: node });
                        if (operator.maximum && tail.length >= __num(operator.maximum)) {
                          break;
                        }
                      }
                      if (tail.length) {
                        if (!operator.rightToLeft) {
                          left = head;
                          for (_i2 = 0, _len = tail.length; _i2 < _len; ++_i2) {
                            part = tail[_i2];
                            left = operator.func(
                              { left: left, inverted: part.inverted, op: part.op, right: part.node },
                              o,
                              startIndex,
                              line
                            );
                          }
                          return left;
                        } else {
                          right = tail[tail.length - 1].node;
                          for (j = tail.length; j--; ) {
                            part = tail[j];
                            right = operator.func(
                              {
                                left: j === 0 ? head : tail[j - 1].node,
                                inverted: part.inverted,
                                op: part.op,
                                right: right
                              },
                              o,
                              startIndex,
                              line
                            );
                          }
                          return right;
                        }
                      }
                    }
                  }
                  return head;
                }
              }
            });
          } else {
            return _ref;
          }
        };
      }());
      Logic = named("Logic", getUseCustomBinaryOperator(0));
      ExpressionAsStatement = named("ExpressionAsStatement", function (o) {
        return UseMacro(o) || Logic(o);
      });
      Expression = cache(named("Expression", inExpression(ExpressionAsStatement)));
      Statement = named("Statement", (function () {
        var _rule;
        _rule = inStatement(function (o) {
          return DefineMacro(o) || DefineHelper(o) || DefineOperator(o) || DefineSyntax(o) || Assignment(o) || ExpressionAsStatement(o);
        });
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return (_result = _rule(clone)) && Space(clone) && (o.update(clone), _result);
        };
      }()));
      Line = named("Line", (function () {
        function _rule(o) {
          return LicenseComment(o) || Statement(o);
        }
        return function (o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return CheckIndent(clone) && (_result = _rule(clone)) && (o.update(clone), _result);
        };
      }()));
      _Block = (function () {
        var runSync;
        function mutator(lines, o, i) {
          var _arr, _i, _len, item, nodes;
          nodes = [];
          for (_arr = __toArray(lines), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            item = _arr[_i];
            if (item instanceof BlockNode && item.label == null) {
              nodes.push.apply(nodes, __toArray(item.nodes));
            } else if (!(item instanceof NothingNode)) {
              nodes.push(item);
            }
          }
          switch (nodes.length) {
          case 0: return o.nothing(i);
          case 1: return nodes[0];
          default:
            return o.block(i, nodes);
          }
        }
        runSync = (function () {
          var _rule;
          _rule = (function () {
            function _rule2(o) {
              var _result, clone;
              clone = o.clone();
              _result = void 0;
              return Newline(clone) && EmptyLines(clone) && (_result = Line(clone)) && (o.update(clone), _result);
            }
            return named(__strnum(_rule2 != null && _rule2.parserName || "<unknown>") + "*", function (o) {
              var clone, item, result;
              clone = o.clone();
              result = [];
              while (item = _rule2(clone)) {
                result.push(item);
              }
              o.update(clone);
              return result;
            });
          }());
          return (function () {
            function _rule2(o) {
              var _result, clone;
              clone = o.clone();
              _result = {};
              return (_result.head = Line(clone)) && (_result.tail = _rule(clone)) && (o.update(clone), _result);
            }
            function _mutator(x, o, i) {
              return mutator([x.head].concat(__toArray(x.tail)), o, i);
            }
            return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
              var index, line, result;
              index = o.index;
              line = o.line;
              result = _rule2(o);
              if (!result) {
                return false;
              } else {
                return _mutator(result, o, index, line);
              }
            });
          }());
        }());
        function runAsync(o, callback) {
          var head, i, lines;
          i = o.index;
          try {
            head = Line(o);
          } catch (e) {
            return callback(e);
          }
          if (!head) {
            return callback(null, head);
          }
          lines = [head];
          function next() {
            var clone, line, startTime;
            try {
              startTime = new Date().getTime();
              while (true) {
                if (__num(new Date().getTime()) - __num(startTime) > 17) {
                  return nextTick(next);
                }
                clone = o.clone();
                if (!Newline(clone) || !EmptyLines(clone)) {
                  break;
                }
                line = Line(clone);
                if (!line) {
                  break;
                }
                o.update(clone);
                lines.push(line);
              }
            } catch (e) {
              return callback(e);
            }
            return callback(null, mutator(lines, o, i));
          }
          return next();
        }
        return function (o, callback) {
          if (callback != null) {
            return runAsync(o, callback);
          } else {
            return runSync(o);
          }
        };
      }());
      Block = named("Block", (function () {
        function _rule(o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return CheckIndent(clone) && (_result = IndentedUnclosedObjectLiteralInner(clone)) && (o.update(clone), _result);
        }
        function _rule2(o) {
          var _result, clone;
          clone = o.clone();
          _result = void 0;
          return CheckIndent(clone) && (_result = IndentedUnclosedArrayLiteralInner(clone)) && (o.update(clone), _result);
        }
        return function (o) {
          return _rule(o) || _rule2(o) || _Block(o);
        };
      }()));
      BOM = (function () {
        function _rule(o) {
          if (o.data.charCodeAt(o.index) === 65279) {
            o.index = __num(o.index) + 1;
            return 65279;
          } else {
            o.fail('"\ufeff"');
            return false;
          }
        }
        return named(__strnum(_rule != null && _rule.parserName || "<unknown>") + "?", function (o) {
          return _rule(o) || true;
        });
      }());
      Shebang = (function () {
        var _rule;
        _rule = (function () {
          var _rule4;
          function _rule2(o) {
            if (o.data.charCodeAt(o.index) === 35) {
              o.index = __num(o.index) + 1;
              return 35;
            } else {
              o.fail('"#"');
              return false;
            }
          }
          function _rule3(o) {
            if (o.data.charCodeAt(o.index) === 33) {
              o.index = __num(o.index) + 1;
              return 33;
            } else {
              o.fail('"!"');
              return false;
            }
          }
          _rule4 = (function () {
            var _rule5;
            _rule5 = named("!" + __strnum(Newline != null && Newline.parserName || "Newline"), function (o) {
              return !Newline(o.clone()) && AnyChar(o);
            });
            return named(__strnum(_rule5 != null && _rule5.parserName || "<unknown>") + "*", function (o) {
              var clone, item, result;
              clone = o.clone();
              result = [];
              while (item = _rule5(clone)) {
                result.push(item);
              }
              o.update(clone);
              return result;
            });
          }());
          return function (o) {
            var clone;
            clone = o.clone();
            return _rule2(clone) && _rule3(clone) && _rule4(clone) && (o.update(clone), true);
          };
        }());
        return named(__strnum(_rule != null && _rule.parserName || "<unknown>") + "?", function (o) {
          return _rule(o) || true;
        });
      }());
      function Root(o, callback) {
        var _f, i;
        o.clearCache();
        i = o.index;
        BOM(o);
        Shebang(o);
        EmptyLines(o);
        if (callback != null) {
          _f = function (next) {
            return _Block(o, function (err, block) {
              if (err != null) {
                o.clearCache();
                return callback(err);
              }
              return next(block);
            });
          };
        } else {
          _f = function (next) {
            return next(_Block(o));
          };
        }
        return _f(function (block) {
          var result, x;
          x = block || o.nothing(i);
          EmptyLines(o);
          Space(o);
          result = o.root(i, o.options.filename, x);
          o.clearCache();
          if (callback != null) {
            return callback(null, result);
          } else {
            return result;
          }
        });
      }
      ParserError = (function (Error) {
        var _Error_prototype, _ParserError_prototype;
        function ParserError(message, text, line) {
          var _this, err;
          _this = this instanceof ParserError ? this : __create(_ParserError_prototype);
          if (typeof message !== "string") {
            throw TypeError("Expected message to be a String, got " + __typeof(message));
          }
          if (typeof text !== "string") {
            throw TypeError("Expected text to be a String, got " + __typeof(text));
          }
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          err = Error.call(_this, message + " at line #" + line);
          _this.message = err.message;
          if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(_this, ParserError);
          } else if ("stack" in err) {
            _this.stack = err.stack;
          }
          _this.text = text;
          _this.line = line;
          return _this;
        }
        _Error_prototype = Error.prototype;
        _ParserError_prototype = ParserError.prototype = __create(_Error_prototype);
        _ParserError_prototype.constructor = ParserError;
        ParserError.displayName = "ParserError";
        if (typeof Error.extended === "function") {
          Error.extended(ParserError);
        }
        _ParserError_prototype.name = ParserError.name;
        return ParserError;
      }(Error));
      MacroError = (function (Error) {
        var _Error_prototype, _MacroError_prototype;
        function MacroError(inner, text, line) {
          var _this, err, innerType;
          _this = this instanceof MacroError ? this : __create(_MacroError_prototype);
          if (!(inner instanceof Error)) {
            throw TypeError("Expected inner to be a " + __name(Error) + ", got " + __typeof(inner));
          }
          if (typeof text !== "string") {
            throw TypeError("Expected text to be a String, got " + __typeof(text));
          }
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          innerType = __typeof(inner);
          err = Error.call(_this, (innerType === "Error" ? "" : innerType + ": ") + String(inner != null ? inner.message : void 0) + " at line #" + line);
          _this.message = err.message;
          if ("stack" in inner && typeof inner.stack === "string") {
            _this.innerStack = inner.stack;
            _this.stack = "MacroError at #" + line + ": " + __strnum(inner.stack);
          } else if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(_this, MacroError);
          } else if ("stack" in err) {
            _this.stack = err.stack;
          }
          _this.inner = inner;
          _this.text = text;
          _this.line = line;
          return _this;
        }
        _Error_prototype = Error.prototype;
        _MacroError_prototype = MacroError.prototype = __create(_Error_prototype);
        _MacroError_prototype.constructor = MacroError;
        MacroError.displayName = "MacroError";
        if (typeof Error.extended === "function") {
          Error.extended(MacroError);
        }
        _MacroError_prototype.name = MacroError.name;
        _MacroError_prototype.setLine = function (line) {
          this.line = line;
          if (this.innerStack != null) {
            this.stack = "MacroError at #" + __strnum(line) + ": " + __strnum(this.innerStack);
          }
        };
        return MacroError;
      }(Error));
      function map(array, func, arg) {
        var _arr, _i, _len, changed, item, newItem, result;
        result = [];
        changed = false;
        for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          item = _arr[_i];
          newItem = func(item, arg);
          result.push(newItem);
          if (item !== newItem) {
            changed = true;
          }
        }
        if (changed) {
          return result;
        } else {
          return array;
        }
      }
      function mapAsync(array, func) {
        var _i, args, callback, changed;
        _i = arguments.length - 1;
        if (_i > 2) {
          args = __slice.call(arguments, 2, _i);
        } else {
          _i = 2;
          args = [];
        }
        callback = arguments[_i];
        changed = false;
        return __asyncResult(
          1,
          __num(array.length),
          function (_i2, next) {
            var item;
            item = array[_i2];
            return func.apply(void 0, [item].concat(__toArray(args), [
              function (_e, newItem) {
                if (_e != null) {
                  return next(_e);
                }
                if (item !== newItem) {
                  changed = true;
                }
                return next(null, newItem);
              }
            ]));
          },
          function (err, result) {
            if (typeof err !== "undefined" && err !== null) {
              return callback(err);
            } else {
              return callback(null, changed ? result : array);
            }
          }
        );
      }
      FailureManager = (function () {
        var _FailureManager_prototype;
        function FailureManager() {
          var _this;
          _this = this instanceof FailureManager ? this : __create(_FailureManager_prototype);
          _this.messages = [];
          _this.index = 0;
          _this.line = 0;
          return _this;
        }
        _FailureManager_prototype = FailureManager.prototype;
        FailureManager.displayName = "FailureManager";
        _FailureManager_prototype.add = function (message, index, line) {
          if (!__lte(index, this.index)) {
            this.messages = [];
            this.index = index;
          }
          if (__lt(this.line, line)) {
            this.line = line;
          }
          if (!__lt(index, this.index)) {
            this.messages.push(message);
          }
        };
        return FailureManager;
      }());
      nodeToType = (function () {
        var identToType;
        identToType = {
          Boolean: Type.boolean,
          String: Type.string,
          Number: Type.number,
          Array: Type.array,
          Object: Type.object,
          Function: Type["function"],
          RegExp: Type.regexp,
          Date: Type.date,
          Error: Type.error,
          RangeError: Type.error,
          ReferenceError: Type.error,
          SyntaxError: Type.error,
          TypeError: Type.error,
          URIError: Type.error
        };
        return function (node) {
          var _arr, _arr2, _i, _len, _ref, arg, args, basetype, current, data, key, type, value;
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          if (node instanceof IdentNode) {
            return (__owns.call(identToType, _ref = node.name) ? identToType[_ref] : void 0) || Type.any;
          } else if (node instanceof ConstNode) {
            if (node.value === null) {
              return Type["null"];
            } else if (node.value === void 0) {
              return Type["undefined"];
            } else {
              return Type.any;
            }
          } else if (node instanceof TypeGenericNode) {
            basetype = nodeToType(node.basetype);
            for (_arr = [], _arr2 = __toArray(node.args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              arg = _arr2[_i];
              _arr.push(nodeToType(arg));
            }
            args = _arr;
            if (basetype === Type.array || basetype === Type["function"]) {
              return Type.generic.apply(Type, [basetype.base].concat(__toArray(args)));
            } else if (basetype !== Type.any) {
              return Type.generic.apply(Type, [basetype].concat(__toArray(args)));
            } else {
              return Type.any;
            }
          } else if (node instanceof TypeUnionNode) {
            current = Type.none;
            for (_arr = __toArray(node.types), _i = _arr.length; _i--; ) {
              type = _arr[_i];
              current = current.union(nodeToType(type));
            }
            return current;
          } else if (node instanceof TypeObjectNode) {
            data = {};
            for (_arr = __toArray(node.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              key = (_ref = _arr[_i]).key;
              value = _ref.value;
              if (key instanceof ConstNode) {
                data[key.value] = nodeToType(value);
              }
            }
            return Type.makeObject(data);
          } else {
            return Type.any;
          }
        };
      }());
      MacroHelper = (function () {
        var _MacroHelper_prototype, mutators;
        function MacroHelper(state, index, position, inGenerator, inEvilAst) {
          var _this;
          _this = this instanceof MacroHelper ? this : __create(_MacroHelper_prototype);
          if (!(state instanceof State)) {
            throw TypeError("Expected state to be a " + __name(State) + ", got " + __typeof(state));
          }
          _this.state = state;
          _this.index = index;
          _this.position = position;
          _this.inGenerator = inGenerator;
          _this.inEvilAst = inEvilAst;
          _this.unsavedTmps = [];
          _this.savedTmps = [];
          return _this;
        }
        _MacroHelper_prototype = MacroHelper.prototype;
        MacroHelper.displayName = "MacroHelper";
        _MacroHelper_prototype.doWrap = function (node) {
          if (node instanceof Node) {
            return node.doWrap(this.state);
          } else {
            return node;
          }
        };
        _MacroHelper_prototype["let"] = function (ident, isMutable, type) {
          if (!(ident instanceof TmpNode) && !(ident instanceof IdentNode)) {
            throw TypeError("Expected ident to be one of " + (__name(TmpNode) + " or " + __name(IdentNode)) + ", got " + __typeof(ident));
          }
          if (isMutable == null) {
            isMutable = false;
          } else if (typeof isMutable !== "boolean") {
            throw TypeError("Expected isMutable to be a Boolean, got " + __typeof(isMutable));
          }
          if (type == null) {
            type = Type.any;
          } else if (!(type instanceof Type)) {
            throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
          }
          if (ident instanceof IdentNode && isMutable && type.isSubsetOf(Type.undefinedOrNull)) {
            type = Type.any;
          }
          return this.state.scope.add(ident, isMutable, type);
        };
        _MacroHelper_prototype.hasVariable = function (ident) {
          if (!(ident instanceof TmpNode) && !(ident instanceof IdentNode)) {
            throw TypeError("Expected ident to be one of " + (__name(TmpNode) + " or " + __name(IdentNode)) + ", got " + __typeof(ident));
          }
          return this.state.scope.has(ident);
        };
        _MacroHelper_prototype.isVariableMutable = function (ident) {
          if (!(ident instanceof TmpNode) && !(ident instanceof IdentNode)) {
            throw TypeError("Expected ident to be one of " + (__name(TmpNode) + " or " + __name(IdentNode)) + ", got " + __typeof(ident));
          }
          return this.state.scope.isMutable(ident);
        };
        _MacroHelper_prototype["var"] = function (ident, isMutable) {
          if (!(ident instanceof IdentNode) && !(ident instanceof TmpNode)) {
            throw TypeError("Expected ident to be one of " + (__name(IdentNode) + " or " + __name(TmpNode)) + ", got " + __typeof(ident));
          }
          if (isMutable == null) {
            isMutable = false;
          } else if (typeof isMutable !== "boolean") {
            throw TypeError("Expected isMutable to be a Boolean, got " + __typeof(isMutable));
          }
          return this.state["var"](this.index, ident, isMutable);
        };
        _MacroHelper_prototype.def = function (key, value) {
          if (key == null) {
            key = NothingNode(0, 0, this.state.scope.id);
          } else if (!(key instanceof Node)) {
            throw TypeError("Expected key to be a " + __name(Node) + ", got " + __typeof(key));
          }
          if (value == null) {
            value = void 0;
          } else if (!(value instanceof Node)) {
            throw TypeError("Expected value to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(value));
          }
          return this.state.def(this.index, key, this.doWrap(value));
        };
        _MacroHelper_prototype.noop = function () {
          return this.state.nothing(this.index);
        };
        _MacroHelper_prototype.block = function (nodes, label) {
          var _i;
          if (!__isArray(nodes)) {
            throw TypeError("Expected nodes to be an Array, got " + __typeof(nodes));
          } else {
            for (_i = nodes.length; _i--; ) {
              if (!(nodes[_i] instanceof Node)) {
                throw TypeError("Expected " + ("nodes[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(nodes[_i]));
              }
            }
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.state.block(this.index, nodes, label).reduce(this.state);
        };
        _MacroHelper_prototype["if"] = function (test, whenTrue, whenFalse, label) {
          if (test == null) {
            test = NothingNode(0, 0, this.state.scope.id);
          } else if (!(test instanceof Node)) {
            throw TypeError("Expected test to be a " + __name(Node) + ", got " + __typeof(test));
          }
          if (whenTrue == null) {
            whenTrue = NothingNode(0, 0, this.state.scope.id);
          } else if (!(whenTrue instanceof Node)) {
            throw TypeError("Expected whenTrue to be a " + __name(Node) + ", got " + __typeof(whenTrue));
          }
          if (whenFalse == null) {
            whenFalse = null;
          } else if (!(whenFalse instanceof Node)) {
            throw TypeError("Expected whenFalse to be one of " + (__name(Node) + " or null") + ", got " + __typeof(whenFalse));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.state["if"](
            this.index,
            this.doWrap(test),
            whenTrue,
            whenFalse,
            label
          ).reduce(this.state);
        };
        _MacroHelper_prototype["switch"] = function (node, cases, defaultCase, label) {
          var _this;
          _this = this;
          if (node == null) {
            node = NothingNode(0, 0, this.state.scope.id);
          } else if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          if (!__isArray(cases)) {
            throw TypeError("Expected cases to be an Array, got " + __typeof(cases));
          }
          if (defaultCase == null) {
            defaultCase = null;
          } else if (!(defaultCase instanceof Node)) {
            throw TypeError("Expected defaultCase to be one of " + (__name(Node) + " or null") + ", got " + __typeof(defaultCase));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.state["switch"](
            this.index,
            this.doWrap(node),
            (function () {
              var _arr, _i, _len, case_;
              for (_arr = [], _i = 0, _len = cases.length; _i < _len; ++_i) {
                case_ = cases[_i];
                _arr.push({ node: _this.doWrap(case_.node), body: case_.body, fallthrough: case_.fallthrough });
              }
              return _arr;
            }()),
            defaultCase,
            label
          ).reduce(this.state);
        };
        _MacroHelper_prototype["for"] = function (init, test, step, body, label) {
          if (init == null) {
            init = null;
          } else if (!(init instanceof Node)) {
            throw TypeError("Expected init to be one of " + (__name(Node) + " or null") + ", got " + __typeof(init));
          }
          if (test == null) {
            test = null;
          } else if (!(test instanceof Node)) {
            throw TypeError("Expected test to be one of " + (__name(Node) + " or null") + ", got " + __typeof(test));
          }
          if (step == null) {
            step = null;
          } else if (!(step instanceof Node)) {
            throw TypeError("Expected step to be one of " + (__name(Node) + " or null") + ", got " + __typeof(step));
          }
          if (body == null) {
            body = NothingNode(0, 0, this.state.scope.id);
          } else if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.state["for"](
            this.index,
            this.doWrap(init),
            this.doWrap(test),
            this.doWrap(step),
            body,
            label
          ).reduce(this.state);
        };
        _MacroHelper_prototype.forIn = function (key, object, body, label) {
          if (!(key instanceof IdentNode)) {
            throw TypeError("Expected key to be a " + __name(IdentNode) + ", got " + __typeof(key));
          }
          if (object == null) {
            object = NothingNode(0, 0);
          } else if (!(object instanceof Node)) {
            throw TypeError("Expected object to be a " + __name(Node) + ", got " + __typeof(object));
          }
          if (body == null) {
            body = NothingNode(0, 0, this.state.scope.id);
          } else if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.state.forIn(
            this.index,
            key,
            this.doWrap(object),
            body,
            label
          ).reduce(this.state);
        };
        _MacroHelper_prototype.tryCatch = function (tryBody, catchIdent, catchBody, label) {
          if (tryBody == null) {
            tryBody = NothingNode(0, 0, this.state.scope.id);
          } else if (!(tryBody instanceof Node)) {
            throw TypeError("Expected tryBody to be a " + __name(Node) + ", got " + __typeof(tryBody));
          }
          if (catchIdent == null) {
            catchIdent = NothingNode(0, 0, this.state.scope.id);
          } else if (!(catchIdent instanceof Node)) {
            throw TypeError("Expected catchIdent to be a " + __name(Node) + ", got " + __typeof(catchIdent));
          }
          if (catchBody == null) {
            catchBody = NothingNode(0, 0, this.state.scope.id);
          } else if (!(catchBody instanceof Node)) {
            throw TypeError("Expected catchBody to be a " + __name(Node) + ", got " + __typeof(catchBody));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.state.tryCatch(
            this.index,
            tryBody,
            catchIdent,
            catchBody,
            label
          ).reduce(this.state);
        };
        _MacroHelper_prototype.tryFinally = function (tryBody, finallyBody, label) {
          if (tryBody == null) {
            tryBody = NothingNode(0, 0, this.state.scope.id);
          } else if (!(tryBody instanceof Node)) {
            throw TypeError("Expected tryBody to be a " + __name(Node) + ", got " + __typeof(tryBody));
          }
          if (finallyBody == null) {
            finallyBody = NothingNode(0, 0, this.state.scope.id);
          } else if (!(finallyBody instanceof Node)) {
            throw TypeError("Expected finallyBody to be a " + __name(Node) + ", got " + __typeof(finallyBody));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.state.tryFinally(this.index, tryBody, finallyBody, label).reduce(this.state);
        };
        _MacroHelper_prototype.assign = function (left, op, right) {
          if (left == null) {
            left = NothingNode(0, 0, this.state.scope.id);
          } else if (!(left instanceof Node)) {
            throw TypeError("Expected left to be a " + __name(Node) + ", got " + __typeof(left));
          }
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          if (right == null) {
            right = NothingNode(0, 0, this.state.scope.id);
          } else if (!(right instanceof Node)) {
            throw TypeError("Expected right to be a " + __name(Node) + ", got " + __typeof(right));
          }
          return this.state.assign(this.index, left, op, this.doWrap(right)).reduce(this.state);
        };
        _MacroHelper_prototype.binary = function (left, op, right) {
          if (left == null) {
            left = NothingNode(0, 0, this.state.scope.id);
          } else if (!(left instanceof Node)) {
            throw TypeError("Expected left to be a " + __name(Node) + ", got " + __typeof(left));
          }
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          if (right == null) {
            right = NothingNode(0, 0, this.state.scope.id);
          } else if (!(right instanceof Node)) {
            throw TypeError("Expected right to be a " + __name(Node) + ", got " + __typeof(right));
          }
          return this.state.binary(this.index, this.doWrap(left), op, this.doWrap(right)).reduce(this.state);
        };
        _MacroHelper_prototype.binaryChain = function (op, nodes) {
          var _i, _i2, _len, left, result, right;
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          if (!__isArray(nodes)) {
            throw TypeError("Expected nodes to be an Array, got " + __typeof(nodes));
          } else {
            for (_i = nodes.length; _i--; ) {
              if (!(nodes[_i] instanceof Node)) {
                throw TypeError("Expected " + ("nodes[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(nodes[_i]));
              }
            }
          }
          if (nodes.length === 0) {
            throw Error("Expected nodes to at least have a length of 1");
          }
          left = this.doWrap(nodes[0]);
          for (_i2 = 1, _len = nodes.length; _i2 < _len; ++_i2) {
            right = nodes[_i2];
            left = this.state.binary(this.index, left, op, this.doWrap(right));
          }
          result = left;
          return result.reduce(this.state);
        };
        _MacroHelper_prototype.unary = function (op, node) {
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          if (node == null) {
            node = NothingNode(0, 0, this.state.scope.id);
          } else if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          return this.state.unary(this.index, op, this.doWrap(node)).reduce(this.state);
        };
        _MacroHelper_prototype["throw"] = function (node) {
          if (node == null) {
            node = NothingNode(0, 0, this.state.scope.id);
          } else if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          return this.state["throw"](this.index, this.doWrap(node)).reduce(this.state);
        };
        _MacroHelper_prototype["return"] = function (node) {
          if (node == null) {
            node = void 0;
          } else if (!(node instanceof Node)) {
            throw TypeError("Expected node to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(node));
          }
          return this.state["return"](this.index, this.doWrap(node)).reduce(this.state);
        };
        _MacroHelper_prototype["yield"] = function (node) {
          if (node == null) {
            node = NothingNode(0, 0, this.state.scope.id);
          } else if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          return this.state["yield"](this.index, this.doWrap(node)).reduce(this.state);
        };
        _MacroHelper_prototype["debugger"] = function () {
          return this.state["debugger"](this.index);
        };
        _MacroHelper_prototype["break"] = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.state["break"](this.index, label);
        };
        _MacroHelper_prototype["continue"] = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return this.state["continue"](this.index, label);
        };
        _MacroHelper_prototype.spread = function (node) {
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          return this.state.spread(this.index, node);
        };
        _MacroHelper_prototype.real = function (node) {
          node = this.macroExpand1(node);
          if (node instanceof TmpWrapperNode) {
            return node.node;
          } else {
            return node;
          }
        };
        _MacroHelper_prototype.rewrap = function (newNode, oldNode) {
          oldNode = this.macroExpand1(oldNode);
          if (oldNode instanceof TmpWrapperNode) {
            if (newNode instanceof TmpWrapperNode) {
              return TmpWrapperNode(
                newNode.line,
                newNode.column,
                newNode.scopeId,
                newNode,
                oldNode.tmps.concat(newNode.tmps)
              );
            } else {
              return TmpWrapperNode(
                newNode.line,
                newNode.column,
                newNode.scopeId,
                newNode,
                oldNode.tmps.slice()
              );
            }
          } else {
            return newNode;
          }
        };
        _MacroHelper_prototype.eq = function (alpha, bravo) {
          alpha = this.real(alpha);
          bravo = this.real(bravo);
          if (alpha instanceof ConstNode) {
            return bravo instanceof ConstNode && alpha.value === bravo.value;
          } else if (alpha instanceof IdentNode) {
            return bravo instanceof IdentNode && alpha.name === bravo.name;
          } else {
            return false;
          }
        };
        _MacroHelper_prototype.isLabeledBlock = function (node) {
          node = this.real(node);
          if (node instanceof BlockNode || node instanceof IfNode || node instanceof SwitchNode || node instanceof ForNode || node instanceof ForInNode || node instanceof TryCatchNode || node instanceof TryCatchFinallyNode) {
            return node.label != null;
          } else {
            return false;
          }
        };
        _MacroHelper_prototype.isBreak = function (node) {
          return this.real(node) instanceof BreakNode;
        };
        _MacroHelper_prototype.isContinue = function (node) {
          return this.real(node) instanceof ContinueNode;
        };
        _MacroHelper_prototype.label = function (node) {
          node = this.real(node);
          if (node instanceof BreakNode || node instanceof ContinueNode || node instanceof BlockNode || node instanceof IfNode || node instanceof SwitchNode || node instanceof ForNode || node instanceof ForInNode || node instanceof TryCatchNode || node instanceof TryCatchFinallyNode) {
            return node.label;
          } else {
            return null;
          }
        };
        _MacroHelper_prototype.withLabel = function (node, label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return node.withLabel(label, this.state);
        };
        _MacroHelper_prototype.macroExpand1 = function (node) {
          var expanded;
          if (node instanceof Node) {
            expanded = this.state.macroExpand1(node);
            if (expanded instanceof Node) {
              return expanded.reduce(this.state);
            } else {
              return expanded;
            }
          } else {
            return node;
          }
        };
        _MacroHelper_prototype.macroExpandAll = function (node) {
          var expanded;
          if (node instanceof Node) {
            expanded = this.state.macroExpandAll(node);
            if (expanded instanceof Node) {
              return expanded.reduce(this.state);
            } else {
              return expanded;
            }
          } else {
            return node;
          }
        };
        _MacroHelper_prototype.tmp = function (name, save, type) {
          var id;
          if (name == null) {
            name = "ref";
          } else if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (save == null) {
            save = false;
          } else if (typeof save !== "boolean") {
            throw TypeError("Expected save to be a Boolean, got " + __typeof(save));
          }
          id = getTmpId();
          (save ? this.savedTmps : this.unsavedTmps).push(id);
          if (type == null) {
            type = Type.any;
          } else if (typeof type === "string") {
            if (!((__owns.call(Type, type) ? Type[type] : void 0) instanceof Type)) {
              throw Error(__strnum(type) + " is not a known type name");
            }
            type = __owns.call(Type, type) ? Type[type] : void 0;
          } else if (!(type instanceof Type)) {
            throw Error("Must provide a Type or a string for type, got " + __typeof(type));
          }
          return this.state.tmp(this.index, id, name, type);
        };
        _MacroHelper_prototype.getTmps = function () {
          return { unsaved: this.unsavedTmps.slice(), saved: this.savedTmps.slice() };
        };
        _MacroHelper_prototype.isConst = function (node) {
          return node === void 0 || node instanceof Node && this.real(node).isConst();
        };
        _MacroHelper_prototype.value = function (node) {
          var expanded;
          if (node === void 0) {
            return;
          } else if (node instanceof Node) {
            expanded = this.real(node);
            if (expanded.isConst()) {
              return expanded.constValue();
            }
          }
        };
        _MacroHelper_prototype["const"] = function (value) {
          return this.state["const"](this.index, value);
        };
        _MacroHelper_prototype.isSpread = function (node) {
          return this.real(node) instanceof SpreadNode;
        };
        _MacroHelper_prototype.spreadSubnode = function (node) {
          node = this.real(node);
          if (node instanceof SpreadNode) {
            return node.node;
          }
        };
        _MacroHelper_prototype.isNode = function (node) {
          return node instanceof Node;
        };
        _MacroHelper_prototype.isIdent = function (node) {
          return this.real(node) instanceof IdentNode;
        };
        _MacroHelper_prototype.isTmp = function (node) {
          return this.real(node) instanceof TmpNode;
        };
        _MacroHelper_prototype.isIdentOrTmp = function (node) {
          var _ref;
          return (_ref = this.real(node)) instanceof IdentNode || _ref instanceof TmpNode;
        };
        _MacroHelper_prototype.name = function (node) {
          node = this.real(node);
          if (this.isIdent(node)) {
            return node.name;
          }
        };
        _MacroHelper_prototype.ident = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (require("./jsutils").isAcceptableIdent(name, true)) {
            return this.state.ident(this.index, name);
          }
        };
        _MacroHelper_prototype.isCall = function (node) {
          return this.real(node) instanceof CallNode;
        };
        _MacroHelper_prototype.callFunc = function (node) {
          node = this.real(node);
          if (node instanceof CallNode) {
            return node.func;
          }
        };
        _MacroHelper_prototype.callArgs = function (node) {
          node = this.real(node);
          if (node instanceof CallNode) {
            return node.args;
          }
        };
        _MacroHelper_prototype.isSuper = function (node) {
          return this.real(node) instanceof SuperNode;
        };
        _MacroHelper_prototype.superChild = function (node) {
          node = this.real(node);
          if (this.isSuper(node)) {
            return node.child;
          }
        };
        _MacroHelper_prototype.superArgs = function (node) {
          node = this.real(node);
          if (this.isSuper(node)) {
            return node.args;
          }
        };
        _MacroHelper_prototype.callIsNew = function (node) {
          node = this.real(node);
          if (node instanceof CallNode) {
            return !!node.isNew;
          } else {
            return false;
          }
        };
        _MacroHelper_prototype.callIsApply = function (node) {
          node = this.real(node);
          if (node instanceof CallNode) {
            return !!node.isApply;
          } else {
            return false;
          }
        };
        _MacroHelper_prototype.call = function (func, args, isNew, isApply) {
          var _i, _this;
          _this = this;
          if (!(func instanceof Node)) {
            throw TypeError("Expected func to be a " + __name(Node) + ", got " + __typeof(func));
          }
          if (args == null) {
            args = [];
          } else if (!__isArray(args)) {
            throw TypeError("Expected args to be an Array, got " + __typeof(args));
          } else {
            for (_i = args.length; _i--; ) {
              if (!(args[_i] instanceof Node)) {
                throw TypeError("Expected " + ("args[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(args[_i]));
              }
            }
          }
          if (isNew == null) {
            isNew = false;
          } else if (typeof isNew !== "boolean") {
            throw TypeError("Expected isNew to be a Boolean, got " + __typeof(isNew));
          }
          if (isApply == null) {
            isApply = false;
          } else if (typeof isApply !== "boolean") {
            throw TypeError("Expected isApply to be a Boolean, got " + __typeof(isApply));
          }
          if (isNew && isApply) {
            throw Error("Cannot specify both is-new and is-apply");
          }
          return CallNode(
            func.line,
            func.column,
            this.state.scope.id,
            this.doWrap(func),
            (function () {
              var _arr, _i2, _len, arg;
              for (_arr = [], _i2 = 0, _len = args.length; _i2 < _len; ++_i2) {
                arg = args[_i2];
                _arr.push(_this.doWrap(arg));
              }
              return _arr;
            }()),
            isNew,
            isApply
          ).reduce(this.state);
        };
        _MacroHelper_prototype.func = function (params, body, autoReturn, bound, curry, asType, generator, generic) {
          var _i, _this, clone;
          _this = this;
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (autoReturn == null) {
            autoReturn = true;
          } else if (typeof autoReturn !== "boolean") {
            throw TypeError("Expected autoReturn to be a Boolean, got " + __typeof(autoReturn));
          }
          if (bound == null) {
            bound = false;
          } else if (!(bound instanceof Node) && typeof bound !== "boolean") {
            throw TypeError("Expected bound to be one of " + (__name(Node) + " or Boolean") + ", got " + __typeof(bound));
          }
          if (curry == null) {
            curry = false;
          } else if (typeof curry !== "boolean") {
            throw TypeError("Expected curry to be a Boolean, got " + __typeof(curry));
          }
          if (asType == null) {
            asType = void 0;
          } else if (!(asType instanceof Node)) {
            throw TypeError("Expected asType to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(asType));
          }
          if (generator == null) {
            generator = false;
          } else if (typeof generator !== "boolean") {
            throw TypeError("Expected generator to be a Boolean, got " + __typeof(generator));
          }
          if (generic == null) {
            generic = [];
          } else if (!__isArray(generic)) {
            throw TypeError("Expected generic to be an Array, got " + __typeof(generic));
          } else {
            for (_i = generic.length; _i--; ) {
              if (!(generic[_i] instanceof IdentNode)) {
                throw TypeError("Expected " + ("generic[" + _i + "]") + " to be a " + __name(IdentNode) + ", got " + __typeof(generic[_i]));
              }
            }
          }
          clone = this.state.clone(this.state.cloneScope());
          params = (function () {
            var _arr, _arr2, _i2, _len, p, param;
            for (_arr = [], _arr2 = __toArray(params), _i2 = 0, _len = _arr2.length; _i2 < _len; ++_i2) {
              param = _arr2[_i2];
              p = param.rescope(clone.scope.id, clone);
              addParamToScope(clone, p);
              _arr.push(p);
            }
            return _arr;
          }());
          return FunctionNode(
            body.line,
            body.column,
            this.state.scope.id,
            params,
            body.rescope(clone.scope.id, clone),
            autoReturn,
            bound,
            curry,
            asType,
            generator,
            generic
          ).reduce(this.state);
        };
        _MacroHelper_prototype.isFunc = function (node) {
          return this.real(node) instanceof FunctionNode;
        };
        _MacroHelper_prototype.funcBody = function (node) {
          node = this.real(node);
          if (this.isFunc(node)) {
            return node.body;
          }
        };
        _MacroHelper_prototype.funcParams = function (node) {
          node = this.real(node);
          if (this.isFunc(node)) {
            return node.params;
          }
        };
        _MacroHelper_prototype.funcIsAutoReturn = function (node) {
          node = this.real(node);
          if (this.isFunc(node)) {
            return !!node.autoReturn;
          }
        };
        _MacroHelper_prototype.funcIsBound = function (node) {
          node = this.real(node);
          if (this.isFunc(node)) {
            return !!node.bound && !(node.bound instanceof Node);
          }
        };
        _MacroHelper_prototype.funcIsCurried = function (node) {
          node = this.real(node);
          if (this.isFunc(node)) {
            return !!node.curry;
          }
        };
        _MacroHelper_prototype.funcAsType = function (node) {
          node = this.real(node);
          if (this.isFunc(node)) {
            return node.asType;
          }
        };
        _MacroHelper_prototype.funcIsGenerator = function (node) {
          node = this.real(node);
          if (this.isFunc(node)) {
            return !!node.generator;
          }
        };
        _MacroHelper_prototype.funcGeneric = function (node) {
          node = this.real(node);
          if (this.isFunc(node)) {
            return node.generic.slice();
          } else {
            return [];
          }
        };
        _MacroHelper_prototype.param = function (ident, defaultValue, spread, isMutable, asType) {
          if (!(ident instanceof Node)) {
            throw TypeError("Expected ident to be a " + __name(Node) + ", got " + __typeof(ident));
          }
          return ParamNode(
            ident.line,
            ident.column,
            ident.scopeId,
            ident,
            defaultValue,
            spread,
            isMutable,
            asType
          ).reduce(this.state);
        };
        _MacroHelper_prototype.isParam = function (node) {
          return this.real(node) instanceof ParamNode;
        };
        _MacroHelper_prototype.paramIdent = function (node) {
          node = this.real(node);
          if (this.isParam(node)) {
            return node.ident;
          }
        };
        _MacroHelper_prototype.paramDefaultValue = function (node) {
          node = this.real(node);
          if (this.isParam(node)) {
            return node.defaultValue;
          }
        };
        _MacroHelper_prototype.paramIsSpread = function (node) {
          node = this.real(node);
          if (this.isParam(node)) {
            return !!node.spread;
          }
        };
        _MacroHelper_prototype.paramIsMutable = function (node) {
          node = this.real(node);
          if (this.isParam(node)) {
            return !!node.isMutable;
          }
        };
        _MacroHelper_prototype.paramType = function (node) {
          node = this.real(node);
          if (this.isParam(node)) {
            return node.asType;
          }
        };
        _MacroHelper_prototype.isArray = function (node) {
          return this.real(node) instanceof ArrayNode;
        };
        _MacroHelper_prototype.elements = function (node) {
          node = this.real(node);
          if (this.isArray(node)) {
            return node.elements;
          }
        };
        _MacroHelper_prototype.arrayHasSpread = function (node) {
          var _this;
          _this = this;
          node = this.real(node);
          if (node instanceof ArrayNode) {
            return (function () {
              var _arr, _i, _len, element;
              for (_arr = __toArray(node.elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                element = _arr[_i];
                if (_this.real(element) instanceof SpreadNode) {
                  return true;
                }
              }
              return false;
            }());
          } else {
            return false;
          }
        };
        _MacroHelper_prototype.isObject = function (node) {
          return this.real(node) instanceof ObjectNode;
        };
        _MacroHelper_prototype.pairs = function (node) {
          node = this.real(node);
          if (this.isObject(node) || this.isTypeObject(node)) {
            return node.pairs;
          }
        };
        _MacroHelper_prototype.isBlock = function (node) {
          return this.real(node) instanceof BlockNode;
        };
        _MacroHelper_prototype.nodes = function (node) {
          node = this.real(node);
          if (this.isBlock(node)) {
            return node.nodes;
          }
        };
        _MacroHelper_prototype.array = function (elements) {
          var _i, _this;
          _this = this;
          if (!__isArray(elements)) {
            throw TypeError("Expected elements to be an Array, got " + __typeof(elements));
          } else {
            for (_i = elements.length; _i--; ) {
              if (!(elements[_i] instanceof Node)) {
                throw TypeError("Expected " + ("elements[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(elements[_i]));
              }
            }
          }
          return this.state.array(0, (function () {
            var _arr, _i2, _len, element;
            for (_arr = [], _i2 = 0, _len = elements.length; _i2 < _len; ++_i2) {
              element = elements[_i2];
              _arr.push(_this.doWrap(element));
            }
            return _arr;
          }())).reduce(this.state);
        };
        _MacroHelper_prototype.object = function (pairs) {
          var _i, _this;
          _this = this;
          if (!__isArray(pairs)) {
            throw TypeError("Expected pairs to be an Array, got " + __typeof(pairs));
          } else {
            for (_i = pairs.length; _i--; ) {
              if (typeof pairs[_i] !== "object" || pairs[_i] === null) {
                throw TypeError("Expected " + ("pairs[" + _i + "]") + " to be an Object, got " + __typeof(pairs[_i]));
              } else {
                if (!(pairs[_i].key instanceof Node)) {
                  throw TypeError("Expected " + ("pairs[" + _i + "].key") + " to be a " + __name(Node) + ", got " + __typeof(pairs[_i].key));
                }
                if (!(pairs[_i].value instanceof Node)) {
                  throw TypeError("Expected " + ("pairs[" + _i + "].value") + " to be a " + __name(Node) + ", got " + __typeof(pairs[_i].value));
                }
              }
            }
          }
          return this.state.object(0, (function () {
            var _arr, _i2, _len, _ref, key, property, value;
            for (_arr = [], _i2 = 0, _len = pairs.length; _i2 < _len; ++_i2) {
              key = (_ref = pairs[_i2]).key;
              value = _ref.value;
              property = _ref.property;
              _arr.push({ key: _this.doWrap(key), value: _this.doWrap(value)(property) });
            }
            return _arr;
          }())).reduce(this.state);
        };
        _MacroHelper_prototype.type = function (node) {
          var _this;
          _this = this;
          if (typeof node === "string") {
            return __owns.call(Type, node) && Type[node] || (function () {
              throw Error("Unknown type " + __strnum(node));
            }());
          } else if (node instanceof Node) {
            return node.type(this.state);
          } else {
            throw Error("Can only retrieve type from a String or Node, got " + __typeof(node));
          }
        };
        _MacroHelper_prototype.toType = nodeToType;
        _MacroHelper_prototype.isComplex = function (node) {
          node = this.real(node);
          return node != null && !(node instanceof ConstNode) && !(node instanceof IdentNode) && !(node instanceof TmpNode) && !(node instanceof ThisNode) && !(node instanceof ArgsNode) && (!(node instanceof BlockNode) || node.nodes.length !== 0);
        };
        _MacroHelper_prototype.isNoop = function (node) {
          node = this.real(node);
          return node.isNoop(this.state);
        };
        _MacroHelper_prototype.isNothing = function (node) {
          return this.real(node) instanceof NothingNode;
        };
        _MacroHelper_prototype.isTypeArray = function (node) {
          node = this.real(node);
          return node instanceof TypeGenericNode && node.basetype instanceof IdentNode && node.basetype.name === "Array";
        };
        _MacroHelper_prototype.subtype = function (node) {
          node = this.real(node);
          if (node instanceof TypeGenericNode && node.basetype instanceof IdentNode && node.basetype.name === "Array") {
            return node.args[0];
          }
        };
        _MacroHelper_prototype.isTypeGeneric = function (node) {
          return this.real(node) instanceof TypeGenericNode;
        };
        _MacroHelper_prototype.basetype = function (node) {
          node = this.real(node);
          return node instanceof TypeGenericNode && node.basetype;
        };
        _MacroHelper_prototype.typeArguments = function (node) {
          node = this.real(node);
          return node instanceof TypeGenericNode && node.args;
        };
        _MacroHelper_prototype.isTypeObject = function (node) {
          return this.real(node) instanceof TypeObjectNode;
        };
        _MacroHelper_prototype.isTypeFunction = function (node) {
          node = this.real(node);
          return node instanceof TypeGenericNode && node.basetype instanceof IdentNode && node.basetype.name === "Function";
        };
        _MacroHelper_prototype.returnType = function (node) {
          node = this.real(node);
          if (node instanceof TypeGenericNode && node.basetype instanceof IdentNode && node.basetype.name === "Function") {
            return node.args[0];
          }
        };
        _MacroHelper_prototype.isTypeUnion = function (node) {
          return this.real(node) instanceof TypeUnionNode;
        };
        _MacroHelper_prototype.types = function (node) {
          node = this.real(node);
          return this.isTypeUnion(node) && node.types;
        };
        _MacroHelper_prototype.isThis = function (node) {
          return this.real(node) instanceof ThisNode;
        };
        _MacroHelper_prototype.isArguments = function (node) {
          node = this.real(node);
          return node instanceof ArgsNode;
        };
        _MacroHelper_prototype.isDef = function (node) {
          return this.real(node) instanceof DefNode;
        };
        _MacroHelper_prototype.isAssign = function (node) {
          return this.real(node) instanceof AssignNode;
        };
        _MacroHelper_prototype.isBinary = function (node) {
          return this.real(node) instanceof BinaryNode;
        };
        _MacroHelper_prototype.isUnary = function (node) {
          return this.real(node) instanceof UnaryNode;
        };
        _MacroHelper_prototype.op = function (node) {
          node = this.real(node);
          if (this.isAssign(node) || this.isBinary(node) || this.isUnary(node)) {
            return node.op;
          }
        };
        _MacroHelper_prototype.left = function (node) {
          node = this.real(node);
          if (this.isDef(node) || this.isBinary(node)) {
            return node.left;
          }
        };
        _MacroHelper_prototype.right = function (node) {
          node = this.real(node);
          if (this.isDef(node) || this.isBinary(node)) {
            return node.right;
          }
        };
        _MacroHelper_prototype.unaryNode = function (node) {
          node = this.real(node);
          if (this.isUnary(node)) {
            return node.node;
          }
        };
        _MacroHelper_prototype.isAccess = function (node) {
          return this.real(node) instanceof AccessNode;
        };
        _MacroHelper_prototype.parent = function (node) {
          node = this.real(node);
          if (node instanceof AccessNode) {
            return node.parent;
          }
        };
        _MacroHelper_prototype.child = function (node) {
          node = this.real(node);
          if (node instanceof AccessNode) {
            return node.child;
          }
        };
        _MacroHelper_prototype.isIf = function (node) {
          return this.real(node) instanceof IfNode;
        };
        _MacroHelper_prototype.test = function (node) {
          node = this.real(node);
          if (node instanceof IfNode) {
            return node.test;
          }
        };
        _MacroHelper_prototype.whenTrue = function (node) {
          node = this.real(node);
          if (node instanceof IfNode) {
            return node.whenTrue;
          }
        };
        _MacroHelper_prototype.whenFalse = function (node) {
          node = this.real(node);
          if (node instanceof IfNode) {
            return node.whenFalse;
          }
        };
        _MacroHelper_prototype.cache = function (node, init, name, save) {
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          if (name == null) {
            name = "ref";
          } else if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (save == null) {
            save = false;
          } else if (typeof save !== "boolean") {
            throw TypeError("Expected save to be a Boolean, got " + __typeof(save));
          }
          return this.maybeCache(
            node,
            function (setNode, node, cached) {
              if (cached) {
                init.push(setNode);
              }
              return node;
            },
            name,
            save
          );
        };
        _MacroHelper_prototype.maybeCache = function (node, func, name, save) {
          var tmp, type;
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          if (name == null) {
            name = "ref";
          } else if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (save == null) {
            save = false;
          } else if (typeof save !== "boolean") {
            throw TypeError("Expected save to be a Boolean, got " + __typeof(save));
          }
          node = this.macroExpand1(node);
          if (this.isComplex(node)) {
            type = node.type(this.state);
            tmp = this.tmp(name, save, type);
            this.state.scope.add(tmp, false, type);
            return func(
              this.state.block(this.index, [
                this.state["var"](this.index, tmp, false),
                this.state.assign(this.index, tmp, "=", this.doWrap(node))
              ]),
              tmp,
              true
            );
          } else {
            return func(node, node, false);
          }
        };
        _MacroHelper_prototype.maybeCacheAccess = function (node, func, parentName, childName, save) {
          var _this;
          _this = this;
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          if (parentName == null) {
            parentName = "ref";
          } else if (typeof parentName !== "string") {
            throw TypeError("Expected parentName to be a String, got " + __typeof(parentName));
          }
          if (childName == null) {
            childName = "ref";
          } else if (typeof childName !== "string") {
            throw TypeError("Expected childName to be a String, got " + __typeof(childName));
          }
          if (save == null) {
            save = false;
          } else if (typeof save !== "boolean") {
            throw TypeError("Expected save to be a Boolean, got " + __typeof(save));
          }
          node = this.macroExpand1(node);
          if (this.isAccess(node)) {
            return this.maybeCache(
              this.parent(node),
              function (setParent, parent, parentCached) {
                return _this.maybeCache(
                  _this.child(node),
                  function (setChild, child, childCached) {
                    if (parentCached || childCached) {
                      return func(
                        _this.state.access(_this.index, setParent, setChild),
                        _this.state.access(_this.index, parent, child),
                        true
                      );
                    } else {
                      return func(node, node, false);
                    }
                  },
                  childName,
                  save
                );
              },
              parentName,
              save
            );
          } else {
            return func(node, node, false);
          }
        };
        _MacroHelper_prototype.empty = function (node) {
          var _this;
          _this = this;
          if (node == null) {
            return true;
          } else if (!(node instanceof Node)) {
            return false;
          } else if (node instanceof BlockNode) {
            return (function () {
              var _arr, _i, item;
              for (_arr = __toArray(node.nodes), _i = _arr.length; _i--; ) {
                item = _arr[_i];
                if (!_this.empty(item)) {
                  return false;
                }
              }
              return true;
            }());
          } else {
            return node instanceof NothingNode;
          }
        };
        function constifyObject(obj, line, column, scopeId) {
          if (typeof obj !== "object" || obj === null || obj instanceof RegExp) {
            return ConstNode(line, column, scopeId, obj);
          } else if (__isArray(obj)) {
            return ArrayNode(line, column, scopeId, (function () {
              var _arr, _arr2, _i, _len, item;
              for (_arr = [], _arr2 = __toArray(obj), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                item = _arr2[_i];
                _arr.push(constifyObject(item, line, column, scopeId));
              }
              return _arr;
            }()));
          } else if (obj instanceof IdentNode && __num(obj.name.length) > 1 && obj.name.charCodeAt(0) === 36) {
            return CallNode(
              obj.line,
              obj.column,
              obj.scopeId,
              IdentNode(obj.line, obj.column, obj.scopeId, "__wrap"),
              [
                IdentNode(obj.line, obj.column, obj.scopeId, obj.name.substring(1)),
                ConstNode(obj.line, obj.column, obj.scopeId, obj.scopeId)
              ]
            );
          } else if (obj instanceof CallNode && !obj.isNew && !obj.isApply && obj.func instanceof IdentNode && obj.func.name === "$") {
            if (obj.args.length !== 1 || obj.args[0] instanceof SpreadNode) {
              throw Error("Can only use $() in an AST if it has one argument.");
            }
            return CallNode(
              obj.line,
              obj.column,
              obj.scopeId,
              IdentNode(obj.line, obj.column, obj.scopeId, "__wrap"),
              [
                obj.args[0],
                ConstNode(obj.line, obj.column, obj.scopeId, obj.scopeId)
              ]
            );
          } else if (obj instanceof Node) {
            if (obj.constructor === Node) {
              throw Error("Cannot constify a raw node");
            }
            return CallNode(
              obj.line,
              obj.column,
              obj.scopeId,
              IdentNode(obj.line, obj.column, obj.scopeId, "__node"),
              [
                ConstNode(obj.line, obj.column, obj.scopeId, obj.constructor.cappedName),
                ConstNode(obj.line, obj.column, obj.scopeId, obj.line),
                ConstNode(obj.line, obj.column, obj.scopeId, obj.column)
              ].concat((function () {
                var _arr, _arr2, _i, _len, k;
                for (_arr = [], _arr2 = __toArray(obj.constructor.argNames), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  k = _arr2[_i];
                  _arr.push(constifyObject(obj[k], obj.line, obj.column, obj.scopeId));
                }
                return _arr;
              }()))
            );
          } else {
            return ObjectNode(line, column, scopeId, (function () {
              var _arr, k, v;
              _arr = [];
              for (k in obj) {
                if (__owns.call(obj, k)) {
                  v = obj[k];
                  _arr.push({
                    key: ConstNode(line, column, scopeId, k),
                    value: constifyObject(v, line, column, scopeId)
                  });
                }
              }
              return _arr;
            }()));
          }
        }
        MacroHelper.constifyObject = constifyObject;
        function walk(node, func) {
          var _ref;
          if (typeof node !== "object" || node === null || node instanceof RegExp) {
            return node;
          }
          if (!(node instanceof Node)) {
            throw Error("Unexpected type to walk through: " + __typeof(node));
          }
          if (!(node instanceof BlockNode) && (_ref = func(node)) != null) {
            return _ref;
          }
          return node.walk(function (x) {
            return walk(x, func);
          });
        }
        _MacroHelper_prototype.wrap = function (value) {
          var _ref;
          if (__isArray(value)) {
            return BlockNode(0, 0, this.state.scope.id, value).reduce(this.state);
          } else if (value instanceof Node) {
            return value;
          } else if (value == null) {
            return NothingNode(0, 0, this.state.scope.id);
          } else if (value instanceof RegExp || (_ref = typeof value) === "string" || _ref === "boolean" || _ref === "number") {
            return ConstNode(0, 0, this.state.scope.id, value);
          } else {
            return value;
          }
        };
        _MacroHelper_prototype.node = function (type, line, column) {
          var args;
          args = __slice.call(arguments, 3);
          return Node[type].apply(Node, [line, column, this.state.scope.id].concat(__toArray(args))).reduce(this.state);
        };
        _MacroHelper_prototype.walk = function (node, func) {
          if (node != null && !(node instanceof Node)) {
            throw TypeError("Expected node to be one of " + (__name(Node) + " or undefined or null") + ", got " + __typeof(node));
          }
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          if (node != null) {
            return walk(node, func);
          } else {
            return node;
          }
        };
        _MacroHelper_prototype.hasFunc = function (node) {
          var FOUND, walker;
          if (this._hasFunc != null) {
            return this._hasFunc;
          } else {
            FOUND = {};
            walker = function (x) {
              if (x instanceof FunctionNode) {
                throw FOUND;
              } else {
                return x.walk(walker);
              }
            };
            try {
              walk(this.macroExpandAll(node), walker);
            } catch (e) {
              if (e !== FOUND) {
                throw e;
              }
              return this._hasFunc = true;
            }
            return this._hasFunc = false;
          }
        };
        _MacroHelper_prototype.isStatement = function (node) {
          node = this.macroExpand1(node);
          return node instanceof Node && node.isStatement();
        };
        _MacroHelper_prototype.isType = function (node, name) {
          var type;
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (__owns.call(Type, name)) {
            type = Type[name];
          }
          if (type == null || !(type instanceof Type)) {
            throw Error(name + " is not a known type name");
          }
          return node.type(this.state).isSubsetOf(type);
        };
        _MacroHelper_prototype.hasType = function (node, name) {
          var type;
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (__owns.call(Type, name)) {
            type = Type[name];
          }
          if (type == null || !(type instanceof Type)) {
            throw Error(name + " is not a known type name");
          }
          return node.type(this.state).overlaps(type);
        };
        mutators = {
          Block: function (x, func) {
            var lastNode, len, nodes;
            nodes = x.nodes;
            len = nodes.length;
            if (len !== 0) {
              lastNode = this.mutateLast(nodes[__num(len) - 1], func);
              if (lastNode !== nodes[__num(len) - 1]) {
                return BlockNode(
                  x.line,
                  x.column,
                  x.scopeId,
                  __toArray(__slice.call(nodes, 0, -1)).concat([lastNode]),
                  x.label
                );
              }
            }
            return x;
          },
          If: function (x, func) {
            var whenFalse, whenTrue;
            whenTrue = this.mutateLast(x.whenTrue, func);
            whenFalse = this.mutateLast(x.whenFalse, func);
            if (whenTrue !== x.whenTrue || whenFalse !== x.whenFalse) {
              return IfNode(
                x.line,
                x.column,
                x.scopeId,
                x.test,
                whenTrue,
                whenFalse,
                x.label
              );
            } else {
              return x;
            }
          },
          Switch: function (x, func) {
            var _this, cases, defaultCase;
            _this = this;
            cases = map(x.cases, function (case_) {
              var body;
              if (case_.fallthrough) {
                return case_;
              } else {
                body = _this.mutateLast(case_.body, func);
                if (body !== case_.body) {
                  return { node: case_.node, body: body, fallthrough: case_.fallthrough };
                } else {
                  return case_;
                }
              }
            });
            defaultCase = this.mutateLast(x.defaultCase || this.noop(), func);
            if (cases !== x.cases || defaultCase !== x.defaultCase) {
              return SwitchNode(
                x.line,
                x.column,
                x.scopeId,
                x.node,
                cases,
                defaultCase,
                x.label
              );
            } else {
              return x;
            }
          },
          TmpWrapper: function (x, func) {
            var node;
            node = this.mutateLast(x.node, func);
            if (node !== x.node) {
              return TmpWrapperNode(
                x.line,
                x.column,
                x.scopeId,
                node,
                x.tmps
              );
            } else {
              return x;
            }
          },
          MacroAccess: function (x, func) {
            return this.mutateLast(this.macroExpand1(x), func);
          },
          Break: identity,
          Continue: identity,
          Nothing: identity,
          Return: identity,
          Debugger: identity,
          Throw: identity
        };
        _MacroHelper_prototype.mutateLast = function (node, func, includeNoop) {
          var _ref;
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          if (typeof node !== "object" || node === null || node instanceof RegExp) {
            return node;
          }
          if (!(node instanceof Node)) {
            throw Error("Unexpected type to mutate-last through: " + __typeof(node));
          }
          if (!__owns.call(mutators, node.constructor.cappedName) || includeNoop && node instanceof NothingNode) {
            if ((_ref = func(node)) != null) {
              return _ref;
            } else {
              return node;
            }
          } else {
            return mutators[node.constructor.cappedName].call(this, node, func);
          }
        };
        _MacroHelper_prototype.canMutateLast = function (node) {
          return node instanceof Node && __owns.call(mutators, node.constructor.cappedName);
        };
        return MacroHelper;
      }());
      function oneOf(rules) {
        var _i, _len, i, name, rule;
        if (!__isArray(rules)) {
          throw TypeError("Expected rules to be an Array, got " + __typeof(rules));
        } else {
          for (_i = rules.length; _i--; ) {
            if (typeof rules[_i] !== "function") {
              throw TypeError("Expected " + ("rules[" + _i + "]") + " to be a Function, got " + __typeof(rules[_i]));
            }
          }
        }
        name = ["("];
        for (i = 0, _len = rules.length; i < _len; ++i) {
          rule = rules[i];
          if (i > 0) {
            name.push(" | ");
          }
          name.push(rule.parserName || "<unknown>");
        }
        name.push(")");
        return named(name.join(""), function (o) {
          var _i2, _len, result, rule;
          for (_i2 = 0, _len = rules.length; _i2 < _len; ++_i2) {
            rule = rules[_i2];
            result = rule(o);
            if (result) {
              return result;
            }
          }
          return false;
        });
      }
      AnyObjectLiteral = named("AnyObjectLiteral", function (o) {
        return UnclosedObjectLiteral(o) || ObjectLiteral(o) || IndentedUnclosedObjectLiteral(o);
      });
      AnyArrayLiteral = named("AnyArrayLiteral", function (o) {
        return ArrayLiteral(o) || IndentedUnclosedArrayLiteral(o);
      });
      MacroHolder = (function () {
        var _MacroHolder_prototype;
        function MacroHolder() {
          var _this;
          _this = this instanceof MacroHolder ? this : __create(_MacroHolder_prototype);
          _this.byName = {};
          _this.byId = [];
          _this.byLabel = {};
          _this.typeById = [];
          _this.operatorNames = {};
          _this.binaryOperators = [];
          _this.assignOperators = [];
          _this.prefixUnaryOperators = [];
          _this.postfixUnaryOperators = [];
          _this.serialization = {};
          _this.helpers = {};
          _this.syntaxes = {
            Logic: preventUnclosedObjectLiteral(Logic),
            Expression: Expression,
            Assignment: Assignment,
            ExpressionOrAssignment: ExpressionOrAssignment,
            FunctionDeclaration: FunctionDeclaration,
            Statement: Statement,
            Body: Body,
            Identifier: Identifier,
            SimpleAssignable: SimpleAssignable,
            Parameter: Parameter,
            ObjectLiteral: AnyObjectLiteral,
            ArrayLiteral: AnyArrayLiteral,
            DedentedBody: DedentedBody,
            ObjectKey: ObjectKey,
            Type: TypeReference,
            NoSpace: NoSpace
          };
          return _this;
        }
        _MacroHolder_prototype = MacroHolder.prototype;
        MacroHolder.displayName = "MacroHolder";
        _MacroHolder_prototype.clone = function () {
          var clone;
          clone = MacroHolder();
          clone.byName = __import({}, this.byName);
          clone.byId = this.byId.slice();
          clone.byLabel = __import({}, this.byLabel);
          clone.typeById = this.typeById.slice();
          clone.operatorNames = __import({}, this.operatorNames);
          clone.binaryOperators = this.binaryOperators.slice();
          clone.assignOperators = this.assignOperators.slice();
          clone.prefixUnaryOperators = this.prefixUnaryOperators.slice();
          clone.postfixUnaryOperators = this.postfixUnaryOperators.slice();
          clone.serialization = __import({}, this.serialization);
          clone.helpers = __import({}, this.helpers);
          clone.syntaxes = __import({}, this.syntaxes);
          return clone;
        };
        _MacroHolder_prototype.getByName = function (name) {
          var _ref;
          if (__owns.call(_ref = this.byName, name)) {
            return _ref[name];
          }
        };
        _MacroHolder_prototype.getOrAddByName = function (name) {
          var _this, byName, m, token;
          _this = this;
          byName = this.byName;
          if (__owns.call(byName, name)) {
            return byName[name];
          } else {
            token = macroName(name);
            m = (function () {
              var _backend;
              _backend = named("<" + __strnum(name) + " macro>", function (o) {
                var _arr, _i, _len, item, result;
                for (_arr = __toArray(m.data), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  item = _arr[_i];
                  result = item(o);
                  if (result) {
                    return result;
                  }
                }
                return false;
              });
              return named(_backend != null && _backend.parserName || "<unknown>", function (o) {
                var result;
                if (!token(o.clone())) {
                  return false;
                } else {
                  result = _backend(o);
                  if (!result) {
                    throw SHORT_CIRCUIT;
                  }
                  return result;
                }
              });
            }());
            m.token = token;
            m.data = [];
            return byName[name] = m;
          }
        };
        _MacroHolder_prototype.getOrAddByNames = function (names) {
          var _arr, _i, _i2, _len, name;
          if (!__isArray(names)) {
            throw TypeError("Expected names to be an Array, got " + __typeof(names));
          } else {
            for (_i = names.length; _i--; ) {
              if (typeof names[_i] !== "string") {
                throw TypeError("Expected " + ("names[" + _i + "]") + " to be a String, got " + __typeof(names[_i]));
              }
            }
          }
          for (_arr = [], _i2 = 0, _len = names.length; _i2 < _len; ++_i2) {
            name = names[_i2];
            _arr.push(this.getOrAddByName(name));
          }
          return _arr;
        };
        _MacroHolder_prototype.setTypeById = function (id, type) {
          if (typeof id !== "number") {
            throw TypeError("Expected id to be a Number, got " + __typeof(id));
          }
          if (!(type instanceof Type)) {
            throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
          }
          this.typeById[id] = type;
        };
        _MacroHolder_prototype.getTypeById = function (id) {
          return this.typeById[id];
        };
        _MacroHolder_prototype.getById = function (id) {
          var byId;
          byId = this.byId;
          if (__num(id) >= 0 && __lt(id, byId.length)) {
            return byId[id];
          }
        };
        _MacroHolder_prototype.addMacro = function (m, macroId, type) {
          var byId;
          if (macroId == null) {
            macroId = void 0;
          } else if (typeof macroId !== "number") {
            throw TypeError("Expected macroId to be one of Number or undefined, got " + __typeof(macroId));
          }
          if (type == null) {
            type = void 0;
          } else if (!(type instanceof Type) && typeof type !== "string") {
            throw TypeError("Expected type to be one of " + (__name(Type) + " or String or undefined") + ", got " + __typeof(type));
          }
          byId = this.byId;
          if (macroId != null) {
            if (__owns.call(byId, macroId)) {
              throw Error("Cannot add macro #" + __strnum(macroId) + ", as it already exists");
            }
            byId[macroId] = m;
          } else {
            byId.push(m);
            macroId = __num(byId.length) - 1;
          }
          if (type != null) {
            this.typeById[macroId] = type;
          }
          return macroId;
        };
        _MacroHolder_prototype.replaceMacro = function (id, m, type) {
          var byId;
          if (type == null) {
            type = void 0;
          } else if (!(type instanceof Type)) {
            throw TypeError("Expected type to be one of " + (__name(Type) + " or undefined") + ", got " + __typeof(type));
          }
          byId = this.byId;
          byId[id] = m;
          if (type != null) {
            this.typeById[id] = type;
          }
        };
        _MacroHolder_prototype.hasMacroOrOperator = function (name) {
          return __owns.call(this.byName, name) || __owns.call(this.operatorNames, name);
        };
        _MacroHolder_prototype.getMacroAndOperatorNames = function () {
          var _obj, name, names;
          names = [];
          _obj = this.byName;
          for (name in _obj) {
            if (__owns.call(_obj, name)) {
              names.push(name);
            }
          }
          _obj = this.operatorNames;
          for (name in _obj) {
            if (__owns.call(_obj, name)) {
              names.push(name);
            }
          }
          return names;
        };
        _MacroHolder_prototype.addBinaryOperator = function (operators, m, options, macroId) {
          var _arr, _i, _ref, _ref2, _this, binaryOperators, data, op, precedence;
          _this = this;
          for (_arr = __toArray(operators), _i = _arr.length; _i--; ) {
            op = _arr[_i];
            this.operatorNames[op] = true;
          }
          precedence = Number(options.precedence) || 0;
          if ((_ref = (_ref2 = this.binaryOperators)[precedence]) != null) {
            binaryOperators = _ref;
          } else {
            binaryOperators = _ref2[precedence] = [];
          }
          data = {
            rule: oneOf((function () {
              var _arr, _arr2, _i, _len, op;
              for (_arr = [], _arr2 = __toArray(operators), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                op = _arr2[_i];
                _arr.push(wordOrSymbol(op));
              }
              return _arr;
            }())),
            func: m,
            rightToLeft: !!options.rightToLeft,
            maximum: options.maximum || 0,
            minimum: options.minimum || 0,
            invertible: !!options.invertible
          };
          binaryOperators.push(data);
          if (options.label) {
            this.addByLabel(options.label, data);
          }
          return this.addMacro(m, macroId, (_ref = options.type) === "left" || _ref === "right" ? options.type
            : options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref]
            : void 0);
        };
        _MacroHolder_prototype.getByLabel = function (label) {
          var _ref;
          if (__owns.call(_ref = this.byLabel, label)) {
            return _ref[label];
          }
        };
        _MacroHolder_prototype.addByLabel = function (label, data) {
          if (typeof label !== "string") {
            throw TypeError("Expected label to be a String, got " + __typeof(label));
          }
          return this.byLabel[label] = data;
        };
        _MacroHolder_prototype.addAssignOperator = function (operators, m, options, macroId) {
          var _arr, _i, _ref, _this, data, op;
          _this = this;
          for (_arr = __toArray(operators), _i = _arr.length; _i--; ) {
            op = _arr[_i];
            this.operatorNames[op] = true;
          }
          data = {
            rule: oneOf((function () {
              var _arr, _arr2, _i, _len, op;
              for (_arr = [], _arr2 = __toArray(operators), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                op = _arr2[_i];
                if (op === ":=") {
                  _arr.push(ColonEqual);
                } else {
                  _arr.push(wordOrSymbol(op));
                }
              }
              return _arr;
            }())),
            func: m
          };
          this.assignOperators.push(data);
          if (options.label) {
            this.addByLabel(options.label, data);
          }
          return this.addMacro(m, macroId, (_ref = options.type) === "left" || _ref === "right" ? options.type
            : options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref]
            : void 0);
        };
        _MacroHolder_prototype.addUnaryOperator = function (operators, m, options, macroId) {
          var _arr, _i, _ref, _this, data, op, store;
          _this = this;
          for (_arr = __toArray(operators), _i = _arr.length; _i--; ) {
            op = _arr[_i];
            this.operatorNames[op] = true;
          }
          if (options.postfix) {
            store = this.postfixUnaryOperators;
          } else {
            store = this.prefixUnaryOperators;
          }
          data = {
            rule: oneOf((function () {
              var _arr, _arr2, _i, _len, op, rule;
              for (_arr = [], _arr2 = __toArray(operators), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                op = _arr2[_i];
                rule = wordOrSymbol(op);
                if (!/[a-zA-Z]/.test(op)) {
                  if (options.postfix) {
                    _arr.push(sequential([
                      NoSpace,
                      ["this", rule]
                    ]));
                  } else {
                    _arr.push(sequential([
                      ["this", rule],
                      NoSpace
                    ]));
                  }
                } else {
                  _arr.push(rule);
                }
              }
              return _arr;
            }())),
            func: m,
            standalone: __owns.call(!options, "standalone") || !!options.standalone
          };
          store.push(data);
          if (options.label) {
            this.addByLabel(options.label, data);
          }
          return this.addMacro(m, macroId, options.type === "node" ? options.type
            : options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref]
            : void 0);
        };
        _MacroHolder_prototype.addSerializedHelper = function (name, helper, type, dependencies) {
          var _ref, _ref2, helpers;
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if ((_ref = (_ref2 = this.serialization).helpers) != null) {
            helpers = _ref;
          } else {
            helpers = _ref2.helpers = {};
          }
          helpers[name] = { helper: helper, type: type, dependencies: dependencies };
        };
        _MacroHolder_prototype.addMacroSerialization = function (serialization) {
          var _ref, _ref2, _ref3, byType, obj;
          if (typeof serialization !== "object" || serialization === null) {
            throw TypeError("Expected serialization to be an Object, got " + __typeof(serialization));
          } else if (typeof serialization.type !== "string") {
            throw TypeError("Expected serialization.type to be a String, got " + __typeof(serialization.type));
          }
          obj = __import({}, serialization);
          delete obj.type;
          if ((_ref = (_ref2 = this.serialization)[_ref3 = serialization.type]) != null) {
            byType = _ref;
          } else {
            byType = _ref2[_ref3] = [];
          }
          byType.push(obj);
        };
        _MacroHolder_prototype.addSyntax = function (name, value) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (typeof value !== "function") {
            throw TypeError("Expected value to be a Function, got " + __typeof(value));
          }
          if (__owns.call(this.syntaxes, name)) {
            throw Error("Cannot override already-defined syntax: " + name);
          }
          this.syntaxes[name] = value;
        };
        _MacroHolder_prototype.hasSyntax = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          return __owns.call(this.syntaxes, name);
        };
        _MacroHolder_prototype.getSyntax = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (__owns.call(this.syntaxes, name)) {
            return this.syntaxes[name];
          } else {
            throw Error("Unknown syntax: " + name);
          }
        };
        _MacroHolder_prototype.serialize = function (allowJs) {
          if (allowJs == null) {
            allowJs = false;
          } else if (typeof allowJs !== "boolean") {
            throw TypeError("Expected allowJs to be a Boolean, got " + __typeof(allowJs));
          }
          if (allowJs) {
            return require("./jsutils").toJSSource(this.serialization);
          } else {
            return JSON.stringify(this.serialization);
          }
        };
        _MacroHolder_prototype.deserialize = function (data) {
          var _obj, _ref, ast, dependencies, helper, name, type;
          ast = require("./jsast");
          _obj = (_ref = __owns.call(data, "helpers") ? data.helpers : void 0) != null ? _ref : {};
          for (name in _obj) {
            if (__owns.call(_obj, name)) {
              helper = (_ref = _obj[name]).helper;
              type = _ref.type;
              dependencies = _ref.dependencies;
              this.addHelper(name, ast.fromJSON(helper), Type.fromJSON(type), dependencies);
            }
          }
          State("", this).deserializeMacros(data);
        };
        _MacroHolder_prototype.addHelper = function (name, value, type, dependencies) {
          var _i;
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (!(type instanceof Type)) {
            throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
          }
          if (!__isArray(dependencies)) {
            throw TypeError("Expected dependencies to be an Array, got " + __typeof(dependencies));
          } else {
            for (_i = dependencies.length; _i--; ) {
              if (typeof dependencies[_i] !== "string") {
                throw TypeError("Expected " + ("dependencies[" + _i + "]") + " to be a String, got " + __typeof(dependencies[_i]));
              }
            }
          }
          if (__owns.call(this.helpers, name)) {
            throw Error("Trying to overwrite helper " + name);
          }
          return this.helpers[name] = { value: value, type: type, dependencies: dependencies };
        };
        _MacroHolder_prototype.hasHelper = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          return __owns.call(this.helpers, name);
        };
        _MacroHolder_prototype.getHelper = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (__owns.call(this.helpers, name)) {
            return this.helpers[name].value;
          } else {
            throw Error("No such helper: " + name);
          }
        };
        _MacroHolder_prototype.helperType = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (__owns.call(this.helpers, name)) {
            return this.helpers[name].type;
          } else {
            throw Error("No such helper: " + name);
          }
        };
        _MacroHolder_prototype.helperDependencies = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (__owns.call(this.helpers, name)) {
            return this.helpers[name].dependencies;
          } else {
            throw Error("No such helper: " + name);
          }
        };
        return MacroHolder;
      }());
      Node = (function () {
        var _Node_prototype;
        function Node() {
          var _this;
          _this = this instanceof Node ? this : __create(_Node_prototype);
          throw Error("Node should not be instantiated directly");
        }
        _Node_prototype = Node.prototype;
        Node.displayName = "Node";
        _Node_prototype.type = function () {
          return Type.any;
        };
        _Node_prototype.walk = function (f) {
          return this;
        };
        _Node_prototype.walkAsync = function (f, callback) {
          return callback(null, this);
        };
        _Node_prototype.cacheable = true;
        _Node_prototype.scope = function (o) {
          return o.getScope(this.scopeId);
        };
        _Node_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return BlockNode(
            this.line,
            this.column,
            this.scopeId,
            [this],
            label
          );
        };
        _Node_prototype._reduce = function (o) {
          return this.walk(function (node) {
            return node.reduce(o);
          });
        };
        _Node_prototype.reduce = function (o) {
          var reduced;
          if (!(o instanceof State)) {
            throw TypeError("Expected o to be a " + __name(State) + ", got " + __typeof(o));
          }
          if (this._reduced != null) {
            return this._reduced;
          } else {
            reduced = this._reduce(o);
            if (reduced === this) {
              return this._reduced = this;
            } else {
              return this._reduced = reduced.reduce(o);
            }
          }
        };
        _Node_prototype.isConst = function () {
          return false;
        };
        _Node_prototype.constValue = function () {
          throw Error("Not a const: " + (typeof node === "undefined" ? "Undefined" : __typeof(node)));
        };
        _Node_prototype.isNoop = function (o) {
          return this.reduce(o)._isNoop(o);
        };
        _Node_prototype._isNoop = function (o) {
          return false;
        };
        _Node_prototype.isStatement = function () {
          return false;
        };
        _Node_prototype.rescope = function (newScopeId, o) {
          var oldScopeId;
          oldScopeId = this.scopeId;
          if (oldScopeId === newScopeId) {
            return this;
          } else {
            this.scopeId = newScopeId;
            return this.walk(function (node) {
              var nodeScope, parentId;
              if (node.scopeId === oldScopeId) {
                return node.rescope(newScopeId, o);
              } else if (node.scopeId !== newScopeId) {
                nodeScope = node.scope(o);
                if (nodeScope.parent != null) {
                  parentId = nodeScope.parent.id;
                  if (parentId === oldScopeId) {
                    nodeScope.reparent(o.getScope(newScopeId));
                  }
                }
                return node;
              } else {
                return node;
              }
            });
          }
        };
        _Node_prototype.doWrap = function (o) {
          var innerScope;
          if (this.isStatement()) {
            innerScope = o.cloneScope(o.getScope(this.scopeId));
            return CallNode(
              this.line,
              this.column,
              this.scopeId,
              FunctionNode(
                this.line,
                this.column,
                this.scopeId,
                [],
                this.rescope(innerScope.id, o),
                true,
                true
              ),
              []
            );
          } else {
            return this;
          }
        };
        return Node;
      }());
      function inspectHelper(depth, name, line, column) {
        var _arr, _i, _len, arg, args, d, found, hasLarge, parts;
        args = __slice.call(arguments, 4);
        if (depth != null) {
          d = __num(depth) - 1;
        } else {
          d = null;
        }
        found = false;
        for (_i = args.length; _i--; ) {
          arg = args[_i];
          if (!arg || arg instanceof NothingNode || __isArray(arg) && arg.length === 0) {
            args.pop();
          } else {
            break;
          }
        }
        for (_arr = [], _i = 0, _len = args.length; _i < _len; ++_i) {
          arg = args[_i];
          _arr.push(inspect(arg, null, d));
        }
        parts = _arr;
        hasLarge = (function () {
          var _i, _len, part;
          for (_i = 0, _len = parts.length; _i < _len; ++_i) {
            part = parts[_i];
            if (parts.length > 50 || part.indexOf("\n") !== -1) {
              return true;
            }
          }
          return false;
        }());
        if (hasLarge) {
          parts = (function () {
            var _arr, _i, _len, part;
            for (_arr = [], _i = 0, _len = parts.length; _i < _len; ++_i) {
              part = parts[_i];
              _arr.push("  " + __strnum(part.split("\n").join("\n  ")));
            }
            return _arr;
          }());
          return __strnum(name) + "(\n" + __strnum(parts.join(",\n")) + ")";
        } else {
          return __strnum(name) + "(" + __strnum(parts.join(", ")) + ")";
        }
      }
      Scope = (function () {
        var _Scope_prototype;
        function Scope(id, parent) {
          var _this;
          _this = this instanceof Scope ? this : __create(_Scope_prototype);
          if (parent == null) {
            parent = null;
          } else if (!(parent instanceof Scope)) {
            throw TypeError("Expected parent to be one of " + (__name(Scope) + " or null") + ", got " + __typeof(parent));
          }
          _this.id = id;
          _this.parent = parent;
          _this.variables = {};
          _this.tmps = [];
          return _this;
        }
        _Scope_prototype = Scope.prototype;
        Scope.displayName = "Scope";
        _Scope_prototype.clone = function (id) {
          return Scope(id, this);
        };
        _Scope_prototype.reparent = function (parent) {
          if (!(parent instanceof Scope)) {
            throw TypeError("Expected parent to be a " + __name(Scope) + ", got " + __typeof(parent));
          }
          if (parent === this) {
            throw Error("Trying to reparent to own scope");
          }
          this.parent = parent;
        };
        _Scope_prototype.add = function (ident, isMutable, type) {
          if (!(ident instanceof IdentNode) && !(ident instanceof TmpNode)) {
            throw TypeError("Expected ident to be one of " + (__name(IdentNode) + " or " + __name(TmpNode)) + ", got " + __typeof(ident));
          }
          if (isMutable == null) {
            isMutable = false;
          } else if (typeof isMutable !== "boolean") {
            throw TypeError("Expected isMutable to be a Boolean, got " + __typeof(isMutable));
          }
          if (!(type instanceof Type)) {
            throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
          }
          if (ident instanceof TmpNode) {
            this.tmps[ident.id] = { isMutable: isMutable, type: type };
          } else {
            this.variables[ident.name] = { isMutable: isMutable, type: type };
          }
        };
        _Scope_prototype.owns = function (ident) {
          if (!(ident instanceof IdentNode) && !(ident instanceof TmpNode)) {
            throw TypeError("Expected ident to be one of " + (__name(IdentNode) + " or " + __name(TmpNode)) + ", got " + __typeof(ident));
          }
          if (ident instanceof TmpNode) {
            return __owns.call(this.tmps, ident.id);
          } else {
            return __owns.call(this.variables, ident.name);
          }
        };
        _Scope_prototype.has = function (ident) {
          if (!(ident instanceof IdentNode) && !(ident instanceof TmpNode)) {
            throw TypeError("Expected ident to be one of " + (__name(IdentNode) + " or " + __name(TmpNode)) + ", got " + __typeof(ident));
          }
          if (this.owns(ident)) {
            return true;
          } else if (this.parent != null) {
            return this.parent.has(ident);
          } else {
            return false;
          }
        };
        function get(ident) {
          if (ident instanceof TmpNode) {
            if (__owns.call(this.tmps, ident.id)) {
              return this.tmps[ident.id];
            } else if (this.parent != null) {
              return get.call(this.parent, ident);
            }
          } else if (__owns.call(this.variables, ident.name)) {
            return this.variables[ident.name];
          } else if (this.parent != null) {
            return get.call(this.parent, ident);
          }
        }
        _Scope_prototype.isMutable = function (ident) {
          var data;
          if (!(ident instanceof IdentNode) && !(ident instanceof TmpNode)) {
            throw TypeError("Expected ident to be one of " + (__name(IdentNode) + " or " + __name(TmpNode)) + ", got " + __typeof(ident));
          }
          data = get.call(this, ident);
          if (data) {
            return data.isMutable;
          } else {
            return false;
          }
        };
        _Scope_prototype.type = function (ident) {
          var data;
          if (!(ident instanceof IdentNode) && !(ident instanceof TmpNode)) {
            throw TypeError("Expected ident to be one of " + (__name(IdentNode) + " or " + __name(TmpNode)) + ", got " + __typeof(ident));
          }
          data = get.call(this, ident);
          if (data) {
            return data.type;
          } else {
            return Type.any;
          }
        };
        return Scope;
      }());
      State = (function () {
        var _State_prototype, ASSIGN_OPERATOR, BINARY_OPERATOR, DEFINE_SYNTAX, macroDeserializers, macroSyntaxConstLiterals, macroSyntaxTypes, UNARY_OPERATOR;
        function State(data, macros, options, index, line, lineInfo, failures, cache, indent, currentMacro, preventFailures, knownScopes, scope) {
          var _this;
          _this = this instanceof State ? this : __create(_State_prototype);
          _this.data = data;
          if (macros == null) {
            macros = MacroHolder();
          } else if (!(macros instanceof MacroHolder)) {
            throw TypeError("Expected macros to be a " + __name(MacroHolder) + ", got " + __typeof(macros));
          }
          _this.macros = macros;
          if (options == null) {
            options = {};
          }
          _this.options = options;
          if (index == null) {
            index = 0;
          }
          _this.index = index;
          if (line == null) {
            line = 1;
          }
          _this.line = line;
          _this.lineInfo = lineInfo;
          if (failures == null) {
            failures = FailureManager();
          } else if (!(failures instanceof FailureManager)) {
            throw TypeError("Expected failures to be a " + __name(FailureManager) + ", got " + __typeof(failures));
          }
          _this.failures = failures;
          if (cache == null) {
            cache = [];
          }
          _this.cache = cache;
          if (indent == null) {
            indent = Stack(1);
          }
          _this.indent = indent;
          if (currentMacro == null) {
            currentMacro = null;
          }
          _this.currentMacro = currentMacro;
          if (preventFailures == null) {
            preventFailures = 0;
          }
          _this.preventFailures = preventFailures;
          if (knownScopes == null) {
            knownScopes = [];
          }
          _this.knownScopes = knownScopes;
          if (!scope) {
            _this.scope = Scope(knownScopes.length);
            knownScopes.push(_this.scope);
          } else {
            _this.scope = scope;
          }
          _this.expandingMacros = false;
          if (!lineInfo) {
            _this.calculateLineInfo();
          }
          return _this;
        }
        _State_prototype = State.prototype;
        State.displayName = "State";
        _State_prototype.clone = function (scope) {
          if (scope == null) {
            scope = void 0;
          } else if (!(scope instanceof Scope)) {
            throw TypeError("Expected scope to be one of " + (__name(Scope) + " or undefined") + ", got " + __typeof(scope));
          }
          return State(
            this.data,
            this.macros,
            this.options,
            this.index,
            this.line,
            this.lineInfo,
            this.failures,
            this.cache,
            this.indent.clone(),
            this.currentMacro,
            this.preventFailures,
            this.knownScopes,
            scope || this.scope
          );
        };
        _State_prototype.clearCache = function () {
          this.cache.length = 0;
        };
        _State_prototype.calculateLineInfo = function () {
          var data, index, lineInfo, match, newlineRegex;
          newlineRegex = /(?:\r\n?|[\n\u2028\u2029])/g;
          data = this.data;
          lineInfo = this.lineInfo = [];
          index = 0;
          lineInfo.push(0);
          while (true) {
            match = newlineRegex.exec(data);
            if (!match) {
              break;
            }
            index = __num(match.index) + __num(match[0].length);
            lineInfo.push(index);
          }
        };
        _State_prototype.getPosition = function (index) {
          var current, i, left, lineInfo, right;
          if (index == null) {
            index = this.index;
          } else if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          lineInfo = this.lineInfo;
          left = 0;
          right = lineInfo.length;
          while (left !== right) {
            i = Math.floor((left + right) / 2);
            current = lineInfo[i];
            if (current > index) {
              right = i;
            } else if (current < index) {
              if (left === i) {
                break;
              }
              left = i;
            } else {
              left = i;
              break;
            }
          }
          return { line: left + 1, column: index - __num(lineInfo[left]) + 1 };
        };
        _State_prototype.getLine = function (index) {
          if (index == null) {
            index = this.index;
          } else if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          return this.getPosition(index).line;
        };
        _State_prototype.cloneScope = function (outerScope) {
          var scope;
          scope = (outerScope || this.scope).clone(this.knownScopes.length);
          this.knownScopes.push(scope);
          return scope;
        };
        _State_prototype.getScope = function (id) {
          var _this;
          _this = this;
          if (typeof id !== "number") {
            throw TypeError("Expected id to be a Number, got " + __typeof(id));
          }
          return this.knownScopes[id] || (function () {
            throw Error("Unknown scope: " + id);
          }());
        };
        _State_prototype.update = function (clone) {
          this.index = clone.index;
          this.line = clone.line;
          this.indent = clone.indent.clone();
          this.macros = clone.macros;
        };
        _State_prototype.fail = function (message) {
          if (!this.preventFailures) {
            this.failures.add(message, this.index, this.getLine());
          }
        };
        _State_prototype.preventFail = function () {
          ++this.preventFailures;
        };
        _State_prototype.unpreventFail = function () {
          --this.preventFailures;
        };
        _State_prototype.error = function (message) {
          throw ParserError(message, this.data, this.getLine());
        };
        _State_prototype.enterMacro = function (names, func) {
          if (!names) {
            throw Error("Must provide a macro name");
          }
          if (this.currentMacro) {
            this.error("Attempting to define a macro " + String(names) + " inside a macro " + String(this.currentMacro));
          }
          try {
            this.currentMacro = names;
            func();
          } finally {
            this.currentMacro = null;
          }
          return this.nothing(this.index);
        };
        _State_prototype.defineHelper = function (i, name, value) {
          var _ref, dependencies, helper, node, translator, type;
          if (!(name instanceof IdentNode)) {
            throw TypeError("Expected name to be a " + __name(IdentNode) + ", got " + __typeof(name));
          }
          if (!(value instanceof Node)) {
            throw TypeError("Expected value to be a " + __name(Node) + ", got " + __typeof(value));
          }
          translator = require("./jstranslator");
          node = this.macroExpandAll(value).reduce(this);
          type = node.type(this);
          helper = (_ref = translator.defineHelper(this.macros, name, node, type)).helper;
          dependencies = _ref.dependencies;
          if (this.options.serializeMacros) {
            this.macros.addSerializedHelper(name.name, helper, type, dependencies);
          }
          return this.nothing(i);
        };
        macroSyntaxConstLiterals = {
          ",": Comma,
          ";": Semicolon,
          ":": Colon,
          ":=": ColonEqual,
          "": Nothing,
          "\n": NewlineWithCheckIndent,
          "(": OpenParenthesis,
          ")": CloseParenthesis,
          "[": OpenSquareBracket,
          "]": CloseSquareBracket,
          "{": OpenCurlyBrace,
          "}": CloseCurlyBrace
        };
        function reduceObject(o, obj) {
          var _arr, _arr2, _i, _len, item, k, result, v;
          if (__isArray(obj)) {
            for (_arr = [], _arr2 = __toArray(obj), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              item = _arr2[_i];
              _arr.push(reduceObject(o, item));
            }
            return _arr;
          } else if (obj instanceof Node) {
            return obj.reduce(o);
          } else if (typeof obj === "object" && obj !== null) {
            result = {};
            for (k in obj) {
              if (__owns.call(obj, k)) {
                v = obj[k];
                result[k] = reduceObject(o, v);
              }
            }
            return result;
          } else {
            return obj;
          }
        }
        function makeMacroRoot(index, params, body) {
          return this.root(index, void 0, this["return"](
            index,
            this["function"](
              index,
              [
                params,
                this.param(
                  index,
                  this.ident(index, "__wrap"),
                  void 0,
                  false,
                  true,
                  void 0
                ),
                this.param(
                  index,
                  this.ident(index, "__node"),
                  void 0,
                  false,
                  true,
                  void 0
                )
              ],
              body,
              true,
              false
            ),
            false
          ));
        }
        function serializeParamType(asType) {
          if (asType instanceof IdentNode) {
            return { type: "ident", name: asType.name };
          } else if (asType instanceof SyntaxSequenceNode) {
            return { type: "sequence", items: serializeParams(asType.params) };
          } else if (asType instanceof SyntaxChoiceNode) {
            return {
              type: "choice",
              choices: (function () {
                var _arr, _arr2, _i, _len, choice;
                for (_arr = [], _arr2 = __toArray(asType.choices), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  choice = _arr2[_i];
                  _arr.push(serializeParamType(choice));
                }
                return _arr;
              }())
            };
          } else if (asType.isConst()) {
            return { type: "const", value: asType.constValue() };
          } else if (asType instanceof SyntaxManyNode) {
            return { type: "many", multiplier: asType.multiplier, inner: serializeParamType(asType.inner) };
          } else {
            throw Error();
          }
        }
        function serializeParams(params) {
          var _arr, _arr2, _i, _len, ident, param, value;
          for (_arr = [], _arr2 = __toArray(params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
            param = _arr2[_i];
            if (param.isConst()) {
              _arr.push({ type: "const", value: param.constValue() });
            } else if (param instanceof SyntaxParamNode) {
              ident = param.ident;
              if (ident instanceof IdentNode) {
                value = { type: "ident", name: ident.name };
              } else if (ident instanceof ThisNode) {
                value = { type: "this" };
              } else {
                throw Error();
              }
              if (param.asType) {
                value.asType = serializeParamType(param.asType);
              }
              _arr.push(value);
            } else {
              throw Error();
            }
          }
          return _arr;
        }
        function deserializeParamType(asType, scopeId) {
          if (asType == null) {
            return;
          }
          switch (asType.type) {
          case "ident":
            return IdentNode(0, 0, scopeId, asType.name);
          case "sequence":
            return SyntaxSequenceNode(0, 0, scopeId, deserializeParams(asType.items, scopeId));
          case "choice":
            return SyntaxChoiceNode(0, 0, scopeId, (function () {
              var _arr, _arr2, _i, _len, choice;
              for (_arr = [], _arr2 = __toArray(asType.choices), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                choice = _arr2[_i];
                _arr.push(deserializeParamType(choice, scopeId));
              }
              return _arr;
            }()));
          case "const":
            return ConstNode(0, 0, scopeId, asType.value);
          case "many":
            return SyntaxManyNode(
              0,
              0,
              scopeId,
              deserializeParamType(asType.inner, scopeId),
              asType.multiplier
            );
          default: throw Error("Unknown as-type: " + String(asType.type));
          }
        }
        function deserializeParams(params, scopeId) {
          var _arr, _arr2, _i, _len, node, param;
          for (_arr = [], _arr2 = __toArray(params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
            param = _arr2[_i];
            if (param.type === "const") {
              _arr.push(ConstNode(0, 0, scopeId, param.value));
            } else {
              if (param.type === "ident") {
                node = IdentNode(0, 0, scopeId, param.name);
              } else if (param.type === "this") {
                node = ThisNode(0, 0, scopeId);
              } else {
                throw Error("Unknown param: " + String(param.type));
              }
              _arr.push(SyntaxParamNode(
                0,
                0,
                scopeId,
                node,
                deserializeParamType(param.asType, scopeId)
              ));
            }
          }
          return _arr;
        }
        function calcParam(param) {
          var _this, calced, macros, multiplier, name, string;
          _this = this;
          if (param instanceof IdentNode) {
            name = param.name;
            macros = this.macros;
            if (macros.hasSyntax(name)) {
              return macros.getSyntax(name);
            } else {
              return named(name, function (o) {
                return macros.getSyntax(name).call(this, o);
              });
            }
          } else if (param instanceof SyntaxSequenceNode) {
            return handleParams.call(this, param.params);
          } else if (param instanceof SyntaxChoiceNode) {
            return cache(oneOf((function () {
              var _arr, _arr2, _i, _len, choice;
              for (_arr = [], _arr2 = __toArray(param.choices), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                choice = _arr2[_i];
                _arr.push(calcParam.call(_this, choice));
              }
              return _arr;
            }())));
          } else if (param.isConst()) {
            string = param.constValue();
            if (typeof string !== "string") {
              this.error("Expected a constant string parameter, got " + __typeof(string));
            }
            return __owns.call(macroSyntaxConstLiterals, string) && macroSyntaxConstLiterals[string] || wordOrSymbol(string);
          } else if (param instanceof SyntaxManyNode) {
            multiplier = param.multiplier;
            calced = calcParam.call(this, param.inner);
            switch (multiplier) {
            case "*":
              return named(__strnum(calced != null && calced.parserName || "calced") + "*", function (o) {
                var clone, item, result;
                clone = o.clone();
                result = [];
                while (item = calced(clone)) {
                  result.push(item);
                }
                o.update(clone);
                return result;
              });
            case "+":
              return named(__strnum(calced != null && calced.parserName || "calced") + "+", function (o) {
                var clone, item, result;
                clone = o.clone();
                result = [];
                while (item = calced(clone)) {
                  result.push(item);
                }
                if (result.length < 1) {
                  return false;
                } else {
                  o.update(clone);
                  return result;
                }
              });
            case "?":
              return (function () {
                function _missing(x, o, i) {
                  return o.nothing(i);
                }
                return named(__strnum(calced != null && calced.parserName || "calced") + "?", function (o) {
                  var index, line;
                  index = o.index;
                  line = o.line;
                  return calced(o) || _missing(void 0, o, index, line);
                });
              }());
            default: throw Error("Unknown syntax multiplier: " + __strnum(multiplier));
            }
          } else {
            return this.error("Unexpected type: " + __typeof(param));
          }
        }
        function handleParams(params) {
          var _arr, _i, _len, _ref, ident, key, param, sequence, string, type;
          sequence = [];
          for (_arr = __toArray(params), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            param = _arr[_i];
            if (param.isConst()) {
              string = param.constValue();
              if (typeof string !== "string") {
                this.error("Expected a constant string parameter, got " + __typeof(string));
              }
              sequence.push(__owns.call(macroSyntaxConstLiterals, string) && macroSyntaxConstLiterals[string] || wordOrSymbol(string));
            } else if (param instanceof SyntaxParamNode) {
              ident = param.ident;
              if (ident instanceof IdentNode) {
                key = ident.name;
              } else if (ident instanceof ThisNode) {
                key = "this";
              } else {
                throw Error("Don't know how to handle ident type: " + __typeof(ident));
              }
              if ((_ref = param.asType) != null) {
                type = _ref;
              } else {
                type = IdentNode(0, 0, -1, "Expression");
              }
              sequence.push([
                key,
                calcParam.call(this, type)
              ]);
            } else {
              this.error("Unexpected parameter type: " + __typeof(param));
            }
          }
          return sequential(sequence);
        }
        macroSyntaxTypes = {
          syntax: function (index, params, body, options, stateOptions, translator) {
            var _this, compilation, funcParam, handler, macroDataIdent, macroFullDataIdent, macroNameIdent, rawFunc, serialization, state, translated;
            _this = this;
            macroFullDataIdent = this.ident(index, "macroFullData");
            funcParam = this.param(
              index,
              macroFullDataIdent,
              void 0,
              false,
              false,
              void 0
            );
            macroNameIdent = this.ident(index, "macroName");
            this.scope.add(macroNameIdent, false, Type.string);
            macroDataIdent = this.ident(index, "macroData");
            this.scope.add(macroDataIdent, false, Type.object);
            body = this.block(index, [
              this["var"](index, macroNameIdent, false),
              this.assign(index, macroNameIdent, "=", this.access(index, macroFullDataIdent, this["const"](index, "macroName"))),
              this["var"](index, macroDataIdent, false),
              this.assign(index, macroDataIdent, "=", this.access(index, macroFullDataIdent, this["const"](index, "macroData")))
            ].concat(
              (function () {
                var _arr, _arr2, _i, _len, param;
                for (_arr = [], _arr2 = __toArray(params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  param = _arr2[_i];
                  if (param instanceof SyntaxParamNode) {
                    _this.scope.add(param.ident, true, Type.any);
                    _arr.push(_this.block(index, [
                      _this["var"](index, param.ident, true),
                      _this.assign(index, param.ident, "=", _this.access(index, macroDataIdent, _this["const"](index, param.ident.name)))
                    ]));
                  }
                }
                return _arr;
              }()),
              [body]
            ));
            rawFunc = makeMacroRoot.call(this, index, funcParam, body);
            translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, { "return": true });
            compilation = translated.node.toString({ minify: !!stateOptions.serializeMacros });
            if (stateOptions.serializeMacros) {
              serialization = compilation;
            }
            handler = Function(compilation)();
            if (typeof handler !== "function") {
              throw Error("Error creating function for macro: " + String(this.currentMacro));
            }
            state = this;
            return {
              handler: function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return handler.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
              },
              rule: handleParams.call(this, params),
              serialization: serialization != null
                ? {
                  type: "syntax",
                  code: serialization,
                  options: options,
                  params: serializeParams(params),
                  names: this.currentMacro
                }
                : void 0
            };
          },
          defineSyntax: function (index, params, body, options, stateOptions, translator) {
            var _this, handler, serialization, state;
            _this = this;
            state = this;
            if (body != null) {
              handler = (function () {
                var compilation, funcParam, handler, macroDataIdent, rawFunc, translated;
                macroDataIdent = _this.ident(index, "macroData");
                funcParam = _this.param(
                  index,
                  macroDataIdent,
                  void 0,
                  false,
                  false,
                  void 0
                );
                body = _this.block(index, (function () {
                  var _arr, _arr2, _i, _len, param;
                  for (_arr = [], _arr2 = __toArray(params), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    param = _arr2[_i];
                    if (param instanceof SyntaxParamNode) {
                      _this.scope.add(param.ident, true, Type.any);
                      _arr.push(_this.block(index, [
                        _this["var"](index, param.ident, true),
                        _this.assign(index, param.ident, "=", _this.access(index, macroDataIdent, _this["const"](index, param.ident.name)))
                      ]));
                    }
                  }
                  return _arr;
                }()).concat([body]));
                rawFunc = makeMacroRoot.call(_this, index, funcParam, body);
                translated = translator(_this.macroExpandAll(rawFunc).reduce(state), _this.macros, { "return": true });
                compilation = translated.node.toString({ minify: !!stateOptions.serializeMacros });
                if (stateOptions.serializeMacros) {
                  serialization = compilation;
                }
                handler = Function(compilation)();
                if (typeof handler !== "function") {
                  throw Error("Error creating function for syntax: " + __strnum(options.name));
                }
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return reduceObject(state, handler.apply(this, [reduceObject(state, args)].concat(__toArray(rest))));
                };
              }());
            } else {
              handler = function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return reduceObject(state, args);
              };
            }
            return {
              handler: handler,
              rule: handleParams.call(this, params),
              serialization: stateOptions.serializeMacros ? { type: "defineSyntax", code: serialization, options: options, params: serializeParams(params) } : void 0
            };
          },
          call: function (index, params, body, options, stateOptions, translator) {
            var _this, compilation, funcParam, handler, macroDataIdent, macroFullDataIdent, macroNameIdent, rawFunc, serialization, state, translated;
            _this = this;
            macroFullDataIdent = this.ident(index, "macroFullData");
            funcParam = this.param(
              index,
              macroFullDataIdent,
              void 0,
              false,
              false,
              void 0
            );
            macroNameIdent = this.ident(index, "macroName");
            this.scope.add(macroNameIdent, false, Type.string);
            macroDataIdent = this.ident(index, "macroData");
            this.scope.add(macroDataIdent, false, Type.object);
            body = this.block(index, [
              this["var"](index, macroNameIdent, false),
              this.assign(index, macroNameIdent, "=", this.access(index, macroFullDataIdent, this["const"](index, "macroName"))),
              this["var"](index, macroDataIdent, false),
              this.assign(index, macroDataIdent, "=", this.access(index, macroFullDataIdent, this["const"](index, "macroData")))
            ].concat(
              (function () {
                var _arr, _arr2, _len, i, param;
                for (_arr = [], _arr2 = __toArray(params), i = 0, _len = _arr2.length; i < _len; ++i) {
                  param = _arr2[i];
                  if (param instanceof ParamNode) {
                    _this.scope.add(param.ident, true, Type.any);
                    _arr.push(_this.block(index, [
                      _this["var"](index, param.ident, true),
                      _this.assign(index, param.ident, "=", _this.access(index, macroDataIdent, _this["const"](index, i)))
                    ]));
                  }
                }
                return _arr;
              }()),
              [body]
            ));
            rawFunc = makeMacroRoot.call(this, index, funcParam, body);
            translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, { "return": true });
            compilation = translated.node.toString({ minify: !!stateOptions.serializeMacros });
            if (stateOptions.serializeMacros) {
              serialization = compilation;
            }
            handler = Function(compilation)();
            if (typeof handler !== "function") {
              throw Error("Error creating function for macro: " + __strnum(this.currentMacro));
            }
            state = this;
            handler = (function (inner) {
              return function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
              };
            }(handler));
            return {
              handler: handler,
              rule: InvocationArguments,
              serialization: serialization != null ? { type: "call", code: serialization, options: options, names: this.currentMacro } : void 0
            };
          },
          binaryOperator: function (index, operators, body, options, stateOptions, translator) {
            var _this, compilation, funcParam, handler, macroDataIdent, rawFunc, serialization, state, translated;
            _this = this;
            macroDataIdent = this.ident(index, "macroData");
            funcParam = this.param(
              index,
              macroDataIdent,
              void 0,
              false,
              false,
              void 0
            );
            body = this.block(index, (function () {
              var _arr, _arr2, _i, _len, ident, name;
              for (_arr = [], _arr2 = ["left", "op", "right"], _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                name = _arr2[_i];
                ident = _this.ident(index, name);
                _this.scope.add(ident, true, Type.any);
                _arr.push(_this.block(index, [
                  _this["var"](index, ident, true),
                  _this.assign(index, ident, "=", _this.access(index, macroDataIdent, _this["const"](index, name)))
                ]));
              }
              return _arr;
            }()).concat([body]));
            rawFunc = makeMacroRoot.call(this, index, funcParam, body);
            translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, { "return": true });
            compilation = translated.node.toString({ minify: !!stateOptions.serializeMacros });
            if (stateOptions.serializeMacros) {
              serialization = compilation;
            }
            handler = Function(compilation)();
            if (typeof handler !== "function") {
              throw Error("Error creating function for binary operator " + __strnum(operators.join(", ")));
            }
            state = this;
            if (options.invertible) {
              handler = (function (inner) {
                return function (args) {
                  var rest, result;
                  rest = __slice.call(arguments, 1);
                  result = inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest)));
                  if (args.inverted) {
                    return UnaryNode(
                      result.line,
                      result.column,
                      result.scopeId,
                      "!",
                      result
                    ).reduce(state);
                  } else {
                    return result.reduce(state);
                  }
                };
              }(handler));
            } else {
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
                };
              }(handler));
            }
            return {
              handler: handler,
              rule: void 0,
              serialization: serialization != null ? { type: "binaryOperator", code: serialization, operators: operators, options: options } : void 0
            };
          },
          assignOperator: function (index, operators, body, options, stateOptions, translator) {
            var _this, compilation, funcParam, handler, macroDataIdent, rawFunc, serialization, state, translated;
            _this = this;
            macroDataIdent = this.ident(index, "macroData");
            funcParam = this.param(
              index,
              macroDataIdent,
              void 0,
              false,
              false,
              void 0
            );
            body = this.block(index, (function () {
              var _arr, _arr2, _i, _len, ident, name;
              for (_arr = [], _arr2 = ["left", "op", "right"], _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                name = _arr2[_i];
                ident = _this.ident(index, name);
                _this.scope.add(ident, true, Type.any);
                _arr.push(_this.block(index, [
                  _this["var"](index, ident, true),
                  _this.assign(index, ident, "=", _this.access(index, macroDataIdent, _this["const"](index, name)))
                ]));
              }
              return _arr;
            }()).concat([body]));
            rawFunc = makeMacroRoot.call(this, index, funcParam, body);
            translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, { "return": true });
            compilation = translated.node.toString({ minify: !!stateOptions.serializeMacros });
            if (stateOptions.serializeMacros) {
              serialization = compilation;
            }
            handler = Function(compilation)();
            if (typeof handler !== "function") {
              throw Error("Error creating function for assign operator " + __strnum(operators.join(", ")));
            }
            state = this;
            handler = (function (inner) {
              return function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
              };
            }(handler));
            return {
              handler: handler,
              rule: void 0,
              serialization: serialization != null ? { type: "assignOperator", code: serialization, operators: operators, options: options } : void 0
            };
          },
          unaryOperator: function (index, operators, body, options, stateOptions, translator) {
            var _this, compilation, funcParam, handler, macroDataIdent, rawFunc, serialization, state, translated;
            _this = this;
            macroDataIdent = this.ident(index, "macroData");
            funcParam = this.param(
              index,
              macroDataIdent,
              void 0,
              false,
              false,
              void 0
            );
            body = this.block(index, (function () {
              var _arr, _arr2, _i, _len, ident, name;
              for (_arr = [], _arr2 = ["op", "node"], _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                name = _arr2[_i];
                ident = _this.ident(index, name);
                _this.scope.add(ident, true, Type.any);
                _arr.push(_this.block(index, [
                  _this["var"](index, ident, true),
                  _this.assign(index, ident, "=", _this.access(index, macroDataIdent, _this["const"](index, name)))
                ]));
              }
              return _arr;
            }()).concat([body]));
            rawFunc = makeMacroRoot.call(this, index, funcParam, body);
            translated = translator(this.macroExpandAll(rawFunc).reduce(this), this.macros, { "return": true });
            compilation = translated.node.toString({ minify: !!stateOptions.serializeMacros });
            if (stateOptions.serializeMacros) {
              serialization = compilation;
            }
            handler = Function(compilation)();
            if (typeof handler !== "function") {
              throw Error("Error creating function for unary operator " + __strnum(operators.join(", ")));
            }
            state = this;
            handler = (function (inner) {
              return function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
              };
            }(handler));
            return {
              handler: handler,
              rule: void 0,
              serialization: serialization != null ? { type: "unaryOperator", code: serialization, operators: operators, options: options } : void 0
            };
          }
        };
        macroDeserializers = {
          syntax: function (_p) {
            var _this, code, handler, id, names, options, params, state;
            _this = this;
            code = _p.code;
            params = _p.params;
            names = _p.names;
            options = _p.options;
            id = _p.id;
            handler = Function(code)();
            if (typeof handler !== "function") {
              throw Error("Error deserializing function for macro " + __strnum(name));
            }
            state = this;
            handler = (function (inner) {
              return function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
              };
            }(handler));
            return this.enterMacro(names, function () {
              return handleMacroSyntax.call(
                _this,
                0,
                "syntax",
                handler,
                handleParams.call(_this, deserializeParams(params, _this.scope.id)),
                null,
                options,
                id
              );
            });
          },
          call: function (_p) {
            var _this, code, handler, id, names, options, state;
            _this = this;
            code = _p.code;
            names = _p.names;
            options = _p.options;
            id = _p.id;
            handler = Function(code)();
            if (typeof handler !== "function") {
              throw Error("Error deserializing function for macro " + __strnum(name));
            }
            state = this;
            handler = (function (inner) {
              return function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
              };
            }(handler));
            return this.enterMacro(name, function () {
              return handleMacroSyntax.call(
                _this,
                0,
                "call",
                handler,
                InvocationArguments,
                null,
                options,
                id
              );
            });
          },
          defineSyntax: function (_p) {
            var _this, code, handler, id, options, params, state;
            _this = this;
            code = _p.code;
            params = _p.params;
            options = _p.options;
            id = _p.id;
            if (this.macros.hasSyntax(options.name)) {
              throw Error("Cannot override already-defined syntax: " + __strnum(options.name));
            }
            state = this;
            if (code != null) {
              handler = Function(code)();
              if (typeof handler !== "function") {
                throw Error("Error deserializing function for macro syntax " + __strnum(options.name));
              }
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return reduceObject(state, inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))));
                };
              }(handler));
            } else {
              handler = function (args) {
                return reduceObject(state, args);
              };
            }
            return this.enterMacro(DEFINE_SYNTAX, function () {
              return handleMacroSyntax.call(
                _this,
                0,
                "defineSyntax",
                handler,
                handleParams.call(_this, deserializeParams(params, _this.scope.id)),
                null,
                options,
                id
              );
            });
          },
          binaryOperator: function (_p) {
            var _this, code, handler, id, operators, options, state;
            _this = this;
            code = _p.code;
            operators = _p.operators;
            options = _p.options;
            id = _p.id;
            handler = Function(code)();
            if (typeof handler !== "function") {
              throw Error("Error deserializing function for binary operator " + __strnum(operators.join(", ")));
            }
            state = this;
            if (options.invertible) {
              handler = (function (inner) {
                return function (args) {
                  var rest, result;
                  rest = __slice.call(arguments, 1);
                  result = inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest)));
                  if (args.inverted) {
                    return UnaryNode(
                      result.line,
                      result.column,
                      result.scopeId,
                      "!",
                      result
                    ).reduce(state);
                  } else {
                    return result.reduce(state);
                  }
                };
              }(handler));
            } else {
              handler = (function (inner) {
                return function (args) {
                  var rest;
                  rest = __slice.call(arguments, 1);
                  return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
                };
              }(handler));
            }
            return this.enterMacro(BINARY_OPERATOR, function () {
              return handleMacroSyntax.call(
                _this,
                0,
                "binaryOperator",
                handler,
                void 0,
                operators,
                options,
                id
              );
            });
          },
          assignOperator: function (_p) {
            var _this, code, handler, id, operators, options, state;
            _this = this;
            code = _p.code;
            operators = _p.operators;
            options = _p.options;
            id = _p.id;
            handler = Function(code)();
            if (typeof handler !== "function") {
              throw Error("Error deserializing function for assign operator " + __strnum(operators.join(", ")));
            }
            state = this;
            handler = (function (inner) {
              return function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
              };
            }(handler));
            return this.enterMacro(ASSIGN_OPERATOR, function () {
              return handleMacroSyntax.call(
                _this,
                0,
                "assignOperator",
                handler,
                void 0,
                operators,
                options,
                id
              );
            });
          },
          unaryOperator: function (_p) {
            var _this, code, handler, id, operators, options, state;
            _this = this;
            code = _p.code;
            operators = _p.operators;
            options = _p.options;
            id = _p.id;
            handler = Function(code)();
            if (typeof handler !== "function") {
              throw Error("Error deserializing function for unary operator " + __strnum(operators.join(", ")));
            }
            state = this;
            handler = (function (inner) {
              return function (args) {
                var rest;
                rest = __slice.call(arguments, 1);
                return inner.apply(this, [reduceObject(state, args)].concat(__toArray(rest))).reduce(state);
              };
            }(handler));
            this.enterMacro(UNARY_OPERATOR, function () {
              return handleMacroSyntax.call(
                _this,
                0,
                "unaryOperator",
                handler,
                void 0,
                operators,
                options,
                id
              );
            });
          }
        };
        function removeNoops(obj) {
          var _arr, _arr2, _i, _len, item, k, result, v;
          if (__isArray(obj)) {
            for (_arr = [], _arr2 = __toArray(obj), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              item = _arr2[_i];
              if (item instanceof NothingNode) {
                _arr.push(void 0);
              } else {
                _arr.push(removeNoops(item));
              }
            }
            return _arr;
          } else if (obj instanceof Node) {
            return obj;
          } else if (typeof obj === "object" && obj !== null && !(obj instanceof RegExp)) {
            result = {};
            for (k in obj) {
              if (__owns.call(obj, k)) {
                v = obj[k];
                if (!(v instanceof NothingNode)) {
                  result[k] = removeNoops(v);
                }
              }
            }
            return result;
          } else {
            return obj;
          }
        }
        _State_prototype.startMacroSyntax = function (index, params, options) {
          var _arr, _f, _i, _len, _ref, macroId, macros, rule;
          if (!__isArray(params)) {
            throw TypeError("Expected params to be an Array, got " + __typeof(params));
          }
          if (!this.currentMacro) {
            this.error("Attempting to specify a macro syntax when not in a macro");
          }
          rule = handleParams.call(this, params);
          macros = this.macros;
          function mutator(x, o, i, line) {
            if (_inAst.peek() || !o.expandingMacros) {
              return o.macroAccess(
                i,
                macroId,
                line,
                removeNoops(x),
                _position.peek(),
                _inGenerator.peek(),
                _inEvilAst.peek()
              );
            } else {
              throw Error("Cannot use macro until fully defined");
            }
          }
          for (_arr = __toArray(macros.getOrAddByNames(this.currentMacro)), _i = 0, _len = _arr.length, _f = function (m) {
            return m.data.push((function () {
              var _rule;
              _rule = m.token;
              return (function () {
                function _rule2(o) {
                  var _result, clone;
                  clone = o.clone();
                  _result = {};
                  return (_result.macroName = _rule(clone)) && (_result.macroData = rule(clone)) && (o.update(clone), _result);
                }
                return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
                  var index, line, result;
                  index = o.index;
                  line = o.line;
                  result = _rule2(o);
                  if (!result) {
                    return false;
                  } else {
                    return mutator(result, o, index, line);
                  }
                });
              }());
            }()));
          }; _i < _len; ++_i) {
            _f.call(this, _arr[_i]);
          }
          macroId = macros.addMacro(mutator, void 0, options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref] : void 0);
          this.pendingMacroId = macroId;
          return params;
        };
        function handleMacroSyntax(index, type, handler, rule, params, options, macroId) {
          var _this, macros;
          _this = this;
          if (typeof handler !== "function") {
            throw TypeError("Expected handler to be a Function, got " + __typeof(handler));
          }
          macros = this.macros;
          function mutator(x, o, i, line, scopeId) {
            var clone, macroHelper, result, tmps, walker;
            if (_inAst.peek() || !o.expandingMacros) {
              return o.macroAccess(
                i,
                macroId,
                line,
                removeNoops(x),
                _position.peek(),
                _inGenerator.peek(),
                _inEvilAst.peek()
              );
            } else {
              clone = o.clone(o.getScope(scopeId));
              macroHelper = MacroHelper(
                clone,
                i,
                _position.peek(),
                _inGenerator.peek(),
                _inEvilAst.peek()
              );
              if (type === "assignOperator" && macroHelper.isIdent(x.left)) {
                if (!macroHelper.hasVariable(x.left)) {
                  throw MacroError(Error("Trying to assign with " + __strnum(x.op) + " to unknown variable: " + __strnum(macroHelper.name(x.left))), o.data, line);
                } else if (!macroHelper.isVariableMutable(x.left) && !_inEvilAst.peek()) {
                  throw MacroError(Error("Trying to assign with " + __strnum(x.op) + " to immutable variable: " + __strnum(macroHelper.name(x.left))), o.data, line);
                }
              }
              result = (function () {
                try {
                  return handler.call(
                    macroHelper,
                    removeNoops(x),
                    __bind(macroHelper, "wrap"),
                    __bind(macroHelper, "node")
                  );
                } catch (e) {
                  if (e instanceof MacroError) {
                    e.setLine(line);
                    throw e;
                  } else {
                    throw MacroError(e, o.data, line);
                  }
                }
              }());
              o.update(clone);
              if (result instanceof Node) {
                walker = function (node) {
                  if (node instanceof MacroAccessNode) {
                    node.callLine = line;
                  }
                  return node.walk(walker);
                };
                result = walker(result.reduce(_this));
                tmps = macroHelper.getTmps();
                if (tmps.unsaved.length) {
                  return o.tmpWrapper(i, result, tmps.unsaved);
                } else {
                  return result;
                }
              } else {
                return result;
              }
            }
          }
          return macroId = (function () {
            var _arr, _f, _i, _len, _ref, id;
            switch (_this.currentMacro) {
            case BINARY_OPERATOR:
              return macros.addBinaryOperator(params, mutator, options, macroId);
            case ASSIGN_OPERATOR:
              return macros.addAssignOperator(params, mutator, options, macroId);
            case UNARY_OPERATOR:
              return macros.addUnaryOperator(params, mutator, options, macroId);
            case DEFINE_SYNTAX:
              assert(rule);
              macros.addSyntax(options.name, named(rule != null && rule.parserName || "rule", function (o) {
                var index, line, result;
                index = o.index;
                line = o.line;
                result = rule(o);
                if (!result) {
                  return false;
                } else {
                  return mutator(result, o, index, line);
                }
              }));
              return macros.addMacro(mutator, macroId, options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref] : void 0);
            default:
              assert(rule);
              for (_arr = __toArray(macros.getOrAddByNames(_this.currentMacro)), _i = 0, _len = _arr.length, _f = function (m) {
                var _this;
                _this = this;
                if (this.pendingMacroId != null) {
                  m.data.pop();
                }
                return m.data.push((function () {
                  var _rule;
                  _rule = m.token;
                  return (function () {
                    function _rule2(o) {
                      var _result, clone;
                      clone = o.clone();
                      _result = {};
                      return (_result.macroName = _rule(clone)) && (_result.macroData = rule(clone)) && (o.update(clone), _result);
                    }
                    return named(_rule2 != null && _rule2.parserName || "<unknown>", function (o) {
                      var index, line, result;
                      index = o.index;
                      line = o.line;
                      result = _rule2(o);
                      if (!result) {
                        return false;
                      } else {
                        return mutator(result, o, index, line);
                      }
                    });
                  }());
                }()));
              }; _i < _len; ++_i) {
                _f.call(_this, _arr[_i]);
              }
              if (_this.pendingMacroId != null) {
                if (macroId != null) {
                  throw Error("Cannot provide the macro id if there is a pending macro id");
                }
                id = _this.pendingMacroId;
                _this.pendingMacroId = null;
                macros.replaceMacro(id, mutator, options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref] : void 0);
                return id;
              } else {
                return macros.addMacro(mutator, macroId, options.type != null && __owns.call(Type, _ref = options.type) ? Type[_ref] : void 0);
              }
            }
          }());
        }
        _State_prototype.macroSyntax = function (index, type, params, options, body) {
          var _ref, handler, macroId, rule, serialization;
          if (!__isArray(params)) {
            throw TypeError("Expected params to be an Array, got " + __typeof(params));
          }
          if (!__owns.call(macroSyntaxTypes, type)) {
            throw Error("Unknown macro-syntax type: " + __strnum(type));
          }
          if (!this.currentMacro) {
            this.error("Attempting to specify a macro syntax when not in a macro");
          }
          handler = (_ref = macroSyntaxTypes[type].call(
            this,
            index,
            params,
            body,
            options,
            this.options,
            require("./jstranslator")
          )).handler;
          rule = _ref.rule;
          serialization = _ref.serialization;
          macroId = handleMacroSyntax.call(
            this,
            index,
            type,
            handler,
            rule,
            params,
            options
          );
          if (serialization != null) {
            serialization.id = macroId;
            this.macros.addMacroSerialization(serialization);
          }
        };
        BINARY_OPERATOR = freeze({});
        _State_prototype.defineBinaryOperator = function (index, operators, options, body) {
          var _i, _this;
          _this = this;
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!__isArray(operators)) {
            throw TypeError("Expected operators to be an Array, got " + __typeof(operators));
          } else {
            for (_i = operators.length; _i--; ) {
              if (typeof operators[_i] !== "string") {
                throw TypeError("Expected " + ("operators[" + _i + "]") + " to be a String, got " + __typeof(operators[_i]));
              }
            }
          }
          if (typeof options !== "object" || options === null) {
            throw TypeError("Expected options to be an Object, got " + __typeof(options));
          }
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          return this.enterMacro(BINARY_OPERATOR, function () {
            return _this.macroSyntax(
              index,
              "binaryOperator",
              operators,
              options,
              body
            );
          });
        };
        ASSIGN_OPERATOR = freeze({});
        _State_prototype.defineAssignOperator = function (index, operators, options, body) {
          var _i, _this;
          _this = this;
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!__isArray(operators)) {
            throw TypeError("Expected operators to be an Array, got " + __typeof(operators));
          } else {
            for (_i = operators.length; _i--; ) {
              if (typeof operators[_i] !== "string") {
                throw TypeError("Expected " + ("operators[" + _i + "]") + " to be a String, got " + __typeof(operators[_i]));
              }
            }
          }
          if (typeof options !== "object" || options === null) {
            throw TypeError("Expected options to be an Object, got " + __typeof(options));
          }
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          return this.enterMacro(ASSIGN_OPERATOR, function () {
            return _this.macroSyntax(
              index,
              "assignOperator",
              operators,
              options,
              body
            );
          });
        };
        UNARY_OPERATOR = freeze({});
        _State_prototype.defineUnaryOperator = function (index, operators, options, body) {
          var _i, _this;
          _this = this;
          if (typeof index !== "number") {
            throw TypeError("Expected index to be a Number, got " + __typeof(index));
          }
          if (!__isArray(operators)) {
            throw TypeError("Expected operators to be an Array, got " + __typeof(operators));
          } else {
            for (_i = operators.length; _i--; ) {
              if (typeof operators[_i] !== "string") {
                throw TypeError("Expected " + ("operators[" + _i + "]") + " to be a String, got " + __typeof(operators[_i]));
              }
            }
          }
          if (typeof options !== "object" || options === null) {
            throw TypeError("Expected options to be an Object, got " + __typeof(options));
          }
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          return this.enterMacro(UNARY_OPERATOR, function () {
            return _this.macroSyntax(
              index,
              "unaryOperator",
              operators,
              options,
              body
            );
          });
        };
        DEFINE_SYNTAX = freeze({});
        _State_prototype.defineSyntax = function (index, name, params, body) {
          var _this;
          _this = this;
          return this.enterMacro(DEFINE_SYNTAX, function () {
            return _this.macroSyntax(
              index,
              "defineSyntax",
              params,
              { name: name },
              body
            );
          });
        };
        _State_prototype.deserializeMacros = function (data) {
          var _arr, _i, _len, _ref, deserializer, item, type;
          for (type in macroDeserializers) {
            if (__owns.call(macroDeserializers, type)) {
              deserializer = macroDeserializers[type];
              for (_arr = __toArray((_ref = __owns.call(data, type) ? data[type] : void 0) != null ? _ref : []), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                item = _arr[_i];
                deserializer.call(this, item);
              }
            }
          }
        };
        _State_prototype.macroExpand1 = function (node) {
          var _this, oldExpandingMacros, result;
          _this = this;
          if (node._macroExpanded != null) {
            return node._macroExpanded;
          } else if (node instanceof MacroAccessNode) {
            _position.push(node.position);
            _inGenerator.push(node.inGenerator);
            _inEvilAst.push(node.inEvilAst);
            oldExpandingMacros = this.expandingMacros;
            this.expandingMacros = true;
            result = (function () {
              try {
                return _this.macros.getById(node.id)(
                  node.data,
                  _this,
                  node.startIndex || 0,
                  node.callLine,
                  node.scopeId
                );
              } catch (e) {
                if (e instanceof MacroError) {
                  e.setLine(node.callLine);
                }
                throw e;
              } finally {
                _position.pop();
                _inGenerator.pop();
                _inEvilAst.pop();
                _this.expandingMacros = oldExpandingMacros;
              }
            }());
            return node._macroExpanded = result instanceof MacroAccessNode ? this.macroExpand1(result) : result instanceof Node ? (result._macroExpanded = result) : result;
          } else {
            return node._macroExpanded = node;
          }
        };
        _State_prototype.macroExpandAllAsync = function (node, callback) {
          var _this, startTime;
          _this = this;
          startTime = new Date().getTime();
          function walker(node, callback) {
            var expanded;
            if (__num(new Date().getTime()) - __num(startTime) > 17) {
              return nextTick(function () {
                startTime = new Date().getTime();
                return walker(node, callback);
              });
            }
            if (node._macroExpandAlled != null) {
              return callback(null, node._macroExpandAlled);
            } else if (!(node instanceof MacroAccessNode)) {
              return node.walkAsync(walker, function (_e, walked) {
                if (_e != null) {
                  return callback(_e);
                }
                return callback(null, walked._macroExpandAlled = walked._macroExpanded = node._macroExpandAlled = node._macroExpanded = walked);
              });
            } else {
              try {
                expanded = _this.macroExpand1(node);
              } catch (e) {
                return callback(e);
              }
              if (!(expanded instanceof Node)) {
                return callback(null, node._macroExpandAlled = node._macroExpanded = expanded);
              }
              return walker(expanded, function (_e, walked) {
                if (_e != null) {
                  return callback(_e);
                }
                return callback(null, expanded._macroExpandAlled = expanded._macroExpanded = walked._macroExpandAlled = walked._macroExpanded = node._macroExpandAlled = node._macroExpanded = walked);
              });
            }
          }
          return walker(node, callback);
        };
        _State_prototype.macroExpandAll = function (node, callback) {
          var _this;
          _this = this;
          function walker(node) {
            var expanded, walked;
            if (node._macroExpandAlled != null) {
              return node._macroExpandAlled;
            } else if (!(node instanceof MacroAccessNode)) {
              walked = node.walk(walker);
              return walked._macroExpandAlled = walked._macroExpanded = node._macroExpandAlled = node._macroExpanded = walked;
            } else {
              expanded = _this.macroExpand1(node);
              if (!(expanded instanceof Node)) {
                return node._macroExpandAlled = node._macroExpanded = expanded;
              }
              walked = walker(expanded);
              return expanded._macroExpandAlled = expanded._macroExpanded = walked._macroExpandAlled = walked._macroExpanded = node._macroExpandAlled = node._macroExpanded = walked;
            }
          }
          return walker(node);
        };
        State.addNodeFactory = function (name, type) {
          State.prototype[name] = function (index) {
            var args, pos;
            args = __slice.call(arguments, 1);
            pos = this.getPosition(index);
            return type.apply(void 0, [pos.line, pos.column, this.scope.id].concat(__toArray(args)));
          };
        };
        return State;
      }());
      Node.Access = AccessNode = (function (Node) {
        var _AccessNode_prototype, _Node_prototype;
        function AccessNode(line, column, scopeId, parent, child) {
          var _this;
          _this = this instanceof AccessNode ? this : __create(_AccessNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(parent instanceof Node)) {
            throw TypeError("Expected parent to be a " + __name(Node) + ", got " + __typeof(parent));
          }
          if (!(child instanceof Node)) {
            throw TypeError("Expected child to be a " + __name(Node) + ", got " + __typeof(child));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.parent = parent;
          _this.child = child;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _AccessNode_prototype = AccessNode.prototype = __create(_Node_prototype);
        _AccessNode_prototype.constructor = AccessNode;
        AccessNode.displayName = "AccessNode";
        if (typeof Node.extended === "function") {
          Node.extended(AccessNode);
        }
        AccessNode.cappedName = "Access";
        AccessNode.argNames = ["parent", "child"];
        State.addNodeFactory("access", AccessNode);
        _AccessNode_prototype.type = function (o) {
          var _ref, _this;
          _this = this;
          if ((_ref = this._type) == null) {
            return this._type = (function () {
              var child, childType, childValue, isString, parentType;
              parentType = _this.parent.type(o);
              isString = parentType.isSubsetOf(Type.string);
              if (isString || parentType.isSubsetOf(Type.arrayLike)) {
                child = o.macroExpand1(_this.child).reduce(o);
                if (child.isConst()) {
                  childValue = child.constValue();
                  if (childValue === "length") {
                    return Type.number;
                  } else if (typeof childValue === "number") {
                    if (__num(childValue) >= 0 && __num(childValue) % 1 === 0) {
                      if (isString) {
                        return Type.string.union(Type["undefined"]);
                      } else if (parentType.subtype) {
                        return parentType.subtype.union(Type["undefined"]);
                      } else {
                        return Type.any;
                      }
                    } else {
                      return Type["undefined"];
                    }
                  }
                } else {
                  childType = child.type(o);
                  if (childType.isSubsetOf(Type.number)) {
                    if (isString) {
                      return Type.string.union(Type["undefined"]);
                    } else if (parentType.subtype) {
                      return parentType.subtype.union(Type["undefined"]);
                    } else {
                      return Type.any;
                    }
                  }
                }
              } else if (parentType.isSubsetOf(Type.object) && typeof parentType.value === "function") {
                child = o.macroExpand1(_this.child).reduce(o);
                if (child.isConst()) {
                  return parentType.value(String(child.constValue()));
                }
              }
              return Type.any;
            }());
          } else {
            return _ref;
          }
        };
        _AccessNode_prototype._reduce = function (o) {
          var _ref, args, cachedParent, child, cValue, end, hasEnd, hasStep, inclusive, parent, pValue, start, step, value;
          parent = this.parent.reduce(o).doWrap(o);
          cachedParent = null;
          function replaceLengthIdent(node) {
            var nodeParent;
            if (node instanceof IdentNode && node.name === CURRENT_ARRAY_LENGTH_NAME) {
              if (parent.cacheable && cachedParent == null) {
                cachedParent = TmpNode(
                  node.line,
                  node.column,
                  node.scopeId,
                  getTmpId(),
                  "ref",
                  parent.type(o)
                );
              }
              return AccessNode(
                node.line,
                node.column,
                node.scopeId,
                cachedParent != null ? cachedParent : parent,
                ConstNode(node.line, node.column, node.scopeId, "length")
              );
            } else if (node instanceof AccessNode) {
              nodeParent = replaceLengthIdent(node.parent);
              if (nodeParent !== node.parent) {
                return AccessNode(
                  node.line,
                  node.column,
                  node.scopeId,
                  nodeParent,
                  node.child
                ).walk(replaceLengthIdent);
              } else {
                return node.walk(replaceLengthIdent);
              }
            } else {
              return node.walk(replaceLengthIdent);
            }
          }
          child = replaceLengthIdent(this.child.reduce(o).doWrap(o));
          if (cachedParent != null) {
            return TmpWrapperNode(
              this.line,
              this.column,
              this.scopeId,
              AccessNode(
                this.line,
                this.column,
                this.scopeId,
                AssignNode(
                  this.line,
                  this.column,
                  this.scopeId,
                  cachedParent,
                  "=",
                  parent
                ),
                child
              ),
              [cachedParent.id]
            );
          }
          if (parent.isConst() && child.isConst()) {
            pValue = parent.constValue();
            cValue = child.constValue();
            if (cValue in Object(pValue)) {
              value = pValue[cValue];
              if (value === null || value instanceof RegExp || (_ref = typeof value) === "string" || _ref === "number" || _ref === "boolean" || _ref === "undefined") {
                return ConstNode(this.line, this.column, this.scopeId, value);
              }
            }
          }
          if (child instanceof CallNode && child.func instanceof IdentNode && child.func.name === "__range") {
            start = (_ref = child.args)[0];
            end = _ref[1];
            step = _ref[2];
            inclusive = _ref[3];
            hasStep = !step.isConst() || step.constValue() !== 1;
            if (!hasStep) {
              if (inclusive.isConst()) {
                if (inclusive.constValue()) {
                  end = end.isConst() && typeof end.constValue() === "number" ? ConstNode(end.line, end.column, end.scopeId, __num(end.constValue()) + 1 || 1/0)
                    : BinaryNode(
                      end.line,
                      end.column,
                      end.scopeId,
                      BinaryNode(
                        end.line,
                        end.column,
                        end.scopeId,
                        end,
                        "+",
                        ConstNode(inclusive.line, inclusive.column, inclusive.scopeId, 1)
                      ),
                      "||",
                      ConstNode(end.line, end.column, end.scopeId, 1/0)
                    );
                }
              } else {
                end = IfNode(
                  end.line,
                  end.column,
                  end.scopeId,
                  inclusive,
                  BinaryNode(
                    end.line,
                    end.column,
                    end.scopeId,
                    BinaryNode(
                      end.line,
                      end.column,
                      end.scopeId,
                      end,
                      "+",
                      ConstNode(inclusive.line, inclusive.column, inclusive.scopeId, 1)
                    ),
                    "||",
                    ConstNode(end.line, end.column, end.scopeId, 1/0)
                  ),
                  end
                );
              }
            }
            args = [parent];
            hasEnd = !end.isConst() || (_ref = end.constValue()) !== void 0 && _ref !== 1/0;
            if (!start.isConst() || start.constValue() !== 0 || hasEnd || hasStep) {
              args.push(start);
            }
            if (hasEnd || hasStep) {
              args.push(end);
            }
            if (hasStep) {
              args.push(step);
              if (!inclusive.isConst() || inclusive.constValue()) {
                args.push(inclusive);
              }
            }
            return CallNode(
              this.line,
              this.column,
              this.scopeId,
              IdentNode(this.line, this.column, this.scopeId, hasStep ? "__sliceStep" : "__slice"),
              args,
              false,
              !hasStep
            ).reduce(o);
          } else if (parent !== this.parent || child !== this.child) {
            return AccessNode(
              this.line,
              this.column,
              this.scopeId,
              parent,
              child
            );
          } else {
            return this;
          }
        };
        _AccessNode_prototype._isNoop = function (o) {
          var _ref;
          if ((_ref = this.__isNoop) == null) {
            return this.__isNoop = this.parent.isNoop(o) && this.child.isNoop(o);
          } else {
            return _ref;
          }
        };
        _AccessNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "AccessNode",
            this.line,
            this.column,
            this.parent,
            this.child
          );
        };
        _AccessNode_prototype.walk = function (f) {
          var child, parent;
          parent = f(this.parent);
          child = f(this.child);
          if (parent !== this.parent || child !== this.child) {
            return AccessNode(
              this.line,
              this.column,
              this.scopeId,
              parent,
              child
            );
          } else {
            return this;
          }
        };
        _AccessNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.parent, function (_e, parent) {
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.child, function (_e2, child) {
              if (_e2 != null) {
                return callback(_e2);
              }
              return callback(null, parent !== _this.parent || child !== _this.child
                ? AccessNode(
                  _this.line,
                  _this.column,
                  _this.scopeId,
                  parent,
                  child
                )
                : _this);
            });
          });
        };
        return AccessNode;
      }(Node));
      Node.AccessMulti = AccessMultiNode = (function (Node) {
        var _AccessMultiNode_prototype, _Node_prototype;
        function AccessMultiNode(line, column, scopeId, parent, elements) {
          var _i, _this;
          _this = this instanceof AccessMultiNode ? this : __create(_AccessMultiNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(parent instanceof Node)) {
            throw TypeError("Expected parent to be a " + __name(Node) + ", got " + __typeof(parent));
          }
          if (!__isArray(elements)) {
            throw TypeError("Expected elements to be an Array, got " + __typeof(elements));
          } else {
            for (_i = elements.length; _i--; ) {
              if (!(elements[_i] instanceof Node)) {
                throw TypeError("Expected " + ("elements[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(elements[_i]));
              }
            }
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.parent = parent;
          _this.elements = elements;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _AccessMultiNode_prototype = AccessMultiNode.prototype = __create(_Node_prototype);
        _AccessMultiNode_prototype.constructor = AccessMultiNode;
        AccessMultiNode.displayName = "AccessMultiNode";
        if (typeof Node.extended === "function") {
          Node.extended(AccessMultiNode);
        }
        AccessMultiNode.cappedName = "AccessMulti";
        AccessMultiNode.argNames = ["parent", "elements"];
        State.addNodeFactory("accessMulti", AccessMultiNode);
        _AccessMultiNode_prototype.type = function () {
          return Type.array;
        };
        _AccessMultiNode_prototype._reduce = function (o) {
          var _this, parent, result, setParent, tmp, tmpIds;
          _this = this;
          parent = this.parent.reduce(o);
          setParent = parent;
          tmpIds = [];
          if (parent.cacheable) {
            tmp = TmpNode(
              this.line,
              this.column,
              this.scopeId,
              getTmpId(),
              "ref",
              parent.type(o)
            );
            tmpIds.push(tmp.id);
            setParent = AssignNode(
              this.line,
              this.column,
              this.scopeId,
              tmp,
              "=",
              parent.doWrap(o)
            );
            parent = tmp;
          }
          result = ArrayNode(this.line, this.column, this.scopeId, (function () {
            var _arr, _arr2, _len, element, j;
            for (_arr = [], _arr2 = __toArray(_this.elements), j = 0, _len = _arr2.length; j < _len; ++j) {
              element = _arr2[j];
              _arr.push(AccessNode(
                _this.line,
                _this.column,
                _this.scopeId,
                j === 0 ? setParent : parent,
                element.reduce(o)
              ));
            }
            return _arr;
          }()));
          if (tmpIds.length) {
            return TmpWrapperNode(
              this.line,
              this.column,
              this.scopeId,
              result,
              tmpIds
            );
          } else {
            return result;
          }
        };
        _AccessMultiNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "AccessMultiNode",
            this.line,
            this.column,
            this.parent,
            this.elements
          );
        };
        _AccessMultiNode_prototype.walk = function (f) {
          var elements, parent;
          parent = f(this.parent);
          elements = map(this.elements, f);
          if (parent !== this.parent || elements !== this.elements) {
            return AccessMultiNode(
              this.line,
              this.column,
              this.scopeId,
              parent,
              elements
            );
          } else {
            return this;
          }
        };
        _AccessMultiNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.parent, function (_e, parent) {
            if (_e != null) {
              return callback(_e);
            }
            return mapAsync(_this.elements, f, function (_e2, elements) {
              if (_e2 != null) {
                return callback(_e2);
              }
              return callback(null, parent !== _this.parent || elements !== _this.elements
                ? AccessMultiNode(
                  _this.line,
                  _this.column,
                  _this.scopeId,
                  parent,
                  elements
                )
                : _this);
            });
          });
        };
        return AccessMultiNode;
      }(Node));
      Node.Args = ArgsNode = (function (Node) {
        var _ArgsNode_prototype, _Node_prototype;
        function ArgsNode(line, column, scopeId) {
          var _this;
          _this = this instanceof ArgsNode ? this : __create(_ArgsNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ArgsNode_prototype = ArgsNode.prototype = __create(_Node_prototype);
        _ArgsNode_prototype.constructor = ArgsNode;
        ArgsNode.displayName = "ArgsNode";
        if (typeof Node.extended === "function") {
          Node.extended(ArgsNode);
        }
        ArgsNode.cappedName = "Args";
        ArgsNode.argNames = [];
        State.addNodeFactory("args", ArgsNode);
        _ArgsNode_prototype.type = function () {
          return Type.args;
        };
        _ArgsNode_prototype.cacheable = false;
        _ArgsNode_prototype._isNoop = function () {
          return true;
        };
        _ArgsNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "ArgsNode", this.line, this.column);
        };
        return ArgsNode;
      }(Node));
      Node.Array = ArrayNode = (function (Node) {
        var _ArrayNode_prototype, _Node_prototype;
        function ArrayNode(line, column, scopeId, elements) {
          var _i, _this;
          _this = this instanceof ArrayNode ? this : __create(_ArrayNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!__isArray(elements)) {
            throw TypeError("Expected elements to be an Array, got " + __typeof(elements));
          } else {
            for (_i = elements.length; _i--; ) {
              if (!(elements[_i] instanceof Node)) {
                throw TypeError("Expected " + ("elements[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(elements[_i]));
              }
            }
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.elements = elements;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ArrayNode_prototype = ArrayNode.prototype = __create(_Node_prototype);
        _ArrayNode_prototype.constructor = ArrayNode;
        ArrayNode.displayName = "ArrayNode";
        if (typeof Node.extended === "function") {
          Node.extended(ArrayNode);
        }
        ArrayNode.cappedName = "Array";
        ArrayNode.argNames = ["elements"];
        State.addNodeFactory("array", ArrayNode);
        _ArrayNode_prototype.type = function () {
          return Type.array;
        };
        _ArrayNode_prototype._reduce = function (o) {
          var elements;
          elements = map(this.elements, function (x) {
            return x.reduce(o).doWrap(o);
          });
          if (elements !== this.elements) {
            return ArrayNode(this.line, this.column, this.scopeId, elements);
          } else {
            return this;
          }
        };
        _ArrayNode_prototype._isNoop = function (o) {
          var _ref, _this;
          _this = this;
          if ((_ref = this.__isNoop) == null) {
            return this.__isNoop = (function () {
              var _arr, _i, _len, element;
              for (_arr = __toArray(_this.elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                element = _arr[_i];
                if (!element.isNoop(o)) {
                  return false;
                }
              }
              return true;
            }());
          } else {
            return _ref;
          }
        };
        _ArrayNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "ArrayNode",
            this.line,
            this.column,
            this.elements
          );
        };
        _ArrayNode_prototype.walk = function (f) {
          var elements;
          elements = map(this.elements, f);
          if (elements !== this.elements) {
            return ArrayNode(this.line, this.column, this.scopeId, elements);
          } else {
            return this;
          }
        };
        _ArrayNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return mapAsync(this.elements, f, function (_e, elements) {
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, elements !== _this.elements ? ArrayNode(_this.line, _this.column, _this.scopeId, elements) : _this);
          });
        };
        return ArrayNode;
      }(Node));
      State.prototype.arrayParam = State.prototype.array;
      Node.Assign = AssignNode = (function (Node) {
        var _AssignNode_prototype, _Node_prototype;
        function AssignNode(line, column, scopeId, left, op, right) {
          var _this;
          _this = this instanceof AssignNode ? this : __create(_AssignNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(left instanceof Node)) {
            throw TypeError("Expected left to be a " + __name(Node) + ", got " + __typeof(left));
          }
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          if (!(right instanceof Node)) {
            throw TypeError("Expected right to be a " + __name(Node) + ", got " + __typeof(right));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.left = left;
          _this.op = op;
          _this.right = right;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _AssignNode_prototype = AssignNode.prototype = __create(_Node_prototype);
        _AssignNode_prototype.constructor = AssignNode;
        AssignNode.displayName = "AssignNode";
        if (typeof Node.extended === "function") {
          Node.extended(AssignNode);
        }
        AssignNode.cappedName = "Assign";
        AssignNode.argNames = ["left", "op", "right"];
        State.addNodeFactory("assign", AssignNode);
        _AssignNode_prototype.type = (function () {
          var ops;
          ops = {
            "=": function (left, right) {
              return right;
            },
            "+=": function (left, right) {
              if (left.isSubsetOf(Type.numeric) && right.isSubsetOf(Type.numeric)) {
                return Type.number;
              } else if (left.overlaps(Type.numeric) && right.overlaps(Type.numeric)) {
                return Type.stringOrNumber;
              } else {
                return Type.string;
              }
            },
            "-=": Type.number,
            "*=": Type.number,
            "/=": Type.number,
            "%=": Type.number,
            "<<=": Type.number,
            ">>=": Type.number,
            ">>>=": Type.number,
            "&=": Type.number,
            "^=": Type.number,
            "|=": Type.number
          };
          return function (o) {
            var _ref, _this;
            _this = this;
            if ((_ref = this._type) == null) {
              return this._type = (function () {
                var _ref, type;
                if (__owns.call(ops, _ref = _this.op)) {
                  type = ops[_ref];
                }
                if (!type) {
                  return Type.any;
                } else if (typeof type === "function") {
                  return type(_this.left.type(o), _this.right.type(o));
                } else {
                  return type;
                }
              }());
            } else {
              return _ref;
            }
          };
        }());
        _AssignNode_prototype._reduce = function (o) {
          var left, right;
          left = this.left.reduce(o);
          right = this.right.reduce(o).doWrap(o);
          if (left !== this.left || right !== this.right) {
            return AssignNode(
              this.line,
              this.column,
              this.scopeId,
              left,
              this.op,
              right
            );
          } else {
            return this;
          }
        };
        _AssignNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "AssignNode",
            this.line,
            this.column,
            this.left,
            this.op,
            this.right
          );
        };
        _AssignNode_prototype.walk = function (f) {
          var left, right;
          left = f(this.left);
          right = f(this.right);
          if (left !== this.left || right !== this.right) {
            return AssignNode(
              this.line,
              this.column,
              this.scopeId,
              left,
              this.op,
              right
            );
          } else {
            return this;
          }
        };
        _AssignNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.left, function (_e, left) {
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.right, function (_e2, right) {
              if (_e2 != null) {
                return callback(_e2);
              }
              return callback(null, left !== _this.left || right !== _this.right
                ? AssignNode(
                  _this.line,
                  _this.column,
                  _this.scopeId,
                  left,
                  _this.op,
                  right
                )
                : _this);
            });
          });
        };
        return AssignNode;
      }(Node));
      Node.Binary = BinaryNode = (function (Node) {
        var _BinaryNode_prototype, _Node_prototype;
        function BinaryNode(line, column, scopeId, left, op, right) {
          var _this;
          _this = this instanceof BinaryNode ? this : __create(_BinaryNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(left instanceof Node)) {
            throw TypeError("Expected left to be a " + __name(Node) + ", got " + __typeof(left));
          }
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          if (!(right instanceof Node)) {
            throw TypeError("Expected right to be a " + __name(Node) + ", got " + __typeof(right));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.left = left;
          _this.op = op;
          _this.right = right;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _BinaryNode_prototype = BinaryNode.prototype = __create(_Node_prototype);
        _BinaryNode_prototype.constructor = BinaryNode;
        BinaryNode.displayName = "BinaryNode";
        if (typeof Node.extended === "function") {
          Node.extended(BinaryNode);
        }
        BinaryNode.cappedName = "Binary";
        BinaryNode.argNames = ["left", "op", "right"];
        State.addNodeFactory("binary", BinaryNode);
        _BinaryNode_prototype.type = (function () {
          var ops;
          ops = {
            "*": Type.number,
            "/": Type.number,
            "%": Type.number,
            "+": function (left, right) {
              if (left.isSubsetOf(Type.numeric) && right.isSubsetOf(Type.numeric)) {
                return Type.number;
              } else if (left.overlaps(Type.numeric) && right.overlaps(Type.numeric)) {
                return Type.stringOrNumber;
              } else {
                return Type.string;
              }
            },
            "-": Type.number,
            "<<": Type.number,
            ">>": Type.number,
            ">>>": Type.number,
            "<": Type.boolean,
            "<=": Type.boolean,
            ">": Type.boolean,
            ">=": Type.boolean,
            "in": Type.boolean,
            "instanceof": Type.boolean,
            "==": Type.boolean,
            "!=": Type.boolean,
            "===": Type.boolean,
            "!==": Type.boolean,
            "&": Type.number,
            "^": Type.number,
            "|": Type.number,
            "&&": function (left, right) {
              return left.intersect(Type.potentiallyFalsy).union(right);
            },
            "||": function (left, right) {
              return left.intersect(Type.potentiallyTruthy).union(right);
            }
          };
          return function (o) {
            var _ref, _this;
            _this = this;
            if ((_ref = this._type) == null) {
              return this._type = (function () {
                var _ref, type;
                if (__owns.call(ops, _ref = _this.op)) {
                  type = ops[_ref];
                }
                if (!type) {
                  return Type.any;
                } else if (typeof type === "function") {
                  return type(_this.left.type(o), _this.right.type(o));
                } else {
                  return type;
                }
              }());
            } else {
              return _ref;
            }
          };
        }());
        _BinaryNode_prototype._reduce = (function () {
          var constOps, leftConstOps, nonConstOps, rightConstOps;
          constOps = {
            "*": __curry(2, function (x, y) {
              return x * y;
            }),
            "/": __curry(2, function (x, y) {
              return x / y;
            }),
            "%": __curry(2, function (x, y) {
              return x % y;
            }),
            "+": (function () {
              function isJSNumeric(x) {
                var _ref;
                return x === null || (_ref = typeof x) === "number" || _ref === "boolean" || _ref === "undefined";
              }
              return function (left, right) {
                if (isJSNumeric(left) && isJSNumeric(right)) {
                  return left - -right;
                } else {
                  return "" + left + right;
                }
              };
            }()),
            "-": __curry(2, function (x, y) {
              return x - y;
            }),
            "<<": __curry(2, function (x, y) {
              return x << y;
            }),
            ">>": __curry(2, function (x, y) {
              return x >> y;
            }),
            ">>>": __curry(2, function (x, y) {
              return x >>> y;
            }),
            "<": __curry(2, function (x, y) {
              return x < y;
            }),
            "<=": __curry(2, function (x, y) {
              return x <= y;
            }),
            ">": __curry(2, function (x, y) {
              return x > y;
            }),
            ">=": __curry(2, function (x, y) {
              return x >= y;
            }),
            "==": __curry(2, function (x, y) {
              return x == y;
            }),
            "!=": __curry(2, function (x, y) {
              return x != y;
            }),
            "===": __curry(2, function (x, y) {
              return x === y;
            }),
            "!==": __curry(2, function (x, y) {
              return x !== y;
            }),
            "&": __curry(2, function (x, y) {
              return x & y;
            }),
            "^": __curry(2, function (x, y) {
              return x ^ y;
            }),
            "|": __curry(2, function (x, y) {
              return x | y;
            }),
            "&&": __curry(2, function (x, y) {
              return x && y;
            }),
            "||": __curry(2, function (x, y) {
              return x || y;
            })
          };
          function leftConstNan(x, y) {
            var _ref;
            if ((_ref = x.constValue()) !== _ref) {
              return BlockNode(this.line, this.column, this.scopeId, [y, x]);
            }
          }
          leftConstOps = {
            "*": function (x, y) {
              var _ref;
              if (x.constValue() === 1) {
                return UnaryNode(
                  this.line,
                  this.column,
                  this.scopeId,
                  "+",
                  y
                );
              } else if (x.constValue() === -1) {
                return UnaryNode(
                  this.line,
                  this.column,
                  this.scopeId,
                  "-",
                  y
                );
              } else if ((_ref = x.constValue()) !== _ref) {
                return BlockNode(this.line, this.column, this.scopeId, [y, x]);
              }
            },
            "/": leftConstNan,
            "%": leftConstNan,
            "+": function (x, y, o) {
              var _ref;
              if (x.constValue() === 0 && y.type(o).isSubsetOf(Type.number)) {
                return UnaryNode(
                  this.line,
                  this.column,
                  this.scopeId,
                  "+",
                  y
                );
              } else if (x.constValue() === "" && y.type(o).isSubsetOf(Type.string)) {
                return y;
              } else if (typeof x.constValue() === "string" && y instanceof BinaryNode && y.op === "+" && y.left.isConst() && typeof y.left.constValue() === "string") {
                return BinaryNode(
                  this.line,
                  this.column,
                  this.scopeId,
                  ConstNode(x.line, x.column, this.scopeId, __strnum(x.constValue()) + __strnum(y.left.constValue())),
                  "+",
                  y.right
                );
              } else if ((_ref = x.constValue()) !== _ref) {
                return BlockNode(this.line, this.column, this.scopeId, [y, x]);
              }
            },
            "-": function (x, y) {
              var _ref;
              if (x.constValue() === 0) {
                return UnaryNode(
                  this.line,
                  this.column,
                  this.scopeId,
                  "-",
                  y
                );
              } else if ((_ref = x.constValue()) !== _ref) {
                return BlockNode(this.line, this.column, this.scopeId, [y, x]);
              }
            },
            "<<": leftConstNan,
            ">>": leftConstNan,
            ">>>": leftConstNan,
            "&": leftConstNan,
            "|": leftConstNan,
            "^": leftConstNan,
            "&&": function (x, y) {
              if (x.constValue()) {
                return y;
              } else {
                return x;
              }
            },
            "||": function (x, y) {
              if (x.constValue()) {
                return x;
              } else {
                return y;
              }
            }
          };
          function rightConstNan(x, y) {
            var _ref;
            if ((_ref = y.constValue()) !== _ref) {
              return BlockNode(this.line, this.column, this.scopeId, [x, y]);
            }
          }
          rightConstOps = {
            "*": function (x, y) {
              var _ref;
              if (y.constValue() === 1) {
                return UnaryNode(
                  this.line,
                  this.column,
                  this.scopeId,
                  "+",
                  x
                );
              } else if (y.constValue() === -1) {
                return UnaryNode(
                  this.line,
                  this.column,
                  this.scopeId,
                  "-",
                  x
                );
              } else if ((_ref = y.constValue()) !== _ref) {
                return BlockNode(this.line, this.column, this.scopeId, [x, y]);
              }
            },
            "/": function (x, y) {
              var _ref;
              if (y.constValue() === 1) {
                return UnaryNode(
                  this.line,
                  this.column,
                  this.scopeId,
                  "+",
                  x
                );
              } else if (y.constValue() === -1) {
                return UnaryNode(
                  this.line,
                  this.column,
                  this.scopeId,
                  "-",
                  x
                );
              } else if ((_ref = y.constValue()) !== _ref) {
                return BlockNode(this.line, this.column, this.scopeId, [x, y]);
              }
            },
            "%": rightConstNan,
            "+": function (x, y, o) {
              var _ref;
              if (y.constValue() === 0 && x.type(o).isSubsetOf(Type.number)) {
                return UnaryNode(
                  this.line,
                  this.column,
                  this.scopeId,
                  "+",
                  x
                );
              } else if (typeof y.constValue() === "number" && __num(y.constValue()) < 0 && x.type(o).isSubsetOf(Type.number)) {
                return BinaryNode(
                  this.line,
                  this.column,
                  this.scopeId,
                  x,
                  "-",
                  ConstNode(y.line, y.column, this.scopeId, -__num(y.constValue()))
                );
              } else if (y.constValue() === "" && x.type(o).isSubsetOf(Type.string)) {
                return x;
              } else if (typeof y.constValue() === "string" && x instanceof BinaryNode && x.op === "+" && x.right.isConst() && typeof x.right.constValue() === "string") {
                return BinaryNode(
                  this.line,
                  this.column,
                  this.scopeId,
                  x.left,
                  "+",
                  ConstNode(x.right.line, x.right.column, this.scopeId, __strnum(x.right.constValue()) + __strnum(y.constValue()))
                );
              } else if ((_ref = y.constValue()) !== _ref) {
                return BlockNode(this.line, this.column, this.scopeId, [x, y]);
              }
            },
            "-": function (x, y, o) {
              var _ref;
              if (y.constValue() === 0) {
                return UnaryNode(
                  this.line,
                  this.column,
                  this.scopeId,
                  "+",
                  x
                );
              } else if (typeof y.constValue() === "number" && __num(y.constValue()) < 0 && x.type(o).isSubsetOf(Type.number)) {
                return BinaryNode(
                  this.line,
                  this.column,
                  this.scopeId,
                  x,
                  "+",
                  ConstNode(y.line, y.column, this.scopeId, -__num(y.constValue()))
                );
              } else if ((_ref = y.constValue()) !== _ref) {
                return BlockNode(this.line, this.column, this.scopeId, [x, y]);
              }
            },
            "<<": rightConstNan,
            ">>": rightConstNan,
            ">>>": rightConstNan,
            "&": rightConstNan,
            "|": rightConstNan,
            "^": rightConstNan
          };
          nonConstOps = {
            "&&": function (x, y, o) {
              var truthy, xRightType, xType;
              xType = x.type(o);
              if (xType.isSubsetOf(Type.alwaysTruthy)) {
                return BlockNode(this.line, this.column, this.scopeId, [x, y]);
              } else if (xType.isSubsetOf(Type.alwaysFalsy)) {
                return x;
              } else if (x instanceof BinaryNode && x.op === "&&") {
                if (x.right.isConst()) {
                  truthy = !!x.right.constValue();
                } else {
                  xRightType = x.right.type(o);
                  if (xRightType.isSubsetOf(Type.alwaysTruthy)) {
                    truthy = true;
                  } else if (xRightType.isSubsetOf(Type.alwaysFalsy)) {
                    truthy = false;
                  } else {
                    truthy = null;
                  }
                }
                if (truthy === true) {
                  return BinaryNode(
                    this.line,
                    this.column,
                    this.scopeId,
                    x.left,
                    "&&",
                    BlockNode(x.right.line, x.right.column, this.scopeId, [x.right, y])
                  );
                } else if (truthy === false) {
                  return x;
                }
              }
            },
            "||": function (x, y, o) {
              var test, truthy, whenTrue, xRightType, xType;
              xType = x.type(o);
              if (xType.isSubsetOf(Type.alwaysTruthy)) {
                return x;
              } else if (xType.isSubsetOf(Type.alwaysFalsy)) {
                return BlockNode(this.line, this.column, this.scopeId, [x, y]);
              } else if (x instanceof BinaryNode && x.op === "||") {
                if (x.right.isConst()) {
                  truthy = !!x.right.constValue();
                } else {
                  xRightType = x.right.type(o);
                  if (xRightType.isSubsetOf(Type.alwaysTruthy)) {
                    truthy = true;
                  } else if (xRightType.isSubsetOf(Type.alwaysFalsy)) {
                    truthy = false;
                  } else {
                    truthy = null;
                  }
                }
                if (truthy === true) {
                  return x;
                } else if (truthy === false) {
                  return BinaryNode(
                    this.line,
                    this.column,
                    this.scopeId,
                    x.left,
                    "||",
                    BlockNode(x.right.line, x.right.column, this.scopeId, [x.right, y])
                  );
                }
              } else if (x instanceof IfNode && x.whenFalse.isConst() && !x.whenFalse.constValue()) {
                test = x.test;
                whenTrue = x.whenTrue;
                while (whenTrue instanceof IfNode && whenTrue.whenFalse.isConst() && !whenTrue.whenFalse.constValue()) {
                  test = BinaryNode(
                    x.line,
                    x.column,
                    x.scopeId,
                    test,
                    "&&",
                    whenTrue.test
                  );
                  whenTrue = whenTrue.whenTrue;
                }
                return BinaryNode(
                  this.line,
                  this.column,
                  this.scopeId,
                  BinaryNode(
                    x.line,
                    x.column,
                    x.scopeId,
                    test,
                    "&&",
                    whenTrue
                  ),
                  "||",
                  y
                );
              }
            }
          };
          return function (o) {
            var _ref, left, op, right;
            left = this.left.reduce(o).doWrap(o);
            right = this.right.reduce(o).doWrap(o);
            op = this.op;
            if (left.isConst()) {
              if (right.isConst() && __owns.call(constOps, op)) {
                return ConstNode(this.line, this.column, this.scopeId, constOps[op](left.constValue(), right.constValue()));
              }
              if (__owns.call(leftConstOps, op) && (_ref = leftConstOps[op].call(this, left, right, o)) != null) {
                return _ref;
              }
            }
            if (right.isConst() && __owns.call(rightConstOps, op) && (_ref = rightConstOps[op].call(this, left, right, o)) != null) {
              return _ref;
            }
            if (__owns.call(nonConstOps, op) && (_ref = nonConstOps[op].call(this, left, right, o)) != null) {
              return _ref;
            }
            if (left !== this.left || right !== this.right) {
              return BinaryNode(
                this.line,
                this.column,
                this.scopeId,
                left,
                op,
                right
              );
            } else {
              return this;
            }
          };
        }());
        _BinaryNode_prototype._isNoop = function (o) {
          var _ref;
          if ((_ref = this.__isNoop) == null) {
            return this.__isNoop = this.left.isNoop(o) && this.right.isNoop(o);
          } else {
            return _ref;
          }
        };
        _BinaryNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "BinaryNode",
            this.line,
            this.column,
            this.left,
            this.op,
            this.right
          );
        };
        _BinaryNode_prototype.walk = function (f) {
          var left, right;
          left = f(this.left);
          right = f(this.right);
          if (left !== this.left || right !== this.right) {
            return BinaryNode(
              this.line,
              this.column,
              this.scopeId,
              left,
              this.op,
              right
            );
          } else {
            return this;
          }
        };
        _BinaryNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.left, function (_e, left) {
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.right, function (_e2, right) {
              if (_e2 != null) {
                return callback(_e2);
              }
              return callback(null, left !== _this.left || right !== _this.right
                ? BinaryNode(
                  _this.line,
                  _this.column,
                  _this.scopeId,
                  left,
                  _this.op,
                  right
                )
                : _this);
            });
          });
        };
        return BinaryNode;
      }(Node));
      Node.Block = BlockNode = (function (Node) {
        var _BlockNode_prototype, _Node_prototype;
        function BlockNode(line, column, scopeId, nodes, label) {
          var _i, _this;
          _this = this instanceof BlockNode ? this : __create(_BlockNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!__isArray(nodes)) {
            throw TypeError("Expected nodes to be an Array, got " + __typeof(nodes));
          } else {
            for (_i = nodes.length; _i--; ) {
              if (!(nodes[_i] instanceof Node)) {
                throw TypeError("Expected " + ("nodes[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(nodes[_i]));
              }
            }
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.nodes = nodes;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _BlockNode_prototype = BlockNode.prototype = __create(_Node_prototype);
        _BlockNode_prototype.constructor = BlockNode;
        BlockNode.displayName = "BlockNode";
        if (typeof Node.extended === "function") {
          Node.extended(BlockNode);
        }
        BlockNode.cappedName = "Block";
        BlockNode.argNames = ["nodes", "label"];
        State.addNodeFactory("block", BlockNode);
        _BlockNode_prototype.type = function (o) {
          var nodes;
          nodes = this.nodes;
          if (nodes.length === 0) {
            return Type["undefined"];
          } else {
            return nodes[__num(nodes.length) - 1].type(o);
          }
        };
        _BlockNode_prototype.withLabel = function (label, o) {
          var _ref, _this;
          _this = this;
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          if (this.label == null) {
            if (this.nodes.length === 1) {
              return this.nodes[0].withLabel(label, o);
            } else if (__num(this.nodes.length) > 1 && (_ref = this.nodes)[__num(_ref.length) - 1] instanceof ForInNode && (function () {
              var _arr, _end, _i, _len, node;
              for (_arr = __toArray(_this.nodes), _i = 0, _len = _arr.length, _end = -1, _end += _len, _end > _len && (_end = _len); _i < _end; ++_i) {
                node = _arr[_i];
                if (!(node instanceof AssignNode) && !(node instanceof VarNode)) {
                  return false;
                }
              }
              return true;
            }())) {
              return BlockNode(this.line, this.column, this.scopeId, __slice.call(this.nodes, 0, -1).concat([(_ref = this.nodes)[__num(_ref.length) - 1].withLabel(label, o)]));
            }
          }
          return BlockNode(
            this.line,
            this.column,
            this.scopeId,
            this.nodes,
            label
          );
        };
        _BlockNode_prototype._reduce = function (o) {
          var _arr, body, changed, i, label, len, node, reduced;
          changed = false;
          body = [];
          for (_arr = __toArray(this.nodes), i = 0, len = _arr.length; i < len; ++i) {
            node = _arr[i];
            reduced = node.reduce(o);
            if (reduced instanceof BlockNode && reduced.label == null) {
              body.push.apply(body, __toArray(reduced.nodes));
              changed = true;
            } else if (reduced instanceof NothingNode) {
              changed = true;
            } else if (reduced instanceof BreakNode || reduced instanceof ContinueNode || reduced instanceof ThrowNode || reduced instanceof ReturnNode) {
              body.push(reduced);
              if (reduced !== node || i < len - 1) {
                changed = true;
              }
              break;
            } else {
              body.push(reduced);
              if (reduced !== node) {
                changed = true;
              }
            }
          }
          if (this.label != null) {
            label = this.label.reduce(o);
          } else {
            label = this.label;
          }
          if (body.length === 0) {
            return NothingNode(this.line, this.column, this.scopeId);
          } else if (label == null && body.length === 1) {
            return body[0];
          } else if (changed || label !== this.label) {
            return BlockNode(
              this.line,
              this.column,
              this.scopeId,
              body,
              label
            );
          } else {
            return this;
          }
        };
        _BlockNode_prototype.isStatement = function () {
          var _this;
          _this = this;
          return (function () {
            var _arr, _i, node;
            for (_arr = __toArray(_this.nodes), _i = _arr.length; _i--; ) {
              node = _arr[_i];
              if (node.isStatement()) {
                return true;
              }
            }
            return false;
          }());
        };
        _BlockNode_prototype._isNoop = function (o) {
          var _ref, _this;
          _this = this;
          if ((_ref = this.__isNoop) == null) {
            return this.__isNoop = (function () {
              var _arr, _i, node;
              for (_arr = __toArray(_this.nodes), _i = _arr.length; _i--; ) {
                node = _arr[_i];
                if (!node.isNoop(o)) {
                  return false;
                }
              }
              return true;
            }());
          } else {
            return _ref;
          }
        };
        _BlockNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "BlockNode",
            this.line,
            this.column,
            this.nodes,
            this.label
          );
        };
        _BlockNode_prototype.walk = function (f) {
          var label, nodes;
          nodes = map(this.nodes, f);
          if (this.label instanceof Node) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (nodes !== this.nodes || label !== this.label) {
            return BlockNode(
              this.line,
              this.column,
              this.scopeId,
              nodes,
              label
            );
          } else {
            return this;
          }
        };
        _BlockNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return mapAsync(this.nodes, f, function (_e, nodes) {
            var _f;
            if (_e != null) {
              return callback(_e);
            }
            if (_this.label instanceof Node) {
              _f = function (next) {
                return f(_this.label, function (_e2, label) {
                  if (_e2 != null) {
                    return callback(_e2);
                  }
                  return next(label);
                });
              };
            } else {
              _f = function (next) {
                return next(_this.label);
              };
            }
            return _f(function (label) {
              return callback(null, nodes !== _this.nodes || label !== _this.label
                ? BlockNode(
                  _this.line,
                  _this.column,
                  _this.scopeId,
                  nodes,
                  label
                )
                : _this);
            });
          });
        };
        return BlockNode;
      }(Node));
      Node.Break = BreakNode = (function (Node) {
        var _BreakNode_prototype, _Node_prototype;
        function BreakNode(line, column, scopeId, label) {
          var _this;
          _this = this instanceof BreakNode ? this : __create(_BreakNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _BreakNode_prototype = BreakNode.prototype = __create(_Node_prototype);
        _BreakNode_prototype.constructor = BreakNode;
        BreakNode.displayName = "BreakNode";
        if (typeof Node.extended === "function") {
          Node.extended(BreakNode);
        }
        BreakNode.cappedName = "Break";
        BreakNode.argNames = ["label"];
        State.addNodeFactory("break", BreakNode);
        _BreakNode_prototype.type = function () {
          return Type["undefined"];
        };
        _BreakNode_prototype.isStatement = function () {
          return true;
        };
        _BreakNode_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return BreakNode(this.line, this.column, this.scopeId, label);
        };
        _BreakNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "BreakNode",
            this.line,
            this.column,
            this.label
          );
        };
        _BreakNode_prototype.walk = function (f) {
          var label;
          if (this.label instanceof Node) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (label !== this.label) {
            return BreakNode(this.line, this.column, this.scopeId, label);
          } else {
            return this;
          }
        };
        _BreakNode_prototype.walkAsync = function (f, callback) {
          var _f, _this;
          _this = this;
          if (this.label instanceof Node) {
            _f = function (next) {
              return f(_this.label, function (_e, label) {
                if (_e != null) {
                  return callback(_e);
                }
                return next(label);
              });
            };
          } else {
            _f = function (next) {
              return next(_this.label);
            };
          }
          return _f(function (label) {
            return callback(null, label !== _this.label ? BreakNode(_this.line, _this.column, _this.scopeId, label) : _this);
          });
        };
        return BreakNode;
      }(Node));
      Node.Call = CallNode = (function (Node) {
        var _CallNode_prototype, _Node_prototype;
        function CallNode(line, column, scopeId, func, args, isNew, isApply) {
          var _i, _this;
          _this = this instanceof CallNode ? this : __create(_CallNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(func instanceof Node)) {
            throw TypeError("Expected func to be a " + __name(Node) + ", got " + __typeof(func));
          }
          if (!__isArray(args)) {
            throw TypeError("Expected args to be an Array, got " + __typeof(args));
          } else {
            for (_i = args.length; _i--; ) {
              if (!(args[_i] instanceof Node)) {
                throw TypeError("Expected " + ("args[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(args[_i]));
              }
            }
          }
          if (isNew == null) {
            isNew = false;
          } else if (typeof isNew !== "boolean") {
            throw TypeError("Expected isNew to be a Boolean, got " + __typeof(isNew));
          }
          if (isApply == null) {
            isApply = false;
          } else if (typeof isApply !== "boolean") {
            throw TypeError("Expected isApply to be a Boolean, got " + __typeof(isApply));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.func = func;
          _this.args = args;
          _this.isNew = isNew;
          _this.isApply = isApply;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _CallNode_prototype = CallNode.prototype = __create(_Node_prototype);
        _CallNode_prototype.constructor = CallNode;
        CallNode.displayName = "CallNode";
        if (typeof Node.extended === "function") {
          Node.extended(CallNode);
        }
        CallNode.cappedName = "Call";
        CallNode.argNames = ["func", "args", "isNew", "isApply"];
        State.addNodeFactory("call", CallNode);
        _CallNode_prototype.type = (function () {
          var PRIMORDIAL_FUNCTIONS, PRIMORDIAL_METHODS, PRIMORDIAL_SUBFUNCTIONS;
          PRIMORDIAL_FUNCTIONS = {
            Object: Type.object,
            String: Type.string,
            Number: Type.number,
            Boolean: Type.boolean,
            Function: Type["function"],
            Array: Type.array,
            Date: Type.string,
            RegExp: Type.regexp,
            Error: Type.error,
            RangeError: Type.error,
            ReferenceError: Type.error,
            SyntaxError: Type.error,
            TypeError: Type.error,
            URIError: Type.error,
            escape: Type.string,
            unescape: Type.string,
            parseInt: Type.number,
            parseFloat: Type.number,
            isNaN: Type.boolean,
            isFinite: Type.boolean,
            decodeURI: Type.string,
            decodeURIComponent: Type.string,
            encodeURI: Type.string,
            encodeURIComponent: Type.string
          };
          PRIMORDIAL_SUBFUNCTIONS = {
            Object: {
              getPrototypeOf: Type.object,
              getOwnPropertyDescriptor: Type.object,
              getOwnPropertyNames: Type.string.array(),
              create: Type.object,
              defineProperty: Type.object,
              defineProperties: Type.object,
              seal: Type.object,
              freeze: Type.object,
              preventExtensions: Type.object,
              isSealed: Type.boolean,
              isFrozen: Type.boolean,
              isExtensible: Type.boolean,
              keys: Type.string.array()
            },
            String: { fromCharCode: Type.string },
            Number: { isFinite: Type.boolean, isNaN: Type.boolean },
            Array: { isArray: Type.boolean },
            Math: {
              abs: Type.number,
              acos: Type.number,
              asin: Type.number,
              atan: Type.number,
              atan2: Type.number,
              ceil: Type.number,
              cos: Type.number,
              exp: Type.number,
              floor: Type.number,
              log: Type.number,
              max: Type.number,
              min: Type.number,
              pow: Type.number,
              random: Type.number,
              round: Type.number,
              sin: Type.number,
              sqrt: Type.number,
              tan: Type.number
            },
            JSON: { stringify: Type.string.union(Type["undefined"]), parse: Type.string.union(Type.number).union(Type.boolean).union(Type["null"]).union(Type.array).union(Type.object) },
            Date: { UTC: Type.number, now: Type.number }
          };
          PRIMORDIAL_METHODS = {
            String: {
              toString: Type.string,
              valueOf: Type.string,
              charAt: Type.string,
              charCodeAt: Type.number,
              concat: Type.string,
              indexOf: Type.number,
              lastIndexOf: Type.number,
              localeCompare: Type.number,
              match: Type.array.union(Type["null"]),
              replace: Type.string,
              search: Type.number,
              slice: Type.string,
              split: Type.string.array(),
              substring: Type.string,
              toLowerCase: Type.string,
              toLocaleLowerCase: Type.string,
              toUpperCase: Type.string,
              toLocaleUpperCase: Type.string,
              trim: Type.string
            },
            Boolean: { toString: Type.string, valueOf: Type.boolean },
            Number: {
              toString: Type.string,
              valueOf: Type.number,
              toLocaleString: Type.string,
              toFixed: Type.string,
              toExponential: Type.string,
              toPrecision: Type.string
            },
            Date: {
              toString: Type.string,
              toDateString: Type.string,
              toTimeString: Type.string,
              toLocaleString: Type.string,
              toLocaleDateString: Type.string,
              toLocaleTimeString: Type.string,
              valueOf: Type.number,
              getTime: Type.number,
              getFullYear: Type.number,
              getUTCFullYear: Type.number,
              getMonth: Type.number,
              getUTCMonth: Type.number,
              getDate: Type.number,
              getUTCDate: Type.number,
              getDay: Type.number,
              getUTCDay: Type.number,
              getHours: Type.number,
              getUTCHours: Type.number,
              getMinutes: Type.number,
              getUTCMinutes: Type.number,
              getSeconds: Type.number,
              getUTCSeconds: Type.number,
              getMilliseconds: Type.number,
              getUTCMilliseconds: Type.number,
              getTimezoneOffset: Type.number,
              setTime: Type.number,
              setMilliseconds: Type.number,
              setUTCMilliseconds: Type.number,
              setSeconds: Type.number,
              setUTCSeconds: Type.number,
              setMinutes: Type.number,
              setUTCMinutes: Type.number,
              setHours: Type.number,
              setUTCHours: Type.number,
              setDate: Type.number,
              setUTCDate: Type.number,
              setMonth: Type.number,
              setUTCMonth: Type.number,
              setFullYear: Type.number,
              setUTCFullYear: Type.number,
              toUTCString: Type.string,
              toISOString: Type.string,
              toJSON: Type.string
            },
            RegExp: { exec: Type.array.union(Type["null"]), test: Type.boolean, toString: Type.string },
            Error: { toString: Type.string }
          };
          return function (o) {
            var _ref, _this;
            _this = this;
            if ((_ref = this._type) == null) {
              return this._type = (function () {
                var _ref, _ref2, _ref3, _ref4, child, func, funcType, name, parent, parentType;
                func = _this.func;
                funcType = func.type(o);
                if (funcType.isSubsetOf(Type["function"])) {
                  return funcType.args[0];
                } else if (func instanceof IdentNode) {
                  name = func.name;
                  if (__owns.call(PRIMORDIAL_FUNCTIONS, name)) {
                    return PRIMORDIAL_FUNCTIONS[name];
                  } else if (o != null ? o.macros.hasHelper(name) : void 0) {
                    funcType = o.macros.helperType(name);
                    if (funcType.isSubsetOf(Type["function"])) {
                      return funcType.args[0];
                    }
                  }
                } else if (func instanceof AccessNode) {
                  parent = func.parent;
                  child = func.child;
                  if (child instanceof ConstNode) {
                    if ((_ref = child.value) === "call" || _ref === "apply") {
                      parentType = parent.type(o);
                      if (parentType.isSubsetOf(Type["function"])) {
                        return parentType.args[0];
                      }
                    } else if (parent instanceof IdentNode && __owns.call(PRIMORDIAL_SUBFUNCTIONS, _ref = parent.name) && __owns.call(_ref2 = PRIMORDIAL_SUBFUNCTIONS[_ref], _ref3 = child.value) && (_ref4 = _ref2[_ref3]) != null) {
                      return _ref4;
                    }
                  }
                }
                return Type.any;
              }());
            } else {
              return _ref;
            }
          };
        }());
        _CallNode_prototype._reduce = (function () {
          var PURE_PRIMORDIAL_FUNCTIONS, PURE_PRIMORDIAL_SUBFUNCTIONS;
          PURE_PRIMORDIAL_FUNCTIONS = {
            escape: true,
            unescape: true,
            parseInt: true,
            parseFloat: true,
            isNaN: true,
            isFinite: true,
            decodeURI: true,
            decodeURIComponent: true,
            encodeURI: true,
            encodeURIComponent: true,
            String: true,
            Boolean: true,
            Number: true,
            RegExp: true
          };
          PURE_PRIMORDIAL_SUBFUNCTIONS = {
            String: { fromCharCode: true },
            Number: { isFinite: true, isNaN: true },
            Math: {
              abs: true,
              acos: true,
              asin: true,
              atan: true,
              atan2: true,
              ceil: true,
              cos: true,
              exp: true,
              floor: true,
              log: true,
              max: true,
              min: true,
              pow: true,
              round: true,
              sin: true,
              sqrt: true,
              tan: true
            },
            JSON: { parse: true, stringify: true }
          };
          return function (o) {
            var _arr, _i, _len, _ref, _ref2, _ref3, allConst, arg, args, child, constArgs, cValue, func, parent, pValue, value;
            func = this.func.reduce(o).doWrap(o);
            args = map(this.args, function (node) {
              return node.reduce(o).doWrap(o);
            });
            if (!this.isNew && !this.isApply) {
              constArgs = [];
              allConst = true;
              for (_arr = __toArray(args), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                arg = _arr[_i];
                if (arg.isConst()) {
                  constArgs.push(arg.constValue());
                } else {
                  allConst = false;
                  break;
                }
              }
              if (allConst) {
                if (func instanceof IdentNode) {
                  if (__owns.call(PURE_PRIMORDIAL_FUNCTIONS, func.name)) {
                    try {
                      value = GLOBAL[func.name].apply(void 0, __toArray(constArgs));
                      return ConstNode(this.line, this.column, this.scopeId, value);
                    } catch (e) {}
                  }
                } else if (func instanceof AccessNode && func.child.isConst()) {
                  parent = func.parent;
                  child = func.child;
                  cValue = child.constValue();
                  if (parent.isConst()) {
                    pValue = parent.constValue();
                    if (typeof pValue[cValue] === "function") {
                      try {
                        value = pValue[cValue].apply(pValue, __toArray(constArgs));
                        return ConstNode(this.line, this.column, this.scopeId, value);
                      } catch (e) {}
                    }
                  } else if (parent instanceof IdentNode && (__owns.call(PURE_PRIMORDIAL_SUBFUNCTIONS, _ref = parent.name) && __owns.call(_ref2 = PURE_PRIMORDIAL_SUBFUNCTIONS[_ref], _ref3 = child.value) ? _ref2[_ref3] : void 0)) {
                    try {
                      value = (_ref = GLOBAL[parent.name])[cValue].apply(_ref, __toArray(constArgs));
                      return ConstNode(this.line, this.column, this.scopeId, value);
                    } catch (e) {}
                  }
                }
              }
            }
            if (func !== this.func || args !== this.args) {
              return CallNode(
                this.line,
                this.column,
                this.scopeId,
                func,
                args,
                this.isNew,
                this.isApply
              );
            } else {
              return this;
            }
          };
        }());
        _CallNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "CallNode",
            this.line,
            this.column,
            this.func,
            this.args,
            this.isNew,
            this.isApply
          );
        };
        _CallNode_prototype.walk = function (f) {
          var args, func;
          func = f(this.func);
          args = map(this.args, f);
          if (func !== this.func || args !== this.args) {
            return CallNode(
              this.line,
              this.column,
              this.scopeId,
              func,
              args,
              this.isNew,
              this.isApply
            );
          } else {
            return this;
          }
        };
        _CallNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.func, function (_e, func) {
            if (_e != null) {
              return callback(_e);
            }
            return mapAsync(_this.args, f, function (_e2, args) {
              if (_e2 != null) {
                return callback(_e2);
              }
              return callback(null, func !== _this.func || args !== _this.args
                ? CallNode(
                  _this.line,
                  _this.column,
                  _this.scopeId,
                  func,
                  args,
                  _this.isNew,
                  _this.isApply
                )
                : _this);
            });
          });
        };
        return CallNode;
      }(Node));
      Node.Comment = CommentNode = (function (Node) {
        var _CommentNode_prototype, _Node_prototype;
        function CommentNode(line, column, scopeId, text) {
          var _this;
          _this = this instanceof CommentNode ? this : __create(_CommentNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (typeof text !== "string") {
            throw TypeError("Expected text to be a String, got " + __typeof(text));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.text = text;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _CommentNode_prototype = CommentNode.prototype = __create(_Node_prototype);
        _CommentNode_prototype.constructor = CommentNode;
        CommentNode.displayName = "CommentNode";
        if (typeof Node.extended === "function") {
          Node.extended(CommentNode);
        }
        CommentNode.cappedName = "Comment";
        CommentNode.argNames = ["text"];
        State.addNodeFactory("comment", CommentNode);
        _CommentNode_prototype.type = function () {
          return Type["undefined"];
        };
        _CommentNode_prototype.cacheable = false;
        _CommentNode_prototype.isCount = function () {
          return true;
        };
        _CommentNode_prototype.constValue = function () {
          return;
        };
        _CommentNode_prototype._isNoop = function () {
          return true;
        };
        _CommentNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "CommentNode",
            this.line,
            this.column,
            this.text
          );
        };
        _CommentNode_prototype.walk = function (f) {
          return this;
        };
        _CommentNode_prototype.walkAsync = function (f, callback) {
          return callback(null, this);
        };
        return CommentNode;
      }(Node));
      Node.Const = ConstNode = (function (Node) {
        var _ConstNode_prototype, _Node_prototype;
        function ConstNode(line, column, scopeId, value) {
          var _this;
          _this = this instanceof ConstNode ? this : __create(_ConstNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (value != null && typeof value !== "number" && typeof value !== "string" && typeof value !== "boolean") {
            throw TypeError("Expected value to be one of Number or String or Boolean or undefined or null, got " + __typeof(value));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.value = value;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ConstNode_prototype = ConstNode.prototype = __create(_Node_prototype);
        _ConstNode_prototype.constructor = ConstNode;
        ConstNode.displayName = "ConstNode";
        if (typeof Node.extended === "function") {
          Node.extended(ConstNode);
        }
        ConstNode.cappedName = "Const";
        ConstNode.argNames = ["value"];
        State.addNodeFactory("const", ConstNode);
        _ConstNode_prototype.type = function () {
          var value;
          value = this.value;
          if (value === null) {
            return Type["null"];
          } else {
            switch (typeof value) {
            case "number": return Type.number;
            case "string": return Type.string;
            case "boolean": return Type.boolean;
            case "undefined": return Type["undefined"];
            default: throw Error("Unknown type for " + String(value));
            }
          }
        };
        _ConstNode_prototype.cacheable = false;
        _ConstNode_prototype.isConst = function () {
          return true;
        };
        _ConstNode_prototype.constValue = function () {
          return this.value;
        };
        _ConstNode_prototype._isNoop = function () {
          return true;
        };
        _ConstNode_prototype.inspect = function (depth) {
          return "ConstNode(" + __strnum(inspect(this.value, null, depth != null ? __num(depth) - 1 : null)) + ")";
        };
        _ConstNode_prototype.walk = function (f) {
          return this;
        };
        _ConstNode_prototype.walkAsync = function (f, callback) {
          return callback(null, this);
        };
        return ConstNode;
      }(Node));
      Node.Continue = ContinueNode = (function (Node) {
        var _ContinueNode_prototype, _Node_prototype;
        function ContinueNode(line, column, scopeId, label) {
          var _this;
          _this = this instanceof ContinueNode ? this : __create(_ContinueNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ContinueNode_prototype = ContinueNode.prototype = __create(_Node_prototype);
        _ContinueNode_prototype.constructor = ContinueNode;
        ContinueNode.displayName = "ContinueNode";
        if (typeof Node.extended === "function") {
          Node.extended(ContinueNode);
        }
        ContinueNode.cappedName = "Continue";
        ContinueNode.argNames = ["label"];
        State.addNodeFactory("continue", ContinueNode);
        _ContinueNode_prototype.type = function () {
          return Type["undefined"];
        };
        _ContinueNode_prototype.isStatement = function () {
          return true;
        };
        _ContinueNode_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return ContinueNode(this.line, this.column, this.scopeId, label);
        };
        _ContinueNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "ContinueNode",
            this.line,
            this.column,
            this.label
          );
        };
        _ContinueNode_prototype.walk = function (f) {
          var label;
          if (this.label instanceof Node) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (label !== this.label) {
            return ContinueNode(this.line, this.column, this.scopeId, label);
          } else {
            return this;
          }
        };
        _ContinueNode_prototype.walkAsync = function (f, callback) {
          var _f, _this;
          _this = this;
          if (this.label instanceof Node) {
            _f = function (next) {
              return f(_this.label, function (_e, label) {
                if (_e != null) {
                  return callback(_e);
                }
                return next(label);
              });
            };
          } else {
            _f = function (next) {
              return next(_this.label);
            };
          }
          return _f(function (label) {
            return callback(null, label !== _this.label ? ContinueNode(_this.line, _this.column, _this.scopeId, label) : _this);
          });
        };
        return ContinueNode;
      }(Node));
      Node.Debugger = DebuggerNode = (function (Node) {
        var _DebuggerNode_prototype, _Node_prototype;
        function DebuggerNode(line, column, scopeId) {
          var _this;
          _this = this instanceof DebuggerNode ? this : __create(_DebuggerNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _DebuggerNode_prototype = DebuggerNode.prototype = __create(_Node_prototype);
        _DebuggerNode_prototype.constructor = DebuggerNode;
        DebuggerNode.displayName = "DebuggerNode";
        if (typeof Node.extended === "function") {
          Node.extended(DebuggerNode);
        }
        DebuggerNode.cappedName = "Debugger";
        DebuggerNode.argNames = [];
        State.addNodeFactory("debugger", DebuggerNode);
        _DebuggerNode_prototype.type = function () {
          return Type["undefined"];
        };
        _DebuggerNode_prototype.isStatement = function () {
          return true;
        };
        _DebuggerNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "DebuggerNode", this.line, this.column);
        };
        return DebuggerNode;
      }(Node));
      Node.Def = DefNode = (function (Node) {
        var _DefNode_prototype, _Node_prototype;
        function DefNode(line, column, scopeId, left, right) {
          var _this;
          _this = this instanceof DefNode ? this : __create(_DefNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(left instanceof Node)) {
            throw TypeError("Expected left to be a " + __name(Node) + ", got " + __typeof(left));
          }
          if (right == null) {
            right = void 0;
          } else if (!(right instanceof Node)) {
            throw TypeError("Expected right to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(right));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.left = left;
          _this.right = right;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _DefNode_prototype = DefNode.prototype = __create(_Node_prototype);
        _DefNode_prototype.constructor = DefNode;
        DefNode.displayName = "DefNode";
        if (typeof Node.extended === "function") {
          Node.extended(DefNode);
        }
        DefNode.cappedName = "Def";
        DefNode.argNames = ["left", "right"];
        State.addNodeFactory("def", DefNode);
        _DefNode_prototype.type = function (o) {
          if (this.right != null) {
            return this.right.type(o);
          } else {
            return Type.any;
          }
        };
        _DefNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "DefNode",
            this.line,
            this.column,
            this.left,
            this.right
          );
        };
        _DefNode_prototype.walk = function (f) {
          var left, right;
          left = f(this.left);
          if (this.right instanceof Node) {
            right = f(this.right);
          } else {
            right = this.right;
          }
          if (left !== this.left || right !== this.right) {
            return DefNode(
              this.line,
              this.column,
              this.scopeId,
              left,
              right
            );
          } else {
            return this;
          }
        };
        _DefNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.left, function (_e, left) {
            var _f;
            if (_e != null) {
              return callback(_e);
            }
            if (_this.right instanceof Node) {
              _f = function (next) {
                return f(_this.right, function (_e2, right) {
                  if (_e2 != null) {
                    return callback(_e2);
                  }
                  return next(right);
                });
              };
            } else {
              _f = function (next) {
                return next(_this.right);
              };
            }
            return _f(function (right) {
              return callback(null, left !== _this.left || right !== _this.right
                ? DefNode(
                  _this.line,
                  _this.column,
                  _this.scopeId,
                  left,
                  right
                )
                : _this);
            });
          });
        };
        return DefNode;
      }(Node));
      Node.Eval = EvalNode = (function (Node) {
        var _EvalNode_prototype, _Node_prototype;
        function EvalNode(line, column, scopeId, code) {
          var _this;
          _this = this instanceof EvalNode ? this : __create(_EvalNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(code instanceof Node)) {
            throw TypeError("Expected code to be a " + __name(Node) + ", got " + __typeof(code));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.code = code;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _EvalNode_prototype = EvalNode.prototype = __create(_Node_prototype);
        _EvalNode_prototype.constructor = EvalNode;
        EvalNode.displayName = "EvalNode";
        if (typeof Node.extended === "function") {
          Node.extended(EvalNode);
        }
        EvalNode.cappedName = "Eval";
        EvalNode.argNames = ["code"];
        State.addNodeFactory("eval", EvalNode);
        _EvalNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "EvalNode",
            this.line,
            this.column,
            this.code
          );
        };
        _EvalNode_prototype.walk = function (f) {
          var code;
          code = f(this.code);
          if (code !== this.code) {
            return EvalNode(this.line, this.column, this.scopeId, code);
          } else {
            return this;
          }
        };
        _EvalNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.code, function (_e, code) {
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, code !== _this.code ? EvalNode(_this.line, _this.column, _this.scopeId, code) : _this);
          });
        };
        return EvalNode;
      }(Node));
      Node.For = ForNode = (function (Node) {
        var _ForNode_prototype, _Node_prototype;
        function ForNode(line, column, scopeId, init, test, step, body, label) {
          var _this;
          _this = this instanceof ForNode ? this : __create(_ForNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (init == null) {
            init = NothingNode(0, 0, scopeId);
          } else if (!(init instanceof Node)) {
            throw TypeError("Expected init to be a " + __name(Node) + ", got " + __typeof(init));
          }
          if (test == null) {
            test = ConstNode(0, 0, scopeId, true);
          } else if (!(test instanceof Node)) {
            throw TypeError("Expected test to be a " + __name(Node) + ", got " + __typeof(test));
          }
          if (step == null) {
            step = NothingNode(0, 0, scopeId);
          } else if (!(step instanceof Node)) {
            throw TypeError("Expected step to be a " + __name(Node) + ", got " + __typeof(step));
          }
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.init = init;
          _this.test = test;
          _this.step = step;
          _this.body = body;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ForNode_prototype = ForNode.prototype = __create(_Node_prototype);
        _ForNode_prototype.constructor = ForNode;
        ForNode.displayName = "ForNode";
        if (typeof Node.extended === "function") {
          Node.extended(ForNode);
        }
        ForNode.cappedName = "For";
        ForNode.argNames = [
          "init",
          "test",
          "step",
          "body",
          "label"
        ];
        State.addNodeFactory("for", ForNode);
        _ForNode_prototype.type = function () {
          return Type["undefined"];
        };
        _ForNode_prototype.isStatement = function () {
          return true;
        };
        _ForNode_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return ForNode(
            this.line,
            this.column,
            this.scopeId,
            this.init,
            this.test,
            this.step,
            this.body,
            label
          );
        };
        _ForNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "ForNode",
            this.line,
            this.column,
            this.init,
            this.test,
            this.step,
            this.body,
            this.label
          );
        };
        _ForNode_prototype.walk = function (f) {
          var body, init, label, step, test;
          init = f(this.init);
          test = f(this.test);
          step = f(this.step);
          body = f(this.body);
          if (this.label instanceof Node) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (init !== this.init || test !== this.test || step !== this.step || body !== this.body || label !== this.label) {
            return ForNode(
              this.line,
              this.column,
              this.scopeId,
              init,
              test,
              step,
              body,
              label
            );
          } else {
            return this;
          }
        };
        _ForNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.init, function (_e, init) {
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.test, function (_e2, test) {
              if (_e2 != null) {
                return callback(_e2);
              }
              return f(_this.step, function (_e3, step) {
                if (_e3 != null) {
                  return callback(_e3);
                }
                return f(_this.body, function (_e4, body) {
                  var _f;
                  if (_e4 != null) {
                    return callback(_e4);
                  }
                  if (_this.label instanceof Node) {
                    _f = function (next) {
                      return f(_this.label, function (_e5, label) {
                        if (_e5 != null) {
                          return callback(_e5);
                        }
                        return next(label);
                      });
                    };
                  } else {
                    _f = function (next) {
                      return next(_this.label);
                    };
                  }
                  return _f(function (label) {
                    return callback(null, init !== _this.init || test !== _this.test || step !== _this.step || body !== _this.body || label !== _this.label
                      ? ForNode(
                        _this.line,
                        _this.column,
                        _this.scopeId,
                        init,
                        test,
                        step,
                        body,
                        label
                      )
                      : _this);
                  });
                });
              });
            });
          });
        };
        return ForNode;
      }(Node));
      Node.ForIn = ForInNode = (function (Node) {
        var _ForInNode_prototype, _Node_prototype;
        function ForInNode(line, column, scopeId, key, object, body, label) {
          var _this;
          _this = this instanceof ForInNode ? this : __create(_ForInNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(key instanceof Node)) {
            throw TypeError("Expected key to be a " + __name(Node) + ", got " + __typeof(key));
          }
          if (!(object instanceof Node)) {
            throw TypeError("Expected object to be a " + __name(Node) + ", got " + __typeof(object));
          }
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.key = key;
          _this.object = object;
          _this.body = body;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ForInNode_prototype = ForInNode.prototype = __create(_Node_prototype);
        _ForInNode_prototype.constructor = ForInNode;
        ForInNode.displayName = "ForInNode";
        if (typeof Node.extended === "function") {
          Node.extended(ForInNode);
        }
        ForInNode.cappedName = "ForIn";
        ForInNode.argNames = ["key", "object", "body", "label"];
        State.addNodeFactory("forIn", ForInNode);
        _ForInNode_prototype.type = function () {
          return Type["undefined"];
        };
        _ForInNode_prototype.isStatement = function () {
          return true;
        };
        _ForInNode_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return ForInNode(
            this.line,
            this.column,
            this.scopeId,
            this.key,
            this.object,
            this.body,
            label
          );
        };
        _ForInNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "ForInNode",
            this.line,
            this.column,
            this.key,
            this.object,
            this.body,
            this.label
          );
        };
        _ForInNode_prototype.walk = function (f) {
          var body, key, label, object;
          key = f(this.key);
          object = f(this.object);
          body = f(this.body);
          if (this.label instanceof Node) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (key !== this.key || object !== this.object || body !== this.body || label !== this.label) {
            return ForInNode(
              this.line,
              this.column,
              this.scopeId,
              key,
              object,
              body,
              label
            );
          } else {
            return this;
          }
        };
        _ForInNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.key, function (_e, key) {
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.object, function (_e2, object) {
              if (_e2 != null) {
                return callback(_e2);
              }
              return f(_this.body, function (_e3, body) {
                var _f;
                if (_e3 != null) {
                  return callback(_e3);
                }
                if (_this.label instanceof Node) {
                  _f = function (next) {
                    return f(_this.label, function (_e4, label) {
                      if (_e4 != null) {
                        return callback(_e4);
                      }
                      return next(label);
                    });
                  };
                } else {
                  _f = function (next) {
                    return next(_this.label);
                  };
                }
                return _f(function (label) {
                  return callback(null, key !== _this.key || object !== _this.object || body !== _this.body || label !== _this.label
                    ? ForInNode(
                      _this.line,
                      _this.column,
                      _this.scopeId,
                      key,
                      object,
                      body,
                      label
                    )
                    : _this);
                });
              });
            });
          });
        };
        return ForInNode;
      }(Node));
      Node.Function = FunctionNode = (function (Node) {
        var _FunctionNode_prototype, _Node_prototype;
        function FunctionNode(line, column, scopeId, params, body, autoReturn, bound, curry, asType, generator, generic) {
          var _i, _i2, _this;
          _this = this instanceof FunctionNode ? this : __create(_FunctionNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!__isArray(params)) {
            throw TypeError("Expected params to be an Array, got " + __typeof(params));
          } else {
            for (_i = params.length; _i--; ) {
              if (!(params[_i] instanceof Node)) {
                throw TypeError("Expected " + ("params[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(params[_i]));
              }
            }
          }
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          if (autoReturn == null) {
            autoReturn = true;
          } else if (typeof autoReturn !== "boolean") {
            throw TypeError("Expected autoReturn to be a Boolean, got " + __typeof(autoReturn));
          }
          if (bound == null) {
            bound = false;
          } else if (!(bound instanceof Node) && typeof bound !== "boolean") {
            throw TypeError("Expected bound to be one of " + (__name(Node) + " or Boolean") + ", got " + __typeof(bound));
          }
          if (curry == null) {
            curry = false;
          } else if (typeof curry !== "boolean") {
            throw TypeError("Expected curry to be a Boolean, got " + __typeof(curry));
          }
          if (asType == null) {
            asType = void 0;
          } else if (!(asType instanceof Node)) {
            throw TypeError("Expected asType to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(asType));
          }
          if (generator == null) {
            generator = false;
          } else if (typeof generator !== "boolean") {
            throw TypeError("Expected generator to be a Boolean, got " + __typeof(generator));
          }
          if (generic == null) {
            generic = [];
          } else if (!__isArray(generic)) {
            throw TypeError("Expected generic to be an Array, got " + __typeof(generic));
          } else {
            for (_i2 = generic.length; _i2--; ) {
              if (!(generic[_i2] instanceof IdentNode)) {
                throw TypeError("Expected " + ("generic[" + _i2 + "]") + " to be a " + __name(IdentNode) + ", got " + __typeof(generic[_i2]));
              }
            }
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.params = params;
          _this.body = body;
          _this.autoReturn = autoReturn;
          _this.bound = bound;
          _this.curry = curry;
          _this.asType = asType;
          _this.generator = generator;
          _this.generic = generic;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _FunctionNode_prototype = FunctionNode.prototype = __create(_Node_prototype);
        _FunctionNode_prototype.constructor = FunctionNode;
        FunctionNode.displayName = "FunctionNode";
        if (typeof Node.extended === "function") {
          Node.extended(FunctionNode);
        }
        FunctionNode.cappedName = "Function";
        FunctionNode.argNames = [
          "params",
          "body",
          "autoReturn",
          "bound",
          "curry",
          "asType",
          "generator",
          "generic"
        ];
        State.addNodeFactory("function", FunctionNode);
        _FunctionNode_prototype.type = function (o) {
          var _ref, _this;
          _this = this;
          if ((_ref = this._type) == null) {
            return this._type = (function () {
              var returnType, walker;
              if (_this.asType != null) {
                return nodeToType(_this.asType)["function"]();
              } else {
                if (_this.autoReturn) {
                  returnType = _this.body.type(o);
                } else {
                  returnType = Type["undefined"];
                }
                walker = function (node) {
                  var _ref;
                  if (node instanceof ReturnNode) {
                    returnType = returnType.union(node.type(o));
                    return node;
                  } else if (node instanceof FunctionNode) {
                    return node;
                  } else if (node instanceof MacroAccessNode) {
                    if ((_ref = node.data.macroName) === "return" || _ref === "return?") {
                      if (node.data.macroData.node) {
                        returnType = returnType.union(node.data.macroData.node.type(o));
                      } else {
                        returnType = returnType.union(Type["undefined"]);
                      }
                    }
                    return node.walk(walker);
                  } else {
                    return node.walk(walker);
                  }
                };
                walker(_this.body);
                return returnType["function"]();
              }
            }());
          } else {
            return _ref;
          }
        };
        _FunctionNode_prototype._isNoop = function (o) {
          return true;
        };
        _FunctionNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "FunctionNode",
            this.line,
            this.column,
            this.params,
            this.body,
            this.autoReturn,
            this.bound,
            this.curry,
            this.asType,
            this.generator,
            this.generic
          );
        };
        _FunctionNode_prototype.walk = function (f) {
          var asType, body, bound, params;
          params = map(this.params, f);
          body = f(this.body);
          if (this.bound instanceof Node) {
            bound = f(this.bound);
          } else {
            bound = this.bound;
          }
          if (this.asType instanceof Node) {
            asType = f(this.asType);
          } else {
            asType = this.asType;
          }
          if (params !== this.params || body !== this.body || bound !== this.bound || asType !== this.asType) {
            return FunctionNode(
              this.line,
              this.column,
              this.scopeId,
              params,
              body,
              this.autoReturn,
              bound,
              this.curry,
              asType,
              this.generator,
              this.generic
            );
          } else {
            return this;
          }
        };
        _FunctionNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return mapAsync(this.params, f, function (_e, params) {
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.body, function (_e2, body) {
              var _f;
              if (_e2 != null) {
                return callback(_e2);
              }
              if (_this.bound instanceof Node) {
                _f = function (next) {
                  return f(_this.bound, function (_e3, bound) {
                    if (_e3 != null) {
                      return callback(_e3);
                    }
                    return next(bound);
                  });
                };
              } else {
                _f = function (next) {
                  return next(_this.bound);
                };
              }
              return _f(function (bound) {
                var _f;
                if (_this.asType instanceof Node) {
                  _f = function (next) {
                    return f(_this.asType, function (_e3, asType) {
                      if (_e3 != null) {
                        return callback(_e3);
                      }
                      return next(asType);
                    });
                  };
                } else {
                  _f = function (next) {
                    return next(_this.asType);
                  };
                }
                return _f(function (asType) {
                  return callback(null, params !== _this.params || body !== _this.body || bound !== _this.bound || asType !== _this.asType
                    ? FunctionNode(
                      _this.line,
                      _this.column,
                      _this.scopeId,
                      params,
                      body,
                      _this.autoReturn,
                      bound,
                      _this.curry,
                      asType,
                      _this.generator,
                      _this.generic
                    )
                    : _this);
                });
              });
            });
          });
        };
        return FunctionNode;
      }(Node));
      Node.Ident = IdentNode = (function (Node) {
        var _IdentNode_prototype, _Node_prototype;
        function IdentNode(line, column, scopeId, name) {
          var _this;
          _this = this instanceof IdentNode ? this : __create(_IdentNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.name = name;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _IdentNode_prototype = IdentNode.prototype = __create(_Node_prototype);
        _IdentNode_prototype.constructor = IdentNode;
        IdentNode.displayName = "IdentNode";
        if (typeof Node.extended === "function") {
          Node.extended(IdentNode);
        }
        IdentNode.cappedName = "Ident";
        IdentNode.argNames = ["name"];
        State.addNodeFactory("ident", IdentNode);
        _IdentNode_prototype.cacheable = false;
        _IdentNode_prototype.type = function (o) {
          if (this.name === CURRENT_ARRAY_LENGTH_NAME) {
            return Type.number;
          } else if (o) {
            return o.scope.type(this);
          } else {
            return Type.any;
          }
        };
        _IdentNode_prototype._isNoop = function (o) {
          return true;
        };
        _IdentNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "IdentNode",
            this.line,
            this.column,
            this.name
          );
        };
        _IdentNode_prototype.walk = function (f) {
          return this;
        };
        _IdentNode_prototype.walkAsync = function (f, callback) {
          return callback(null, this);
        };
        return IdentNode;
      }(Node));
      Node.If = IfNode = (function (Node) {
        var _IfNode_prototype, _Node_prototype;
        function IfNode(line, column, scopeId, test, whenTrue, whenFalse, label) {
          var _this;
          _this = this instanceof IfNode ? this : __create(_IfNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(test instanceof Node)) {
            throw TypeError("Expected test to be a " + __name(Node) + ", got " + __typeof(test));
          }
          if (!(whenTrue instanceof Node)) {
            throw TypeError("Expected whenTrue to be a " + __name(Node) + ", got " + __typeof(whenTrue));
          }
          if (whenFalse == null) {
            whenFalse = NothingNode(0, 0, scopeId);
          } else if (!(whenFalse instanceof Node)) {
            throw TypeError("Expected whenFalse to be a " + __name(Node) + ", got " + __typeof(whenFalse));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.test = test;
          _this.whenTrue = whenTrue;
          _this.whenFalse = whenFalse;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _IfNode_prototype = IfNode.prototype = __create(_Node_prototype);
        _IfNode_prototype.constructor = IfNode;
        IfNode.displayName = "IfNode";
        if (typeof Node.extended === "function") {
          Node.extended(IfNode);
        }
        IfNode.cappedName = "If";
        IfNode.argNames = ["test", "whenTrue", "whenFalse", "label"];
        State.addNodeFactory("if", IfNode);
        _IfNode_prototype.type = function (o) {
          var _ref;
          if ((_ref = this._type) == null) {
            return this._type = this.whenTrue.type(o).union(this.whenFalse.type(o));
          } else {
            return _ref;
          }
        };
        _IfNode_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return IfNode(
            this.line,
            this.column,
            this.scopeId,
            this.test,
            this.whenTrue,
            this.whenFalse,
            label
          );
        };
        _IfNode_prototype._reduce = function (o) {
          var label, test, testType, whenFalse, whenTrue;
          test = this.test.reduce(o);
          whenTrue = this.whenTrue.reduce(o);
          whenFalse = this.whenFalse.reduce(o);
          if (this.label != null) {
            label = this.label.reduce(o);
          } else {
            label = this.label;
          }
          if (test.isConst()) {
            return BlockNode(
              this.line,
              this.column,
              this.scopeId,
              [test.constValue() ? whenTrue : whenFalse],
              label
            ).reduce(o);
          } else {
            testType = test.type(o);
            if (testType.isSubsetOf(Type.alwaysTruthy)) {
              return BlockNode(
                this.line,
                this.column,
                this.scopeId,
                [test, whenTrue],
                label
              ).reduce(o);
            } else if (testType.isSubsetOf(Type.alwaysFalsy)) {
              return BlockNode(
                this.line,
                this.column,
                this.scopeId,
                [test, whenFalse],
                label
              ).reduce(o);
            } else if (test !== this.test || whenTrue !== this.whenTrue || whenFalse !== this.whenFalse || label !== this.label) {
              return IfNode(
                this.line,
                this.column,
                this.scopeId,
                test,
                whenTrue,
                whenFalse,
                label
              );
            } else {
              return this;
            }
          }
        };
        _IfNode_prototype.isStatement = function () {
          var _ref;
          if ((_ref = this._isStatement) == null) {
            return this._isStatement = this.whenTrue.isStatement() || this.whenFalse.isStatement();
          } else {
            return _ref;
          }
        };
        _IfNode_prototype.doWrap = function (o) {
          var whenFalse, whenTrue;
          whenTrue = this.whenTrue.doWrap(o);
          whenFalse = this.whenFalse.doWrap(o);
          if (whenTrue !== this.whenTrue || whenFalse !== this.whenFalse) {
            return IfNode(
              this.line,
              this.column,
              this.scopeId,
              this.test,
              whenTrue,
              whenFalse,
              this.label
            );
          } else {
            return this;
          }
        };
        _IfNode_prototype._isNoop = function (o) {
          var _ref;
          if ((_ref = this.__isNoop) == null) {
            return this.__isNoop = this.test.isNoop(o) && this.whenTrue.isNoop(o) && this.whenFalse.isNoop(o);
          } else {
            return _ref;
          }
        };
        _IfNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "IfNode",
            this.line,
            this.column,
            this.test,
            this.whenTrue,
            this.whenFalse,
            this.label
          );
        };
        _IfNode_prototype.walk = function (f) {
          var label, test, whenFalse, whenTrue;
          test = f(this.test);
          whenTrue = f(this.whenTrue);
          whenFalse = f(this.whenFalse);
          if (this.label instanceof Node) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (test !== this.test || whenTrue !== this.whenTrue || whenFalse !== this.whenFalse || label !== this.label) {
            return IfNode(
              this.line,
              this.column,
              this.scopeId,
              test,
              whenTrue,
              whenFalse,
              label
            );
          } else {
            return this;
          }
        };
        _IfNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.test, function (_e, test) {
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.whenTrue, function (_e2, whenTrue) {
              if (_e2 != null) {
                return callback(_e2);
              }
              return f(_this.whenFalse, function (_e3, whenFalse) {
                var _f;
                if (_e3 != null) {
                  return callback(_e3);
                }
                if (_this.label instanceof Node) {
                  _f = function (next) {
                    return f(_this.label, function (_e4, label) {
                      if (_e4 != null) {
                        return callback(_e4);
                      }
                      return next(label);
                    });
                  };
                } else {
                  _f = function (next) {
                    return next(_this.label);
                  };
                }
                return _f(function (label) {
                  return callback(null, test !== _this.test || whenTrue !== _this.whenTrue || whenFalse !== _this.whenFalse || label !== _this.label
                    ? IfNode(
                      _this.line,
                      _this.column,
                      _this.scopeId,
                      test,
                      whenTrue,
                      whenFalse,
                      label
                    )
                    : _this);
                });
              });
            });
          });
        };
        return IfNode;
      }(Node));
      Node.MacroAccess = MacroAccessNode = (function (Node) {
        var _MacroAccessNode_prototype, _Node_prototype;
        function MacroAccessNode(line, column, scopeId, id, callLine, data, position, inGenerator, inEvilAst) {
          var _this;
          _this = this instanceof MacroAccessNode ? this : __create(_MacroAccessNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (typeof id !== "number") {
            throw TypeError("Expected id to be a Number, got " + __typeof(id));
          }
          if (typeof callLine !== "number") {
            throw TypeError("Expected callLine to be a Number, got " + __typeof(callLine));
          }
          if (typeof data !== "object" || data === null) {
            throw TypeError("Expected data to be an Object, got " + __typeof(data));
          }
          if (typeof position !== "string") {
            throw TypeError("Expected position to be a String, got " + __typeof(position));
          }
          if (inGenerator == null) {
            inGenerator = false;
          } else if (typeof inGenerator !== "boolean") {
            throw TypeError("Expected inGenerator to be a Boolean, got " + __typeof(inGenerator));
          }
          if (inEvilAst == null) {
            inEvilAst = false;
          } else if (typeof inEvilAst !== "boolean") {
            throw TypeError("Expected inEvilAst to be a Boolean, got " + __typeof(inEvilAst));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.id = id;
          _this.callLine = callLine;
          _this.data = data;
          _this.position = position;
          _this.inGenerator = inGenerator;
          _this.inEvilAst = inEvilAst;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _MacroAccessNode_prototype = MacroAccessNode.prototype = __create(_Node_prototype);
        _MacroAccessNode_prototype.constructor = MacroAccessNode;
        MacroAccessNode.displayName = "MacroAccessNode";
        if (typeof Node.extended === "function") {
          Node.extended(MacroAccessNode);
        }
        MacroAccessNode.cappedName = "MacroAccess";
        MacroAccessNode.argNames = [
          "id",
          "callLine",
          "data",
          "position",
          "inGenerator",
          "inEvilAst"
        ];
        State.addNodeFactory("macroAccess", MacroAccessNode);
        _MacroAccessNode_prototype.type = function (o) {
          var _ref, _this;
          _this = this;
          if (!(o instanceof State)) {
            throw TypeError("Expected o to be a " + __name(State) + ", got " + __typeof(o));
          }
          if ((_ref = this._type) == null) {
            return this._type = (function () {
              var type;
              type = o.macros.getTypeById(_this.id);
              if (type != null) {
                if (typeof type === "string") {
                  return _this.data[type].type(o);
                } else {
                  return type;
                }
              } else {
                return o.macroExpand1(_this).type(o);
              }
            }());
          } else {
            return _ref;
          }
        };
        _MacroAccessNode_prototype.withLabel = function (label, o) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return o.macroExpand1(this).withLabel(label, o);
        };
        _MacroAccessNode_prototype.walk = (function () {
          function walkObject(obj, func) {
            var changed, k, newV, result, v;
            result = {};
            changed = false;
            for (k in obj) {
              if (__owns.call(obj, k)) {
                v = obj[k];
                newV = walkItem(v, func);
                if (newV !== v) {
                  changed = true;
                }
                result[k] = newV;
              }
            }
            if (changed) {
              return result;
            } else {
              return obj;
            }
          }
          function walkItem(item, func) {
            if (item instanceof Node) {
              return func(item);
            } else if (__isArray(item)) {
              return map(item, function (x) {
                return walkItem(x, func);
              });
            } else if (typeof item === "object" && item !== null) {
              return walkObject(item, func);
            } else {
              return item;
            }
          }
          return function (func) {
            var data;
            data = walkItem(this.data, func);
            if (data !== this.data) {
              return MacroAccessNode(
                this.line,
                this.column,
                this.scopeId,
                this.id,
                this.callLine,
                data,
                this.position,
                this.inGenerator,
                this.inEvilAst
              );
            } else {
              return this;
            }
          };
        }());
        _MacroAccessNode_prototype.walkAsync = (function () {
          function walkObject(obj, func, callback) {
            var _keys, changed, k, result;
            changed = false;
            result = {};
            _keys = [];
            for (k in obj) {
              if (__owns.call(obj, k)) {
                _keys.push(k);
              }
            }
            return __async(
              1,
              _keys.length,
              function (_i, next) {
                var k, v;
                k = _keys[_i];
                v = obj[k];
                return walkItem(item, func, function (_e, newItem) {
                  if (_e != null) {
                    return next(_e);
                  }
                  if (item !== newItem) {
                    changed = true;
                  }
                  result[k] = newItem;
                  return next(null);
                });
              },
              function (err) {
                if (typeof err !== "undefined" && err !== null) {
                  return callback(err);
                } else {
                  return callback(null, changed ? result : obj);
                }
              }
            );
          }
          function walkItem(item, func, callback) {
            if (item instanceof Node) {
              return func(item, callback);
            } else if (__isArray(item)) {
              return mapAsync(
                item,
                function (x, cb) {
                  return walkItem(x, func, cb);
                },
                callback
              );
            } else if (typeof item === "object" && item !== null) {
              return walkObject(item, func, callback);
            } else {
              return callback(null, item);
            }
          }
          return function (func, callback) {
            var _this;
            _this = this;
            return walkItem(this.data, func, function (_e, data) {
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, data !== _this.data
                ? MacroAccessNode(
                  _this.line,
                  _this.column,
                  _this.scopeId,
                  _this.id,
                  _this.callLine,
                  data,
                  _this.position,
                  _this.inGenerator,
                  _this.inEvilAst
                )
                : _this);
            });
          };
        }());
        _MacroAccessNode_prototype._isNoop = function (o) {
          return o.macroExpand1(this).isNoop(o);
        };
        _MacroAccessNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "MacroAccessNode",
            this.line,
            this.column,
            this.id,
            this.callLine,
            this.data,
            this.position,
            this.inGenerator,
            this.inEvilAst
          );
        };
        return MacroAccessNode;
      }(Node));
      Node.Nothing = NothingNode = (function (Node) {
        var _Node_prototype, _NothingNode_prototype;
        function NothingNode(line, column, scopeId) {
          var _this;
          _this = this instanceof NothingNode ? this : __create(_NothingNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _NothingNode_prototype = NothingNode.prototype = __create(_Node_prototype);
        _NothingNode_prototype.constructor = NothingNode;
        NothingNode.displayName = "NothingNode";
        if (typeof Node.extended === "function") {
          Node.extended(NothingNode);
        }
        NothingNode.cappedName = "Nothing";
        NothingNode.argNames = [];
        State.addNodeFactory("nothing", NothingNode);
        _NothingNode_prototype.type = function () {
          return Type["undefined"];
        };
        _NothingNode_prototype.cacheable = false;
        _NothingNode_prototype.isConst = function () {
          return true;
        };
        _NothingNode_prototype.constValue = function () {
          return;
        };
        _NothingNode_prototype._isNoop = function () {
          return true;
        };
        _NothingNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "NothingNode", this.line, this.column);
        };
        return NothingNode;
      }(Node));
      Node.Object = ObjectNode = (function (Node) {
        var _Node_prototype, _ObjectNode_prototype;
        function ObjectNode(line, column, scopeId, pairs, prototype) {
          var _i, _this;
          _this = this instanceof ObjectNode ? this : __create(_ObjectNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!__isArray(pairs)) {
            throw TypeError("Expected pairs to be an Array, got " + __typeof(pairs));
          } else {
            for (_i = pairs.length; _i--; ) {
              if (typeof pairs[_i] !== "object" || pairs[_i] === null) {
                throw TypeError("Expected " + ("pairs[" + _i + "]") + " to be an Object, got " + __typeof(pairs[_i]));
              } else {
                if (!(pairs[_i].key instanceof Node)) {
                  throw TypeError("Expected " + ("pairs[" + _i + "].key") + " to be a " + __name(Node) + ", got " + __typeof(pairs[_i].key));
                }
                if (!(pairs[_i].value instanceof Node)) {
                  throw TypeError("Expected " + ("pairs[" + _i + "].value") + " to be a " + __name(Node) + ", got " + __typeof(pairs[_i].value));
                }
                if (pairs[_i].property == null) {
                  pairs[_i].property = void 0;
                } else if (typeof pairs[_i].property !== "string") {
                  throw TypeError("Expected " + ("pairs[" + _i + "].property") + " to be one of String or undefined, got " + __typeof(pairs[_i].property));
                }
              }
            }
          }
          if (prototype == null) {
            prototype = void 0;
          } else if (!(prototype instanceof Node)) {
            throw TypeError("Expected prototype to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(prototype));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.pairs = pairs;
          _this.prototype = prototype;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ObjectNode_prototype = ObjectNode.prototype = __create(_Node_prototype);
        _ObjectNode_prototype.constructor = ObjectNode;
        ObjectNode.displayName = "ObjectNode";
        if (typeof Node.extended === "function") {
          Node.extended(ObjectNode);
        }
        ObjectNode.cappedName = "Object";
        ObjectNode.argNames = ["pairs", "prototype"];
        State.addNodeFactory("object", ObjectNode);
        _ObjectNode_prototype.type = function (o) {
          var _ref, _this;
          _this = this;
          if ((_ref = this._type) == null) {
            return this._type = (function () {
              var _arr, _i, _len, _ref, data, key, value;
              data = {};
              for (_arr = __toArray(_this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                key = (_ref = _arr[_i]).key;
                value = _ref.value;
                if (key.isConst()) {
                  data[key.constValue()] = value.type(o);
                }
              }
              return Type.makeObject(data);
            }());
          } else {
            return _ref;
          }
        };
        _ObjectNode_prototype.walk = (function () {
          function walkPair(pair, func) {
            var key, value;
            key = func(pair.key);
            value = func(pair.value);
            if (key !== pair.key || value !== pair.value) {
              return { key: key, value: value, property: pair.property };
            } else {
              return pair;
            }
          }
          return function (func) {
            var pairs, prototype;
            pairs = map(this.pairs, walkPair, func);
            if (this.prototype != null) {
              prototype = func(this.prototype);
            } else {
              prototype = this.prototype;
            }
            if (pairs !== this.pairs || prototype !== this.prototype) {
              return ObjectNode(
                this.line,
                this.column,
                this.scopeId,
                pairs,
                prototype
              );
            } else {
              return this;
            }
          };
        }());
        _ObjectNode_prototype.walkAsync = (function () {
          function walkPair(pair, func, callback) {
            return func(pair.key, function (_e, key) {
              if (_e != null) {
                return callback(_e);
              }
              return func(pair.value, function (_e2, value) {
                if (_e2 != null) {
                  return callback(_e2);
                }
                return callback(null, key !== pair.key || value !== pair.value ? { key: key, value: value, property: pair.property } : pair);
              });
            });
          }
          return function (func, callback) {
            var _this;
            _this = this;
            return mapAsync(this.pairs, walkPair, func, function (_e, pairs) {
              var _f;
              if (_e != null) {
                return callback(_e);
              }
              if (_this.prototype != null) {
                _f = function (next) {
                  return func(_this.prototype, function (_e2, p) {
                    if (_e2 != null) {
                      return callback(_e2);
                    }
                    return next(p);
                  });
                };
              } else {
                _f = function (next) {
                  return next(_this.prototype);
                };
              }
              return _f(function (prototype) {
                return callback(null, pairs !== _this.pairs || prototype !== _this.prototype
                  ? ObjectNode(
                    _this.line,
                    _this.column,
                    _this.scopeId,
                    pairs,
                    prototype
                  )
                  : _this);
              });
            });
          };
        }());
        _ObjectNode_prototype._reduce = (function () {
          function reducePair(pair, o) {
            var key, value;
            key = pair.key.reduce(o);
            value = pair.value.reduce(o).doWrap(o);
            if (key !== pair.key || value !== pair.value) {
              return { key: key, value: value, property: pair.property };
            } else {
              return pair;
            }
          }
          return function (o) {
            var pairs, prototype;
            pairs = map(this.pairs, reducePair, o);
            if (this.prototype != null) {
              prototype = this.prototype.reduce(o);
            } else {
              prototype = this.prototype;
            }
            if (pairs !== this.pairs || prototype !== this.prototype) {
              return ObjectNode(
                this.line,
                this.column,
                this.scopeId,
                pairs,
                prototype
              );
            } else {
              return this;
            }
          };
        }());
        _ObjectNode_prototype._isNoop = function (o) {
          var _ref, _this;
          _this = this;
          if ((_ref = this.__isNoop) == null) {
            return this.__isNoop = (function () {
              var _arr, _i, _len, _ref, key, value;
              for (_arr = __toArray(_this.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                key = (_ref = _arr[_i]).key;
                value = _ref.value;
                if (!key.isNoop(o) || !value.isNoop(o)) {
                  return false;
                }
              }
              return true;
            }());
          } else {
            return _ref;
          }
        };
        _ObjectNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "ObjectNode",
            this.line,
            this.column,
            this.pairs,
            this.prototype
          );
        };
        return ObjectNode;
      }(Node));
      State.prototype.object = function (i, pairs, prototype) {
        var _arr, _i, _len, _ref, key, keyValue, knownKeys, lastPropertyPair, property;
        knownKeys = [];
        lastPropertyPair = null;
        for (_arr = __toArray(pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          key = (_ref = _arr[_i]).key;
          property = _ref.property;
          if (key instanceof ConstNode) {
            keyValue = String(key.value);
            if ((property === "get" || property === "set") && lastPropertyPair && lastPropertyPair.property !== property && lastPropertyPair.key === keyValue) {
              lastPropertyPair = null;
              continue;
            } else if (__in(keyValue, knownKeys)) {
              this.error("Duplicate key in object: " + keyValue);
            }
            knownKeys.push(keyValue);
            if (property === "get" || property === "set") {
              lastPropertyPair = { key: keyValue, property: property };
            } else {
              lastPropertyPair = null;
            }
          } else {
            lastPropertyPair = null;
          }
        }
        return ObjectNode(
          i,
          this.index,
          this.scope.id,
          pairs,
          prototype
        );
      };
      State.prototype.objectParam = State.prototype.object;
      Node.Param = ParamNode = (function (Node) {
        var _Node_prototype, _ParamNode_prototype;
        function ParamNode(line, column, scopeId, ident, defaultValue, spread, isMutable, asType) {
          var _this;
          _this = this instanceof ParamNode ? this : __create(_ParamNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(ident instanceof Node)) {
            throw TypeError("Expected ident to be a " + __name(Node) + ", got " + __typeof(ident));
          }
          if (defaultValue == null) {
            defaultValue = void 0;
          } else if (!(defaultValue instanceof Node)) {
            throw TypeError("Expected defaultValue to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(defaultValue));
          }
          if (spread == null) {
            spread = false;
          } else if (typeof spread !== "boolean") {
            throw TypeError("Expected spread to be a Boolean, got " + __typeof(spread));
          }
          if (isMutable == null) {
            isMutable = false;
          } else if (typeof isMutable !== "boolean") {
            throw TypeError("Expected isMutable to be a Boolean, got " + __typeof(isMutable));
          }
          if (asType == null) {
            asType = void 0;
          } else if (!(asType instanceof Node)) {
            throw TypeError("Expected asType to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(asType));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.ident = ident;
          _this.defaultValue = defaultValue;
          _this.spread = spread;
          _this.isMutable = isMutable;
          _this.asType = asType;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ParamNode_prototype = ParamNode.prototype = __create(_Node_prototype);
        _ParamNode_prototype.constructor = ParamNode;
        ParamNode.displayName = "ParamNode";
        if (typeof Node.extended === "function") {
          Node.extended(ParamNode);
        }
        ParamNode.cappedName = "Param";
        ParamNode.argNames = [
          "ident",
          "defaultValue",
          "spread",
          "isMutable",
          "asType"
        ];
        State.addNodeFactory("param", ParamNode);
        _ParamNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "ParamNode",
            this.line,
            this.column,
            this.ident,
            this.defaultValue,
            this.spread,
            this.isMutable,
            this.asType
          );
        };
        _ParamNode_prototype.walk = function (f) {
          var asType, defaultValue, ident;
          ident = f(this.ident);
          if (this.defaultValue instanceof Node) {
            defaultValue = f(this.defaultValue);
          } else {
            defaultValue = this.defaultValue;
          }
          if (this.asType instanceof Node) {
            asType = f(this.asType);
          } else {
            asType = this.asType;
          }
          if (ident !== this.ident || defaultValue !== this.defaultValue || asType !== this.asType) {
            return ParamNode(
              this.line,
              this.column,
              this.scopeId,
              ident,
              defaultValue,
              this.spread,
              this.isMutable,
              asType
            );
          } else {
            return this;
          }
        };
        _ParamNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.ident, function (_e, ident) {
            var _f;
            if (_e != null) {
              return callback(_e);
            }
            if (_this.defaultValue instanceof Node) {
              _f = function (next) {
                return f(_this.defaultValue, function (_e2, defaultValue) {
                  if (_e2 != null) {
                    return callback(_e2);
                  }
                  return next(defaultValue);
                });
              };
            } else {
              _f = function (next) {
                return next(_this.defaultValue);
              };
            }
            return _f(function (defaultValue) {
              var _f;
              if (_this.asType instanceof Node) {
                _f = function (next) {
                  return f(_this.asType, function (_e2, asType) {
                    if (_e2 != null) {
                      return callback(_e2);
                    }
                    return next(asType);
                  });
                };
              } else {
                _f = function (next) {
                  return next(_this.asType);
                };
              }
              return _f(function (asType) {
                return callback(null, ident !== _this.ident || defaultValue !== _this.defaultValue || asType !== _this.asType
                  ? ParamNode(
                    _this.line,
                    _this.column,
                    _this.scopeId,
                    ident,
                    defaultValue,
                    _this.spread,
                    _this.isMutable,
                    asType
                  )
                  : _this);
              });
            });
          });
        };
        return ParamNode;
      }(Node));
      Node.Regexp = RegexpNode = (function (Node) {
        var _Node_prototype, _RegexpNode_prototype;
        function RegexpNode(line, column, scopeId, source, flags) {
          var _this;
          _this = this instanceof RegexpNode ? this : __create(_RegexpNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(source instanceof Node)) {
            throw TypeError("Expected source to be a " + __name(Node) + ", got " + __typeof(source));
          }
          if (typeof flags !== "string") {
            throw TypeError("Expected flags to be a String, got " + __typeof(flags));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.source = source;
          _this.flags = flags;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _RegexpNode_prototype = RegexpNode.prototype = __create(_Node_prototype);
        _RegexpNode_prototype.constructor = RegexpNode;
        RegexpNode.displayName = "RegexpNode";
        if (typeof Node.extended === "function") {
          Node.extended(RegexpNode);
        }
        RegexpNode.cappedName = "Regexp";
        RegexpNode.argNames = ["source", "flags"];
        State.addNodeFactory("regexp", RegexpNode);
        _RegexpNode_prototype.type = function () {
          return Type.regexp;
        };
        _RegexpNode_prototype._isNoop = function (o) {
          return this.text.isNoop(o);
        };
        _RegexpNode_prototype._reduce = function (o) {
          var source;
          source = this.source.reduce(o).doWrap(o);
          if (!source.isConst()) {
            return CallNode(
              this.line,
              this.column,
              this.scopeId,
              IdentNode(this.line, this.column, this.scopeId, "RegExp"),
              [
                source,
                ConstNode(this.line, this.column, this.scopeId, this.flags)
              ]
            );
          } else if (source !== this.source) {
            return RegexpNode(
              this.line,
              this.column,
              this.scopeId,
              source,
              this.flags
            );
          } else {
            return this;
          }
        };
        _RegexpNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "RegexpNode",
            this.line,
            this.column,
            this.source,
            this.flags
          );
        };
        _RegexpNode_prototype.walk = function (f) {
          var source;
          source = f(this.source);
          if (source !== this.source) {
            return RegexpNode(
              this.line,
              this.column,
              this.scopeId,
              source,
              this.flags
            );
          } else {
            return this;
          }
        };
        _RegexpNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.source, function (_e, source) {
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, source !== _this.source
              ? RegexpNode(
                _this.line,
                _this.column,
                _this.scopeId,
                source,
                _this.flags
              )
              : _this);
          });
        };
        return RegexpNode;
      }(Node));
      Node.Return = ReturnNode = (function (Node) {
        var _Node_prototype, _ReturnNode_prototype;
        function ReturnNode(line, column, scopeId, node) {
          var _this;
          _this = this instanceof ReturnNode ? this : __create(_ReturnNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (node == null) {
            node = ConstNode(line, column, scopeId, void 0);
          } else if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.node = node;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ReturnNode_prototype = ReturnNode.prototype = __create(_Node_prototype);
        _ReturnNode_prototype.constructor = ReturnNode;
        ReturnNode.displayName = "ReturnNode";
        if (typeof Node.extended === "function") {
          Node.extended(ReturnNode);
        }
        ReturnNode.cappedName = "Return";
        ReturnNode.argNames = ["node"];
        State.addNodeFactory("return", ReturnNode);
        _ReturnNode_prototype.type = function (o) {
          return this.node.type(o);
        };
        _ReturnNode_prototype.isStatement = function () {
          return true;
        };
        _ReturnNode_prototype._reduce = function (o) {
          var node;
          node = this.node.reduce(o).doWrap(o);
          if (node !== this.node) {
            return ReturnNode(this.line, this.column, this.scopeId, node);
          } else {
            return this;
          }
        };
        _ReturnNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "ReturnNode",
            this.line,
            this.column,
            this.node
          );
        };
        _ReturnNode_prototype.walk = function (f) {
          var node;
          node = f(this.node);
          if (node !== this.node) {
            return ReturnNode(this.line, this.column, this.scopeId, node);
          } else {
            return this;
          }
        };
        _ReturnNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.node, function (_e, node) {
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, node !== _this.node ? ReturnNode(_this.line, _this.column, _this.scopeId, node) : _this);
          });
        };
        return ReturnNode;
      }(Node));
      Node.Root = RootNode = (function (Node) {
        var _Node_prototype, _RootNode_prototype;
        function RootNode(line, column, scopeId, file, body) {
          var _this;
          _this = this instanceof RootNode ? this : __create(_RootNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (file == null) {
            file = void 0;
          } else if (typeof file !== "string") {
            throw TypeError("Expected file to be one of String or undefined, got " + __typeof(file));
          }
          if (!(body instanceof Node)) {
            throw TypeError("Expected body to be a " + __name(Node) + ", got " + __typeof(body));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.file = file;
          _this.body = body;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _RootNode_prototype = RootNode.prototype = __create(_Node_prototype);
        _RootNode_prototype.constructor = RootNode;
        RootNode.displayName = "RootNode";
        if (typeof Node.extended === "function") {
          Node.extended(RootNode);
        }
        RootNode.cappedName = "Root";
        RootNode.argNames = ["file", "body"];
        State.addNodeFactory("root", RootNode);
        _RootNode_prototype.isStatement = function () {
          return true;
        };
        _RootNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "RootNode",
            this.line,
            this.column,
            this.file,
            this.body
          );
        };
        _RootNode_prototype.walk = function (f) {
          var body;
          body = f(this.body);
          if (body !== this.body) {
            return RootNode(
              this.line,
              this.column,
              this.scopeId,
              this.file,
              body
            );
          } else {
            return this;
          }
        };
        _RootNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.body, function (_e, body) {
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, body !== _this.body
              ? RootNode(
                _this.line,
                _this.column,
                _this.scopeId,
                _this.file,
                body
              )
              : _this);
          });
        };
        return RootNode;
      }(Node));
      Node.Spread = SpreadNode = (function (Node) {
        var _Node_prototype, _SpreadNode_prototype;
        function SpreadNode(line, column, scopeId, node) {
          var _this;
          _this = this instanceof SpreadNode ? this : __create(_SpreadNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.node = node;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _SpreadNode_prototype = SpreadNode.prototype = __create(_Node_prototype);
        _SpreadNode_prototype.constructor = SpreadNode;
        SpreadNode.displayName = "SpreadNode";
        if (typeof Node.extended === "function") {
          Node.extended(SpreadNode);
        }
        SpreadNode.cappedName = "Spread";
        SpreadNode.argNames = ["node"];
        State.addNodeFactory("spread", SpreadNode);
        _SpreadNode_prototype._reduce = function (o) {
          var node;
          node = this.node.reduce(o).doWrap(o);
          if (node !== this.node) {
            return SpreadNode(this.line, this.column, this.scopeId, node);
          } else {
            return this;
          }
        };
        _SpreadNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "SpreadNode",
            this.line,
            this.column,
            this.node
          );
        };
        _SpreadNode_prototype.walk = function (f) {
          var node;
          node = f(this.node);
          if (node !== this.node) {
            return SpreadNode(this.line, this.column, this.scopeId, node);
          } else {
            return this;
          }
        };
        _SpreadNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.node, function (_e, node) {
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, node !== _this.node ? SpreadNode(_this.line, _this.column, _this.scopeId, node) : _this);
          });
        };
        return SpreadNode;
      }(Node));
      State.prototype.string = function (index, parts) {
        var _i, _i2, _len, concatOp, current, part;
        if (!__isArray(parts)) {
          throw TypeError("Expected parts to be an Array, got " + __typeof(parts));
        } else {
          for (_i = parts.length; _i--; ) {
            if (!(parts[_i] instanceof Node)) {
              throw TypeError("Expected " + ("parts[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(parts[_i]));
            }
          }
        }
        concatOp = this.macros.getByLabel("stringConcat");
        if (!concatOp) {
          throw Error("Cannot use string interpolation until the string-concat operator has been defined");
        }
        if (parts.length === 0) {
          return ConstNode(index, index, this.scope.id, "");
        } else if (parts.length === 1) {
          return concatOp.func(
            {
              left: ConstNode(index, index, this.scope.id, ""),
              op: "",
              right: parts[0]
            },
            this,
            index,
            this.getLine(index)
          );
        } else {
          current = parts[0];
          for (_i2 = 1, _len = parts.length; _i2 < _len; ++_i2) {
            part = parts[_i2];
            current = concatOp.func(
              { left: current, op: "", right: part },
              this,
              index,
              this.getLine(index)
            );
          }
          return current;
        }
      };
      Node.Super = SuperNode = (function (Node) {
        var _Node_prototype, _SuperNode_prototype;
        function SuperNode(line, column, scopeId, child, args) {
          var _i, _this;
          _this = this instanceof SuperNode ? this : __create(_SuperNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (child == null) {
            child = void 0;
          } else if (!(child instanceof Node)) {
            throw TypeError("Expected child to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(child));
          }
          if (!__isArray(args)) {
            throw TypeError("Expected args to be an Array, got " + __typeof(args));
          } else {
            for (_i = args.length; _i--; ) {
              if (!(args[_i] instanceof Node)) {
                throw TypeError("Expected " + ("args[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(args[_i]));
              }
            }
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.child = child;
          _this.args = args;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _SuperNode_prototype = SuperNode.prototype = __create(_Node_prototype);
        _SuperNode_prototype.constructor = SuperNode;
        SuperNode.displayName = "SuperNode";
        if (typeof Node.extended === "function") {
          Node.extended(SuperNode);
        }
        SuperNode.cappedName = "Super";
        SuperNode.argNames = ["child", "args"];
        State.addNodeFactory("super", SuperNode);
        _SuperNode_prototype._reduce = function (o) {
          var args, child;
          if (this.child != null) {
            child = this.child.reduce(o).doWrap(o);
          } else {
            child = this.child;
          }
          args = map(
            this.args,
            function (node, o) {
              return node.reduce(o).doWrap(o);
            },
            o
          );
          if (child !== this.child || args !== this.args) {
            return SuperNode(
              this.line,
              this.column,
              this.scopeId,
              child,
              args
            );
          } else {
            return this;
          }
        };
        _SuperNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "SuperNode",
            this.line,
            this.column,
            this.child,
            this.args
          );
        };
        _SuperNode_prototype.walk = function (f) {
          var args, child;
          if (this.child instanceof Node) {
            child = f(this.child);
          } else {
            child = this.child;
          }
          args = map(this.args, f);
          if (child !== this.child || args !== this.args) {
            return SuperNode(
              this.line,
              this.column,
              this.scopeId,
              child,
              args
            );
          } else {
            return this;
          }
        };
        _SuperNode_prototype.walkAsync = function (f, callback) {
          var _f, _this;
          _this = this;
          if (this.child instanceof Node) {
            _f = function (next) {
              return f(_this.child, function (_e, child) {
                if (_e != null) {
                  return callback(_e);
                }
                return next(child);
              });
            };
          } else {
            _f = function (next) {
              return next(_this.child);
            };
          }
          return _f(function (child) {
            return mapAsync(_this.args, f, function (_e, args) {
              if (_e != null) {
                return callback(_e);
              }
              return callback(null, child !== _this.child || args !== _this.args
                ? SuperNode(
                  _this.line,
                  _this.column,
                  _this.scopeId,
                  child,
                  args
                )
                : _this);
            });
          });
        };
        return SuperNode;
      }(Node));
      Node.Switch = SwitchNode = (function (Node) {
        var _Node_prototype, _SwitchNode_prototype;
        function SwitchNode(line, column, scopeId, node, cases, defaultCase, label) {
          var _this;
          _this = this instanceof SwitchNode ? this : __create(_SwitchNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          if (!__isArray(cases)) {
            throw TypeError("Expected cases to be an Array, got " + __typeof(cases));
          }
          if (defaultCase == null) {
            defaultCase = void 0;
          } else if (!(defaultCase instanceof Node)) {
            throw TypeError("Expected defaultCase to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(defaultCase));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.node = node;
          _this.cases = cases;
          _this.defaultCase = defaultCase;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _SwitchNode_prototype = SwitchNode.prototype = __create(_Node_prototype);
        _SwitchNode_prototype.constructor = SwitchNode;
        SwitchNode.displayName = "SwitchNode";
        if (typeof Node.extended === "function") {
          Node.extended(SwitchNode);
        }
        SwitchNode.cappedName = "Switch";
        SwitchNode.argNames = ["node", "cases", "defaultCase", "label"];
        State.addNodeFactory("switch", SwitchNode);
        _SwitchNode_prototype.type = function (o) {
          var _ref, _this;
          _this = this;
          if ((_ref = this._type) == null) {
            return this._type = (function () {
              var _arr, _i, _len, case_, type;
              if (_this.defaultCase != null) {
                type = _this.defaultCase.type(o);
              } else {
                type = Type["undefined"];
              }
              for (_arr = __toArray(_this.cases), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                case_ = _arr[_i];
                if (case_.fallthrough) {
                  type = type;
                } else {
                  type = type.union(case_.body.type(o));
                }
              }
              return type;
            }());
          } else {
            return _ref;
          }
        };
        _SwitchNode_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return SwitchNode(
            this.line,
            this.column,
            this.scopeId,
            this.node,
            this.cases,
            this.defaultCase,
            label
          );
        };
        _SwitchNode_prototype.walk = function (f) {
          var cases, defaultCase, label, node;
          node = f(this.node);
          cases = map(this.cases, function (case_) {
            var caseBody, caseNode;
            caseNode = f(case_.node);
            caseBody = f(case_.body);
            if (caseNode !== case_.node || caseBody !== case_.body) {
              return { node: caseNode, body: caseBody, fallthrough: case_.fallthrough };
            } else {
              return case_;
            }
          });
          if (this.defaultCase) {
            defaultCase = f(this.defaultCase);
          } else {
            defaultCase = this.defaultCase;
          }
          if (this.label != null) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (node !== this.node || cases !== this.cases || defaultCase !== this.defaultCase || label !== this.label) {
            return SwitchNode(
              this.line,
              this.column,
              this.scopeId,
              node,
              cases,
              defaultCase,
              label
            );
          } else {
            return this;
          }
        };
        _SwitchNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.node, function (_e, node) {
            if (_e != null) {
              return callback(_e);
            }
            return mapAsync(
              _this.cases,
              function (case_, cb) {
                return f(case_.node, function (_e2, caseNode) {
                  if (_e2 != null) {
                    return cb(_e2);
                  }
                  return f(case_.body, function (_e3, caseBody) {
                    if (_e3 != null) {
                      return cb(_e3);
                    }
                    return cb(null, caseNode !== case_.node || caseBody !== case_.body ? { node: caseNode, body: caseBody, fallthrough: case_.fallthrough } : case_);
                  });
                });
              },
              function (_e2, cases) {
                var _f;
                if (_e2 != null) {
                  return callback(_e2);
                }
                if (_this.defaultCase != null) {
                  _f = function (next) {
                    return f(_this.defaultCase, function (_e3, x) {
                      if (_e3 != null) {
                        return callback(_e3);
                      }
                      return next(x);
                    });
                  };
                } else {
                  _f = function (next) {
                    return next(_this.defaultCase);
                  };
                }
                return _f(function (defaultCase) {
                  var _f;
                  if (_this.label != null) {
                    _f = function (next) {
                      return f(_this.label, function (_e3, x) {
                        if (_e3 != null) {
                          return callback(_e3);
                        }
                        return next(x);
                      });
                    };
                  } else {
                    _f = function (next) {
                      return next(_this.label);
                    };
                  }
                  return _f(function (label) {
                    return callback(null, node !== _this.node || cases !== _this.cases || defaultCase !== _this.defaultCase || label !== _this.label
                      ? SwitchNode(
                        _this.line,
                        _this.column,
                        _this.scopeId,
                        node,
                        cases,
                        defaultCase,
                        label
                      )
                      : _this);
                  });
                });
              }
            );
          });
        };
        _SwitchNode_prototype.isStatement = function () {
          return true;
        };
        _SwitchNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "SwitchNode",
            this.line,
            this.column,
            this.node,
            this.cases,
            this.defaultCase,
            this.label
          );
        };
        return SwitchNode;
      }(Node));
      Node.SyntaxChoice = SyntaxChoiceNode = (function (Node) {
        var _Node_prototype, _SyntaxChoiceNode_prototype;
        function SyntaxChoiceNode(line, column, scopeId, choices) {
          var _i, _this;
          _this = this instanceof SyntaxChoiceNode ? this : __create(_SyntaxChoiceNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!__isArray(choices)) {
            throw TypeError("Expected choices to be an Array, got " + __typeof(choices));
          } else {
            for (_i = choices.length; _i--; ) {
              if (!(choices[_i] instanceof Node)) {
                throw TypeError("Expected " + ("choices[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(choices[_i]));
              }
            }
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.choices = choices;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _SyntaxChoiceNode_prototype = SyntaxChoiceNode.prototype = __create(_Node_prototype);
        _SyntaxChoiceNode_prototype.constructor = SyntaxChoiceNode;
        SyntaxChoiceNode.displayName = "SyntaxChoiceNode";
        if (typeof Node.extended === "function") {
          Node.extended(SyntaxChoiceNode);
        }
        SyntaxChoiceNode.cappedName = "SyntaxChoice";
        SyntaxChoiceNode.argNames = ["choices"];
        State.addNodeFactory("syntaxChoice", SyntaxChoiceNode);
        _SyntaxChoiceNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "SyntaxChoiceNode",
            this.line,
            this.column,
            this.choices
          );
        };
        _SyntaxChoiceNode_prototype.walk = function (f) {
          var choices;
          choices = map(this.choices, f);
          if (choices !== this.choices) {
            return SyntaxChoiceNode(this.line, this.column, this.scopeId, choices);
          } else {
            return this;
          }
        };
        _SyntaxChoiceNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return mapAsync(this.choices, f, function (_e, choices) {
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, choices !== _this.choices ? SyntaxChoiceNode(_this.line, _this.column, _this.scopeId, choices) : _this);
          });
        };
        return SyntaxChoiceNode;
      }(Node));
      Node.SyntaxMany = SyntaxManyNode = (function (Node) {
        var _Node_prototype, _SyntaxManyNode_prototype;
        function SyntaxManyNode(line, column, scopeId, inner, multiplier) {
          var _this;
          _this = this instanceof SyntaxManyNode ? this : __create(_SyntaxManyNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(inner instanceof Node)) {
            throw TypeError("Expected inner to be a " + __name(Node) + ", got " + __typeof(inner));
          }
          if (typeof multiplier !== "string") {
            throw TypeError("Expected multiplier to be a String, got " + __typeof(multiplier));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.inner = inner;
          _this.multiplier = multiplier;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _SyntaxManyNode_prototype = SyntaxManyNode.prototype = __create(_Node_prototype);
        _SyntaxManyNode_prototype.constructor = SyntaxManyNode;
        SyntaxManyNode.displayName = "SyntaxManyNode";
        if (typeof Node.extended === "function") {
          Node.extended(SyntaxManyNode);
        }
        SyntaxManyNode.cappedName = "SyntaxMany";
        SyntaxManyNode.argNames = ["inner", "multiplier"];
        State.addNodeFactory("syntaxMany", SyntaxManyNode);
        _SyntaxManyNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "SyntaxManyNode",
            this.line,
            this.column,
            this.inner,
            this.multiplier
          );
        };
        _SyntaxManyNode_prototype.walk = function (f) {
          var inner;
          inner = f(this.inner);
          if (inner !== this.inner) {
            return SyntaxManyNode(
              this.line,
              this.column,
              this.scopeId,
              inner,
              this.multiplier
            );
          } else {
            return this;
          }
        };
        _SyntaxManyNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.inner, function (_e, inner) {
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, inner !== _this.inner
              ? SyntaxManyNode(
                _this.line,
                _this.column,
                _this.scopeId,
                inner,
                _this.multiplier
              )
              : _this);
          });
        };
        return SyntaxManyNode;
      }(Node));
      Node.SyntaxParam = SyntaxParamNode = (function (Node) {
        var _Node_prototype, _SyntaxParamNode_prototype;
        function SyntaxParamNode(line, column, scopeId, ident, asType) {
          var _this;
          _this = this instanceof SyntaxParamNode ? this : __create(_SyntaxParamNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(ident instanceof Node)) {
            throw TypeError("Expected ident to be a " + __name(Node) + ", got " + __typeof(ident));
          }
          if (asType == null) {
            asType = void 0;
          } else if (!(asType instanceof Node)) {
            throw TypeError("Expected asType to be one of " + (__name(Node) + " or undefined") + ", got " + __typeof(asType));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.ident = ident;
          _this.asType = asType;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _SyntaxParamNode_prototype = SyntaxParamNode.prototype = __create(_Node_prototype);
        _SyntaxParamNode_prototype.constructor = SyntaxParamNode;
        SyntaxParamNode.displayName = "SyntaxParamNode";
        if (typeof Node.extended === "function") {
          Node.extended(SyntaxParamNode);
        }
        SyntaxParamNode.cappedName = "SyntaxParam";
        SyntaxParamNode.argNames = ["ident", "asType"];
        State.addNodeFactory("syntaxParam", SyntaxParamNode);
        _SyntaxParamNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "SyntaxParamNode",
            this.line,
            this.column,
            this.ident,
            this.asType
          );
        };
        _SyntaxParamNode_prototype.walk = function (f) {
          var asType, ident;
          ident = f(this.ident);
          if (this.asType instanceof Node) {
            asType = f(this.asType);
          } else {
            asType = this.asType;
          }
          if (ident !== this.ident || asType !== this.asType) {
            return SyntaxParamNode(
              this.line,
              this.column,
              this.scopeId,
              ident,
              asType
            );
          } else {
            return this;
          }
        };
        _SyntaxParamNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.ident, function (_e, ident) {
            var _f;
            if (_e != null) {
              return callback(_e);
            }
            if (_this.asType instanceof Node) {
              _f = function (next) {
                return f(_this.asType, function (_e2, asType) {
                  if (_e2 != null) {
                    return callback(_e2);
                  }
                  return next(asType);
                });
              };
            } else {
              _f = function (next) {
                return next(_this.asType);
              };
            }
            return _f(function (asType) {
              return callback(null, ident !== _this.ident || asType !== _this.asType
                ? SyntaxParamNode(
                  _this.line,
                  _this.column,
                  _this.scopeId,
                  ident,
                  asType
                )
                : _this);
            });
          });
        };
        return SyntaxParamNode;
      }(Node));
      Node.SyntaxSequence = SyntaxSequenceNode = (function (Node) {
        var _Node_prototype, _SyntaxSequenceNode_prototype;
        function SyntaxSequenceNode(line, column, scopeId, params) {
          var _i, _this;
          _this = this instanceof SyntaxSequenceNode ? this : __create(_SyntaxSequenceNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!__isArray(params)) {
            throw TypeError("Expected params to be an Array, got " + __typeof(params));
          } else {
            for (_i = params.length; _i--; ) {
              if (!(params[_i] instanceof Node)) {
                throw TypeError("Expected " + ("params[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(params[_i]));
              }
            }
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.params = params;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _SyntaxSequenceNode_prototype = SyntaxSequenceNode.prototype = __create(_Node_prototype);
        _SyntaxSequenceNode_prototype.constructor = SyntaxSequenceNode;
        SyntaxSequenceNode.displayName = "SyntaxSequenceNode";
        if (typeof Node.extended === "function") {
          Node.extended(SyntaxSequenceNode);
        }
        SyntaxSequenceNode.cappedName = "SyntaxSequence";
        SyntaxSequenceNode.argNames = ["params"];
        State.addNodeFactory("syntaxSequence", SyntaxSequenceNode);
        _SyntaxSequenceNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "SyntaxSequenceNode",
            this.line,
            this.column,
            this.params
          );
        };
        _SyntaxSequenceNode_prototype.walk = function (f) {
          var params;
          params = map(this.params, f);
          if (params !== this.params) {
            return SyntaxSequenceNode(this.line, this.column, this.scopeId, params);
          } else {
            return this;
          }
        };
        _SyntaxSequenceNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return mapAsync(this.params, f, function (_e, params) {
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, params !== _this.params ? SyntaxSequenceNode(_this.line, _this.column, _this.scopeId, params) : _this);
          });
        };
        return SyntaxSequenceNode;
      }(Node));
      Node.This = ThisNode = (function (Node) {
        var _Node_prototype, _ThisNode_prototype;
        function ThisNode(line, column, scopeId) {
          var _this;
          _this = this instanceof ThisNode ? this : __create(_ThisNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ThisNode_prototype = ThisNode.prototype = __create(_Node_prototype);
        _ThisNode_prototype.constructor = ThisNode;
        ThisNode.displayName = "ThisNode";
        if (typeof Node.extended === "function") {
          Node.extended(ThisNode);
        }
        ThisNode.cappedName = "This";
        ThisNode.argNames = [];
        State.addNodeFactory("this", ThisNode);
        _ThisNode_prototype.cacheable = false;
        _ThisNode_prototype._isNoop = function () {
          return true;
        };
        _ThisNode_prototype.inspect = function (depth) {
          return inspectHelper(depth, "ThisNode", this.line, this.column);
        };
        return ThisNode;
      }(Node));
      Node.Throw = ThrowNode = (function (Node) {
        var _Node_prototype, _ThrowNode_prototype;
        function ThrowNode(line, column, scopeId, node) {
          var _this;
          _this = this instanceof ThrowNode ? this : __create(_ThrowNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.node = node;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _ThrowNode_prototype = ThrowNode.prototype = __create(_Node_prototype);
        _ThrowNode_prototype.constructor = ThrowNode;
        ThrowNode.displayName = "ThrowNode";
        if (typeof Node.extended === "function") {
          Node.extended(ThrowNode);
        }
        ThrowNode.cappedName = "Throw";
        ThrowNode.argNames = ["node"];
        State.addNodeFactory("throw", ThrowNode);
        _ThrowNode_prototype.type = function () {
          return Type.none;
        };
        _ThrowNode_prototype.isStatement = function () {
          return true;
        };
        _ThrowNode_prototype._reduce = function (o) {
          var node;
          node = this.node.reduce(o).doWrap(o);
          if (node !== this.node) {
            return ThrowNode(this.line, this.column, this.scopeId, node);
          } else {
            return this;
          }
        };
        _ThrowNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "ThrowNode",
            this.line,
            this.column,
            this.node
          );
        };
        _ThrowNode_prototype.walk = function (f) {
          var node;
          node = f(this.node);
          if (node !== this.node) {
            return ThrowNode(this.line, this.column, this.scopeId, node);
          } else {
            return this;
          }
        };
        _ThrowNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.node, function (_e, node) {
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, node !== _this.node ? ThrowNode(_this.line, _this.column, _this.scopeId, node) : _this);
          });
        };
        return ThrowNode;
      }(Node));
      Node.Tmp = TmpNode = (function (Node) {
        var _Node_prototype, _TmpNode_prototype;
        function TmpNode(line, column, scopeId, id, name, _type) {
          var _this;
          _this = this instanceof TmpNode ? this : __create(_TmpNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (typeof id !== "number") {
            throw TypeError("Expected id to be a Number, got " + __typeof(id));
          }
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          if (_type == null) {
            _type = Type.any;
          } else if (!(_type instanceof Type)) {
            throw TypeError("Expected _type to be a " + __name(Type) + ", got " + __typeof(_type));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.id = id;
          _this.name = name;
          _this._type = _type;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _TmpNode_prototype = TmpNode.prototype = __create(_Node_prototype);
        _TmpNode_prototype.constructor = TmpNode;
        TmpNode.displayName = "TmpNode";
        if (typeof Node.extended === "function") {
          Node.extended(TmpNode);
        }
        TmpNode.cappedName = "Tmp";
        TmpNode.argNames = ["id", "name", "_type"];
        State.addNodeFactory("tmp", TmpNode);
        _TmpNode_prototype.cacheable = false;
        _TmpNode_prototype.type = function () {
          return this._type;
        };
        _TmpNode_prototype._isNoop = function () {
          return true;
        };
        _TmpNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "TmpNode",
            this.line,
            this.column,
            this.id,
            this.name,
            this._type
          );
        };
        _TmpNode_prototype.walk = function (f) {
          return this;
        };
        _TmpNode_prototype.walkAsync = function (f, callback) {
          return callback(null, this);
        };
        return TmpNode;
      }(Node));
      Node.TmpWrapper = TmpWrapperNode = (function (Node) {
        var _Node_prototype, _TmpWrapperNode_prototype;
        function TmpWrapperNode(line, column, scopeId, node, tmps) {
          var _this;
          _this = this instanceof TmpWrapperNode ? this : __create(_TmpWrapperNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          if (!__isArray(tmps)) {
            throw TypeError("Expected tmps to be an Array, got " + __typeof(tmps));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.node = node;
          _this.tmps = tmps;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _TmpWrapperNode_prototype = TmpWrapperNode.prototype = __create(_Node_prototype);
        _TmpWrapperNode_prototype.constructor = TmpWrapperNode;
        TmpWrapperNode.displayName = "TmpWrapperNode";
        if (typeof Node.extended === "function") {
          Node.extended(TmpWrapperNode);
        }
        TmpWrapperNode.cappedName = "TmpWrapper";
        TmpWrapperNode.argNames = ["node", "tmps"];
        State.addNodeFactory("tmpWrapper", TmpWrapperNode);
        _TmpWrapperNode_prototype.type = function (o) {
          return this.node.type(o);
        };
        _TmpWrapperNode_prototype.withLabel = function (label, o) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return TmpWrapperNode(
            this.line,
            this.column,
            this.scopeId,
            this.node.withLabel(label, o),
            this.tmps
          );
        };
        _TmpWrapperNode_prototype._reduce = function (o) {
          var node;
          node = this.node.reduce(o);
          if (this.tmps.length === 0) {
            return node;
          } else if (this.node !== node) {
            return TmpWrapperNode(
              this.line,
              this.column,
              this.scopeId,
              node,
              this.tmps
            );
          } else {
            return this;
          }
        };
        _TmpWrapperNode_prototype.isStatement = function () {
          return this.node.isStatement();
        };
        _TmpWrapperNode_prototype._isNoop = function (o) {
          return this.node.isNoop(o);
        };
        _TmpWrapperNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "TmpWrapperNode",
            this.line,
            this.column,
            this.node,
            this.tmps
          );
        };
        _TmpWrapperNode_prototype.walk = function (f) {
          var node;
          node = f(this.node);
          if (node !== this.node) {
            return TmpWrapperNode(
              this.line,
              this.column,
              this.scopeId,
              node,
              this.tmps
            );
          } else {
            return this;
          }
        };
        _TmpWrapperNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.node, function (_e, node) {
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, node !== _this.node
              ? TmpWrapperNode(
                _this.line,
                _this.column,
                _this.scopeId,
                node,
                _this.tmps
              )
              : _this);
          });
        };
        return TmpWrapperNode;
      }(Node));
      Node.TryCatch = TryCatchNode = (function (Node) {
        var _Node_prototype, _TryCatchNode_prototype;
        function TryCatchNode(line, column, scopeId, tryBody, catchIdent, catchBody, label) {
          var _this;
          _this = this instanceof TryCatchNode ? this : __create(_TryCatchNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(tryBody instanceof Node)) {
            throw TypeError("Expected tryBody to be a " + __name(Node) + ", got " + __typeof(tryBody));
          }
          if (!(catchIdent instanceof Node)) {
            throw TypeError("Expected catchIdent to be a " + __name(Node) + ", got " + __typeof(catchIdent));
          }
          if (!(catchBody instanceof Node)) {
            throw TypeError("Expected catchBody to be a " + __name(Node) + ", got " + __typeof(catchBody));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.tryBody = tryBody;
          _this.catchIdent = catchIdent;
          _this.catchBody = catchBody;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _TryCatchNode_prototype = TryCatchNode.prototype = __create(_Node_prototype);
        _TryCatchNode_prototype.constructor = TryCatchNode;
        TryCatchNode.displayName = "TryCatchNode";
        if (typeof Node.extended === "function") {
          Node.extended(TryCatchNode);
        }
        TryCatchNode.cappedName = "TryCatch";
        TryCatchNode.argNames = ["tryBody", "catchIdent", "catchBody", "label"];
        State.addNodeFactory("tryCatch", TryCatchNode);
        _TryCatchNode_prototype.type = function (o) {
          var _ref;
          if ((_ref = this._type) == null) {
            return this._type = this.tryBody.type(o).union(this.catchBody.type(o));
          } else {
            return _ref;
          }
        };
        _TryCatchNode_prototype.isStatement = function () {
          return true;
        };
        _TryCatchNode_prototype._isNoop = function (o) {
          return this.tryBody.isNoop(o);
        };
        _TryCatchNode_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return TryCatchNode(
            this.line,
            this.column,
            this.scopeId,
            this.tryBody,
            this.catchIdent,
            this.catchBody,
            label
          );
        };
        _TryCatchNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "TryCatchNode",
            this.line,
            this.column,
            this.tryBody,
            this.catchIdent,
            this.catchBody,
            this.label
          );
        };
        _TryCatchNode_prototype.walk = function (f) {
          var catchBody, catchIdent, label, tryBody;
          tryBody = f(this.tryBody);
          catchIdent = f(this.catchIdent);
          catchBody = f(this.catchBody);
          if (this.label instanceof Node) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (tryBody !== this.tryBody || catchIdent !== this.catchIdent || catchBody !== this.catchBody || label !== this.label) {
            return TryCatchNode(
              this.line,
              this.column,
              this.scopeId,
              tryBody,
              catchIdent,
              catchBody,
              label
            );
          } else {
            return this;
          }
        };
        _TryCatchNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.tryBody, function (_e, tryBody) {
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.catchIdent, function (_e2, catchIdent) {
              if (_e2 != null) {
                return callback(_e2);
              }
              return f(_this.catchBody, function (_e3, catchBody) {
                var _f;
                if (_e3 != null) {
                  return callback(_e3);
                }
                if (_this.label instanceof Node) {
                  _f = function (next) {
                    return f(_this.label, function (_e4, label) {
                      if (_e4 != null) {
                        return callback(_e4);
                      }
                      return next(label);
                    });
                  };
                } else {
                  _f = function (next) {
                    return next(_this.label);
                  };
                }
                return _f(function (label) {
                  return callback(null, tryBody !== _this.tryBody || catchIdent !== _this.catchIdent || catchBody !== _this.catchBody || label !== _this.label
                    ? TryCatchNode(
                      _this.line,
                      _this.column,
                      _this.scopeId,
                      tryBody,
                      catchIdent,
                      catchBody,
                      label
                    )
                    : _this);
                });
              });
            });
          });
        };
        return TryCatchNode;
      }(Node));
      Node.TryFinally = TryFinallyNode = (function (Node) {
        var _Node_prototype, _TryFinallyNode_prototype;
        function TryFinallyNode(line, column, scopeId, tryBody, finallyBody, label) {
          var _this;
          _this = this instanceof TryFinallyNode ? this : __create(_TryFinallyNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(tryBody instanceof Node)) {
            throw TypeError("Expected tryBody to be a " + __name(Node) + ", got " + __typeof(tryBody));
          }
          if (!(finallyBody instanceof Node)) {
            throw TypeError("Expected finallyBody to be a " + __name(Node) + ", got " + __typeof(finallyBody));
          }
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.tryBody = tryBody;
          _this.finallyBody = finallyBody;
          _this.label = label;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _TryFinallyNode_prototype = TryFinallyNode.prototype = __create(_Node_prototype);
        _TryFinallyNode_prototype.constructor = TryFinallyNode;
        TryFinallyNode.displayName = "TryFinallyNode";
        if (typeof Node.extended === "function") {
          Node.extended(TryFinallyNode);
        }
        TryFinallyNode.cappedName = "TryFinally";
        TryFinallyNode.argNames = ["tryBody", "finallyBody", "label"];
        State.addNodeFactory("tryFinally", TryFinallyNode);
        _TryFinallyNode_prototype.type = function (o) {
          return this.tryBody.type(o);
        };
        _TryFinallyNode_prototype._reduce = function (o) {
          var finallyBody, label, tryBody;
          tryBody = this.tryBody.reduce(o);
          finallyBody = this.finallyBody.reduce(o);
          if (this.label != null) {
            label = this.label.reduce(o);
          } else {
            label = this.label;
          }
          if (finallyBody instanceof NothingNode) {
            return BlockNode(this.line, this.column, this.scopeIf([tryBody], label)).reduce(o);
          } else if (tryBody instanceof NothingNode) {
            return BlockNode(this.line, this.column, this.scopeIf([finallyBody], label)).reduce(o);
          } else if (tryBody !== this.tryBody || finallyBody !== this.finallyBody || label !== this.label) {
            return TryFinallyNode(
              this.line,
              this.column,
              this.scopeId,
              tryBody,
              finallyBody,
              label
            );
          } else {
            return this;
          }
        };
        _TryFinallyNode_prototype.isStatement = function () {
          return true;
        };
        _TryFinallyNode_prototype._isNoop = function (o) {
          var _ref;
          if ((_ref = this.__isNoop) == null) {
            return this.__isNoop = this.tryBody.isNoop(o) && this.finallyBody.isNoop();
          } else {
            return _ref;
          }
        };
        _TryFinallyNode_prototype.withLabel = function (label) {
          if (label == null) {
            label = null;
          } else if (!(label instanceof IdentNode) && !(label instanceof TmpNode)) {
            throw TypeError("Expected label to be one of " + (__name(IdentNode) + " or " + __name(TmpNode) + " or null") + ", got " + __typeof(label));
          }
          return TryFinallyNode(
            this.line,
            this.column,
            this.scopeId,
            this.tryBody,
            this.finallyBody,
            label
          );
        };
        _TryFinallyNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "TryFinallyNode",
            this.line,
            this.column,
            this.tryBody,
            this.finallyBody,
            this.label
          );
        };
        _TryFinallyNode_prototype.walk = function (f) {
          var finallyBody, label, tryBody;
          tryBody = f(this.tryBody);
          finallyBody = f(this.finallyBody);
          if (this.label instanceof Node) {
            label = f(this.label);
          } else {
            label = this.label;
          }
          if (tryBody !== this.tryBody || finallyBody !== this.finallyBody || label !== this.label) {
            return TryFinallyNode(
              this.line,
              this.column,
              this.scopeId,
              tryBody,
              finallyBody,
              label
            );
          } else {
            return this;
          }
        };
        _TryFinallyNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.tryBody, function (_e, tryBody) {
            if (_e != null) {
              return callback(_e);
            }
            return f(_this.finallyBody, function (_e2, finallyBody) {
              var _f;
              if (_e2 != null) {
                return callback(_e2);
              }
              if (_this.label instanceof Node) {
                _f = function (next) {
                  return f(_this.label, function (_e3, label) {
                    if (_e3 != null) {
                      return callback(_e3);
                    }
                    return next(label);
                  });
                };
              } else {
                _f = function (next) {
                  return next(_this.label);
                };
              }
              return _f(function (label) {
                return callback(null, tryBody !== _this.tryBody || finallyBody !== _this.finallyBody || label !== _this.label
                  ? TryFinallyNode(
                    _this.line,
                    _this.column,
                    _this.scopeId,
                    tryBody,
                    finallyBody,
                    label
                  )
                  : _this);
              });
            });
          });
        };
        return TryFinallyNode;
      }(Node));
      Node.TypeFunction = TypeFunctionNode = (function (Node) {
        var _Node_prototype, _TypeFunctionNode_prototype;
        function TypeFunctionNode(line, column, scopeId, returnType) {
          var _this;
          _this = this instanceof TypeFunctionNode ? this : __create(_TypeFunctionNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(returnType instanceof Node)) {
            throw TypeError("Expected returnType to be a " + __name(Node) + ", got " + __typeof(returnType));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.returnType = returnType;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _TypeFunctionNode_prototype = TypeFunctionNode.prototype = __create(_Node_prototype);
        _TypeFunctionNode_prototype.constructor = TypeFunctionNode;
        TypeFunctionNode.displayName = "TypeFunctionNode";
        if (typeof Node.extended === "function") {
          Node.extended(TypeFunctionNode);
        }
        TypeFunctionNode.cappedName = "TypeFunction";
        TypeFunctionNode.argNames = ["returnType"];
        State.addNodeFactory("typeFunction", TypeFunctionNode);
        _TypeFunctionNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "TypeFunctionNode",
            this.line,
            this.column,
            this.returnType
          );
        };
        _TypeFunctionNode_prototype.walk = function (f) {
          var returnType;
          returnType = f(this.returnType);
          if (returnType !== this.returnType) {
            return TypeFunctionNode(this.line, this.column, this.scopeId, returnType);
          } else {
            return this;
          }
        };
        _TypeFunctionNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.returnType, function (_e, returnType) {
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, returnType !== _this.returnType ? TypeFunctionNode(_this.line, _this.column, _this.scopeId, returnType) : _this);
          });
        };
        return TypeFunctionNode;
      }(Node));
      Node.TypeGeneric = TypeGenericNode = (function (Node) {
        var _Node_prototype, _TypeGenericNode_prototype;
        function TypeGenericNode(line, column, scopeId, basetype, args) {
          var _i, _this;
          _this = this instanceof TypeGenericNode ? this : __create(_TypeGenericNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(basetype instanceof Node)) {
            throw TypeError("Expected basetype to be a " + __name(Node) + ", got " + __typeof(basetype));
          }
          if (!__isArray(args)) {
            throw TypeError("Expected args to be an Array, got " + __typeof(args));
          } else {
            for (_i = args.length; _i--; ) {
              if (!(args[_i] instanceof Node)) {
                throw TypeError("Expected " + ("args[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(args[_i]));
              }
            }
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.basetype = basetype;
          _this.args = args;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _TypeGenericNode_prototype = TypeGenericNode.prototype = __create(_Node_prototype);
        _TypeGenericNode_prototype.constructor = TypeGenericNode;
        TypeGenericNode.displayName = "TypeGenericNode";
        if (typeof Node.extended === "function") {
          Node.extended(TypeGenericNode);
        }
        TypeGenericNode.cappedName = "TypeGeneric";
        TypeGenericNode.argNames = ["basetype", "args"];
        State.addNodeFactory("typeGeneric", TypeGenericNode);
        _TypeGenericNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "TypeGenericNode",
            this.line,
            this.column,
            this.basetype,
            this.args
          );
        };
        _TypeGenericNode_prototype.walk = function (f) {
          var args, basetype;
          basetype = f(this.basetype);
          args = map(this.args, f);
          if (basetype !== this.basetype || args !== this.args) {
            return TypeGenericNode(
              this.line,
              this.column,
              this.scopeId,
              basetype,
              args
            );
          } else {
            return this;
          }
        };
        _TypeGenericNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.basetype, function (_e, basetype) {
            if (_e != null) {
              return callback(_e);
            }
            return mapAsync(_this.args, f, function (_e2, args) {
              if (_e2 != null) {
                return callback(_e2);
              }
              return callback(null, basetype !== _this.basetype || args !== _this.args
                ? TypeGenericNode(
                  _this.line,
                  _this.column,
                  _this.scopeId,
                  basetype,
                  args
                )
                : _this);
            });
          });
        };
        return TypeGenericNode;
      }(Node));
      Node.TypeObject = TypeObjectNode = (function (Node) {
        var _Node_prototype, _TypeObjectNode_prototype;
        function TypeObjectNode(line, column, scopeId, pairs) {
          var _this;
          _this = this instanceof TypeObjectNode ? this : __create(_TypeObjectNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!__isArray(pairs)) {
            throw TypeError("Expected pairs to be an Array, got " + __typeof(pairs));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.pairs = pairs;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _TypeObjectNode_prototype = TypeObjectNode.prototype = __create(_Node_prototype);
        _TypeObjectNode_prototype.constructor = TypeObjectNode;
        TypeObjectNode.displayName = "TypeObjectNode";
        if (typeof Node.extended === "function") {
          Node.extended(TypeObjectNode);
        }
        TypeObjectNode.cappedName = "TypeObject";
        TypeObjectNode.argNames = ["pairs"];
        State.addNodeFactory("typeObject", TypeObjectNode);
        function reducePair(pair, o) {
          var key, value;
          key = pair.key.reduce(o);
          value = pair.value.reduce(o);
          if (key !== pair.key || value !== pair.value) {
            return { key: key, value: value };
          } else {
            return pair;
          }
        }
        _TypeObjectNode_prototype._reduce = function (o) {
          var pairs;
          pairs = map(this.pairs, reducePair, o);
          if (pairs !== this.pairs) {
            return TypeObjectNode(this.line, this.column, this.scopeId, pairs);
          } else {
            return this;
          }
        };
        _TypeObjectNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "TypeObjectNode",
            this.line,
            this.column,
            this.pairs
          );
        };
        _TypeObjectNode_prototype.walk = function (f) {
          return this;
        };
        _TypeObjectNode_prototype.walkAsync = function (f, callback) {
          return callback(null, this);
        };
        return TypeObjectNode;
      }(Node));
      Node.TypeUnion = TypeUnionNode = (function (Node) {
        var _Node_prototype, _TypeUnionNode_prototype;
        function TypeUnionNode(line, column, scopeId, types) {
          var _i, _this;
          _this = this instanceof TypeUnionNode ? this : __create(_TypeUnionNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!__isArray(types)) {
            throw TypeError("Expected types to be an Array, got " + __typeof(types));
          } else {
            for (_i = types.length; _i--; ) {
              if (!(types[_i] instanceof Node)) {
                throw TypeError("Expected " + ("types[" + _i + "]") + " to be a " + __name(Node) + ", got " + __typeof(types[_i]));
              }
            }
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.types = types;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _TypeUnionNode_prototype = TypeUnionNode.prototype = __create(_Node_prototype);
        _TypeUnionNode_prototype.constructor = TypeUnionNode;
        TypeUnionNode.displayName = "TypeUnionNode";
        if (typeof Node.extended === "function") {
          Node.extended(TypeUnionNode);
        }
        TypeUnionNode.cappedName = "TypeUnion";
        TypeUnionNode.argNames = ["types"];
        State.addNodeFactory("typeUnion", TypeUnionNode);
        _TypeUnionNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "TypeUnionNode",
            this.line,
            this.column,
            this.types
          );
        };
        _TypeUnionNode_prototype.walk = function (f) {
          var types;
          types = map(this.types, f);
          if (types !== this.types) {
            return TypeUnionNode(this.line, this.column, this.scopeId, types);
          } else {
            return this;
          }
        };
        _TypeUnionNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return mapAsync(this.types, f, function (_e, types) {
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, types !== _this.types ? TypeUnionNode(_this.line, _this.column, _this.scopeId, types) : _this);
          });
        };
        return TypeUnionNode;
      }(Node));
      Node.Unary = UnaryNode = (function (Node) {
        var _Node_prototype, _UnaryNode_prototype;
        function UnaryNode(line, column, scopeId, op, node) {
          var _this;
          _this = this instanceof UnaryNode ? this : __create(_UnaryNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (typeof op !== "string") {
            throw TypeError("Expected op to be a String, got " + __typeof(op));
          }
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.op = op;
          _this.node = node;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _UnaryNode_prototype = UnaryNode.prototype = __create(_Node_prototype);
        _UnaryNode_prototype.constructor = UnaryNode;
        UnaryNode.displayName = "UnaryNode";
        if (typeof Node.extended === "function") {
          Node.extended(UnaryNode);
        }
        UnaryNode.cappedName = "Unary";
        UnaryNode.argNames = ["op", "node"];
        State.addNodeFactory("unary", UnaryNode);
        _UnaryNode_prototype.type = (function () {
          var ops;
          ops = {
            "-": Type.number,
            "+": Type.number,
            "--": Type.number,
            "++": Type.number,
            "--post": Type.number,
            "++post": Type.number,
            "!": Type.boolean,
            "~": Type.number,
            "typeof": Type.string,
            "delete": Type.boolean
          };
          return function () {
            var _ref;
            return (__owns.call(ops, _ref = this.op) ? ops[_ref] : void 0) || Type.any;
          };
        }());
        _UnaryNode_prototype._reduce = (function () {
          var constOps, nonconstOps;
          constOps = {
            "-": function (x) {
              return -x;
            },
            "+": function (x) {
              return +x;
            },
            "!": function (x) {
              return !x;
            },
            "~": function (x) {
              return ~x;
            },
            "typeof": function (x) {
              return typeof x;
            }
          };
          nonconstOps = {
            "+": function (node, o) {
              if (node.type(o).isSubsetOf(Type.number)) {
                return node;
              }
            },
            "-": function (node) {
              var _ref;
              if (node instanceof UnaryNode) {
                if ((_ref = node.op) === "-" || _ref === "+") {
                  return UnaryNode(
                    this.line,
                    this.column,
                    this.scopeId,
                    node.op === "-" ? "+" : "-",
                    node.node
                  );
                }
              } else if (node instanceof BinaryNode) {
                if ((_ref = node.op) === "-" || _ref === "+") {
                  return BinaryNode(
                    this.line,
                    this.column,
                    this.scopeId,
                    node.left,
                    node.op === "-" ? "+" : "-",
                    node.right
                  );
                } else if ((_ref = node.op) === "*" || _ref === "/") {
                  return BinaryNode(
                    this.line,
                    this.column,
                    this.scopeId,
                    UnaryNode(
                      node.left.line,
                      node.left.column,
                      node.left.scopeId,
                      "-",
                      node.left
                    ),
                    node.op,
                    node.right
                  );
                }
              }
            },
            "!": (function () {
              var invertibleBinaryOps;
              invertibleBinaryOps = {
                "<": ">=",
                "<=": ">",
                ">": "<=",
                ">=": "<",
                "==": "!=",
                "!=": "==",
                "===": "!==",
                "!==": "===",
                "&&": function (x, y) {
                  return BinaryNode(
                    this.line,
                    this.column,
                    this.scopeId,
                    UnaryNode(
                      x.line,
                      x.column,
                      x.scopeId,
                      "!",
                      x
                    ),
                    "||",
                    UnaryNode(
                      y.line,
                      y.column,
                      y.scopeId,
                      "!",
                      y
                    )
                  );
                },
                "||": function (x, y) {
                  return BinaryNode(
                    this.line,
                    this.column,
                    this.scopeId,
                    UnaryNode(
                      x.line,
                      x.column,
                      x.scopeId,
                      "!",
                      x
                    ),
                    "&&",
                    UnaryNode(
                      y.line,
                      y.column,
                      y.scopeId,
                      "!",
                      y
                    )
                  );
                }
              };
              return function (node, o) {
                var invert;
                if (node instanceof UnaryNode) {
                  if (node.op === "!" && node.node.type(o).isSubsetOf(Type.boolean)) {
                    return node.node;
                  }
                } else if (node instanceof BinaryNode && __owns.call(invertibleBinaryOps, node.op)) {
                  invert = invertibleBinaryOps[node.op];
                  if (typeof invert === "function") {
                    return invert.call(this, node.left, node.right);
                  } else {
                    return BinaryNode(
                      this.line,
                      this.column,
                      this.scopeId,
                      node.left,
                      invert,
                      node.right
                    );
                  }
                }
              };
            }()),
            "typeof": (function () {
              var objectType;
              objectType = Type["null"].union(Type.object).union(Type.arrayLike).union(Type.regexp).union(Type.date).union(Type.error);
              return function (node, o) {
                var type;
                if (node.isNoop(o)) {
                  type = node.type(o);
                  if (type.isSubsetOf(Type.number)) {
                    return ConstNode(this.line, this.column, this.scopeId, "number");
                  } else if (type.isSubsetOf(Type.string)) {
                    return ConstNode(this.line, this.column, this.scopeId, "string");
                  } else if (type.isSubsetOf(Type.boolean)) {
                    return ConstNode(this.line, this.column, this.scopeId, "boolean");
                  } else if (type.isSubsetOf(Type["undefined"])) {
                    return ConstNode(this.line, this.column, this.scopeId, "undefined");
                  } else if (type.isSubsetOf(Type["function"])) {
                    return ConstNode(this.line, this.column, this.scopeId, "function");
                  } else if (type.isSubsetOf(objectType)) {
                    return ConstNode(this.line, this.column, this.scopeId, "object");
                  }
                }
              };
            }())
          };
          return function (o) {
            var node, op, result;
            node = this.node.reduce(o).doWrap(o);
            op = this.op;
            if (node.isConst() && __owns.call(constOps, op)) {
              return ConstNode(this.line, this.column, this.scopeId, constOps[op](node.constValue()));
            }
            if (__owns.call(nonconstOps, op)) {
              result = nonconstOps[op].call(this, node, o);
            }
            if (result != null) {
              return result.reduce(o);
            }
            if (node !== this.node) {
              return UnaryNode(
                this.line,
                this.column,
                this.scopeId,
                op,
                node
              );
            } else {
              return this;
            }
          };
        }());
        _UnaryNode_prototype._isNoop = function (o) {
          var _ref, _ref2;
          if ((_ref = this.__isNoop) == null) {
            return this.__isNoop = (_ref2 = this.op) !== "++" && _ref2 !== "--" && _ref2 !== "++post" && _ref2 !== "--post" && _ref2 !== "delete" && this.node.isNoop(o);
          } else {
            return _ref;
          }
        };
        _UnaryNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "UnaryNode",
            this.line,
            this.column,
            this.op,
            this.node
          );
        };
        _UnaryNode_prototype.walk = function (f) {
          var node;
          node = f(this.node);
          if (node !== this.node) {
            return UnaryNode(
              this.line,
              this.column,
              this.scopeId,
              this.op,
              node
            );
          } else {
            return this;
          }
        };
        _UnaryNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.node, function (_e, node) {
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, node !== _this.node
              ? UnaryNode(
                _this.line,
                _this.column,
                _this.scopeId,
                _this.op,
                node
              )
              : _this);
          });
        };
        return UnaryNode;
      }(Node));
      Node.Var = VarNode = (function (Node) {
        var _Node_prototype, _VarNode_prototype;
        function VarNode(line, column, scopeId, ident, isMutable) {
          var _this;
          _this = this instanceof VarNode ? this : __create(_VarNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(ident instanceof IdentNode) && !(ident instanceof TmpNode)) {
            throw TypeError("Expected ident to be one of " + (__name(IdentNode) + " or " + __name(TmpNode)) + ", got " + __typeof(ident));
          }
          if (isMutable == null) {
            isMutable = false;
          } else if (typeof isMutable !== "boolean") {
            throw TypeError("Expected isMutable to be a Boolean, got " + __typeof(isMutable));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.ident = ident;
          _this.isMutable = isMutable;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _VarNode_prototype = VarNode.prototype = __create(_Node_prototype);
        _VarNode_prototype.constructor = VarNode;
        VarNode.displayName = "VarNode";
        if (typeof Node.extended === "function") {
          Node.extended(VarNode);
        }
        VarNode.cappedName = "Var";
        VarNode.argNames = ["ident", "isMutable"];
        State.addNodeFactory("var", VarNode);
        _VarNode_prototype.type = function () {
          return Type["undefined"];
        };
        _VarNode_prototype._reduce = function (o) {
          var ident;
          ident = this.ident.reduce(o);
          if (ident !== this.ident) {
            return VarNode(
              this.line,
              this.column,
              this.scopeId,
              ident,
              this.isMutable
            );
          } else {
            return this;
          }
        };
        _VarNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "VarNode",
            this.line,
            this.column,
            this.ident,
            this.isMutable
          );
        };
        _VarNode_prototype.walk = function (f) {
          var ident;
          ident = f(this.ident);
          if (ident !== this.ident) {
            return VarNode(
              this.line,
              this.column,
              this.scopeId,
              ident,
              this.isMutable
            );
          } else {
            return this;
          }
        };
        _VarNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.ident, function (_e, ident) {
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, ident !== _this.ident
              ? VarNode(
                _this.line,
                _this.column,
                _this.scopeId,
                ident,
                _this.isMutable
              )
              : _this);
          });
        };
        return VarNode;
      }(Node));
      Node.Yield = YieldNode = (function (Node) {
        var _Node_prototype, _YieldNode_prototype;
        function YieldNode(line, column, scopeId, node) {
          var _this;
          _this = this instanceof YieldNode ? this : __create(_YieldNode_prototype);
          if (typeof line !== "number") {
            throw TypeError("Expected line to be a Number, got " + __typeof(line));
          }
          if (typeof column !== "number") {
            throw TypeError("Expected column to be a Number, got " + __typeof(column));
          }
          if (typeof scopeId !== "number") {
            throw TypeError("Expected scopeId to be a Number, got " + __typeof(scopeId));
          }
          if (!(node instanceof Node)) {
            throw TypeError("Expected node to be a " + __name(Node) + ", got " + __typeof(node));
          }
          _this.line = line;
          _this.column = column;
          _this.scopeId = scopeId;
          _this._reduced = void 0;
          _this._macroExpanded = void 0;
          _this._macroExpandAlled = void 0;
          _this.node = node;
          return _this;
        }
        _Node_prototype = Node.prototype;
        _YieldNode_prototype = YieldNode.prototype = __create(_Node_prototype);
        _YieldNode_prototype.constructor = YieldNode;
        YieldNode.displayName = "YieldNode";
        if (typeof Node.extended === "function") {
          Node.extended(YieldNode);
        }
        YieldNode.cappedName = "Yield";
        YieldNode.argNames = ["node"];
        State.addNodeFactory("yield", YieldNode);
        _YieldNode_prototype.type = function () {
          return Type["undefined"];
        };
        _YieldNode_prototype.isStatement = function () {
          return true;
        };
        _YieldNode_prototype._reduce = function (o) {
          var node;
          node = this.node.reduce(o).doWrap(o);
          if (node !== this.node) {
            return YieldNode(this.line, this.column, this.scopeId, node);
          } else {
            return this;
          }
        };
        _YieldNode_prototype.inspect = function (depth) {
          return inspectHelper(
            depth,
            "YieldNode",
            this.line,
            this.column,
            this.node
          );
        };
        _YieldNode_prototype.walk = function (f) {
          var node;
          node = f(this.node);
          if (node !== this.node) {
            return YieldNode(this.line, this.column, this.scopeId, node);
          } else {
            return this;
          }
        };
        _YieldNode_prototype.walkAsync = function (f, callback) {
          var _this;
          _this = this;
          return f(this.node, function (_e, node) {
            if (_e != null) {
              return callback(_e);
            }
            return callback(null, node !== _this.node ? YieldNode(_this.line, _this.column, _this.scopeId, node) : _this);
          });
        };
        return YieldNode;
      }(Node));
      function withoutRepeats(array) {
        var _arr, _i, _len, item, lastItem, result;
        result = [];
        for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          item = _arr[_i];
          if (item !== lastItem) {
            result.push(item);
          }
          lastItem = item;
        }
        return result;
      }
      function buildExpected(errors) {
        var errs;
        errs = withoutRepeats(errors.slice().sort(function (a, b) {
          return __cmp(a.toLowerCase(), b.toLowerCase());
        }));
        switch (errs.length) {
        case 0: return "End of input";
        case 1: return errs[0];
        case 2: return __strnum(errs[0]) + " or " + __strnum(errs[1]);
        default:
          return __strnum(__slice.call(errs, 0, -1).join(", ")) + ", or " + __strnum(errs[errs.length - 1]);
        }
      }
      function buildErrorMessage(errors, lastToken) {
        return "Expected " + __strnum(buildExpected(errors)) + ", but " + __strnum(lastToken) + " found";
      }
      function parse(text, macros, options, callback) {
        var _f, o, startTime;
        if (typeof text !== "string") {
          throw TypeError("Expected text to be a String, got " + __typeof(text));
        }
        if (macros == null) {
          macros = null;
        } else if (!(macros instanceof MacroHolder)) {
          throw TypeError("Expected macros to be one of " + (__name(MacroHolder) + " or null") + ", got " + __typeof(macros));
        }
        if (options == null) {
          options = {};
        } else if (typeof options !== "object" || options === null) {
          throw TypeError("Expected options to be an Object, got " + __typeof(options));
        }
        if (callback == null) {
          callback = null;
        } else if (typeof callback !== "function") {
          throw TypeError("Expected callback to be one of Function or null, got " + __typeof(callback));
        }
        o = State(
          text,
          macros != null ? macros.clone() : void 0,
          options
        );
        startTime = new Date().getTime();
        if (callback != null) {
          _f = function (next) {
            return Root(o, function (err, root) {
              if (err != null && err !== SHORT_CIRCUIT) {
                return callback(err);
              }
              return next(root);
            });
          };
        } else {
          _f = function (next) {
            try {
              return next(Root(o));
            } catch (e) {
              if (e !== SHORT_CIRCUIT) {
                throw e;
              } else {
                return next();
              }
            }
          };
        }
        return _f(function (result) {
          var _f, _ref, endParseTime, err, index, lastToken, line, messages;
          endParseTime = new Date().getTime();
          if (typeof options.progress === "function") {
            options.progress("parse", __num(endParseTime) - __num(startTime));
          }
          if (!result || __lt(o.index, o.data.length)) {
            index = (_ref = o.failures).index;
            line = _ref.line;
            messages = _ref.messages;
            if (__lt(index, o.data.length)) {
              lastToken = JSON.stringify(o.data.substring(index, __num(index) + 20));
            } else {
              lastToken = "end-of-input";
            }
            err = ParserError(
              buildErrorMessage(messages, lastToken),
              o.data,
              line
            );
            if (callback != null) {
              return callback(err);
            } else {
              throw err;
            }
          } else {
            if (callback != null) {
              _f = function (next) {
                return o.macroExpandAllAsync(result, function (_e, expanded) {
                  if (_e != null) {
                    return callback(_e);
                  }
                  return next(expanded);
                });
              };
            } else {
              _f = function (next) {
                return next(o.macroExpandAll(result));
              };
            }
            return _f(function (expanded) {
              var endExpandTime, endReduceTime, reduced, ret;
              endExpandTime = new Date().getTime();
              if (typeof options.progress === "function") {
                options.progress("macroExpand", __num(endExpandTime) - __num(endParseTime));
              }
              reduced = expanded.reduce(o);
              endReduceTime = new Date().getTime();
              if (typeof options.progress === "function") {
                options.progress("reduce", __num(endReduceTime) - __num(endExpandTime));
              }
              ret = {
                result: reduced,
                macros: o.macros,
                parseTime: __num(endParseTime) - __num(startTime),
                macroExpandTime: __num(endExpandTime) - __num(endParseTime),
                reduceTime: __num(endReduceTime) - __num(endExpandTime),
                time: __num(endReduceTime) - __num(startTime)
              };
              if (callback != null) {
                return callback(null, ret);
              } else {
                return ret;
              }
            });
          }
        });
      }
      module.exports = parse;
      function unique(array) {
        var _arr, _i, _len, item, result;
        result = [];
        for (_arr = __toArray(array), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          item = _arr[_i];
          if (!__in(item, result)) {
            result.push(item);
          }
        }
        return result;
      }
      parse.ParserError = ParserError;
      parse.MacroError = MacroError;
      parse.Node = Node;
      parse.MacroHolder = MacroHolder;
      parse.deserializePrelude = function (data) {
        var macros, parsed;
        if (typeof data === "string") {
          parsed = JSON.parse(data);
        } else {
          parsed = data;
        }
        macros = MacroHolder();
        macros.deserialize(parsed);
        return {
          result: NothingNode(0, 0, -1),
          macros: macros
        };
      };
      parse.getReservedWords = function (macros) {
        return unique(__toArray(RESERVED_IDENTS).concat(__toArray(macros != null && typeof macros.getMacroAndOperatorNames === "function" && macros.getMacroAndOperatorNames() || [])));
      };
    }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
    
    return module.exports;
  };
  require['./jstranslator'] = function () {
    var module = { exports: this };
    var exports = this;
    (function () {
      "use strict";
      var __cmp, __create, __instanceofsome, __isArray, __name, __num, __owns, __slice, __strnum, __toArray, __typeof, _ref, ast, AstNode, GeneratorBuilder, generatorTranslate, MacroHolder, ParserNode, Scope, translators, Type;
      __cmp = function (left, right) {
        var type;
        if (left === right) {
          return 0;
        } else {
          type = typeof left;
          if (type !== "number" && type !== "string") {
            throw TypeError("Cannot compare a non-number/string: " + type);
          } else if (type !== typeof right) {
            throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof right);
          } else if (left < right) {
            return -1;
          } else {
            return 1;
          }
        }
      };
      __create = typeof Object.create === "function" ? Object.create
        : function (x) {
          function F() {}
          F.prototype = x;
          return new F();
        };
      __instanceofsome = function (value, array) {
        return (function () {
          var _arr, _i, item;
          for (_arr = __toArray(array), _i = _arr.length; _i--; ) {
            item = _arr[_i];
            if (value instanceof item) {
              return true;
            }
          }
          return false;
        }());
      };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __name = function (func) {
        if (typeof func !== "function") {
          throw TypeError("Expected func to be a Function, got " + __typeof(func));
        }
        return func.displayName || func.name || "";
      };
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __owns = Object.prototype.hasOwnProperty;
      __slice = Array.prototype.slice;
      __strnum = function (strnum) {
        var type;
        type = typeof strnum;
        if (type === "string") {
          return strnum;
        } else if (type === "number") {
          return String(strnum);
        } else {
          throw TypeError("Expected a string or number, got " + __typeof(strnum));
        }
      };
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      ast = require("./jsast");
      AstNode = ast.Node;
      Type = require("./types");
      ParserNode = (_ref = require("./parser")).Node;
      MacroHolder = _ref.MacroHolder;
      function needsCaching(item) {
        return !(item instanceof ast.Ident) && !(item instanceof ast.Const) && !(item instanceof ast.This) && !(item instanceof ast.Arguments);
      }
      Scope = (function () {
        var _Scope_prototype, getId;
        function Scope(options, macros, bound, usedTmps, helperNames, variables, tmps) {
          var _this;
          _this = this instanceof Scope ? this : __create(_Scope_prototype);
          if (options == null) {
            options = {};
          }
          _this.options = options;
          if (!(macros instanceof MacroHolder)) {
            throw TypeError("Expected macros to be a " + __name(MacroHolder) + ", got " + __typeof(macros));
          }
          _this.macros = macros;
          if (bound == null) {
            bound = false;
          }
          _this.bound = bound;
          if (usedTmps == null) {
            usedTmps = {};
          }
          _this.usedTmps = usedTmps;
          if (helperNames == null) {
            helperNames = {};
          }
          _this.helperNames = helperNames;
          if (tmps == null) {
            tmps = {};
          }
          _this.tmps = tmps;
          _this.variables = variables ? __create(variables) : {};
          _this.hasBound = false;
          _this.usedThis = false;
          _this.id = getId();
          return _this;
        }
        _Scope_prototype = Scope.prototype;
        Scope.displayName = "Scope";
        getId = (function () {
          var id;
          id = -1;
          return function () {
            return ++id;
          };
        }());
        _Scope_prototype.maybeCache = function (item, type, func) {
          var ident, result;
          if (!(item instanceof ast.Expression)) {
            throw TypeError("Expected item to be an Expression, got " + __typeof(item));
          }
          if (type == null) {
            type = Type.any;
          } else if (!(type instanceof Type)) {
            throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
          }
          if (typeof func !== "function") {
            throw TypeError("Expected func to be a Function, got " + __typeof(func));
          }
          if (!needsCaching(item)) {
            return func(item, item, false);
          } else {
            ident = this.reserveIdent(item.pos, "ref", type);
            result = func(
              ast.Assign(item.pos, ident, item),
              ident,
              true
            );
            this.releaseIdent(ident);
            return result;
          }
        };
        _Scope_prototype.reserveIdent = function (pos, namePart, type) {
          var _this;
          _this = this;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          if (namePart == null) {
            namePart = "ref";
          }
          if (type == null) {
            type = Type.any;
          } else if (!(type instanceof Type)) {
            throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
          }
          return (function () {
            var i, ident, name;
            for (i = 1; ; ++i) {
              if (i === 1) {
                name = "_" + __strnum(namePart);
              } else {
                name = "_" + __strnum(namePart) + i;
              }
              if (!(name in _this.usedTmps)) {
                _this.usedTmps[name] = true;
                ident = ast.Ident(pos, name);
                _this.addVariable(ident, type);
                return ident;
              }
            }
          }());
        };
        _Scope_prototype.reserveParam = function (pos) {
          var _this;
          _this = this;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          return (function () {
            var i, name;
            for (i = 1; ; ++i) {
              if (i === 1) {
                name = "_p";
              } else {
                name = "_p" + i;
              }
              if (!(name in _this.usedTmps)) {
                _this.usedTmps[name] = true;
                return ast.Ident(pos, name);
              }
            }
          }());
        };
        _Scope_prototype.getTmp = function (pos, id, name, type) {
          var tmp, tmps;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          if (type == null) {
            type = Type.any;
          } else if (!(type instanceof Type)) {
            throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
          }
          tmps = this.tmps;
          if (id in tmps) {
            tmp = tmps[id];
            if (tmp instanceof ast.Ident) {
              return tmp;
            }
          }
          return tmps[id] = this.reserveIdent(pos, name || "tmp", type);
        };
        _Scope_prototype.releaseTmp = function (id) {
          var _ref, _ref2;
          if (__owns.call(this.tmps, id)) {
            this.releaseIdent((_ref = (_ref2 = this.tmps)[id], delete _ref2[id], _ref));
          }
        };
        _Scope_prototype.releaseTmps = function () {
          var _obj, id;
          _obj = this.tmps;
          for (id in _obj) {
            if (__owns.call(_obj, id)) {
              this.releaseTmp(id);
            }
          }
          this.tmps = {};
        };
        _Scope_prototype.releaseIdent = function (ident) {
          if (!(ident instanceof ast.Ident)) {
            throw TypeError("Expected ident to be an Ident, got " + __typeof(ident));
          }
          if (!__owns.call(this.usedTmps, ident.name)) {
            throw Error("Trying to release a non-reserved ident: " + __strnum(ident.name));
          }
          delete this.usedTmps[ident.name];
        };
        _Scope_prototype.markAsParam = function (ident) {
          if (!(ident instanceof ast.Ident)) {
            throw TypeError("Expected ident to be an Ident, got " + __typeof(ident));
          }
          this.removeVariable(ident);
        };
        _Scope_prototype.addHelper = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          this.helperNames[name] = true;
        };
        _Scope_prototype.fillHelperDependencies = function () {
          var _arr, _else, _i, dep, helperNames, name, toAdd;
          helperNames = this.helperNames;
          toAdd = {};
          while (true) {
            for (name in helperNames) {
              if (__owns.call(helperNames, name) && this.macros.hasHelper(name)) {
                for (_arr = __toArray(this.macros.helperDependencies(name)), _i = _arr.length; _i--; ) {
                  dep = _arr[_i];
                  if (!__owns.call(helperNames, dep)) {
                    toAdd[dep] = true;
                  }
                }
              }
            }
            _else = true;
            for (name in toAdd) {
              if (__owns.call(toAdd, name)) {
                _else = false;
                this.addHelper(name);
              }
            }
            if (_else) {
              break;
            }
            helperNames = toAdd;
            toAdd = {};
          }
        };
        function lowerSorter(a, b) {
          return __cmp(a.toLowerCase(), b.toLowerCase());
        }
        _Scope_prototype.getHelpers = function () {
          var _arr, _obj, k, names;
          _arr = [];
          _obj = this.helperNames;
          for (k in _obj) {
            if (__owns.call(_obj, k)) {
              _arr.push(k);
            }
          }
          names = _arr;
          return names.sort(lowerSorter);
        };
        _Scope_prototype.hasHelper = function (name) {
          if (typeof name !== "string") {
            throw TypeError("Expected name to be a String, got " + __typeof(name));
          }
          return __owns.call(this.helperNames, name);
        };
        _Scope_prototype.addVariable = function (ident, type, isMutable) {
          if (!(ident instanceof ast.Ident)) {
            throw TypeError("Expected ident to be an Ident, got " + __typeof(ident));
          }
          if (type == null) {
            type = Type.any;
          } else if (!(type instanceof Type)) {
            throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
          }
          if (isMutable == null) {
            isMutable = false;
          } else if (typeof isMutable !== "boolean") {
            throw TypeError("Expected isMutable to be a Boolean, got " + __typeof(isMutable));
          }
          this.variables[ident.name] = { type: type, isMutable: isMutable };
        };
        _Scope_prototype.hasVariable = function (ident) {
          if (!(ident instanceof ast.Ident)) {
            throw TypeError("Expected ident to be an Ident, got " + __typeof(ident));
          }
          return ident.name in this.variables && typeof this.variables[ident.name] === "object" && this.variables[ident.name] !== null;
        };
        _Scope_prototype.hasOwnVariable = function (ident) {
          if (!(ident instanceof ast.Ident)) {
            throw TypeError("Expected ident to be an Ident, got " + __typeof(ident));
          }
          return __owns.call(this.variables, ident.name);
        };
        _Scope_prototype.isVariableMutable = function (ident) {
          var _ref;
          if (!(ident instanceof ast.Ident)) {
            throw TypeError("Expected ident to be an Ident, got " + __typeof(ident));
          }
          if ((_ref = this.variables[ident.name]) != null) {
            return _ref.isMutable;
          }
        };
        _Scope_prototype.removeVariable = function (ident) {
          if (!(ident instanceof ast.Ident)) {
            throw TypeError("Expected ident to be an Ident, got " + __typeof(ident));
          }
          delete this.variables[ident.name];
        };
        _Scope_prototype.getVariables = function () {
          var _arr, _obj, k, variables;
          _arr = [];
          _obj = this.variables;
          for (k in _obj) {
            if (__owns.call(_obj, k)) {
              _arr.push(k);
            }
          }
          variables = _arr;
          return variables.sort(lowerSorter);
        };
        _Scope_prototype.clone = function (bound) {
          if (bound) {
            this.hasBound = true;
          }
          return Scope(
            this.options,
            this.macros,
            bound,
            __create(this.usedTmps),
            this.helperNames,
            this.variables,
            __create(this.tmps)
          );
        };
        return Scope;
      }());
      function wrapReturn(x) {
        return x.mutateLast(function (n) {
          return ast.Return(n.pos, n);
        });
      }
      function identity(x) {
        return x;
      }
      function makeAutoReturn(x) {
        if (x) {
          return wrapReturn;
        } else {
          return identity;
        }
      }
      GeneratorBuilder = (function () {
        var _GeneratorBuilder_prototype;
        function GeneratorBuilder(pos, scope, states, currentState, stateIdent, pendingFinalliesIdent, finallies, catches, currentCatch) {
          var _this;
          _this = this instanceof GeneratorBuilder ? this : __create(_GeneratorBuilder_prototype);
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          _this.pos = pos;
          if (!(scope instanceof Scope)) {
            throw TypeError("Expected scope to be a " + __name(Scope) + ", got " + __typeof(scope));
          }
          _this.scope = scope;
          if (currentState == null) {
            currentState = 1;
          }
          _this.currentState = currentState;
          if (finallies == null) {
            finallies = [];
          }
          _this.finallies = finallies;
          if (catches == null) {
            catches = [];
          }
          _this.catches = catches;
          if (currentCatch == null) {
            currentCatch = [];
          }
          _this.currentCatch = currentCatch;
          scope.addHelper("StopIteration");
          _this.states = states != null ? states
            : [
              [
                function () {
                  return ast.Throw(pos, ast.Ident(pos, "StopIteration"));
                }
              ],
              []
            ];
          _this.stateIdent = stateIdent != null ? stateIdent : scope.reserveIdent(pos, "state", Type.number);
          _this.pendingFinalliesIdent = pendingFinalliesIdent != null ? pendingFinalliesIdent : scope.reserveIdent(pos, "finallies", Type["undefined"]["function"]().array());
          return _this;
        }
        _GeneratorBuilder_prototype = GeneratorBuilder.prototype;
        GeneratorBuilder.displayName = "GeneratorBuilder";
        _GeneratorBuilder_prototype.add = function (tNode) {
          if (!(tNode instanceof GeneratorBuilder)) {
            if (typeof tNode !== "function") {
              throw TypeError("Expected node to be a GeneratorBuilder or Function, got " + __typeof(tNode));
            }
            this.states[this.currentState].push(tNode);
            return this;
          } else {
            return tNode;
          }
        };
        _GeneratorBuilder_prototype["yield"] = function (pos, tNode) {
          var _this, branch;
          _this = this;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          branch = this.branch();
          this.states[this.currentState].push(
            function () {
              return ast.Assign(pos, _this.stateIdent, branch.state);
            },
            function () {
              return ast.Return(pos, tNode());
            }
          );
          return branch.builder;
        };
        _GeneratorBuilder_prototype.goto = function (pos, tState) {
          var _this;
          _this = this;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          this.states[this.currentState].push(
            function () {
              return ast.Assign(pos, _this.stateIdent, tState());
            },
            function () {
              return ast.Break(pos);
            }
          );
        };
        _GeneratorBuilder_prototype.pendingFinally = function (pos, tFinallyBody) {
          var _this, ident;
          _this = this;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          ident = this.scope.reserveIdent(pos, "finally", Type["undefined"]["function"]());
          this.scope.removeVariable(ident);
          this.finallies.push(function () {
            return ast.Func(
              pos,
              ident,
              [],
              [],
              tFinallyBody()
            );
          });
          this.states[this.currentState].push(function () {
            return ast.Call(
              pos,
              ast.Access(pos, _this.pendingFinalliesIdent, "push"),
              [ident]
            );
          });
          return this;
        };
        _GeneratorBuilder_prototype.runPendingFinally = function (pos) {
          var _this;
          _this = this;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          this.states[this.currentState].push(function () {
            return ast.Call(
              pos,
              ast.Access(
                pos,
                ast.Call(pos, ast.Access(pos, _this.pendingFinalliesIdent, "pop")),
                "call"
              ),
              [ast.This(pos)]
            );
          });
          return this;
        };
        _GeneratorBuilder_prototype.noop = function (pos) {
          var _this, branch;
          _this = this;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          if (this.states[this.currentState].length) {
            branch = this.branch();
            this.states[this.currentState].push(function () {
              return ast.Assign(pos, _this.stateIdent, branch.state);
            });
            return branch.builder;
          } else {
            return this;
          }
        };
        _GeneratorBuilder_prototype.enterTryCatch = function (pos) {
          var fresh;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          fresh = this.noop(pos);
          fresh.currentCatch = __toArray(fresh.currentCatch).concat([[fresh.currentState]]);
          return fresh;
        };
        _GeneratorBuilder_prototype.exitTryCatch = function (pos, tIdent, tPostState) {
          var catchStates, fresh;
          if (typeof pos !== "object" || pos === null) {
            throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
          }
          if (this.currentCatch.length === 0) {
            throw Error("Unable to exit-try-catch without first using enter-try-catch");
          }
          this.goto(pos, tPostState);
          fresh = this.noop(pos);
          catchStates = fresh.currentCatch.pop();
          catchStates.splice(catchStates.indexOf(fresh.currentState), 1);
          fresh.catches.push({ tryStates: catchStates, tIdent: tIdent, catchState: fresh.currentState });
          return fresh;
        };
        _GeneratorBuilder_prototype.branch = function () {
          var _ref, state;
          state = this.states.length;
          if (this.currentCatch.length) {
            (_ref = this.currentCatch)[__num(_ref.length) - 1].push(state);
          }
          this.states.push([]);
          return {
            state: state,
            builder: GeneratorBuilder(
              this.pos,
              this.scope,
              this.states,
              state,
              this.stateIdent,
              this.pendingFinalliesIdent,
              this.finallies,
              this.catches,
              this.currentCatch
            )
          };
        };
        _GeneratorBuilder_prototype.create = function () {
          var _this, body, catches, close, err, f, innerScope, scope, stateIdent;
          _this = this;
          if (this.currentCatch.length) {
            throw Error("Cannot create a generator if there are stray catches");
          }
          this.states[this.currentState].push(function () {
            return ast.Assign(_this.pos, _this.stateIdent, 0);
          });
          body = [ast.Assign(this.pos, this.stateIdent, 1)];
          close = this.scope.reserveIdent(this.pos, "close", Type["undefined"]["function"]());
          this.scope.removeVariable(close);
          if (this.finallies.length === 0) {
            this.scope.removeVariable(this.pendingFinalliesIdent);
            body.push(ast.Func(
              this.pos,
              close,
              [],
              [],
              ast.Block(this.pos, [ast.Assign(this.pos, this.stateIdent, 0)])
            ));
          } else {
            body.push(ast.Assign(this.pos, this.pendingFinalliesIdent, ast.Arr(this.pos)));
            body.push.apply(body, (function () {
              var _arr, _arr2, _i, _len, f;
              for (_arr = [], _arr2 = __toArray(_this.finallies), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                f = _arr2[_i];
                _arr.push(f());
              }
              return _arr;
            }()));
            innerScope = this.scope.clone(false);
            f = innerScope.reserveIdent(this.pos, "f", Type["undefined"]["function"]().union(Type["undefined"]));
            body.push(ast.Func(
              this.pos,
              close,
              [],
              innerScope.getVariables(),
              ast.Block(this.pos, [
                ast.Assign(this.pos, this.stateIdent, 0),
                ast.Assign(this.pos, f, ast.Call(this.pos, ast.Access(this.pos, this.pendingFinalliesIdent, "pop"))),
                ast.If(this.pos, f, ast.TryFinally(
                  this.pos,
                  ast.Call(this.pos, f),
                  ast.Call(this.pos, close)
                ))
              ])
            ));
          }
          scope = this.scope;
          err = scope.reserveIdent(this.pos, "e", Type.any);
          catches = this.catches;
          stateIdent = this.stateIdent;
          body.push(ast.Return(this.pos, ast.Obj(this.pos, [
            ast.Obj.Pair(this.pos, "close", close),
            ast.Obj.Pair(this.pos, "iterator", ast.Func(
              this.pos,
              null,
              [],
              [],
              ast.Return(this.pos, ast.This(this.pos))
            )),
            ast.Obj.Pair(this.pos, "next", ast.Func(
              this.pos,
              null,
              [],
              [],
              ast.While(this.pos, true, ast.TryCatch(
                this.pos,
                ast.Switch(
                  this.pos,
                  stateIdent,
                  (function () {
                    var _arr, _arr2, _arr3, _arr4, _i, _len, _len2, i, item, items, state;
                    for (_arr = [], _arr2 = __toArray(_this.states), i = 0, _len = _arr2.length; i < _len; ++i) {
                      state = _arr2[i];
                      for (_arr3 = [], _arr4 = __toArray(state), _i = 0, _len2 = _arr4.length; _i < _len2; ++_i) {
                        item = _arr4[_i];
                        _arr3.push(item());
                      }
                      items = _arr3;
                      _arr.push(ast.Switch.Case(items[0].pos, i, ast.Block(_this.pos, __toArray(items).concat([ast.Break(items[items.length - 1].pos)]))));
                    }
                    return _arr;
                  }()),
                  ast.Throw(this.pos, ast.Call(
                    this.pos,
                    ast.Ident(this.pos, "Error"),
                    [ast.Binary(this.pos, "Unknown state: ", "+", stateIdent)]
                  ))
                ),
                err,
                (function () {
                  var _arr, _f, _i, current;
                  current = ast.Block(_this.pos, [
                    ast.Call(_this.pos, close),
                    ast.Throw(_this.pos, err)
                  ]);
                  for (_arr = __toArray(catches), _i = _arr.length, _f = function (catchInfo) {
                    var _this, errIdent;
                    _this = this;
                    errIdent = catchInfo.tIdent();
                    scope.addVariable(errIdent);
                    return current = ast.If(
                      this.pos,
                      ast.Or.apply(ast, [this.pos].concat((function () {
                        var _arr, _arr2, _i, _len, state;
                        for (_arr = [], _arr2 = __toArray(catchInfo.tryStates), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                          state = _arr2[_i];
                          _arr.push(ast.Binary(_this.pos, stateIdent, "===", state));
                        }
                        return _arr;
                      }()))),
                      ast.Block(this.pos, [
                        ast.Assign(this.pos, errIdent, err),
                        ast.Assign(this.pos, stateIdent, catchInfo.catchState)
                      ]),
                      current
                    );
                  }; _i--; ) {
                    _f.call(_this, _arr[_i]);
                  }
                  return current;
                }())
              ))
            ))
          ])));
          return ast.Block(this.pos, body);
        };
        return GeneratorBuilder;
      }());
      function flattenSpreadArray(elements) {
        var _arr, _i, _len, changed, element, result;
        result = [];
        changed = false;
        for (_arr = __toArray(elements), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          element = _arr[_i];
          if (element instanceof ParserNode.Spread && element.node instanceof ParserNode.Array) {
            result.push.apply(result, __toArray(element.node.elements));
            changed = true;
          } else {
            result.push(element);
          }
        }
        if (changed) {
          return flattenSpreadArray(result);
        } else {
          return elements;
        }
      }
      function makePos(line, column, file) {
        var pos;
        if (typeof line !== "number") {
          throw TypeError("Expected line to be a Number, got " + __typeof(line));
        }
        if (typeof column !== "number") {
          throw TypeError("Expected column to be a Number, got " + __typeof(column));
        }
        if (file == null) {
          file = void 0;
        } else if (typeof file !== "string") {
          throw TypeError("Expected file to be one of String or undefined, got " + __typeof(file));
        }
        pos = { line: line, column: column };
        if (file != null) {
          pos.file = file;
        }
        return pos;
      }
      function getPos(node) {
        if (!(node instanceof ParserNode)) {
          throw TypeError("Expected node to be a " + __name(ParserNode) + ", got " + __typeof(node));
        }
        return makePos(node.line, node.column, node.file);
      }
      generatorTranslate = (function () {
        var generatorTranslators;
        function hasGeneratorNode(node, checking) {
          var FOUND;
          if (checking == null) {
            checking = [ParserNode.Yield, ParserNode.Break, ParserNode.Continue];
          }
          FOUND = {};
          function walker(node) {
            if (__instanceofsome(node, checking)) {
              throw FOUND;
            } else if (node instanceof ParserNode.For || node instanceof ParserNode.ForIn) {
              return node.walk(function (n) {
                if (hasGeneratorNode(n, [ParserNode.Yield])) {
                  throw FOUND;
                } else {
                  return n;
                }
              });
            } else if (node instanceof ParserNode.Switch) {
              return node.walk(function (n) {
                if (hasGeneratorNode(n, [ParserNode.Yield, ParserNode.Continue])) {
                  throw FOUND;
                } else {
                  return n;
                }
              });
            } else {
              return node.walk(walker);
            }
          }
          try {
            walker(node);
          } catch (e) {
            if (e === FOUND) {
              return true;
            } else {
              throw e;
            }
          }
          return false;
        }
        generatorTranslators = {
          Block: function (node, scope, builder, breakState, continueState) {
            var _arr, _i, _len, b, subnode;
            if (node.label != null) {
              throw Error("Not implemented: block with label in generator");
            }
            b = builder;
            for (_arr = __toArray(node.nodes), _i = 0, _len = _arr.length; _i < _len; ++_i) {
              subnode = _arr[_i];
              b = generatorTranslate(
                subnode,
                scope,
                b,
                breakState,
                continueState
              );
            }
            return b;
          },
          Break: function (node, scope, builder, breakState) {
            if (node.label != null) {
              throw Error("Not implemented: break with label in a generator");
            }
            if (breakState == null) {
              throw Error("break found outside of a loop");
            }
            builder.goto(getPos(node), breakState);
            return builder;
          },
          Continue: function (node, scope, builder, breakState, continueState) {
            if (node.label != null) {
              throw Error("Not implemented: continue with label in a generator");
            }
            if (breakState == null) {
              throw Error("break found outside of a loop");
            }
            builder.goto(getPos(node), continueState);
            return builder;
          },
          For: function (node, scope, builder) {
            var bodyBranch, postBranch, stepBranch, testBranch, tTest;
            if (node.label != null) {
              throw Error("Not implemented: for with label in generator");
            }
            if (node.init != null) {
              builder = generatorTranslate(node.init, scope, builder);
            }
            stepBranch = builder.branch();
            stepBranch.builder = generatorTranslate(node.step, scope, stepBranch.builder);
            testBranch = builder.branch();
            tTest = translate(node.test, scope, "expression", false);
            bodyBranch = builder.branch();
            bodyBranch.builder = generatorTranslate(
              node.body,
              scope,
              bodyBranch.builder,
              function () {
                return postBranch.state;
              },
              function () {
                return stepBranch.state;
              }
            );
            postBranch = builder.branch();
            builder.goto(getPos(node), function () {
              return testBranch.state;
            });
            stepBranch.builder.goto(getPos(node.step), function () {
              return testBranch.state;
            });
            testBranch.builder.goto(getPos(node.test), function () {
              return ast.IfExpression(getPos(node.test), tTest(), bodyBranch.state, postBranch.state);
            });
            bodyBranch.builder.goto(getPos(node.body), function () {
              return stepBranch.state;
            });
            return postBranch.builder;
          },
          ForIn: function (node, scope, builder) {
            var bodyBranch, index, key, keys, length, postBranch, stepBranch, testBranch, tKey, tObject;
            if (node.label != null) {
              throw Error("Not implemented: for-in with label in generator");
            }
            tKey = translate(node.key, scope, "leftExpression");
            tObject = translate(node.object, scope, "expression");
            keys = scope.reserveIdent(getPos(node), "keys", Type.string.array());
            function getKey() {
              if (key != null) {
                return key;
              } else {
                key = tKey();
                if (!(key instanceof ast.Ident)) {
                  throw Error("Expected an Ident for a for-in key");
                }
                scope.addVariable(key, Type.string);
                return key;
              }
            }
            index = scope.reserveIdent(getPos(node), "i", Type.number);
            length = scope.reserveIdent(getPos(node), "len", Type.number);
            builder.add(function () {
              return ast.Block(getPos(node), [
                ast.Assign(getPos(node), keys, ast.Arr(getPos(node))),
                ast.ForIn(getPos(node), getKey(), tObject(), ast.Call(
                  getPos(node),
                  ast.Access(getPos(node), keys, "push"),
                  [getKey()]
                )),
                ast.Assign(getPos(node), index, 0),
                ast.Assign(getPos(node), length, ast.Access(getPos(node), keys, "length"))
              ]);
            });
            stepBranch = builder.branch();
            stepBranch.builder.add(function () {
              return ast.Unary(getPos(node), "++", index);
            });
            testBranch = builder.branch();
            bodyBranch = builder.branch();
            bodyBranch.builder.add(function () {
              return ast.Assign(getPos(node), getKey(), ast.Access(getPos(node), keys, index));
            });
            bodyBranch.builder = generatorTranslate(
              node.body,
              scope,
              bodyBranch.builder,
              function () {
                return postBranch.state;
              },
              function () {
                return stepBranch.state;
              }
            );
            postBranch = builder.branch();
            builder.goto(getPos(node), function () {
              return testBranch.state;
            });
            stepBranch.builder.goto(getPos(node), function () {
              return testBranch.state;
            });
            testBranch.builder.goto(getPos(node), function () {
              return ast.IfExpression(
                getPos(node),
                ast.Binary(getPos(node), index, "<", length),
                bodyBranch.state,
                postBranch.state
              );
            });
            bodyBranch.builder.goto(getPos(node.body), function () {
              return stepBranch.state;
            });
            return postBranch.builder;
          },
          If: function (node, scope, builder, breakState, continueState) {
            var gWhenFalse, gWhenTrue, postBranch, tTest, whenFalse, whenFalseBranch, whenTrueBranch;
            if (node.label != null) {
              throw Error("Not implemented: if with label in generator");
            }
            tTest = translate(node.test, scope, "expression");
            whenTrueBranch = builder.branch();
            gWhenTrue = generatorTranslate(
              node.whenTrue,
              scope,
              whenTrueBranch.builder,
              breakState,
              continueState
            );
            whenFalse = node.whenFalse;
            if (whenFalse instanceof ParserNode.Nothing) {
              whenFalse = null;
            }
            if (whenFalse != null) {
              whenFalseBranch = builder.branch();
            }
            if (whenFalse != null) {
              gWhenFalse = generatorTranslate(
                node.whenFalse,
                scope,
                whenFalseBranch.builder,
                breakState,
                continueState
              );
            }
            postBranch = builder.branch();
            builder.goto(getPos(node), function () {
              return ast.IfExpression(getPos(node.test), tTest(), whenTrueBranch.state, whenFalseBranch != null ? whenFalseBranch.state : postBranch.state);
            });
            gWhenTrue.goto(getPos(node.whenTrue), function () {
              return postBranch.state;
            });
            if (whenFalse != null) {
              gWhenFalse.goto(getPos(node.whenFalse), function () {
                return postBranch.state;
              });
            }
            return postBranch.builder;
          },
          Switch: function (node, scope, builder, breakState, continueState) {
            var _arr, _f, _len, bodyStates, cachedNode, gDefaultBody, i, postBranch, tNode;
            tNode = translate(node.node, scope, "expression");
            cachedNode = scope.reserveIdent(getPos(node), "ref");
            builder.add(function () {
              return ast.Assign(getPos(node), cachedNode, tNode());
            });
            bodyStates = [];
            for (_arr = __toArray(node.cases), i = 0, _len = _arr.length, _f = function (case_, i) {
              var equalBranch, gCaseBody, inequalBranch, tCaseNode;
              tCaseNode = translate(case_.node, scope, "expression");
              equalBranch = builder.branch();
              bodyStates[i] = equalBranch.state;
              gCaseBody = generatorTranslate(
                case_.body,
                scope,
                equalBranch.builder,
                function () {
                  return postBranch.state;
                },
                continueState
              );
              gCaseBody.goto(getPos(case_.node), case_.fallthrough
                ? function () {
                  return bodyStates[i + 1] || postBranch.state;
                }
                : function () {
                  return postBranch.state;
                });
              inequalBranch = builder.branch();
              builder.goto(getPos(node), function () {
                return ast.IfExpression(
                  getPos(node.node),
                  ast.Binary(getPos(case_.node), cachedNode, "===", tCaseNode()),
                  equalBranch.state,
                  inequalBranch.state
                );
              });
              return builder = inequalBranch.builder;
            }; i < _len; ++i) {
              _f.call(this, _arr[i], i);
            }
            if (node.defaultCase != null) {
              gDefaultBody = generatorTranslate(
                node.defaultCase,
                scope,
                builder,
                function () {
                  return postBranch.state;
                },
                continueState
              );
              gDefaultBody.goto(getPos(node.defaultCase), function () {
                return postBranch.state;
              });
            } else {
              builder.goto(getPos(node), function () {
                return postBranch.state;
              });
            }
            postBranch = builder.branch();
            return postBranch.builder;
          },
          TmpWrapper: function (node, scope, builder, breakState, continueState) {
            var _arr, _i, tmp;
            builder = generatorTranslate(
              node.node,
              scope,
              builder,
              breakState,
              continueState
            );
            for (_arr = __toArray(node.tmps), _i = _arr.length; _i--; ) {
              tmp = _arr[_i];
              scope.releaseTmp(tmp);
            }
            return builder;
          },
          TryCatch: function (node, scope, builder, breakState, continueState) {
            var postBranch;
            if (node.label != null) {
              throw Error("Not implemented: try-catch with label in generator");
            }
            builder = builder.enterTryCatch(getPos(node));
            builder = generatorTranslate(
              node.tryBody,
              scope,
              builder,
              breakState,
              continueState
            );
            builder = builder.exitTryCatch(
              getPos(node.tryBody),
              translate(node.catchIdent, scope, "leftExpression", false),
              function () {
                return postBranch.state;
              }
            );
            builder = generatorTranslate(
              node.catchBody,
              scope,
              builder,
              breakState,
              continueState
            );
            postBranch = builder.branch();
            builder.goto(getPos(node), function () {
              return postBranch.state;
            });
            return postBranch.builder;
          },
          TryFinally: function (node, scope, builder, breakState, continueState) {
            if (node.label != null) {
              throw Error("Not implemented: try-finally with label in generator");
            }
            builder = builder.pendingFinally(getPos(node), translate(node.finallyBody, scope, "topStatement"));
            builder = generatorTranslate(
              node.tryBody,
              scope,
              builder,
              breakState,
              continueState
            );
            return builder.runPendingFinally(getPos(node));
          },
          Yield: function (node, scope, builder) {
            return builder["yield"](getPos(node), translate(node.node, scope, "expression"));
          }
        };
        return function (node, scope, builder, breakState, continueState) {
          var ret;
          if (__owns.call(generatorTranslators, node.constructor.cappedName) && hasGeneratorNode(node)) {
            ret = generatorTranslators[node.constructor.cappedName](
              node,
              scope,
              builder,
              breakState,
              continueState
            );
            if (!(ret instanceof GeneratorBuilder)) {
              throw Error("Translated non-GeneratorBuilder: " + __typeof(ret));
            }
            return ret;
          } else {
            return builder.add(translate(node, scope, "statement", false));
          }
        };
      }());
      function arrayTranslate(pos, elements, scope, replaceWithSlice, allowArrayLike, unassigned) {
        var _arr, _f, _i, _len, current, element, i, translatedItems;
        if (typeof pos !== "object" || pos === null) {
          throw TypeError("Expected pos to be an Object, got " + __typeof(pos));
        }
        translatedItems = [];
        current = [];
        translatedItems.push(current);
        for (_arr = __toArray(flattenSpreadArray(elements)), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          element = _arr[_i];
          if (element instanceof ParserNode.Spread) {
            translatedItems.push({
              tNode: translate(
                element.node,
                scope,
                "expression",
                null,
                unassigned
              ),
              type: element.node.type()
            });
            current = [];
            translatedItems.push(current);
          } else {
            current.push(translate(
              element,
              scope,
              "expression",
              null,
              unassigned
            ));
          }
        }
        if (translatedItems.length === 1) {
          return function () {
            return ast.Arr(pos, (function () {
              var _arr, _arr2, _i, _len, tItem;
              for (_arr = [], _arr2 = __toArray(translatedItems[0]), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                tItem = _arr2[_i];
                _arr.push(tItem());
              }
              return _arr;
            }()));
          };
        } else {
          for (i = translatedItems.length, _f = function (translatedItem, i) {
            if (i % 2 === 0) {
              if (__num(translatedItem.length) > 0) {
                return translatedItems[i] = function () {
                  var _arr, _arr2, _i, _len, items, tItem;
                  for (_arr = [], _arr2 = __toArray(translatedItem), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                    tItem = _arr2[_i];
                    _arr.push(tItem());
                  }
                  items = _arr;
                  return ast.Arr(items[0].pos, items);
                };
              } else {
                return translatedItems.splice(i, 1);
              }
            } else {
              return translatedItems[i] = function () {
                var node;
                node = translatedItem.tNode();
                if (translatedItem.type.isSubsetOf(Type.array)) {
                  return node;
                } else {
                  scope.addHelper("__toArray");
                  return ast.Call(
                    node.pos,
                    ast.Ident(node.pos, "__toArray"),
                    [node]
                  );
                }
              };
            }
          }; i--; ) {
            _f.call(this, translatedItems[i], i);
          }
          if (translatedItems.length === 1) {
            return function () {
              var array;
              array = translatedItems[0]();
              if (replaceWithSlice && array instanceof ast.Call && array.func instanceof ast.Ident && array.func.name === "__toArray") {
                return ast.Call(
                  pos,
                  ast.Access(
                    pos,
                    ast.Ident(pos, "__slice"),
                    "call"
                  ),
                  array.args
                );
              } else if (allowArrayLike && array instanceof ast.Call && array.func instanceof ast.Ident && array.func.name === "__toArray" && array.args[0] instanceof ast.Arguments) {
                return array.args[0];
              } else {
                return array;
              }
            };
          } else {
            return function () {
              var _arr, _i, _len, head, item, rest;
              head = translatedItems[0]();
              for (_arr = [], _i = 1, _len = translatedItems.length; _i < _len; ++_i) {
                item = translatedItems[_i];
                _arr.push(item());
              }
              rest = _arr;
              return ast.Call(
                pos,
                ast.Access(pos, head, "concat"),
                rest
              );
            };
          }
        }
      }
      translators = {
        Access: function (node, scope, location, autoReturn, unassigned) {
          var tChild, tParent;
          tParent = translate(
            node.parent,
            scope,
            "expression",
            null,
            unassigned
          );
          tChild = translate(
            node.child,
            scope,
            "expression",
            null,
            unassigned
          );
          return function () {
            return autoReturn(ast.Access(getPos(node), tParent(), tChild()));
          };
        },
        Args: function (node, scope, location, autoReturn) {
          return function () {
            return autoReturn(ast.Arguments(getPos(node)));
          };
        },
        Array: function (node, scope, location, autoReturn, unassigned) {
          var tArr;
          tArr = arrayTranslate(
            getPos(node),
            node.elements,
            scope,
            true,
            false,
            unassigned
          );
          return function () {
            return autoReturn(tArr());
          };
        },
        Assign: (function () {
          var ops;
          ops = {
            "=": "=",
            "*=": "*=",
            "/=": "/=",
            "%=": "%=",
            "+=": "+=",
            "-=": "-=",
            "<<=": "<<=",
            ">>=": ">>=",
            ">>>=": ">>>=",
            "&=": "&=",
            "|=": "|=",
            "^=": "^="
          };
          return function (node, scope, location, autoReturn, unassigned) {
            var op, tLeft, tRight;
            op = node.op;
            tLeft = translate(node.left, scope, "leftExpression");
            tRight = translate(
              node.right,
              scope,
              "expression",
              null,
              unassigned
            );
            if (unassigned && node.left instanceof ParserNode.Ident) {
              if (op === "=" && unassigned[node.left.name] && node.right.isConst() && node.right.constValue() === void 0) {
                return function () {
                  return ast.Noop(getPos(node));
                };
              }
              unassigned[node.left.name] = false;
            }
            return function () {
              var func, left, right;
              left = tLeft();
              right = tRight();
              if (op === "=" && location === "topStatement" && left instanceof ast.Ident && right instanceof ast.Func && right.name == null && scope.hasOwnVariable(left) && !scope.isVariableMutable(left)) {
                scope.removeVariable(left);
                func = ast.Func(
                  getPos(node),
                  left,
                  right.params,
                  right.variables,
                  right.body,
                  right.declarations
                );
                if (autoReturn !== identity) {
                  return ast.Block(getPos(node), [func, autoReturn(left)]);
                } else {
                  return func;
                }
              } else {
                return autoReturn(ast.Binary(getPos(node), left, op, right));
              }
            };
          };
        }()),
        Binary: function (node, scope, location, autoReturn, unassigned) {
          var tLeft, tRight;
          tLeft = translate(
            node.left,
            scope,
            "expression",
            null,
            unassigned
          );
          tRight = translate(
            node.right,
            scope,
            "expression",
            null,
            unassigned
          );
          return function () {
            return autoReturn(ast.Binary(getPos(node), tLeft(), node.op, tRight()));
          };
        },
        Block: function (node, scope, location, autoReturn, unassigned) {
          var tLabel, tNodes;
          tLabel = node.label && translate(node.label, scope, "label");
          tNodes = translateArray(
            node.nodes,
            scope,
            location,
            autoReturn,
            unassigned
          );
          return function () {
            return ast.Block(
              getPos(node),
              (function () {
                var _arr, _arr2, _i, _len, tNode;
                for (_arr = [], _arr2 = __toArray(tNodes), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  tNode = _arr2[_i];
                  _arr.push(tNode());
                }
                return _arr;
              }()),
              typeof tLabel === "function" ? tLabel() : void 0
            );
          };
        },
        Break: function (node, scope) {
          var tLabel;
          tLabel = node.label && translate(node.label, scope, "label");
          return function () {
            return ast.Break(getPos(node), typeof tLabel === "function" ? tLabel() : void 0);
          };
        },
        Call: function (node, scope, location, autoReturn, unassigned) {
          var args, isApply, isNew, tArgArray, tFunc, tStart;
          tFunc = translate(
            node.func,
            scope,
            "expression",
            null,
            unassigned
          );
          isApply = node.isApply;
          isNew = node.isNew;
          args = node.args;
          if (isApply && (args.length === 0 || !(args[0] instanceof ParserNode.Spread))) {
            if (args.length === 0) {
              tStart = function () {
                return ast.Const(getPos(node), void 0);
              };
            } else {
              tStart = translate(
                args[0],
                scope,
                "expression",
                null,
                unassigned
              );
            }
            tArgArray = arrayTranslate(
              getPos(node),
              __slice.call(args, 1),
              scope,
              false,
              true,
              unassigned
            );
            return function () {
              var argArray, func, start;
              func = tFunc();
              start = tStart();
              argArray = tArgArray();
              if (argArray instanceof ast.Arr) {
                return autoReturn(ast.Call(
                  getPos(node),
                  ast.Access(getPos(node), func, "call"),
                  [start].concat(__toArray(argArray.elements))
                ));
              } else {
                return autoReturn(ast.Call(
                  getPos(node),
                  ast.Access(getPos(node), func, "apply"),
                  [start, argArray]
                ));
              }
            };
          } else {
            tArgArray = arrayTranslate(
              getPos(node),
              args,
              scope,
              false,
              true,
              unassigned
            );
            return function () {
              var argArray, func;
              func = tFunc();
              argArray = tArgArray();
              if (isApply) {
                return scope.maybeCache(argArray, Type.array, function (setArray, array) {
                  scope.addHelper("__slice");
                  return autoReturn(ast.Call(
                    getPos(node),
                    ast.Access(getPos(node), func, "apply"),
                    [
                      ast.Access(getPos(node), setArray, 0),
                      ast.Call(
                        getPos(node),
                        ast.Access(
                          getPos(node),
                          ast.Ident(getPos(node), "__slice"),
                          "call"
                        ),
                        [
                          array,
                          ast.Const(getPos(node), 1)
                        ]
                      )
                    ]
                  ));
                });
              } else if (argArray instanceof ast.Arr) {
                return autoReturn(ast.Call(getPos(node), func, argArray.elements, isNew));
              } else if (isNew) {
                scope.addHelper("__new");
                return autoReturn(ast.Call(
                  getPos(node),
                  ast.Ident(getPos(node), "__new"),
                  [func, argArray]
                ));
              } else if (func instanceof ast.Binary && func.op === ".") {
                return scope.maybeCache(func.left, Type["function"], function (setParent, parent) {
                  return autoReturn(ast.Call(
                    getPos(node),
                    ast.Access(getPos(node), setParent, func.right, "apply"),
                    [parent, argArray]
                  ));
                });
              } else {
                return autoReturn(ast.Call(
                  getPos(node),
                  ast.Access(getPos(node), func, "apply"),
                  [
                    ast.Const(getPos(node), void 0),
                    argArray
                  ]
                ));
              }
            };
          }
        },
        Comment: function (node, scope, location, autoReturn) {
          return function () {
            return ast.Comment(getPos(node), node.text);
          };
        },
        Const: function (node, scope, location, autoReturn) {
          return function () {
            return autoReturn(ast.Const(getPos(node), node.value));
          };
        },
        Continue: function (node, scope) {
          var tLabel;
          tLabel = node.label && translate(node.label, scope, "label");
          return function () {
            return ast.Continue(getPos(node), typeof tLabel === "function" ? tLabel() : void 0);
          };
        },
        Debugger: function (node) {
          return function () {
            return ast.Debugger(getPos(node));
          };
        },
        Def: function (node, scope, location, autoReturn) {
          throw Error("Cannot have a stray def");
        },
        Eval: function (node, scope, location, autoReturn, unassigned) {
          var tCode;
          tCode = translate(
            node.code,
            scope,
            "expression",
            null,
            unassigned
          );
          return function () {
            return autoReturn(ast.Eval(getPos(node), tCode()));
          };
        },
        For: function (node, scope, location, autoReturn, unassigned) {
          var tBody, tInit, tLabel, tStep, tTest;
          tLabel = node.label && translate(node.label, scope, "label");
          if (node.init != null) {
            tInit = translate(
              node.init,
              scope,
              "expression",
              null,
              unassigned
            );
          }
          if (node.test != null) {
            tTest = translate(node.test, scope, "expression");
          }
          if (node.step != null) {
            tStep = translate(node.step, scope, "expression");
          }
          tBody = translate(node.body, scope, "statement");
          return function () {
            return ast.For(
              getPos(node),
              typeof tInit === "function" ? tInit() : void 0,
              typeof tTest === "function" ? tTest() : void 0,
              typeof tStep === "function" ? tStep() : void 0,
              tBody(),
              typeof tLabel === "function" ? tLabel() : void 0
            );
          };
        },
        ForIn: function (node, scope, location, autoReturn, unassigned) {
          var tBody, tKey, tLabel, tObject;
          tLabel = node.label && translate(node.label, scope, "label");
          tKey = translate(node.key, scope, "leftExpression");
          tObject = translate(
            node.object,
            scope,
            "expression",
            null,
            unassigned
          );
          tBody = translate(node.body, scope, "statement");
          return function () {
            var key;
            key = tKey();
            if (!(key instanceof ast.Ident)) {
              throw Error("Expected an Ident for a for-in key");
            }
            scope.addVariable(key, Type.string);
            return ast.ForIn(
              getPos(node),
              key,
              tObject(),
              tBody(),
              typeof tLabel === "function" ? tLabel() : void 0
            );
          };
        },
        Function: (function () {
          var primitiveTypes, translateParamTypes, translateType, translateTypeChecks;
          primitiveTypes = { Boolean: "boolean", String: "string", Number: "number", Function: "function" };
          translateTypeChecks = {
            Ident: function (node) {
              if (__owns.call(primitiveTypes, node.name)) {
                return Type[primitiveTypes[node.name]];
              } else {
                return Type.any;
              }
            },
            Access: function (node) {
              return Type.any;
            },
            TypeUnion: function (node) {
              var _arr, _i, _len, result, type;
              result = Type.none;
              for (_arr = __toArray(node.types), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                type = _arr[_i];
                if (type instanceof ParserNode.Const) {
                  if (type.value === null) {
                    result = result.union(Type["null"]);
                  } else if (type.value === void 0) {
                    result = result.union(Type["undefined"]);
                  } else {
                    throw Error("Unknown const value for typechecking: " + String(type.value));
                  }
                } else if (type instanceof ParserNode.Ident) {
                  result = result.union(__owns.call(primitiveTypes, type.name) ? Type[primitiveTypes[type.name]] : Type.any);
                } else {
                  throw Error("Not implemented: typechecking for non-idents/consts within a type-union");
                }
              }
              return result;
            },
            TypeFunction: function (node) {
              return Type["function"];
            },
            TypeGeneric: function (node) {
              if (node.basetype.name === "Array") {
                return translateTypeCheck(node.args[0]).array();
              } else if (node.basetype.name === "Function") {
                return Type["function"];
              } else {
                return Type.any;
              }
            },
            TypeObject: function (node) {
              var _arr, _i, _len, _ref, key, typeData, value;
              typeData = {};
              for (_arr = __toArray(node.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                key = (_ref = _arr[_i]).key;
                value = _ref.value;
                if (key instanceof ParserNode.Const) {
                  typeData[key.value] = translateTypeCheck(value);
                }
              }
              return Type.makeObject(typeData);
            }
          };
          function translateTypeCheck(node) {
            if (!__owns.call(translateTypeChecks, node.constructor.cappedName)) {
              throw Error("Unknown type: " + String(node.constructor.cappedName));
            }
            return translateTypeChecks[node.constructor.cappedName](node);
          }
          translateParamTypes = {
            Param: function (param, scope, inner) {
              var ident, laterInit, tmp, type;
              ident = translate(param.ident, scope, "param")();
              if (param.ident instanceof ParserNode.Tmp) {
                scope.markAsParam(ident);
              }
              laterInit = [];
              if (ident instanceof ast.Binary && ident.op === "." && ident.right instanceof ast.Const && typeof ident.right.value === "string") {
                tmp = ast.Ident(ident.pos, ident.right.value);
                laterInit.push(ast.Binary(ident.pos, ident, "=", tmp));
                ident = tmp;
              }
              if (!(ident instanceof ast.Ident)) {
                throw Error("Expecting param to be an Ident, got " + __typeof(ident));
              }
              if (param.asType) {
                type = translateTypeCheck(param.asType);
              }
              if (inner) {
                scope.addVariable(ident, type, param.isMutable);
              }
              return { init: laterInit, ident: ident, spread: !!param.spread };
            }
          };
          function translateParam(param, scope, inner) {
            var type;
            type = param.constructor.cappedName;
            if (!__owns.call(translateParamTypes, type)) {
              throw Error("Unknown parameter type: " + __strnum(type));
            }
            return translateParamTypes[type](param, scope, inner);
          }
          translateType = (function () {
            var translateTypes;
            translateTypes = {
              Ident: (function () {
                var primordialTypes;
                primordialTypes = {
                  String: Type.string,
                  Number: Type.number,
                  Boolean: Type.boolean,
                  Function: Type["function"],
                  Array: Type.array
                };
                return function (node, scope) {
                  if (!__owns.call(primordialTypes, node.name)) {
                    throw Error("Not implemented: custom type " + __strnum(node.name));
                  }
                  return primordialTypes[node.name];
                };
              }()),
              Const: function (node, scope) {
                switch (node.value) {
                case null: return Type["null"];
                case void 0: return Type["undefined"];
                default: throw Error("Unexpected const type: " + String(node.value));
                }
              },
              TypeGeneric: function (node, scope) {
                var _arr, _arr2, _i, _len, arg, args, base;
                base = translateType(node.basetype, scope);
                for (_arr = [], _arr2 = __toArray(node.args), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  arg = _arr2[_i];
                  _arr.push(translateType(arg, scope));
                }
                args = _arr;
                return Type.generic.apply(Type, [base].concat(__toArray(args)));
              },
              TypeUnion: function (node, scope) {
                var _arr, _i, _len, current, type;
                current = Type.none;
                for (_arr = __toArray(node.types), _i = 0, _len = _arr.length; _i < _len; ++_i) {
                  type = _arr[_i];
                  current = current.union(translateType(type));
                }
                return current;
              }
            };
            return function (node, scope) {
              if (!__owns.call(translateTypes, node.constructor.cappedName)) {
                throw Error("Unknown type to translate: " + String(node.constructor.cappedName));
              }
              return translateTypes[node.constructor.cappedName](node, scope);
            };
          }());
          return function (node, scope, location, autoReturn) {
            return function () {
              var _arr, body, fakeThis, i, initializers, innerScope, len, p, param, paramIdents, realInnerScope, unassigned;
              innerScope = scope.clone(!!node.bound);
              realInnerScope = innerScope;
              if (node.generator && !innerScope.bound) {
                innerScope = innerScope.clone(true);
              }
              paramIdents = [];
              initializers = [];
              for (_arr = __toArray(node.params), i = 0, len = _arr.length; i < len; ++i) {
                p = _arr[i];
                param = translateParam(p, innerScope, false);
                if (param.spread) {
                  throw Error("Encountered a spread parameter");
                }
                paramIdents.push(param.ident);
                initializers.push.apply(initializers, __toArray(param.init));
              }
              unassigned = {};
              if (node.generator) {
                body = generatorTranslate(node.body, innerScope, GeneratorBuilder(getPos(node), innerScope)).create();
              } else {
                body = translate(
                  node.body,
                  innerScope,
                  "topStatement",
                  node.autoReturn,
                  unassigned
                )();
              }
              innerScope.releaseTmps();
              body = ast.Block(getPos(node.body), __toArray(initializers).concat([body]));
              if (innerScope.usedThis || node.bound instanceof ParserNode) {
                if (node.bound instanceof ParserNode) {
                  fakeThis = ast.Ident(getPos(node.body), "_this");
                  innerScope.addVariable(fakeThis);
                  body = ast.Block(getPos(node.body), [
                    ast.Assign(getPos(node.body), fakeThis, translate(
                      node.bound,
                      scope,
                      "expression",
                      null,
                      unassigned
                    )()),
                    body,
                    ast.Return(getPos(node.body), fakeThis)
                  ]);
                } else {
                  if (innerScope.bound) {
                    scope.usedThis = true;
                  }
                  if ((innerScope.hasBound || node.generator) && !realInnerScope.bound) {
                    fakeThis = ast.Ident(getPos(node.body), "_this");
                    innerScope.addVariable(fakeThis);
                    body = ast.Block(getPos(node.body), [
                      ast.Assign(getPos(node.body), fakeThis, ast.This(getPos(node.body))),
                      body
                    ]);
                  }
                }
              }
              if (node.curry) {
                throw Error("Expected node to already be curried");
              }
              return autoReturn(ast.Func(
                getPos(node),
                null,
                paramIdents,
                innerScope.getVariables(),
                body,
                []
              ));
            };
          };
        }()),
        Ident: function (node, scope, location, autoReturn) {
          var name;
          name = node.name;
          scope.addHelper(name);
          return function () {
            return autoReturn(ast.Ident(getPos(node), name));
          };
        },
        If: function (node, scope, location, autoReturn, unassigned) {
          var innerLocation, tLabel, tTest, tWhenFalse, tWhenTrue;
          if (location === "statement" || location === "topStatement") {
            innerLocation = "statement";
          } else {
            innerLocation = location;
          }
          tLabel = node.label && translate(node.label, scope, "label");
          tTest = translate(
            node.test,
            scope,
            "expression",
            null,
            unassigned
          );
          tWhenTrue = translate(
            node.whenTrue,
            scope,
            innerLocation,
            autoReturn,
            unassigned
          );
          if (node.whenFalse != null) {
            tWhenFalse = translate(
              node.whenFalse,
              scope,
              innerLocation,
              autoReturn,
              unassigned
            );
          }
          return function () {
            return ast.If(
              getPos(node),
              tTest(),
              tWhenTrue(),
              typeof tWhenFalse === "function" ? tWhenFalse() : void 0,
              typeof tLabel === "function" ? tLabel() : void 0
            );
          };
        },
        Nothing: function (node) {
          return function () {
            return ast.Noop(getPos(node));
          };
        },
        Object: function (node, scope, location, autoReturn, unassigned) {
          var _arr, _i, _len, pair, properties, tKeys, tPrototype, tValues;
          tKeys = [];
          tValues = [];
          properties = [];
          for (_arr = __toArray(node.pairs), _i = 0, _len = _arr.length; _i < _len; ++_i) {
            pair = _arr[_i];
            tKeys.push(translate(
              pair.key,
              scope,
              "expression",
              null,
              unassigned
            ));
            tValues.push(translate(
              pair.value,
              scope,
              "expression",
              null,
              unassigned
            ));
            properties.push(pair.property);
          }
          if (node.prototype != null) {
            tPrototype = translate(
              node.prototype,
              scope,
              "expression",
              null,
              unassigned
            );
          }
          return function () {
            var _len, _this, constPairs, currentPair, currentPairs, i, ident, key, lastProperty, obj, postConstPairs, property, prototype, result, tKey, tValue, value;
            _this = this;
            constPairs = [];
            postConstPairs = [];
            if (typeof tPrototype === "function") {
              prototype = tPrototype();
            }
            if (prototype != null) {
              currentPairs = postConstPairs;
            } else {
              currentPairs = constPairs;
            }
            lastProperty = null;
            for (i = 0, _len = tKeys.length; i < _len; ++i) {
              tKey = tKeys[i];
              tValue = tValues[i];
              key = tKey();
              value = tValue();
              property = properties[i];
              if (!(key instanceof ast.Const) || property) {
                currentPairs = postConstPairs;
              }
              currentPair = currentPairs[currentPairs.length - 1];
              if ((property === "get" || property === "set") && lastProperty && property !== lastProperty && key instanceof ast.Const && currentPair.key instanceof ast.Const && key.value === currentPair.key.value) {
                currentPair[lastProperty] = currentPair.value;
                currentPair.property = __strnum(lastProperty) + __strnum(property);
                delete currentPair.value;
                currentPair[property] = value;
                lastProperty = null;
              } else {
                currentPairs.push({ key: key, value: value, property: property });
                if (property === "get" || property === "set") {
                  lastProperty = property;
                }
              }
            }
            if (prototype != null) {
              scope.addHelper("__create");
              obj = ast.Call(
                getPos(node),
                ast.Ident(getPos(node), "__create"),
                [prototype]
              );
            } else {
              obj = ast.Obj(getPos(node), (function () {
                var _arr, _i, _len, _ref, key, value;
                for (_arr = [], _i = 0, _len = constPairs.length; _i < _len; ++_i) {
                  key = (_ref = constPairs[_i]).key;
                  value = _ref.value;
                  _arr.push(ast.Obj.Pair(key.pos, String(key.value), value));
                }
                return _arr;
              }()));
            }
            if (postConstPairs.length === 0) {
              return autoReturn(obj);
            } else {
              ident = scope.reserveIdent(getPos(node), "o", Type.object);
              result = ast.BlockExpression(getPos(node), [ast.Assign(getPos(node), ident, obj)].concat(
                (function () {
                  var _arr, _f, _i, _len;
                  for (_arr = [], _i = 0, _len = postConstPairs.length, _f = function (pair) {
                    var key, property;
                    key = pair.key;
                    property = pair.property;
                    if (property) {
                      scope.addHelper("__defProp");
                      return ast.Call(
                        key.pos,
                        ast.Ident(key.pos, "__defProp"),
                        [
                          ident,
                          key,
                          property === "property" ? pair.value
                            : property === "getset"
                            ? ast.Obj(pair.get.pos, [
                              ast.Obj.Pair(pair.get.pos, "get", pair.get),
                              ast.Obj.Pair(pair.set.pos, "set", pair.set),
                              ast.Obj.Pair(pair.set.pos, "configurable", ast.Const(pair.set.pos, true)),
                              ast.Obj.Pair(pair.set.pos, "enumerable", ast.Const(pair.set.pos, true))
                            ])
                            : property === "setget"
                            ? ast.Obj(pair.set.pos, [
                              ast.Obj.Pair(pair.set.pos, "set", pair.set),
                              ast.Obj.Pair(pair.get.pos, "get", pair.get),
                              ast.Obj.Pair(pair.get.pos, "configurable", ast.Const(pair.get.pos, true)),
                              ast.Obj.Pair(pair.get.pos, "enumerable", ast.Const(pair.get.pos, true))
                            ])
                            : property === "get"
                            ? ast.Obj(pair.value.pos, [
                              ast.Obj.Pair(pair.value.pos, "get", pair.value),
                              ast.Obj.Pair(pair.value.pos, "configurable", ast.Const(pair.value.pos, true)),
                              ast.Obj.Pair(pair.value.pos, "enumerable", ast.Const(pair.value.pos, true))
                            ])
                            : property === "set"
                            ? ast.Obj(pair.value.pos, [
                              ast.Obj.Pair(pair.value.pos, "set", pair.value),
                              ast.Obj.Pair(pair.value.pos, "configurable", ast.Const(pair.value.pos, true)),
                              ast.Obj.Pair(pair.value.pos, "enumerable", ast.Const(pair.value.pos, true))
                            ])
                            : (function () {
                              throw Error("Unknown property type: " + String(property));
                            }())
                        ]
                      );
                    } else {
                      return ast.Assign(
                        key.pos,
                        ast.Access(key.pos, ident, key),
                        pair.value
                      );
                    }
                  }; _i < _len; ++_i) {
                    _arr.push(_f.call(_this, postConstPairs[_i]));
                  }
                  return _arr;
                }()),
                [ident]
              ));
              scope.releaseIdent(ident);
              return autoReturn(result);
            }
          };
        },
        Regexp: function (node, scope, location, autoReturn, unassigned) {
          var tSource;
          tSource = translate(
            node.source,
            scope,
            "expression",
            null,
            unassigned
          );
          return function () {
            var flags, source;
            source = tSource();
            flags = node.flags;
            if (source.isConst()) {
              return autoReturn(ast.Regex(getPos(node), String(source.constValue()), flags));
            } else {
              return autoReturn(ast.Call(
                getPos(node),
                ast.Ident(getPos(node), "RegExp"),
                [
                  source,
                  ast.Const(getPos(node), flags)
                ]
              ));
            }
          };
        },
        Return: function (node, scope, location, autoReturn, unassigned) {
          var tValue;
          if (location !== "statement" && location !== "topStatement") {
            throw Error("Expected Return in statement position");
          }
          tValue = translate(
            node.node,
            scope,
            "expression",
            null,
            unassigned
          );
          return function () {
            return ast.Return(getPos(node), tValue());
          };
        },
        Switch: function (node, scope, location, autoReturn, unassigned) {
          var _arr, _arr2, _i, _len, case_, tCases, tDefaultCase, tLabel, tNode;
          tLabel = node.label && translate(node.label, scope, "label");
          tNode = translate(
            node.node,
            scope,
            "expression",
            null,
            unassigned
          );
          for (_arr = [], _arr2 = __toArray(node.cases), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
            case_ = _arr2[_i];
            _arr.push({
              pos: getPos(case_.node),
              tNode: translate(
                case_.node,
                scope,
                "expression",
                null,
                unassigned
              ),
              tBody: translate(
                case_.body,
                scope,
                "statement",
                null,
                unassigned
              ),
              fallthrough: case_.fallthrough
            });
          }
          tCases = _arr;
          if (node.defaultCase != null) {
            tDefaultCase = translate(
              node.defaultCase,
              scope,
              "statement",
              null,
              unassigned
            );
          }
          return function () {
            return ast.Switch(
              getPos(node),
              tNode(),
              (function () {
                var _arr, case_, caseBody, caseNode, i, len;
                for (_arr = [], i = 0, len = tCases.length; i < len; ++i) {
                  case_ = tCases[i];
                  caseNode = case_.tNode();
                  caseBody = case_.tBody();
                  if (!case_.fallthrough || i === len - 1 && defaultCase.isNoop()) {
                    caseBody = ast.Block(case_.pos, [autoReturn(caseBody), ast.Break(caseBody.pos)]);
                  }
                  _arr.push(ast.Switch.Case(case_.pos, caseNode, caseBody));
                }
                return _arr;
              }()),
              tDefaultCase != null ? autoReturn(tDefaultCase()) : ast.Noop(getPos(node)),
              typeof tLabel === "function" ? tLabel() : void 0
            );
          };
        },
        Super: function (node, scope, location, autoReturn) {
          throw Error("Cannot have a stray super call");
        },
        Tmp: function (node, scope, location, autoReturn) {
          var ident;
          ident = scope.getTmp(getPos(node), node.id, node.name, node.type());
          return function () {
            return autoReturn(ident);
          };
        },
        TmpWrapper: function (node, scope, location, autoReturn, unassigned) {
          var _arr, _i, tmp, tResult;
          tResult = translate(
            node.node,
            scope,
            location,
            autoReturn,
            unassigned
          );
          for (_arr = __toArray(node.tmps), _i = _arr.length; _i--; ) {
            tmp = _arr[_i];
            scope.releaseTmp(tmp);
          }
          return tResult;
        },
        This: function (node, scope, location, autoReturn) {
          return function () {
            scope.usedThis = true;
            return autoReturn(scope.bound ? ast.Ident(getPos(node), "_this") : ast.This(getPos(node)));
          };
        },
        Throw: function (node, scope, location, autoReturn, unassigned) {
          var tNode;
          tNode = translate(
            node.node,
            scope,
            "expression",
            null,
            unassigned
          );
          return function () {
            return ast.Throw(getPos(node), tNode());
          };
        },
        TryCatch: function (node, scope, location, autoReturn, unassigned) {
          var tCatchBody, tCatchIdent, tLabel, tTryBody;
          tLabel = node.label && translate(node.label, scope, "label");
          tTryBody = translate(
            node.tryBody,
            scope,
            "statement",
            autoReturn,
            unassigned
          );
          tCatchIdent = translate(node.catchIdent, scope, "leftExpression");
          tCatchBody = translate(
            node.catchBody,
            scope,
            "statement",
            autoReturn,
            unassigned
          );
          return function () {
            return ast.TryCatch(
              getPos(node),
              tTryBody(),
              tCatchIdent(),
              tCatchBody(),
              typeof tLabel === "function" ? tLabel() : void 0
            );
          };
        },
        TryFinally: function (node, scope, location, autoReturn, unassigned) {
          var tFinallyBody, tLabel, tTryBody;
          tLabel = node.label && translate(node.label, scope, "label");
          tTryBody = translate(
            node.tryBody,
            scope,
            "statement",
            autoReturn,
            unassigned
          );
          tFinallyBody = translate(
            node.finallyBody,
            scope,
            "statement",
            null,
            unassigned
          );
          return function () {
            return ast.TryFinally(getPos(node), tTryBody(), tFinallyBody(), typeof tLabel === "function" ? tLabel() : void 0);
          };
        },
        Unary: function (node, scope, location, autoReturn, unassigned) {
          var _ref, tSubnode;
          if (unassigned && ((_ref = node.op) === "++" || _ref === "--" || _ref === "++post" || _ref === "--post") && node.node instanceof ParserNode.Ident) {
            unassigned[node.node.name] = false;
          }
          tSubnode = translate(
            node.node,
            scope,
            "expression",
            null,
            unassigned
          );
          return function () {
            return autoReturn(ast.Unary(getPos(node), node.op, tSubnode()));
          };
        },
        Var: function (node, scope, location, autoReturn, unassigned) {
          var tIdent;
          if (unassigned && node.ident instanceof ParserNode.Ident && !__owns.call(unassigned, node.ident.name)) {
            unassigned[node.ident.name] = true;
          }
          tIdent = translate(node.ident, scope, "leftExpression", autoReturn);
          return function () {
            var ident;
            ident = tIdent();
            scope.addVariable(ident, Type.any, node.isMutable);
            return ast.Noop(getPos(node));
          };
        }
      };
      function translate(node, scope, location, autoReturn, unassigned) {
        var ret;
        if (typeof node !== "object" || node === null) {
          throw TypeError("Expected node to be an Object, got " + __typeof(node));
        }
        if (!(scope instanceof Scope)) {
          throw TypeError("Expected scope to be a " + __name(Scope) + ", got " + __typeof(scope));
        }
        if (typeof location !== "string") {
          throw TypeError("Expected location to be a String, got " + __typeof(location));
        }
        if (typeof autoReturn !== "function") {
          autoReturn = makeAutoReturn(autoReturn);
        }
        if (!__owns.call(translators, node.constructor.cappedName)) {
          throw Error("Unable to translate unknown node type: " + String(node.constructor.cappedName));
        }
        ret = translators[node.constructor.cappedName](
          node,
          scope,
          location,
          autoReturn,
          unassigned
        );
        if (typeof ret !== "function") {
          throw Error("Translated non-function: " + __typeof(ret));
        }
        return ret;
      }
      function translateArray(nodes, scope, location, autoReturn, unassigned) {
        var _arr, i, len, node;
        if (!__isArray(nodes)) {
          throw TypeError("Expected nodes to be an Array, got " + __typeof(nodes));
        }
        if (!(scope instanceof Scope)) {
          throw TypeError("Expected scope to be a " + __name(Scope) + ", got " + __typeof(scope));
        }
        if (typeof location !== "string") {
          throw TypeError("Expected location to be a String, got " + __typeof(location));
        }
        for (_arr = [], i = 0, len = nodes.length; i < len; ++i) {
          node = nodes[i];
          _arr.push(translate(
            nodes[i],
            scope,
            location,
            i === len - 1 && autoReturn,
            unassigned
          ));
        }
        return _arr;
      }
      function translateRoot(roots, scope) {
        var _arr, _i, _len, _ref, bareInit, body, callFunc, comments, fakeThis, helper, ident, init, noPos, uncommentedBody, walker;
        if (typeof roots !== "object" || roots === null) {
          throw TypeError("Expected roots to be an Object, got " + __typeof(roots));
        }
        if (!(scope instanceof Scope)) {
          throw TypeError("Expected scope to be a " + __name(Scope) + ", got " + __typeof(scope));
        }
        if (!__isArray(roots)) {
          roots = [roots];
        }
        if (roots.length === 0) {
          roots.push({
            type: "Root",
            line: 0,
            column: 0,
            body: { type: "Nothing", line: 0, column: 0 }
          });
        }
        function splitComments(body) {
          var comments;
          comments = [];
          while (true) {
            if (body instanceof ast.Comment) {
              comments.push(body);
              body = ast.Noop(body.pos);
            } else if (body instanceof ast.Block && body.body[0] instanceof ast.Comment) {
              comments.push(body.body[0]);
              body = ast.Block(body.pos, __slice.call(body.body, 1));
            } else {
              break;
            }
          }
          return { comments: comments, body: body };
        }
        noPos = makePos(0, 0);
        if (roots.length === 1) {
          if (!(roots[0] instanceof ParserNode.Root)) {
            throw Error("Cannot translate non-Root object");
          }
          body = ast.Block(getPos(roots[0]), [
            translate(
              roots[0].body,
              scope,
              "topStatement",
              scope.options["return"] || scope.options["eval"],
              []
            )()
          ]);
        } else {
          body = ast.Block(noPos, (function () {
            var _arr, _arr2, _i, _len, _ref, comments, innerScope, root, rootBody, rootPos;
            for (_arr = [], _arr2 = __toArray(roots), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
              root = _arr2[_i];
              if (!(root instanceof ParserNode.Root)) {
                throw Error("Cannot translate non-Root object");
              }
              innerScope = scope.clone(true);
              comments = (_ref = splitComments(translate(
                root.body,
                innerScope,
                "topStatement",
                scope.options["return"] || scope.options["eval"],
                []
              )())).comments;
              rootBody = _ref.body;
              rootPos = getPos(root);
              _arr.push(ast.Block(rootPos, __toArray(comments).concat([
                ast.Call(rootPos, ast.Func(
                  rootPos,
                  null,
                  [],
                  innerScope.getVariables(),
                  rootBody
                ))
              ])));
            }
            return _arr;
          }()));
        }
        init = [];
        if (scope.hasBound && scope.usedThis) {
          fakeThis = ast.Ident(body.pos, "_this");
          scope.addVariable(fakeThis);
          init.push(ast.Assign(body.pos, fakeThis, ast.This(body.pos)));
        }
        scope.fillHelperDependencies();
        for (_arr = __toArray(scope.getHelpers()), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          helper = _arr[_i];
          if (helper !== "GLOBAL" && scope.macros.hasHelper(helper)) {
            ident = ast.Ident(body.pos, helper);
            scope.addVariable(ident);
            init.push(ast.Assign(body.pos, ident, scope.macros.getHelper(helper)));
          }
        }
        bareInit = [];
        if (scope.options["eval"]) {
          walker = function (node) {
            if (node instanceof ast.Func) {
              scope.addHelper("GLOBAL");
              if (node.name != null) {
                return ast.Block(node.pos, [
                  node,
                  ast.Assign(
                    node.pos,
                    ast.Access(
                      node.pos,
                      ast.Ident(node.pos, "GLOBAL"),
                      node.name.name
                    ),
                    node.name
                  )
                ]);
              } else {
                return node;
              }
            } else if (node instanceof ast.Binary && node.op === "=" && node.left instanceof ast.Ident) {
              scope.addHelper("GLOBAL");
              return ast.Assign(
                node.pos,
                ast.Access(
                  node.pos,
                  ast.Ident(node.pos, "GLOBAL"),
                  node.left.name
                ),
                node.walk(walker)
              );
            }
          };
          body = body.walk(walker);
          body = body.mutateLast(
            function (node) {
              scope.addHelper("GLOBAL");
              return ast.Assign(
                node.pos,
                ast.Access(
                  node.pos,
                  ast.Ident(node.pos, "GLOBAL"),
                  ast.Const(node.pos, "_")
                ),
                node
              );
            },
            { "return": true }
          );
        }
        if (scope.options.bare) {
          if (scope.hasHelper("GLOBAL")) {
            scope.addVariable(ast.Ident(body.pos, "GLOBAL"));
            bareInit.unshift(ast.Assign(
              body.pos,
              ast.Ident(body.pos, "GLOBAL"),
              scope.macros.getHelper("GLOBAL")
            ));
          }
          if (scope.options.undefinedName != null) {
            scope.addVariable(scope.options.undefinedName);
          }
          comments = (_ref = splitComments(body)).comments;
          uncommentedBody = _ref.body;
          return ast.Root(
            body.pos,
            ast.Block(body.pos, __toArray(comments).concat(__toArray(bareInit), __toArray(init), [uncommentedBody])),
            scope.getVariables(),
            ["use strict"]
          );
        } else {
          comments = (_ref = splitComments(body)).comments;
          uncommentedBody = _ref.body;
          callFunc = ast.Call(
            body.pos,
            ast.Access(
              body.pos,
              ast.Func(
                body.pos,
                null,
                (scope.hasHelper("GLOBAL")
                  ? [ast.Ident(body.pos, "GLOBAL")]
                  : []).concat(scope.options.undefinedName != null
                  ? [ast.Ident(body.pos, scope.options.undefinedName, true)]
                  : []),
                scope.getVariables(),
                ast.Block(body.pos, __toArray(init).concat([uncommentedBody])),
                ["use strict"]
              ),
              "call"
            ),
            [ast.This(body.pos)].concat(scope.hasHelper("GLOBAL") ? [scope.macros.getHelper("GLOBAL")] : [])
          );
          if (scope.options["return"]) {
            callFunc = ast.Return(body.pos, callFunc);
          }
          return ast.Root(
            body.pos,
            ast.Block(body.pos, __toArray(comments).concat(__toArray(bareInit), [callFunc])),
            [],
            []
          );
        }
      }
      module.exports = function (node, macros, options, callback) {
        var endTime, result, ret, scope, startTime;
        if (!(macros instanceof MacroHolder)) {
          throw TypeError("Expected macros to be a " + __name(MacroHolder) + ", got " + __typeof(macros));
        }
        if (options == null) {
          options = {};
        }
        if (typeof options === "function") {
          return module.exports(node, macros, null, options);
        }
        startTime = new Date().getTime();
        try {
          scope = Scope(options, macros, false);
          result = translateRoot(node, scope);
          scope.releaseTmps();
        } catch (e) {
          if (callback != null) {
            return callback(e);
          } else {
            throw e;
          }
        }
        endTime = new Date().getTime();
        if (typeof options.progress === "function") {
          options.progress("translate", __num(endTime) - __num(startTime));
        }
        ret = { node: result, time: __num(endTime) - __num(startTime) };
        if (callback != null) {
          return callback(null, ret);
        } else {
          return ret;
        }
      };
      module.exports.defineHelper = function (macros, name, value, type, dependencies) {
        var helper, ident, scope;
        if (!(macros instanceof MacroHolder)) {
          throw TypeError("Expected macros to be a " + __name(MacroHolder) + ", got " + __typeof(macros));
        }
        if (!(type instanceof Type)) {
          throw TypeError("Expected type to be a " + __name(Type) + ", got " + __typeof(type));
        }
        scope = Scope({}, macros, false);
        if (typeof name === "string") {
          ident = ast.Ident(
            makePos(0, 0),
            name
          );
        } else if (name instanceof ParserNode.Ident) {
          ident = translate(name, scope, "leftExpression")();
        } else {
          throw TypeError("Expecting name to be a String or Ident, got " + __typeof(name));
        }
        if (!(ident instanceof ast.Ident)) {
          throw Error("Expected name to be an Ident, got " + __typeof(ident));
        }
        if (value instanceof AstNode) {
          helper = value;
        } else if (value instanceof ParserNode) {
          helper = translate(value, scope, "expression")();
        } else {
          throw TypeError("Expected value to be a parser or ast Node, got " + __typeof(value));
        }
        if (dependencies == null) {
          dependencies = scope.getHelpers();
        }
        macros.addHelper(ident.name, helper, type, dependencies);
        return { helper: helper, dependencies: dependencies };
      };
    }.call(this));
    
    return module.exports;
  };
  require['./gorilla'] = function () {
    var module = { exports: this };
    var exports = this;
    (function (GLOBAL) {
      "use strict";
      var __asyncResult, __isArray, __lte, __num, __once, __owns, __slice, __strnum, __toArray, __typeof, compile, DEFAULT_TRANSLATOR, fetchAndParsePrelude, fs, init, os, parse, parser, path, translate;
      __asyncResult = function (limit, length, onValue, onComplete) {
        var broken, index, result, slotsUsed, sync;
        if (length <= 0) {
          return onComplete(null, []);
        }
        if (limit < 1 || limit !== limit) {
          limit = 1/0;
        }
        broken = null;
        slotsUsed = 0;
        sync = false;
        result = [];
        function onValueCallback(err, value) {
          --slotsUsed;
          if (err != null && broken == null) {
            broken = err;
          }
          if (broken == null && arguments.length > 1) {
            result.push(value);
          }
          if (!sync) {
            return next();
          }
        }
        index = 0;
        function next() {
          var f, i;
          while (broken == null && slotsUsed < limit && index < length) {
            ++slotsUsed;
            i = index;
            ++index;
            sync = true;
            onValue(i, __once(onValueCallback));
            sync = false;
          }
          if (broken != null || slotsUsed === 0) {
            f = onComplete;
            onComplete = void 0;
            if (f) {
              if (broken != null) {
                return f(broken);
              } else {
                return f(null, result);
              }
            }
          }
        }
        return next();
      };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __lte = function (x, y) {
        var type;
        type = typeof x;
        if (type !== "number" && type !== "string") {
          throw TypeError("Cannot compare a non-number/string: " + type);
        } else if (type !== typeof y) {
          throw TypeError("Cannot compare elements of different types: " + type + " vs " + typeof y);
        } else {
          return x <= y;
        }
      };
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __once = function (func) {
        if (typeof func !== "function") {
          throw Error("Expected func to be a Function, got " + __typeof(func));
        }
        return function () {
          var f;
          f = func;
          func = null;
          return f.apply(this, arguments);
        };
      };
      __owns = Object.prototype.hasOwnProperty;
      __slice = Array.prototype.slice;
      __strnum = function (strnum) {
        var type;
        type = typeof strnum;
        if (type === "string") {
          return strnum;
        } else if (type === "number") {
          return String(strnum);
        } else {
          throw TypeError("Expected a string or number, got " + __typeof(strnum));
        }
      };
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      parser = require("./parser");
      os = require("os");
      fs = require("fs");
      path = require("path");
      DEFAULT_TRANSLATOR = "./jstranslator";
      exports.version = "1.0";
      if (require.extensions) {
        require.extensions[".gs"] = function (module, filename) {
          var compiled;
          compiled = compile(
            fs.readFileSync(filename, "utf8"),
            { filename: filename }
          );
          return module._compile(compiled.code, filename);
        };
      } else if (require.registerExtension) {
        require.registerExtension(".gs", function (content) {
          return compiler(content);
        });
      }
      fetchAndParsePrelude = (function () {
        var fetchers, getPreludeCachePath, getPreludeSrcPath, parsedPreludeByLang, real__filename;
        parsedPreludeByLang = {};
        fetchers = [];
        function flush(err, value) {
          while (fetchers.length > 0) {
            fetchers.shift()(err, value);
          }
        }
        if (typeof __filename !== "undefined" && __filename !== null) {
          real__filename = fs.realpathSync(__filename);
        }
        if (real__filename != null) {
          getPreludeSrcPath = function (lang) {
            return path.join(path.dirname(real__filename), "../src/" + __strnum(lang) + "prelude.gs");
          };
        }
        if (os != null) {
          getPreludeCachePath = function (lang) {
            return path.join(os.tmpDir(), "gs-" + __strnum(lang) + "prelude.cache");
          };
        }
        function f(lang, cb) {
          var parsedPrelude;
          if (typeof lang !== "string") {
            throw TypeError("Expected lang to be a String, got " + __typeof(lang));
          }
          if (typeof cb !== "function") {
            throw TypeError("Expected cb to be a Function, got " + __typeof(cb));
          }
          if (__owns.call(parsedPreludeByLang, lang)) {
            parsedPrelude = parsedPreludeByLang[lang];
          }
          if (parsedPrelude != null) {
            return cb(null, parsedPrelude);
          }
          fetchers.push(cb);
          if (fetchers.length > 1) {
            return;
          }
          return fs.stat(getPreludeSrcPath(lang), function (_e, preludeSrcStat) {
            if (_e != null) {
              return flush(_e);
            }
            return fs.stat(getPreludeCachePath(lang), function (err, preludeCacheStat) {
              var _f;
              if (err != null && err.code !== "ENOENT") {
                return flush(err, null);
              }
              if (preludeCacheStat && __lte(preludeSrcStat.mtime.getTime(), preludeCacheStat.mtime.getTime())) {
                _f = function (next) {
                  return fs.readFile(getPreludeCachePath(lang), "utf8", function (_e2, cachePrelude) {
                    var _else;
                    if (_e2 != null) {
                      return flush(_e2);
                    }
                    _else = true;
                    try {
                      return parsedPreludeByLang[lang] = parsedPrelude = parser.deserializePrelude(cachePrelude);
                    } catch (e) {
                      _else = false;
                      if (e instanceof ReferenceError) {
                        throw e;
                      } else {
                        console.error("Error deserializing prelude, reloading. " + String(e));
                        return fs.unlink(getPreludeCachePath(lang), function (_e3) {
                          if (_e3 != null) {
                            return flush(_e3);
                          }
                          return next();
                        });
                      }
                    } finally {
                      if (_else) {
                        flush(null, parsedPrelude);
                      }
                    }
                  });
                };
              } else {
                _f = function (next) {
                  return next();
                };
              }
              return _f(function () {
                return fs.readFile(getPreludeSrcPath(lang), "utf8", function (_e2, prelude) {
                  if (_e2 != null) {
                    return flush(_e2);
                  }
                  if (parsedPrelude == null) {
                    parsedPreludeByLang[lang] = parsedPrelude = parser(prelude, null, { serializeMacros: true });
                    fs.writeFile(getPreludeCachePath(lang), parsedPrelude.macros.serialize(), "utf8", function (err) {
                      if (err != null) {
                        throw err;
                      }
                    });
                  }
                  return flush(null, parsedPrelude);
                });
              });
            });
          });
        }
        f.serialized = function (lang, cb) {
          if (typeof lang !== "string") {
            throw TypeError("Expected lang to be a String, got " + __typeof(lang));
          }
          if (typeof cb !== "function") {
            throw TypeError("Expected cb to be a Function, got " + __typeof(cb));
          }
          return f(lang, function (_e) {
            if (_e != null) {
              return cb(_e);
            }
            return fs.readFile(getPreludeCachePath(lang), "utf8", cb);
          });
        };
        f.sync = function (lang) {
          var cachePrelude, parsedPrelude, prelude, preludeCacheStat, preludeSrcStat;
          if (typeof lang !== "string") {
            throw TypeError("Expected lang to be a String, got " + __typeof(lang));
          }
          if (__owns.call(parsedPreludeByLang, lang)) {
            parsedPrelude = parsedPreludeByLang[lang];
          }
          if (parsedPrelude != null) {
            return parsedPrelude;
          } else {
            preludeSrcStat = fs.statSync(getPreludeSrcPath(lang));
            preludeCacheStat = (function () {
              try {
                return fs.statSync(getPreludeCachePath(lang));
              } catch (e) {
                if (e.code !== "ENOENT") {
                  throw e;
                }
              }
            }());
            if (preludeCacheStat && __lte(preludeSrcStat.mtime.getTime(), preludeCacheStat.mtime.getTime())) {
              cachePrelude = fs.readFileSync(getPreludeCachePath(lang), "utf8");
              try {
                parsedPrelude = parsedPreludeByLang[lang] = parser.deserializePrelude(cachePrelude);
              } catch (e) {
                if (e instanceof ReferenceError) {
                  throw e;
                } else {
                  console.error("Error deserializing prelude, reloading. " + String(e));
                  fs.unlinkSync(getPreludeCachePath(lang));
                }
              }
            }
            if (parsedPrelude == null) {
              prelude = fs.readFileSync(getPreludeSrcPath(lang), "utf8");
              parsedPrelude = parsedPreludeByLang[lang] = parser(prelude, null, { serializeMacros: true });
              fs.writeFile(getPreludeCachePath(lang), parsedPrelude.macros.serialize(), "utf8", function (err) {
                if (err != null) {
                  throw err;
                }
              });
            }
            return parsedPrelude;
          }
        };
        exports.withPrelude = function (lang, serializedPrelude) {
          if (typeof lang !== "string") {
            throw TypeError("Expected lang to be a String, got " + __typeof(lang));
          }
          if (typeof serializedPrelude !== "object" || serializedPrelude === null) {
            throw TypeError("Expected serializedPrelude to be an Object, got " + __typeof(serializedPrelude));
          }
          parsedPreludeByLang[lang] = parser.deserializePrelude(serializedPrelude);
          return this;
        };
        return f;
      }());
      exports.getSerializedPrelude = fetchAndParsePrelude.serialized;
      parse = exports.parse = function (source, options, callback) {
        var prelude;
        if (options == null) {
          options = {};
        }
        if (typeof options === "function") {
          return parse(source, null, options);
        }
        if (options.noPrelude) {
          return parser(source, null, options, callback);
        } else if (callback != null) {
          return fetchAndParsePrelude(options.lang || "js", function (_e, prelude) {
            if (_e != null) {
              return callback(_e);
            }
            return parser(source, prelude.macros, options, callback);
          });
        } else {
          prelude = fetchAndParsePrelude.sync(options.lang || "js");
          return parser(source, prelude.macros, options, callback);
        }
      };
      exports.getReservedWords = function (options) {
        if (options == null) {
          options = {};
        }
        if (options.noPrelude) {
          return parser.getReservedWords();
        } else {
          return parser.getReservedWords(fetchAndParsePrelude.sync(options.lang || "js").macros);
        }
      };
      function joinParsedResults(results) {
        var _arr, _i, _len, joinedParsed, parsed;
        joinedParsed = { parseTime: 0, macroExpandTime: 0, reduceTime: 0, result: [] };
        for (_arr = __toArray(results), _i = 0, _len = _arr.length; _i < _len; ++_i) {
          parsed = _arr[_i];
          joinedParsed.parseTime += __num(parsed.parseTime);
          joinedParsed.macroExpandTime += __num(parsed.macroExpandTime);
          joinedParsed.reduceTime += __num(parsed.reduceTime);
          joinedParsed.result.push(parsed.result);
        }
        return joinedParsed;
      }
      translate = exports.ast = function (source, options, callback) {
        var _f, startTime, translator;
        if (options == null) {
          options = {};
        }
        if (typeof options === "function") {
          return translate(source, null, options);
        }
        startTime = new Date().getTime();
        if (typeof options.translator === "function") {
          translator = options.translator;
        } else {
          translator = require(typeof options.translator === "string" ? options.translator : DEFAULT_TRANSLATOR);
        }
        if (callback != null) {
          _f = function (next) {
            var _f;
            if (__isArray(source)) {
              _f = function (next2) {
                return __asyncResult(
                  1,
                  __num(source.length),
                  function (i, next3) {
                    var item;
                    item = source[i];
                    if (__isArray(options.filenames)) {
                      options.filename = options.filenames[i];
                    }
                    return parse(item, options, next3);
                  },
                  function (err, results) {
                    if (typeof err !== "undefined" && err !== null) {
                      return callback(err);
                    }
                    return next2(joinParsedResults(results));
                  }
                );
              };
            } else {
              _f = function (next2) {
                return parse(source, options, function (_e, parsed) {
                  if (_e != null) {
                    return callback(_e);
                  }
                  return next2(parsed);
                });
              };
            }
            return _f(function (parsed) {
              return translator(parsed.result, parsed.macros, options, function (_e, translated) {
                if (_e != null) {
                  return callback(_e);
                }
                return next(parsed, translated);
              });
            });
          };
        } else {
          _f = function (next) {
            var parsed;
            if (__isArray(source)) {
              parsed = joinParsedResults((function () {
                var _arr, _arr2, _i, _len, item;
                for (_arr = [], _arr2 = __toArray(source), _i = 0, _len = _arr2.length; _i < _len; ++_i) {
                  item = _arr2[_i];
                  if (__isArray(options.filenames)) {
                    options.filename = options.filenames[i];
                  }
                  _arr.push(parse(item, options));
                }
                return _arr;
              }()));
            } else {
              parsed = parse(source, options);
            }
            return next(parsed, translator(parsed.result, parsed.macros, options));
          };
        }
        return _f(function (parsed, translated) {
          var result;
          result = {
            node: translated.node,
            parseTime: parsed.parseTime,
            macroExpandTime: parsed.macroExpandTime,
            reduceTime: parsed.reduceTime,
            translateTime: translated.time,
            time: __num(new Date().getTime()) - __num(startTime)
          };
          if (callback != null) {
            return callback(null, result);
          } else {
            return result;
          }
        });
      };
      compile = exports.compile = function (source, options, callback) {
        var _f, startTime;
        if (options == null) {
          options = {};
        }
        if (typeof options === "function") {
          return compile(source, null, options);
        }
        startTime = new Date().getTime();
        if (callback != null) {
          _f = function (next) {
            return translate(source, options, function (_e, translated) {
              if (_e != null) {
                return callback(_e);
              }
              return next(translated);
            });
          };
        } else {
          _f = function (next) {
            return next(translate(source, options));
          };
        }
        return _f(function (translated) {
          var compiled, result;
          compiled = translated.node.compile(options);
          result = {
            parseTime: translated.parseTime,
            macroExpandTime: translated.macroExpandTime,
            reduceTime: translated.reduceTime,
            translateTime: translated.translateTime,
            compileTime: compiled.compileTime,
            uglifyTime: compiled.uglifyTime,
            time: __num(new Date().getTime()) - __num(startTime),
            code: compiled.code
          };
          if (callback != null) {
            return callback(null, result);
          } else {
            return result;
          }
        });
      };
      function evaluate(code, options) {
        var _arr, _i, _module, _obj, _ref, _require, fun, k, Module, r, sandbox, Script, v;
        if (typeof require === "function" && (_ref = require("vm")) != null) {
          Script = _ref.Script;
        }
        if (Script) {
          sandbox = Script.createContext();
          sandbox.global = sandbox.root = sandbox.GLOBAL = sandbox;
          if (options.sandbox != null) {
            if (options.sandbox instanceof sandbox.constructor) {
              sandbox = options.sandbox;
            } else {
              _obj = options.sandbox;
              for (k in _obj) {
                if (__owns.call(_obj, k)) {
                  v = _obj[k];
                  sandbox[k] = v;
                }
              }
            }
          }
          sandbox.__filename = options.filename || "eval";
          sandbox.__dirname = path.dirname(sandbox.__filename);
          if (!sandbox.module && !sandbox.require) {
            Module = require("module");
            _module = sandbox.module = new Module(options.modulename || "eval");
            _require = sandbox.require = function (path) {
              return Module._load(path, _module);
            };
            _module.filename = sandbox.__filename;
            for (_arr = Object.getOwnPropertyNames(require), _i = _arr.length; _i--; ) {
              r = _arr[_i];
              try {
                _require[r] = require[r];
              } catch (e) {}
            }
          }
          if (options.includeGlobals) {
            for (k in GLOBAL) {
              if (__owns.call(GLOBAL, k) && !(k in sandbox)) {
                sandbox[k] = GLOBAL[k];
              }
            }
          }
          return Script.runInContext(code, sandbox);
        } else {
          fun = Function("return " + __strnum(code));
          return fun();
        }
      }
      exports["eval"] = function (source, options, callback) {
        var _f;
        if (options == null) {
          options = {};
        }
        if (typeof options === "function") {
          return exports["eval"](source, null, options);
        }
        options["eval"] = true;
        options["return"] = false;
        if (callback != null) {
          _f = function (next) {
            return compile(source, options, function (_e, compiled) {
              if (_e != null) {
                return callback(_e);
              }
              return next(compiled);
            });
          };
        } else {
          _f = function (next) {
            return next(compile(source, options));
          };
        }
        return _f(function (compiled) {
          var result, startTime;
          startTime = new Date().getTime();
          result = null;
          try {
            result = evaluate(compiled.code, options);
          } catch (e) {
            if (callback != null) {
              return callback(e);
            } else {
              throw e;
            }
          }
          if (typeof options.progress === "function") {
            options.progress("eval", __num(new Date().getTime()) - __num(startTime));
          }
          if (callback != null) {
            return callback(null, result);
          } else {
            return result;
          }
        });
      };
      exports.run = function (source, options, callback) {
        var _f, mainModule, Module;
        if (options == null) {
          options = {};
        }
        if (typeof options === "function") {
          return exports.run(source, null, options);
        }
        if (typeof process === "undefined") {
          exports["eval"](source, options, callback != null
            ? function (err) {
              return callback(err);
            }
            : void 0);
          return;
        }
        mainModule = require.main;
        mainModule.filename = process.argv[1] = options.filename ? fs.realpathSync(options.filename) : ".";
        if (mainModule.moduleCache) {
          mainModule.moduleCache = {};
        }
        if (process.binding("natives").module) {
          Module = require("module").Module;
          mainModule.paths = Module._nodeModulePaths(path.dirname(options.filename));
        }
        if (path.extname(mainModule.filename) !== ".gs" || require.extensions) {
          if (callback != null) {
            _f = function (next) {
              return compile(source, options, function (_e, ret) {
                if (_e != null) {
                  return callback(_e);
                }
                return next(ret);
              });
            };
          } else {
            _f = function (next) {
              return next(compile(source, options));
            };
          }
          _f(function (compiled) {
            mainModule._compile(compiled.code, mainModule.filename);
            if (typeof callback === "function") {
              return callback();
            }
          });
        } else {
          mainModule._compile(source, mainModule.filename);
          if (typeof callback === "function") {
            callback();
          }
        }
      };
      init = exports.init = function (options, callback) {
        if (options == null) {
          options = {};
        }
        if (typeof options === "function") {
          return init(void 0, options);
        }
        if (callback != null) {
          fetchAndParsePrelude(options.lang || "js", callback);
        } else {
          fetchAndParsePrelude.sync(options.lang || "js");
        }
      };
    }.call(this, typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this));
    
    return module.exports;
  };
  require['./browser'] = function () {
    var module = { exports: this };
    var exports = this;
    (function () {
      "use strict";
      var __async, __isArray, __num, __once, __slice, __toArray, __typeof, GorillaScript, runScripts;
      __async = function (limit, length, onValue, onComplete) {
        var broken, index, slotsUsed, sync;
        if (length <= 0) {
          return onComplete(null);
        }
        if (limit < 1 || limit !== limit) {
          limit = 1/0;
        }
        broken = null;
        slotsUsed = 0;
        sync = false;
        function onValueCallback(err) {
          --slotsUsed;
          if (err != null && broken == null) {
            broken = err;
          }
          if (!sync) {
            return next();
          }
        }
        index = 0;
        function next() {
          var f, i;
          while (broken == null && slotsUsed < limit && index < length) {
            ++slotsUsed;
            i = index;
            ++index;
            sync = true;
            onValue(i, __once(onValueCallback));
            sync = false;
          }
          if (broken != null || slotsUsed === 0) {
            f = onComplete;
            onComplete = void 0;
            if (f) {
              return f(broken);
            }
          }
        }
        return next();
      };
      __isArray = typeof Array.isArray === "function" ? Array.isArray
        : (function () {
          var _toString;
          _toString = Object.prototype.toString;
          return function (x) {
            return _toString.call(x) === "[object Array]";
          };
        }());
      __num = function (num) {
        if (typeof num !== "number") {
          throw TypeError("Expected a number, got " + __typeof(num));
        } else {
          return num;
        }
      };
      __once = function (func) {
        if (typeof func !== "function") {
          throw Error("Expected func to be a Function, got " + __typeof(func));
        }
        return function () {
          var f;
          f = func;
          func = null;
          return f.apply(this, arguments);
        };
      };
      __slice = Array.prototype.slice;
      __toArray = function (x) {
        if (x == null) {
          throw TypeError("Expected an object, got " + __typeof(x));
        } else if (__isArray(x)) {
          return x;
        } else if (typeof x === "string") {
          return x.split("");
        } else {
          return __slice.call(x);
        }
      };
      __typeof = (function () {
        var _toString;
        _toString = Object.prototype.toString;
        return function (o) {
          if (o === void 0) {
            return "Undefined";
          } else if (o === null) {
            return "Null";
          } else {
            return o.constructor && o.constructor.name || _toString.call(o).slice(8, -1);
          }
        };
      }());
      GorillaScript = require("./gorilla");
      GorillaScript.require = require;
      if (typeof window !== "undefined" && window !== null) {
        GorillaScript.load = function (url, callback) {
          var xhr;
          if (typeof url !== "string") {
            throw TypeError("Expected url to be a String, got " + __typeof(url));
          }
          if (typeof callback !== "function") {
            throw TypeError("Expected callback to be a Function, got " + __typeof(callback));
          }
          if (window.ActiveXObject) {
            xhr = new (window.ActiveXObject)("Microsoft.XMLHTTP");
          } else if (XMLHttpRequest) {
            xhr = new XMLHttpRequest();
          } else {
            throw Error("Unable to create XMLHttpRequest");
          }
          xhr.open("GET", url, true);
          if (typeof xhr.overrideMimeType === "function") {
            xhr.overrideMimeType("text/plain");
          }
          xhr.onreadystatechange = function () {
            var _ref;
            if (xhr.readyState === 4) {
              if ((_ref = xhr.status) === 0 || _ref === 200) {
                return GorillaScript.run(xhr.responseText, callback);
              } else {
                return callback(Error("Could not load " + url));
              }
            }
          };
          return xhr.send(null);
        };
        runScripts = function () {
          var scripts;
          scripts = document.getElementsByTagName("script");
          return __async(
            1,
            __num(scripts.length),
            function (_i, next) {
              var script;
              script = scripts[_i];
              if (script.type === "text/gorillascript") {
                if (script.src) {
                  return GorillaScript.load(script.src, next);
                } else {
                  GorillaScript.run(script.innerHTML);
                  return next();
                }
              } else {
                return next();
              }
            },
            function (_err) {}
          );
        };
        if (window.addEventListener) {
          addEventListener("DOMContentLoaded", runScripts, false);
        } else {
          attachEvent("onload", runScripts);
        }
      }
    }.call(this));
    
    return module.exports;
  };

    return require["./gorilla"].withPrelude("js", {
      syntax: [
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var body,macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;body=macroData.body;return __node("Call",3,9,__node("Function",3,12,[],__wrap(body,2),true,true,false,void 0,false,[]),[],false,false);};}.call(this));',
          options: {},
          params: [{
            type: "ident",
            name: "body",
            asType: {
              type: "choice",
              choices: [
                {type: "ident", name: "Body"},
                {
                  type: "sequence",
                  items: [
                    {type: "const", value: ";"},
                    {
                      type: "this",
                      asType: {type: "ident", name: "Statement"}
                    }
                  ]
                }
              ]
            }
          }],
          names: ["do"],
          id: 0
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;return this["debugger"]();};}.call(this));',
          options: {},
          params: [{type: "const", value: ""}],
          names: ["debugger"],
          id: 14
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var label,macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;label=macroData.label;return this["continue"](label);};}.call(this));',
          options: {},
          params: [{
            type: "ident",
            name: "label",
            asType: {
              type: "choice",
              choices: [
                {type: "ident", name: "Identifier"},
                {type: "const", value: ""}
              ]
            }
          }],
          names: ["continue"],
          id: 15
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var label,macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;label=macroData.label;return this["break"](label);};}.call(this));',
          options: {},
          params: [{
            type: "ident",
            name: "label",
            asType: {
              type: "choice",
              choices: [
                {type: "ident", name: "Identifier"},
                {type: "const", value: ""}
              ]
            }
          }],
          names: ["break"],
          id: 16
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var func,ident,macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;ident=macroData.ident;func=macroData.func;this["let"](ident,false,this.type(func));return this.block([this["var"](ident,false),this.assign(ident,"=",func)]);};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "ident",
              asType: {type: "ident", name: "Identifier"}
            },
            {
              type: "ident",
              name: "func",
              asType: {type: "ident", name: "FunctionDeclaration"}
            }
          ],
          names: ["let"],
          id: 17
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var _this,body,elseBody,elseIfs,macroData,macroName,test;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;test=macroData.test;body=macroData.body;elseIfs=macroData.elseIfs;elseBody=macroData.elseBody;function dec(x){return x - 1;};function f(i,current){return i>=0&&f(dec(i),_this["if"](elseIfs[i].test,elseIfs[i].body,current))||current;};return this["if"](macroName==="unless"&&__node("MacroAccess",88,40,3,88,{op:"not",node:__wrap(test,23)},"expression",false,false)||test,body,f(dec(elseIfs.length),elseBody));};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "test",
              asType: {type: "ident", name: "Logic"}
            },
            {type: "const", value: "then"},
            {type: "ident", name: "body"},
            {
              type: "ident",
              name: "elseIfs",
              asType: {
                type: "many",
                multiplier: "*",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "else"},
                    {type: "const", value: "if"},
                    {
                      type: "ident",
                      name: "test",
                      asType: {type: "ident", name: "Logic"}
                    },
                    {type: "const", value: "then"},
                    {type: "ident", name: "body"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "elseBody",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "else"},
                    {type: "this"}
                  ]
                }
              }
            }
          ],
          names: ["if", "unless"],
          id: 18
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var _this,body,elseBody,elseIfs,macroData,macroName,test;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;test=macroData.test;body=macroData.body;elseIfs=macroData.elseIfs;elseBody=macroData.elseBody;function dec(x){return x - 1;};function f(i,current){if(i>=0){return f(dec(i),_this["if"](elseIfs[i].type==="unless"?__node("MacroAccess",93,80,3,93,{op:"not",node:__wrap(elseIfs[i].test,28)},"expression",false,false):elseIfs[i].test,elseIfs[i].body,current));}else{return current;}};return this["if"](macroName==="unless"?__node("MacroAccess",94,43,3,94,{op:"not",node:__wrap(test,26)},"expression",false,false):test,body,f(dec(elseIfs.length),elseBody));};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "test",
              asType: {type: "ident", name: "Logic"}
            },
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            },
            {
              type: "ident",
              name: "elseIfs",
              asType: {
                type: "many",
                multiplier: "*",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "\n"},
                    {type: "const", value: "else"},
                    {
                      type: "ident",
                      name: "type",
                      asType: {
                        type: "choice",
                        choices: [
                          {type: "const", value: "if"},
                          {type: "const", value: "unless"}
                        ]
                      }
                    },
                    {
                      type: "ident",
                      name: "test",
                      asType: {type: "ident", name: "Logic"}
                    },
                    {
                      type: "ident",
                      name: "body",
                      asType: {
                        type: "choice",
                        choices: [
                          {type: "ident", name: "Body"},
                          {
                            type: "sequence",
                            items: [
                              {type: "const", value: ";"},
                              {
                                type: "this",
                                asType: {type: "ident", name: "Statement"}
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "elseBody",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "\n"},
                    {type: "const", value: "else"},
                    {
                      type: "this",
                      asType: {
                        type: "choice",
                        choices: [
                          {type: "ident", name: "Body"},
                          {
                            type: "sequence",
                            items: [
                              {type: "const", value: ";"},
                              {
                                type: "this",
                                asType: {type: "ident", name: "Statement"}
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          names: ["if", "unless"],
          id: 19
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var _ref,_this,declarable,handle,macroData,macroName,numRealElements,value;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;declarable=macroData.declarable;value=macroData.value;function inc(x){return x + 1;};declarable=this.macroExpand1(declarable);if(!declarable){throw Error("Unknown declarable: "+String(declarable));}if(declarable.type==="ident"){this["let"](declarable.ident,declarable.isMutable,declarable.asType?this.toType(declarable.asType):this.type(value));return this.block([this["var"](declarable.ident,declarable.isMutable),this.mutateLast(value||this.noop(),function(n){return _this.assign(declarable.ident,"=",n);},true)]);}else if(declarable.type==="array"){numRealElements=function(i,acc){if(i<declarable.elements.length){return numRealElements(inc(i),declarable.elements[i]?inc(acc):acc);}else{return acc;}};if(numRealElements(0,0)<=1){handle=function(i){if(i<declarable.elements.length){if(declarable.elements[i]){return _this.macroExpand1(__node("MacroAccess",204,34,38,204,{macroName:"let",macroData:{declarable:__node("MacroAccess",204,38,37,204,__node("MacroAccess",204,38,31,204,{ident:__wrap(declarable.elements[i],55)},"statement",false,false),"statement",false,false),value:__node("Access",204,66,__wrap(value,55),__wrap(i,55))}},"statement",false,false));}else{return handle(inc(i));}}else{return value;}};return handle(0);}else{return this.maybeCache(value,function(setValue,value){function handle(i,currentValue,block){if(i<declarable.elements.length){if(declarable.elements[i]){block.push(_this.macroExpand1(__node("MacroAccess",215,47,38,215,{macroName:"let",macroData:{declarable:__node("MacroAccess",215,51,37,215,__node("MacroAccess",215,51,31,215,{ident:__wrap(declarable.elements[i],58)},"statement",false,false),"statement",false,false),value:__node("Access",215,79,__wrap(currentValue,58),__wrap(i,58))}},"statement",false,false)));return handle(inc(i),value,block);}else{return handle(inc(i),currentValue,block);}}else{return _this.block(block);}};return handle(0,setValue,[]);});}}else if(declarable.type==="object"){if(declarable.pairs.length===1){handle=function(pair){return _this.macroExpand1(__node("MacroAccess",225,30,38,225,{macroName:"let",macroData:{declarable:__node("MacroAccess",225,34,37,225,__node("MacroAccess",225,34,31,225,{ident:__wrap(pair.value,60)},"statement",false,false),"statement",false,false),value:__node("Access",225,50,__wrap(value,60),__wrap(pair.key,60))}},"statement",false,false));};return handle(this.macroExpand1(declarable.pairs[0]));}else{return this.maybeCache(value,function(setValue,value){function handlePair(i,currentValue,pair,block){block.push(_this.macroExpand1(__node("MacroAccess",230,43,38,230,{macroName:"let",macroData:{declarable:__node("MacroAccess",230,47,37,230,__node("MacroAccess",230,47,31,230,{ident:__wrap(pair.value,63)},"statement",false,false),"statement",false,false),value:__node("Access",230,63,__wrap(currentValue,63),__wrap(pair.key,63))}},"statement",false,false)));return handle(inc(i),value,block);};function handle(i,currentValue,block){if(i<declarable.pairs.length){return handlePair(i,currentValue,_this.macroExpand1(declarable.pairs[i]),block);}else{return _this.block(block);}};return handle(0,setValue,[]);});}}else{throw Error("Unknown declarable "+String(declarable)+" "+String(declarable!=null&&(_ref=declarable.constructor)!=null?_ref.name:void 0));}};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "declarable",
              asType: {type: "ident", name: "Declarable"}
            },
            {type: "const", value: "="},
            {
              type: "ident",
              name: "value",
              asType: {type: "ident", name: "ExpressionOrAssignment"}
            }
          ],
          names: ["let"],
          id: 38
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var _this,macroData,macroName,node;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;if(this.inGenerator){throw Error("Cannot use return in a generator function");}if(node){return this.mutateLast(node||this.noop(),function(n){return _this["return"](n);},true);}else{return this["return"]();}};}.call(this));',
          options: {},
          params: [{
            type: "ident",
            name: "node",
            asType: {
              type: "many",
              multiplier: "?",
              inner: {type: "ident", name: "Expression"}
            }
          }],
          names: ["return"],
          id: 39
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var _this,macroData,macroName,node;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;if(this.inGenerator){throw Error("Cannot use return in a generator function");}return this.mutateLast(node||this.noop(),function(n){return _this.maybeCache(n,function(setN,n){return __node("MacroAccess",257,11,19,257,{macroName:"if",macroData:{test:__node("MacroAccess",257,13,20,257,{op:"?",node:__wrap(setN,70)},"statement",false,false),body:__node("MacroAccess",258,13,39,258,{macroName:"return",macroData:{node:__wrap(n,70)}},"statement",false,false),elseIfs:[]}},"statement",false,false);});},true);};}.call(this));',
          options: {},
          params: [{
            type: "ident",
            name: "node",
            asType: {type: "ident", name: "Expression"}
          }],
          names: ["return?"],
          id: 40
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var _this,macroData,macroName,node;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;if(this.inGenerator){throw Error("Cannot use return in a generator function");}return this.mutateLast(node||this.noop(),function(n){if(_this.isType(n,"boolean")){return __node("MacroAccess",267,11,19,267,{macroName:"if",macroData:{test:__wrap(n,72),body:__node("MacroAccess",268,13,39,268,{macroName:"return",macroData:{node:__node("Const",268,19,true)}},"statement",false,false),elseIfs:[]}},"statement",false,false);}else{return _this.maybeCache(n,function(setN,n){return __node("MacroAccess",272,13,19,272,{macroName:"if",macroData:{test:__wrap(setN,73),body:__node("MacroAccess",273,15,39,273,{macroName:"return",macroData:{node:__wrap(n,73)}},"statement",false,false),elseIfs:[]}},"statement",false,false);});}},true);};}.call(this));',
          options: {},
          params: [{
            type: "ident",
            name: "node",
            asType: {type: "ident", name: "Expression"}
          }],
          names: ["returnif"],
          id: 41
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var _this,macroData,macroName,node;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;if(this.inGenerator){throw Error("Cannot use return in a generator function");}return this.mutateLast(node||this.noop(),function(n){if(_this.isType(n,"boolean")){return __node("MacroAccess",282,11,19,282,{macroName:"unless",macroData:{test:__wrap(n,75),body:__node("MacroAccess",283,13,39,283,{macroName:"return",macroData:{node:__node("Const",283,19,false)}},"statement",false,false),elseIfs:[]}},"statement",false,false);}else{return _this.maybeCache(n,function(setN,n){return __node("MacroAccess",287,13,19,287,{macroName:"unless",macroData:{test:__wrap(setN,76),body:__node("MacroAccess",288,15,39,288,{macroName:"return",macroData:{node:__wrap(n,76)}},"statement",false,false),elseIfs:[]}},"statement",false,false);});}},true);};}.call(this));',
          options: {},
          params: [{
            type: "ident",
            name: "node",
            asType: {type: "ident", name: "Expression"}
          }],
          names: ["returnunless"],
          id: 42
        },
        {
          code: 'return (function(){"use strict";var __lt,__num,__typeof;__lt=function(x,y){var type;type=typeof x;if(type!=="number"&&type!=="string"){throw TypeError("Cannot compare a non-number/string: "+type);}else if(type!==typeof y){throw TypeError("Cannot compare elements of different types: "+type+" vs "+typeof y);}else{return x<y;}};__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node){var _this,body,f,locals,macroData,macroName,params,values;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;locals=macroData.locals;body=macroData.body;params=[];values=[];if(locals){if(locals.ident){params.push(this.param(locals.ident));values.push(locals.value);}f=function(i){if(__lt(i,locals.rest.length)){if(locals.rest[i].ident){params.push(_this.param(locals.rest[i].ident));values.push(locals.rest[i].value);}return f(__num(i)+1);}};f(0);}return this.call(this.func(params,body,true,true),values);};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "locals",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {
                      type: "ident",
                      name: "ident",
                      asType: {type: "ident", name: "Identifier"}
                    },
                    {type: "const", value: "="},
                    {type: "ident", name: "value"},
                    {
                      type: "ident",
                      name: "rest",
                      asType: {
                        type: "many",
                        multiplier: "*",
                        inner: {
                          type: "sequence",
                          items: [
                            {type: "const", value: ","},
                            {
                              type: "ident",
                              name: "ident",
                              asType: {type: "ident", name: "Identifier"}
                            },
                            {type: "const", value: "="},
                            {type: "ident", name: "value"}
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            }
          ],
          names: ["do"],
          id: 102
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var body,func,macroData,macroName,node;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;body=macroData.body;func=__node("Function",918,22,[],__wrap(body,210),true,false,false,void 0,false,[]);return __node("Call",919,9,__wrap(func,208),[__wrap(node,208)],false,true);};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "node",
              asType: {type: "ident", name: "Expression"}
            },
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            }
          ],
          names: ["with"],
          id: 103
        },
        {
          code: 'return (function(){"use strict";var __strnum,__typeof;__strnum=function(strnum){var type;type=typeof strnum;if(type==="string"){return strnum;}else if(type==="number"){return String(strnum);}else{throw TypeError("Expected a string or number, got "+__typeof(strnum));}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node){var arr,body,elseBody,init,loop,macroData,macroName,reducer,runElse,step,test;macroName=macroFullData.macroName;macroData=macroFullData.macroData;reducer=macroData.reducer;init=macroData.init;test=macroData.test;step=macroData.step;body=macroData.body;elseBody=macroData.elseBody;if(init==null){init=this.noop();}if(test==null){test=__node("Const",968,17,true);}if(step==null){step=this.noop();}if(reducer){if(reducer==="first"){body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",972,62,39,972,{macroName:"return",macroData:{node:__wrap(node,220)}},"statement",false,false);});loop=this["for"](init,test,step,body);return __node("MacroAccess",974,13,0,974,{macroName:"do",macroData:{body:__node("Block",975,1,[__wrap(loop,219),__wrap(elseBody,219)],null)}},"expression",false,false);}else{if(elseBody){throw Error("Cannot use a for loop with an else with "+__strnum(reducer));}if(reducer==="some"){body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",982,13,19,982,{macroName:"if",macroData:{test:__wrap(node,222),body:__node("MacroAccess",983,15,39,983,{macroName:"return",macroData:{node:__node("Const",983,21,true)}},"statement",false,false),elseIfs:[]}},"statement",false,false);});loop=[this["for"](init,test,step,body),__node("MacroAccess",984,57,39,984,{macroName:"return",macroData:{node:__node("Const",984,64,false)}},"statement",false,false)];return __node("MacroAccess",985,15,0,985,{macroName:"do",macroData:{body:__wrap(loop,219)}},"expression",false,false);}else if(reducer==="every"){body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",989,13,19,989,{macroName:"if",macroData:{test:__node("MacroAccess",989,15,3,989,{op:"not",node:__wrap(node,224)},"statement",false,false),body:__node("MacroAccess",990,15,39,990,{macroName:"return",macroData:{node:__node("Const",990,21,false)}},"statement",false,false),elseIfs:[]}},"statement",false,false);});loop=[this["for"](init,test,step,body),__node("MacroAccess",991,57,39,991,{macroName:"return",macroData:{node:__node("Const",991,64,true)}},"statement",false,false)];return __node("MacroAccess",992,15,0,992,{macroName:"do",macroData:{body:__wrap(loop,219)}},"expression",false,false);}else{throw Error("Unknown reducer: "+__strnum(reducer));}}}else if(elseBody){if(this.position==="expression"){throw Error("Cannot use a for loop with an else as an expression");}runElse=this.tmp("else",false,"boolean");body=__node("Block",1001,1,[__node("MacroAccess",1001,9,30,1001,{left:__wrap(runElse,219),op:":=",right:__node("Const",1001,21,false)},"statement",false,false),__wrap(body,219)],null);init=__node("Block",1004,1,[__node("MacroAccess",1004,9,30,1004,{left:__wrap(runElse,219),op:":=",right:__node("Const",1004,21,true)},"statement",false,false),__wrap(init,219)],null);loop=this["for"](init,test,step,body);return __node("Block",1008,1,[__wrap(loop,219),__node("MacroAccess",1009,9,19,1009,{macroName:"if",macroData:{test:__wrap(runElse,219),body:__wrap(elseBody,219),elseIfs:[]}},"statement",false,false)],null);}else if(this.position==="expression"){arr=this.tmp("arr",false,this.type(body).array());body=this.mutateLast(body||this.noop(),function(node){return __node("Call",1013,61,__node("Access",1013,61,__wrap(arr,229),__node("Const",1013,67,"push")),[__wrap(node,229)],false,false);});init=__node("Block",1015,1,[__node("MacroAccess",1015,9,30,1015,{left:__wrap(arr,219),op:":=",right:__node("Array",1015,16,[])},"statement",false,false),__wrap(init,219)],null);loop=this["for"](init,test,step,body);return __node("Block",1019,1,[__wrap(loop,219),__wrap(arr,219)],null);}else{return this["for"](init,test,step,body);}};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "reducer",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "choice",
                  choices: [
                    {type: "const", value: "every"},
                    {type: "const", value: "some"},
                    {type: "const", value: "first"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "init",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "ExpressionOrAssignment"},
                  {type: "const", value: ""}
                ]
              }
            },
            {type: "const", value: ";"},
            {
              type: "ident",
              name: "test",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Logic"},
                  {type: "const", value: ""}
                ]
              }
            },
            {type: "const", value: ";"},
            {
              type: "ident",
              name: "step",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "ExpressionOrAssignment"},
                  {type: "const", value: ""}
                ]
              }
            },
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            },
            {
              type: "ident",
              name: "elseBody",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "\n"},
                    {type: "const", value: "else"},
                    {
                      type: "this",
                      asType: {
                        type: "choice",
                        choices: [
                          {type: "ident", name: "Body"},
                          {
                            type: "sequence",
                            items: [
                              {type: "const", value: ";"},
                              {
                                type: "this",
                                asType: {type: "ident", name: "Statement"}
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          names: ["for"],
          id: 104
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var body,current,currentStart,init,macroData,macroName,step,test;macroName=macroFullData.macroName;macroData=macroFullData.macroData;init=macroData.init;test=macroData.test;step=macroData.step;current=macroData.current;currentStart=macroData.currentStart;body=macroData.body;if(init==null){init=this.noop();}if(test==null){test=__node("Const",1026,17,true);}if(step==null){step=this.noop();}body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",1029,59,30,1029,{left:__wrap(current,232),op:":=",right:__wrap(node,232)},"expression",false,false);});return __node("Block",1031,1,[__node("MacroAccess",1031,7,38,1031,{macroName:"let",macroData:{declarable:__node("MacroAccess",1031,10,37,1031,__node("MacroAccess",1031,10,31,1031,{isMutable:"mutable",ident:__wrap(current,231)},"statement",false,false),"statement",false,false),value:__wrap(currentStart,231)}},"statement",false,false),__node("MacroAccess",1032,7,104,1032,{macroName:"for",macroData:{init:__wrap(init,231),test:__wrap(test,231),step:__wrap(step,231),body:__wrap(body,231)}},"statement",false,false),__wrap(current,231)],null);};}.call(this));',
          options: {},
          params: [
            {type: "const", value: "reduce"},
            {
              type: "ident",
              name: "init",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Expression"},
                  {type: "const", value: ""}
                ]
              }
            },
            {type: "const", value: ";"},
            {
              type: "ident",
              name: "test",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Logic"},
                  {type: "const", value: ""}
                ]
              }
            },
            {type: "const", value: ";"},
            {
              type: "ident",
              name: "step",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Statement"},
                  {type: "const", value: ""}
                ]
              }
            },
            {type: "const", value: ","},
            {
              type: "ident",
              name: "current",
              asType: {type: "ident", name: "Identifier"}
            },
            {type: "const", value: "="},
            {type: "ident", name: "currentStart"},
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            }
          ],
          names: ["for"],
          id: 105
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var body,elseBody,macroData,macroName,reducer,step,test;macroName=macroFullData.macroName;macroData=macroFullData.macroData;reducer=macroData.reducer;test=macroData.test;step=macroData.step;body=macroData.body;elseBody=macroData.elseBody;if(macroName==="until"){test=__node("MacroAccess",1039,19,3,1039,{op:"not",node:__wrap(test,233)},"expression",false,false);}if(reducer==="every"){return __node("MacroAccess",1042,11,104,1042,{macroName:"for",macroData:{reducer:"every",test:__wrap(test,233),step:__wrap(step,233),body:__wrap(body,233),elseBody:__wrap(elseBody,233)}},"expression",false,false);}else if(reducer==="some"){return __node("MacroAccess",1047,11,104,1047,{macroName:"for",macroData:{reducer:"some",test:__wrap(test,233),step:__wrap(step,233),body:__wrap(body,233),elseBody:__wrap(elseBody,233)}},"expression",false,false);}else if(reducer==="first"){return __node("MacroAccess",1052,11,104,1052,{macroName:"for",macroData:{reducer:"first",test:__wrap(test,233),step:__wrap(step,233),body:__wrap(body,233),elseBody:__wrap(elseBody,233)}},"expression",false,false);}else if(this.position==="expression"){return __node("MacroAccess",1057,11,104,1057,{macroName:"for",macroData:{test:__wrap(test,233),step:__wrap(step,233),body:__wrap(body,233),elseBody:__wrap(elseBody,233)}},"expression",false,false);}else{return __node("MacroAccess",1063,9,104,1063,{macroName:"for",macroData:{test:__wrap(test,233),step:__wrap(step,233),body:__wrap(body,233),elseBody:__wrap(elseBody,233)}},"statement",false,false);}};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "reducer",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "choice",
                  choices: [
                    {type: "const", value: "every"},
                    {type: "const", value: "some"},
                    {type: "const", value: "first"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "test",
              asType: {type: "ident", name: "Logic"}
            },
            {
              type: "ident",
              name: "step",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: ","},
                    {
                      type: "this",
                      asType: {type: "ident", name: "ExpressionOrAssignment"}
                    }
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            },
            {
              type: "ident",
              name: "elseBody",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "\n"},
                    {type: "const", value: "else"},
                    {
                      type: "this",
                      asType: {
                        type: "choice",
                        choices: [
                          {type: "ident", name: "Body"},
                          {
                            type: "sequence",
                            items: [
                              {type: "const", value: ";"},
                              {
                                type: "this",
                                asType: {type: "ident", name: "Statement"}
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          names: ["while", "until"],
          id: 106
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var body,current,currentStart,macroData,macroName,step,test;macroName=macroFullData.macroName;macroData=macroFullData.macroData;test=macroData.test;step=macroData.step;current=macroData.current;currentStart=macroData.currentStart;body=macroData.body;if(macroName==="until"){test=__node("MacroAccess",1070,19,3,1070,{op:"not",node:__wrap(test,234)},"expression",false,false);}return __node("MacroAccess",1073,7,105,1073,{macroName:"for",macroData:{test:__wrap(test,234),step:__wrap(step,234),current:__wrap(current,234),currentStart:__wrap(currentStart,234),body:__wrap(body,234)}},"statement",false,false);};}.call(this));',
          options: {},
          params: [
            {type: "const", value: "reduce"},
            {
              type: "ident",
              name: "test",
              asType: {type: "ident", name: "Logic"}
            },
            {
              type: "ident",
              name: "step",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: ","},
                    {
                      type: "this",
                      asType: {type: "ident", name: "ExpressionOrAssignment"}
                    }
                  ]
                }
              }
            },
            {type: "const", value: ","},
            {
              type: "ident",
              name: "current",
              asType: {type: "ident", name: "Identifier"}
            },
            {type: "const", value: "="},
            {type: "ident", name: "currentStart"},
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            }
          ],
          names: ["while", "until"],
          id: 107
        },
        {
          code: 'return (function(){"use strict";var __num,__typeof;__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node){var _ref,_ref2,args,array,body,elseBody,end,func,hasIndex,hasLength,inclusive,increment,index,init,isString,length,letIndex,letLength,letValue,macroData,macroName,reducer,start,step,test,tmp,value,valueExpr,valueIdent;macroName=macroFullData.macroName;macroData=macroFullData.macroData;reducer=macroData.reducer;value=macroData.value;index=macroData.index;array=macroData.array;body=macroData.body;elseBody=macroData.elseBody;value=this.macroExpand1(value);length=null;if(index){length=index.length;index=index.value;}if(this.isCall(array)&&this.isIdent(this.callFunc(array))&&this.name(this.callFunc(array))==="__toArray"&&!this.callIsApply(array)){array=this.callArgs(array)[0];}if(this.isCall(array)&&this.isIdent(this.callFunc(array))&&this.name(this.callFunc(array))==="__range"&&!this.callIsApply(array)){if(this.isArray(value)||this.isObject(value)){throw Error("Cannot assign a number to a complex declarable");}value=value.ident;start=(_ref=this.callArgs(array))[0];end=_ref[1];step=_ref[2];inclusive=_ref[3];init=[];if(this.isConst(start)){if(typeof this.value(start)!=="number"){throw Error("Cannot start with a non-number: #(@value start)");}}else{start=__node("MacroAccess",1132,22,58,1132,{op:"+",node:__wrap(start,243)},"expression",false,false);}init.push(this.macroExpandAll(__node("MacroAccess",1133,38,38,1133,{macroName:"let",macroData:{declarable:__node("MacroAccess",1133,42,37,1133,__node("MacroAccess",1133,42,31,1133,{isMutable:"mutable",ident:__wrap(value,243)},"statement",false,false),"statement",false,false),value:__wrap(start,243)}},"statement",false,false)));if(this.isConst(end)){if(typeof this.value(end)!=="number"){throw Error("Cannot end with a non-number: #(@value start)");}}else if(this.isComplex(end)){end=this.cache(__node("MacroAccess",1139,28,58,1139,{op:"+",node:__wrap(end,243)},"expression",false,false),init,"end",false);}else{init.push(__node("MacroAccess",1141,23,58,1141,{op:"+",node:__wrap(end,243)},"expression",false,false));}if(this.isConst(step)){if(typeof this.value(step)!=="number"){throw Error("Cannot step with a non-number: #(@value step)");}}else if(this.isComplex(step)){step=this.cache(__node("MacroAccess",1147,29,58,1147,{op:"+",node:__wrap(step,243)},"expression",false,false),init,"step",false);}else{init.push(__node("MacroAccess",1149,23,58,1149,{op:"+",node:__wrap(step,243)},"expression",false,false));}if(this.isComplex(inclusive)){inclusive=this.cache(__wrap(inclusive,243),init,"incl",false);}if(this.isConst(step)){if(__num(this.value(step))>0){if(this.isConst(end)&&this.value(end)===1/0){test=__node("Const",1157,17,true);}else{test=__node("MacroAccess",1159,17,18,1159,{macroName:"if",macroData:{test:__wrap(inclusive,243),body:__node("MacroAccess",1159,36,9,1159,{left:__wrap(value,243),inverted:false,op:"~<=",right:__wrap(end,243)},"expression",false,false),elseIfs:[],elseBody:__node("MacroAccess",1159,57,9,1159,{left:__wrap(value,243),inverted:false,op:"~<",right:__wrap(end,243)},"expression",false,false)}},"expression",false,false);}}else if(this.isConst(end)&&this.value(end)===-1/0){test=__node("Const",1162,17,true);}else{test=__node("MacroAccess",1164,17,18,1164,{macroName:"if",macroData:{test:__wrap(inclusive,243),body:__node("MacroAccess",1164,36,10,1164,{left:__wrap(value,243),inverted:false,op:"~>=",right:__wrap(end,243)},"expression",false,false),elseIfs:[],elseBody:__node("MacroAccess",1164,57,10,1164,{left:__wrap(value,243),inverted:false,op:"~>",right:__wrap(end,243)},"expression",false,false)}},"expression",false,false);}}else{test=__node("MacroAccess",1166,13,19,1166,{macroName:"if",macroData:{test:__node("MacroAccess",1166,16,10,1166,{left:__wrap(step,243),inverted:false,op:"~>",right:__node("Const",1166,26,0)},"expression",false,false),body:__node("MacroAccess",1167,11,18,1167,{macroName:"if",macroData:{test:__wrap(inclusive,243),body:__node("MacroAccess",1167,29,9,1167,{left:__wrap(value,243),inverted:false,op:"~<=",right:__wrap(end,243)},"expression",false,false),elseIfs:[],elseBody:__node("MacroAccess",1167,50,9,1167,{left:__wrap(value,243),inverted:false,op:"~<",right:__wrap(end,243)},"expression",false,false)}},"statement",false,false),elseIfs:[],elseBody:__node("MacroAccess",1169,11,18,1169,{macroName:"if",macroData:{test:__wrap(inclusive,243),body:__node("MacroAccess",1169,29,10,1169,{left:__wrap(value,243),inverted:false,op:"~>=",right:__wrap(end,243)},"expression",false,false),elseIfs:[],elseBody:__node("MacroAccess",1169,50,10,1169,{left:__wrap(value,243),inverted:false,op:"~>",right:__wrap(end,243)},"expression",false,false)}},"statement",false,false)}},"expression",false,false);}increment=__node("MacroAccess",1171,35,52,1171,{left:__wrap(value,243),op:"~+=",right:__wrap(step,243)},"expression",false,false);if(length){init.push(this.macroExpandAll(__node("MacroAccess",1174,40,38,1174,{macroName:"let",macroData:{declarable:__node("MacroAccess",1174,44,37,1174,__node("MacroAccess",1174,44,31,1174,{ident:__wrap(length,243)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1174,54,19,1174,{macroName:"if",macroData:{test:__wrap(inclusive,243),body:__node("MacroAccess",1175,11,45,1175,{left:__node("MacroAccess",1175,12,49,1175,{left:__node("MacroAccess",1175,12,49,1175,{left:__wrap(end,243),inverted:false,op:"~-",right:__wrap(start,243)},"expression",false,false),inverted:false,op:"~+",right:__wrap(step,243)},"expression",false,false),inverted:false,op:"~\\\\",right:__wrap(step,243)},"statement",false,false),elseIfs:[],elseBody:__node("MacroAccess",1177,11,45,1177,{left:__node("MacroAccess",1177,12,49,1177,{left:__wrap(end,243),inverted:false,op:"~-",right:__wrap(start,243)},"expression",false,false),inverted:false,op:"~\\\\",right:__wrap(step,243)},"statement",false,false)}},"expression",false,false)}},"statement",false,false)));}if(index){init.push(this.macroExpandAll(__node("MacroAccess",1180,40,38,1180,{macroName:"let",macroData:{declarable:__node("MacroAccess",1180,44,37,1180,__node("MacroAccess",1180,44,31,1180,{isMutable:"mutable",ident:__wrap(index,243)},"statement",false,false),"statement",false,false),value:__node("Const",1180,62,0)}},"statement",false,false)));increment=__node("Block",1182,1,[__wrap(increment,243),__node("MacroAccess",1183,11,101,1183,{left:__wrap(index,243),op:"+=",right:__node("Const",1183,21,1)},"statement",false,false)],null);if(this.hasFunc(body)){func=this.tmp("f",false,"function");init.push(__node("MacroAccess",1186,25,38,1186,{macroName:"let",macroData:{declarable:__node("MacroAccess",1186,29,37,1186,__node("MacroAccess",1186,29,31,1186,{ident:__wrap(func,243)},"statement",false,false),"statement",false,false),value:__node("Function",1186,39,[__node("Param",1186,40,__wrap(value,249),void 0,false,false,void 0),__node("Param",1186,47,__wrap(index,249),void 0,false,false,void 0)],__wrap(body,249),true,false,false,void 0,false,[])}},"statement",false,false));body=__node("Call",1187,24,__wrap(func,243),[__node("This",1187,32),__wrap(value,243),__wrap(index,243)],false,true);}}else if(this.hasFunc(body)){func=this.tmp("f",false,"function");init.push(__node("MacroAccess",1190,23,38,1190,{macroName:"let",macroData:{declarable:__node("MacroAccess",1190,27,37,1190,__node("MacroAccess",1190,27,31,1190,{ident:__wrap(func,243)},"statement",false,false),"statement",false,false),value:__node("Function",1190,37,[__node("Param",1190,38,__wrap(value,252),void 0,false,false,void 0)],__wrap(body,252),true,false,false,void 0,false,[])}},"statement",false,false));body=__node("Call",1191,22,__wrap(func,243),[__node("This",1191,30),__wrap(value,243)],false,true);}if(reducer==="every"){return __node("MacroAccess",1194,13,104,1194,{macroName:"for",macroData:{reducer:"every",init:__wrap(init,243),test:__wrap(test,243),step:__wrap(increment,243),body:__wrap(body,243),elseBody:__wrap(elseBody,243)}},"expression",false,false);}else if(reducer==="some"){return __node("MacroAccess",1199,13,104,1199,{macroName:"for",macroData:{reducer:"some",init:__wrap(init,243),test:__wrap(test,243),step:__wrap(increment,243),body:__wrap(body,243),elseBody:__wrap(elseBody,243)}},"expression",false,false);}else if(reducer==="first"){return __node("MacroAccess",1204,13,104,1204,{macroName:"for",macroData:{reducer:"first",init:__wrap(init,243),test:__wrap(test,243),step:__wrap(increment,243),body:__wrap(body,243),elseBody:__wrap(elseBody,243)}},"expression",false,false);}else if(reducer==="filter"){body=this.mutateLast(body,function(node){return __node("MacroAccess",1210,14,19,1210,{macroName:"if",macroData:{test:__wrap(node,253),body:__wrap(value,253),elseIfs:[]}},"statement",false,false);});return __node("MacroAccess",1212,13,104,1212,{macroName:"for",macroData:{init:__wrap(init,243),test:__wrap(test,243),step:__wrap(increment,243),body:__wrap(body,243),elseBody:__wrap(elseBody,243)}},"expression",false,false);}else if(this.position==="expression"){return __node("MacroAccess",1217,13,104,1217,{macroName:"for",macroData:{init:__wrap(init,243),test:__wrap(test,243),step:__wrap(increment,243),body:__wrap(body,243),elseBody:__wrap(elseBody,243)}},"expression",false,false);}else{return __node("MacroAccess",1223,11,104,1223,{macroName:"for",macroData:{init:__wrap(init,243),test:__wrap(test,243),step:__wrap(increment,243),body:__wrap(body,243),elseBody:__wrap(elseBody,243)}},"statement",false,false);}}else{init=[];isString=this.isType(array,"string");hasIndex=index!=null;if(index==null){index=this.tmp("i",false,"number");}hasLength=length!=null;if(length==null){length=this.tmp("len",false,"number");}this.macroExpandAll(__node("MacroAccess",1236,28,38,1236,{macroName:"let",macroData:{declarable:__node("MacroAccess",1236,32,37,1236,__node("MacroAccess",1236,32,31,1236,{ident:__wrap(length,243)},"statement",false,false),"statement",false,false),value:__node("Const",1236,43,0)}},"statement",false,false));array=this.macroExpandAll(array);step=__node("Const",1240,31,1);start=__node("Const",1241,32,0);end=__node("Const",1242,29,1/0);inclusive=__node("Const",1243,35,false);if(this.isCall(array)&&this.isIdent(this.callFunc(array))){if(this.name(this.callFunc(array))==="__step"&&!this.callIsApply(array)){args=this.callArgs(array);array=args[0];step=args[1];if(this.isConst(step)){if(__num(this.value(step))>=0){start=__node("Const",1251,29,0);end=__node("Const",1252,26,1/0);}else{start=__node("Const",1254,28,1/0);end=__node("Const",1255,27,0);}}else{start=void 0;end=void 0;}inclusive=__node("Const",1259,28,true);}else if(this.name(this.callFunc(array))==="__slice"&&this.callIsApply(array)){args=this.callArgs(array);array=args[0];start=args[1];end=args[2];if(this.isConst(end)&&this.value(end)===void 0){end=__node("Const",1266,24,1/0);}}else if(this.name(this.callFunc(array))==="__sliceStep"&&!this.callIsApply(array)){args=this.callArgs(array);array=args[0];start=args[1];end=args[2];step=args[3];inclusive=args[4];}}if(this.isConst(step)){if(typeof this.value(step)!=="number"||__num(this.value(step))%1!==0){throw Error("Expected step to be an integer, got "+__typeof(this.value(step))+" ("+String(this.value(step))+")");}else if(this.value(step)===0){throw Error("Step must be non-zero");}}if(start&&this.isConst(start)&&this.value(start)!==1/0&&(typeof this.value(start)!=="number"||__num(this.value(start))%1!==0)){throw Error("Expected start to be an integer, got "+__typeof(this.value(start))+" ("+String(this.value(start))+")");}if(end&&this.isConst(end)&&this.value(end)!==1/0&&(typeof this.value(end)!=="number"||__num(this.value(end))%1!==0)){throw Error("Expected end to be an integer or Infinity, got "+__typeof(this.value(end))+" ("+String(this.value(end))+")");}if(!isString&&!this.isType(array,"arrayLike")){array=__node("Call",1285,22,__node("Ident",1285,22,"__toArray"),[__wrap(array,243)],false,false);}array=this.cache(array,init,isString?"str":"arr",false);valueExpr=__node("MacroAccess",1288,28,18,1288,{macroName:"if",macroData:{test:__wrap(isString,243),body:__node("Call",1288,47,__node("Access",1288,47,__wrap(array,243),__node("Const",1288,55,"charAt")),[__wrap(index,243)],false,false),elseIfs:[],elseBody:__node("Access",1288,75,__wrap(array,243),__wrap(index,243))}},"expression",false,false);letIndex=this.macroExpandAll(__node("MacroAccess",1289,44,38,1289,{macroName:"let",macroData:{declarable:__node("MacroAccess",1289,48,37,1289,__node("MacroAccess",1289,48,31,1289,{isMutable:"mutable",ident:__wrap(index,243)},"statement",false,false),"statement",false,false),value:__node("Const",1289,66,0)}},"statement",false,false));if(value&&value.type==="ident"&&!value.isMutable){valueIdent=value.ident;}else{valueIdent=this.tmp("v",false);}letValue=this.macroExpandAll(__node("MacroAccess",1291,44,38,1291,{macroName:"let",macroData:{declarable:__node("MacroAccess",1291,48,37,1291,__node("MacroAccess",1291,48,31,1291,{ident:__wrap(value,243)},"statement",false,false),"statement",false,false),value:__wrap(valueExpr,243)}},"statement",false,false));letLength=this.macroExpandAll(__node("MacroAccess",1292,45,38,1292,{macroName:"let",macroData:{declarable:__node("MacroAccess",1292,49,37,1292,__node("MacroAccess",1292,49,31,1292,{ident:__wrap(length,243)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1292,59,58,1292,{op:"+",node:__node("Access",1292,61,__wrap(array,243),__node("Const",1292,68,"length"))},"expression",false,false)}},"statement",false,false));test=(_ref=this.isConst(step)?__num(this.value(step))>0?(this.isConst(start)?__num(this.value(start))>=0?(init.push(__node("MacroAccess",1298,28,38,1298,{macroName:"let",macroData:{declarable:__node("MacroAccess",1298,32,37,1298,__node("MacroAccess",1298,32,31,1298,{isMutable:"mutable",ident:__wrap(index,243)},"statement",false,false),"statement",false,false),value:__wrap(start,243)}},"statement",false,false)),init.push(letLength)):(init.push(letLength),init.push(__node("MacroAccess",1302,28,38,1302,{macroName:"let",macroData:{declarable:__node("MacroAccess",1302,32,37,1302,__node("MacroAccess",1302,32,31,1302,{isMutable:"mutable",ident:__wrap(index,243)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1302,49,64,1302,{left:__wrap(length,243),inverted:false,op:"+",right:__wrap(start,243)},"expression",false,false)}},"statement",false,false))):(init.push(letLength),init.push(__node("MacroAccess",1305,26,38,1305,{macroName:"let",macroData:{declarable:__node("MacroAccess",1305,30,37,1305,__node("MacroAccess",1305,30,31,1305,{isMutable:"mutable",ident:__wrap(index,243)},"statement",false,false),"statement",false,false),value:__node("Call",1305,47,__node("Ident",1305,47,"__int"),[__wrap(start,243)],false,false)}},"statement",false,false)),init.push(__node("MacroAccess",1306,27,18,1306,{macroName:"if",macroData:{test:__node("MacroAccess",1306,30,9,1306,{left:__wrap(index,243),inverted:false,op:"~<",right:__node("Const",1306,41,0)},"expression",false,false),body:__node("MacroAccess",1306,49,101,1306,{left:__wrap(index,243),op:"+=",right:__wrap(length,243)},"expression",false,false),elseIfs:[]}},"expression",false,false))),this.isConst(end)&&(this.value(end)===1/0||this.isConst(inclusive)&&this.value(inclusive)&&this.value(end)===-1)?[__node("MacroAccess",1308,18,9,1308,{left:__wrap(index,243),inverted:false,op:"~<",right:__wrap(length,243)},"expression",false,false),__node("MacroAccess",1308,44,52,1308,{left:__wrap(index,243),op:"~+=",right:__wrap(step,243)},"expression",false,false)]:(tmp=this.tmp("end",false,"number"),init.push(__node("MacroAccess",1311,26,38,1311,{macroName:"let",macroData:{declarable:__node("MacroAccess",1311,30,37,1311,__node("MacroAccess",1311,30,31,1311,{isMutable:"mutable",ident:__wrap(tmp,243)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1311,45,58,1311,{op:"+",node:__wrap(end,243)},"expression",false,false)}},"statement",false,false)),!this.isConst(end)?init.push(__node("MacroAccess",1313,29,18,1313,{macroName:"if",macroData:{test:__node("MacroAccess",1313,32,9,1313,{left:__wrap(tmp,243),inverted:false,op:"~<",right:__node("Const",1313,41,0)},"expression",false,false),body:__node("MacroAccess",1313,49,52,1313,{left:__wrap(tmp,243),op:"~+=",right:__wrap(length,243)},"expression",false,false),elseIfs:[]}},"expression",false,false)):__num(this.value(end))<0?init.push(__node("MacroAccess",1315,29,52,1315,{left:__wrap(tmp,243),op:"~+=",right:__wrap(length,243)},"expression",false,false)):void 0,init.push(__node("MacroAccess",1316,27,18,1316,{macroName:"if",macroData:{test:__wrap(inclusive,243),body:__node("MacroAccess",1316,48,30,1316,{left:__wrap(tmp,243),op:":=",right:__node("MacroAccess",1316,55,2,1316,{left:__node("MacroAccess",1316,55,64,1316,{left:__wrap(tmp,243),inverted:false,op:"+",right:__node("Const",1316,63,1)},"expression",false,false),inverted:false,op:"or",right:__node("Const",1316,67,1/0)},"expression",false,false)},"expression",false,false),elseIfs:[]}},"expression",false,false)),init.push(__node("MacroAccess",1317,27,84,1317,{left:__wrap(tmp,243),op:"~min=",right:__wrap(length,243)},"expression",false,false)),[__node("MacroAccess",1318,18,9,1318,{left:__wrap(index,243),inverted:false,op:"~<",right:__wrap(tmp,243)},"expression",false,false),__node("MacroAccess",1318,39,52,1318,{left:__wrap(index,243),op:"~+=",right:__wrap(step,243)},"expression",false,false)])):this.value(step)===-1&&(!start||this.isConst(start)&&((_ref2=this.value(start))===-1||_ref2===1/0)&&this.isConst(end)&&this.value(end)===0&&this.isConst(inclusive)&&this.value(inclusive))?(hasLength?(init.push(letLength),init.push(__node("MacroAccess",1322,26,38,1322,{macroName:"let",macroData:{declarable:__node("MacroAccess",1322,30,37,1322,__node("MacroAccess",1322,30,31,1322,{isMutable:"mutable",ident:__wrap(index,243)},"statement",false,false),"statement",false,false),value:__wrap(length,243)}},"statement",false,false))):init.push(__node("MacroAccess",1324,26,38,1324,{macroName:"let",macroData:{declarable:__node("MacroAccess",1324,30,37,1324,__node("MacroAccess",1324,30,31,1324,{isMutable:"mutable",ident:__wrap(index,243)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1324,47,58,1324,{op:"+",node:__node("Access",1324,49,__wrap(array,243),__node("Const",1324,56,"length"))},"expression",false,false)}},"statement",false,false)),[__node("MacroAccess",1325,16,13,1325,{op:"postDec!",node:__wrap(index,243)},"expression",false,false),this.noop()]):(!this.isConst(end)||__num(this.value(end))<0?(hasLength=true):void 0,this.isConst(start)?(_ref2=this.value(start))===-1||_ref2===1/0?hasLength?(init.push(letLength),init.push(__node("MacroAccess",1333,30,38,1333,{macroName:"let",macroData:{declarable:__node("MacroAccess",1333,34,37,1333,__node("MacroAccess",1333,34,31,1333,{isMutable:"mutable",ident:__wrap(index,243)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1333,51,49,1333,{left:__wrap(length,243),inverted:false,op:"~-",right:__node("Const",1333,63,1)},"expression",false,false)}},"statement",false,false))):init.push(__node("MacroAccess",1335,30,38,1335,{macroName:"let",macroData:{declarable:__node("MacroAccess",1335,34,37,1335,__node("MacroAccess",1335,34,31,1335,{isMutable:"mutable",ident:__wrap(index,243)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1335,51,49,1335,{left:__node("MacroAccess",1335,51,58,1335,{op:"+",node:__node("Access",1335,53,__wrap(array,243),__node("Const",1335,60,"length"))},"expression",false,false),inverted:false,op:"~-",right:__node("Const",1335,70,1)},"expression",false,false)}},"statement",false,false)):(init.push(letLength),__num(this.value(start))>=0?init.push(__node("MacroAccess",1339,30,38,1339,{macroName:"let",macroData:{declarable:__node("MacroAccess",1339,34,37,1339,__node("MacroAccess",1339,34,31,1339,{isMutable:"mutable",ident:__wrap(index,243)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1339,51,18,1339,{macroName:"if",macroData:{test:__node("MacroAccess",1339,54,9,1339,{left:__wrap(start,243),inverted:false,op:"~<",right:__wrap(length,243)},"expression",false,false),body:__wrap(start,243),elseIfs:[],elseBody:__node("MacroAccess",1339,89,49,1339,{left:__wrap(length,243),inverted:false,op:"~-",right:__node("Const",1339,101,1)},"expression",false,false)}},"expression",false,false)}},"statement",false,false)):init.push(__node("MacroAccess",1341,30,38,1341,{macroName:"let",macroData:{declarable:__node("MacroAccess",1341,34,37,1341,__node("MacroAccess",1341,34,31,1341,{isMutable:"mutable",ident:__wrap(index,243)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1341,51,49,1341,{left:__wrap(length,243),inverted:false,op:"~+",right:__node("MacroAccess",1341,62,58,1341,{op:"+",node:__wrap(start,243)},"expression",false,false)},"expression",false,false)}},"statement",false,false))):(init.push(letLength),init.push(__node("MacroAccess",1344,26,38,1344,{macroName:"let",macroData:{declarable:__node("MacroAccess",1344,30,37,1344,__node("MacroAccess",1344,30,31,1344,{isMutable:"mutable",ident:__wrap(index,243)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1344,47,58,1344,{op:"+",node:__wrap(start,243)},"expression",false,false)}},"statement",false,false)),init.push(__node("MacroAccess",1345,26,18,1345,{macroName:"if",macroData:{test:__node("MacroAccess",1345,29,9,1345,{left:__wrap(index,243),inverted:false,op:"~<",right:__node("Const",1345,40,0)},"statement",false,false),body:__node("MacroAccess",1345,48,52,1345,{left:__wrap(index,243),op:"~+=",right:__wrap(length,243)},"expression",false,false),elseIfs:[],elseBody:__node("MacroAccess",1345,74,84,1345,{left:__wrap(index,243),op:"~min=",right:__wrap(length,243)},"expression",false,false)}},"statement",false,false)),init.push(__node("MacroAccess",1346,26,53,1346,{left:__wrap(index,243),op:"~-=",right:__node("Const",1346,38,1)},"statement",false,false))),this.isConst(end)?__num(this.value(end))>=0?[__node("MacroAccess",1349,20,18,1349,{macroName:"if",macroData:{test:__wrap(inclusive,243),body:__node("MacroAccess",1349,39,10,1349,{left:__wrap(index,243),inverted:false,op:"~>=",right:__wrap(end,243)},"expression",false,false),elseIfs:[],elseBody:__node("MacroAccess",1349,60,10,1349,{left:__wrap(index,243),inverted:false,op:"~>",right:__wrap(end,243)},"expression",false,false)}},"expression",false,false),__node("MacroAccess",1349,81,52,1349,{left:__wrap(index,243),op:"~+=",right:__wrap(step,243)},"expression",false,false)]:[__node("MacroAccess",1351,20,18,1351,{macroName:"if",macroData:{test:__wrap(inclusive,243),body:__node("MacroAccess",1351,39,10,1351,{left:__wrap(index,243),inverted:false,op:"~>=",right:__node("MacroAccess",1351,50,64,1351,{left:__wrap(end,243),inverted:false,op:"+",right:__wrap(length,243)},"expression",false,false)},"expression",false,false),elseIfs:[],elseBody:__node("MacroAccess",1351,70,10,1351,{left:__wrap(index,243),inverted:false,op:"~>",right:__node("MacroAccess",1351,80,64,1351,{left:__wrap(end,243),inverted:false,op:"+",right:__wrap(length,243)},"expression",false,false)},"expression",false,false)}},"expression",false,false),__node("MacroAccess",1351,101,52,1351,{left:__wrap(index,243),op:"~+=",right:__wrap(step,243)},"expression",false,false)]:(tmp=this.tmp("end",false,"number"),init.push(__node("MacroAccess",1354,26,38,1354,{macroName:"let",macroData:{declarable:__node("MacroAccess",1354,30,37,1354,__node("MacroAccess",1354,30,31,1354,{isMutable:"mutable",ident:__wrap(tmp,243)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1354,45,58,1354,{op:"+",node:__wrap(end,243)},"expression",false,false)}},"statement",false,false)),init.push(__node("MacroAccess",1355,26,18,1355,{macroName:"if",macroData:{test:__node("MacroAccess",1355,29,9,1355,{left:__wrap(tmp,243),inverted:false,op:"~<",right:__node("Const",1355,38,0)},"statement",false,false),body:__node("MacroAccess",1355,46,52,1355,{left:__wrap(tmp,243),op:"~+=",right:__wrap(length,243)},"expression",false,false),elseIfs:[]}},"statement",false,false)),[__node("MacroAccess",1356,18,18,1356,{macroName:"if",macroData:{test:__wrap(inclusive,243),body:__node("MacroAccess",1356,37,10,1356,{left:__wrap(index,243),inverted:false,op:"~>=",right:__wrap(tmp,243)},"expression",false,false),elseIfs:[],elseBody:__node("MacroAccess",1356,58,10,1356,{left:__wrap(index,243),inverted:false,op:"~>",right:__wrap(tmp,243)},"expression",false,false)}},"expression",false,false),__node("MacroAccess",1356,79,52,1356,{left:__wrap(index,243),op:"~+=",right:__wrap(step,243)},"expression",false,false)])):(this.isComplex(step)?(step=this.cache(__node("Call",1359,31,__node("Ident",1359,31,"__int"),[__node("Call",1359,38,__node("Ident",1359,38,"__nonzero"),[__wrap(step,243)],false,false)],false,false),init,"step",false)):init.unshift(__node("Call",1361,28,__node("Ident",1361,28,"__int"),[__node("Call",1361,35,__node("Ident",1361,35,"__nonzero"),[__wrap(step,243)],false,false)],false,false)),init.push(letLength),!start?(init.push(__node("MacroAccess",1364,24,38,1364,{macroName:"let",macroData:{declarable:__node("MacroAccess",1364,28,37,1364,__node("MacroAccess",1364,28,31,1364,{isMutable:"mutable",ident:__wrap(index,243)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1364,45,18,1364,{macroName:"if",macroData:{test:__node("MacroAccess",1364,48,10,1364,{left:__wrap(step,243),inverted:false,op:"~>",right:__node("Const",1364,58,0)},"expression",false,false),body:__node("Const",1364,65,0),elseIfs:[],elseBody:__node("MacroAccess",1364,71,49,1364,{left:__wrap(length,243),inverted:false,op:"~-",right:__node("Const",1364,83,1)},"expression",false,false)}},"expression",false,false)}},"statement",false,false)),[__node("MacroAccess",1366,17,18,1366,{macroName:"if",macroData:{test:__node("MacroAccess",1366,20,10,1366,{left:__wrap(step,243),inverted:false,op:"~>",right:__node("Const",1366,30,0)},"expression",false,false),body:__node("MacroAccess",1366,36,9,1366,{left:__wrap(index,243),inverted:false,op:"~<",right:__wrap(length,243)},"expression",false,false),elseIfs:[],elseBody:__node("MacroAccess",1366,59,10,1366,{left:__wrap(index,243),inverted:false,op:"~>=",right:__node("Const",1366,71,0)},"expression",false,false)}},"expression",false,false),__node("MacroAccess",1367,17,52,1367,{left:__wrap(index,243),op:"~+=",right:__wrap(step,243)},"expression",false,false)]):(this.isConst(start)?this.value(start)===1/0?init.push(__node("MacroAccess",1372,28,38,1372,{macroName:"let",macroData:{declarable:__node("MacroAccess",1372,32,37,1372,__node("MacroAccess",1372,32,31,1372,{isMutable:"mutable",ident:__wrap(index,243)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1372,49,49,1372,{left:__wrap(length,243),inverted:false,op:"~-",right:__node("Const",1372,61,1)},"expression",false,false)}},"statement",false,false)):init.push(__node("MacroAccess",1374,28,38,1374,{macroName:"let",macroData:{declarable:__node("MacroAccess",1374,32,37,1374,__node("MacroAccess",1374,32,31,1374,{isMutable:"mutable",ident:__wrap(index,243)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1374,49,18,1374,{macroName:"if",macroData:{test:__node("MacroAccess",1374,52,10,1374,{left:__wrap(start,243),inverted:false,op:"~>=",right:__node("Const",1374,64,0)},"expression",false,false),body:__wrap(start,243),elseIfs:[],elseBody:__node("MacroAccess",1374,82,64,1374,{left:__wrap(start,243),inverted:false,op:"+",right:__wrap(length,243)},"expression",false,false)}},"expression",false,false)}},"statement",false,false)):(init.push(__node("MacroAccess",1376,26,38,1376,{macroName:"let",macroData:{declarable:__node("MacroAccess",1376,30,37,1376,__node("MacroAccess",1376,30,31,1376,{isMutable:"mutable",ident:__wrap(index,243)},"statement",false,false),"statement",false,false),value:__wrap(start,243)}},"statement",false,false)),init.push(__node("MacroAccess",1377,26,18,1377,{macroName:"if",macroData:{test:__node("MacroAccess",1377,29,9,1377,{left:__wrap(index,243),inverted:false,op:"~<",right:__node("Const",1377,40,0)},"statement",false,false),body:__node("MacroAccess",1377,48,101,1377,{left:__wrap(index,243),op:"+=",right:__wrap(length,243)},"expression",false,false),elseIfs:[{test:__node("MacroAccess",1377,74,9,1377,{left:__wrap(step,243),inverted:false,op:"~<",right:__node("Const",1377,84,0)},"statement",false,false),body:__node("MacroAccess",1377,92,84,1377,{left:__wrap(index,243),op:"~min=",right:__wrap(length,243)},"expression",false,false)}]}},"statement",false,false))),tmp=this.tmp("end",false,"number"),this.isConst(end)?init.push(__node("MacroAccess",1380,26,38,1380,{macroName:"let",macroData:{declarable:__node("MacroAccess",1380,30,37,1380,__node("MacroAccess",1380,30,31,1380,{isMutable:"mutable",ident:__wrap(tmp,243)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1380,45,18,1380,{macroName:"if",macroData:{test:__node("MacroAccess",1380,48,9,1380,{left:__wrap(end,243),inverted:false,op:"~<",right:__node("Const",1380,57,0)},"expression",false,false),body:__node("MacroAccess",1380,63,49,1380,{left:__wrap(end,243),inverted:false,op:"~+",right:__wrap(length,243)},"expression",false,false),elseIfs:[],elseBody:__node("MacroAccess",1380,84,81,1380,{left:__wrap(end,243),inverted:false,op:"max",right:__node("MacroAccess",1380,95,18,1380,{macroName:"if",macroData:{test:__wrap(inclusive,243),body:__node("MacroAccess",1380,113,49,1380,{left:__wrap(length,243),inverted:false,op:"~-",right:__node("Const",1380,125,1)},"expression",false,false),elseIfs:[],elseBody:__wrap(length,243)}},"expression",false,false)},"expression",false,false)}},"expression",false,false)}},"statement",false,false)):(init.push(__node("MacroAccess",1382,26,38,1382,{macroName:"let",macroData:{declarable:__node("MacroAccess",1382,30,37,1382,__node("MacroAccess",1382,30,31,1382,{isMutable:"mutable",ident:__wrap(tmp,243)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1382,45,58,1382,{op:"+",node:__wrap(end,243)},"expression",false,false)}},"statement",false,false)),init.push(__node("MacroAccess",1383,26,18,1383,{macroName:"if",macroData:{test:__node("MacroAccess",1383,29,9,1383,{left:__wrap(tmp,243),inverted:false,op:"~<",right:__node("Const",1383,38,0)},"statement",false,false),body:__node("MacroAccess",1383,46,101,1383,{left:__wrap(tmp,243),op:"+=",right:__wrap(length,243)},"expression",false,false),elseIfs:[{test:__node("MacroAccess",1383,70,10,1383,{left:__wrap(step,243),inverted:false,op:"~>",right:__node("Const",1383,80,0)},"statement",false,false),body:__node("MacroAccess",1383,88,84,1383,{left:__wrap(tmp,243),op:"~min=",right:__node("MacroAccess",1383,98,18,1383,{macroName:"if",macroData:{test:__wrap(inclusive,243),body:__node("MacroAccess",1383,117,49,1383,{left:__wrap(length,243),inverted:false,op:"~-",right:__node("Const",1383,129,1)},"expression",false,false),elseIfs:[],elseBody:__wrap(length,243)}},"expression",false,false)},"expression",false,false)}],elseBody:__node("MacroAccess",1383,151,85,1383,{left:__wrap(tmp,243),op:"~max=",right:__node("MacroAccess",1383,163,18,1383,{macroName:"if",macroData:{test:__wrap(inclusive,243),body:__node("Const",1383,182,0),elseIfs:[],elseBody:__node("MacroAccess",1383,188,59,1383,{op:"-",node:__node("Const",1383,190,1)},"expression",false,false)}},"expression",false,false)},"expression",false,false)}},"statement",false,false))),end=tmp,[__node("MacroAccess",1386,17,19,1386,{macroName:"if",macroData:{test:__node("MacroAccess",1386,20,10,1386,{left:__wrap(step,243),inverted:false,op:"~>",right:__node("Const",1386,30,0)},"expression",false,false),body:__node("MacroAccess",1387,15,18,1387,{macroName:"if",macroData:{test:__wrap(inclusive,243),body:__node("MacroAccess",1387,33,9,1387,{left:__wrap(index,243),inverted:false,op:"~<=",right:__wrap(end,243)},"expression",false,false),elseIfs:[],elseBody:__node("MacroAccess",1387,54,9,1387,{left:__wrap(index,243),inverted:false,op:"~<",right:__wrap(end,243)},"expression",false,false)}},"statement",false,false),elseIfs:[],elseBody:__node("MacroAccess",1389,15,18,1389,{macroName:"if",macroData:{test:__wrap(inclusive,243),body:__node("MacroAccess",1389,33,10,1389,{left:__wrap(index,243),inverted:false,op:"~>=",right:__wrap(end,243)},"expression",false,false),elseIfs:[],elseBody:__node("MacroAccess",1389,54,9,1389,{left:__wrap(index,243),inverted:false,op:"~<",right:__wrap(end,243)},"expression",false,false)}},"statement",false,false)}},"expression",false,false),__node("MacroAccess",1390,17,52,1390,{left:__wrap(index,243),op:"~+=",right:__wrap(step,243)},"expression",false,false)])))[0];increment=_ref[1];if(this.hasFunc(body)){func=this.tmp("f",false,"function");if(value&&valueIdent!==value.ident){body=__node("Block",1397,1,[__node("MacroAccess",1397,13,38,1397,{macroName:"let",macroData:{declarable:__node("MacroAccess",1397,16,37,1397,__node("MacroAccess",1397,16,31,1397,{ident:__wrap(value,243)},"statement",false,false),"statement",false,false),value:__wrap(valueIdent,243)}},"statement",false,false),__wrap(body,243)],null);}if(hasIndex){init.push(__node("MacroAccess",1400,24,38,1400,{macroName:"let",macroData:{declarable:__node("MacroAccess",1400,28,37,1400,__node("MacroAccess",1400,28,31,1400,{ident:__wrap(func,243)},"statement",false,false),"statement",false,false),value:__node("Function",1400,38,[__node("Param",1400,39,__wrap(valueIdent,274),void 0,false,false,void 0),__node("Param",1400,52,__wrap(index,274),void 0,false,false,void 0)],__wrap(body,274),true,false,false,void 0,false,[])}},"statement",false,false));body=__node("Call",1401,23,__wrap(func,243),[__node("This",1401,31),__wrap(valueExpr,243),__wrap(index,243)],false,true);}else{init.push(__node("MacroAccess",1403,24,38,1403,{macroName:"let",macroData:{declarable:__node("MacroAccess",1403,28,37,1403,__node("MacroAccess",1403,28,31,1403,{ident:__wrap(func,243)},"statement",false,false),"statement",false,false),value:__node("Function",1403,38,[__node("Param",1403,39,__wrap(valueIdent,276),void 0,false,false,void 0)],__wrap(body,276),true,false,false,void 0,false,[])}},"statement",false,false));body=__node("Call",1404,23,__wrap(func,243),[__node("This",1404,31),__wrap(valueExpr,243)],false,true);}}else if(valueIdent===value.ident||reducer!=="filter"){body=__node("Block",1407,1,[__node("MacroAccess",1407,11,38,1407,{macroName:"let",macroData:{declarable:__node("MacroAccess",1407,14,37,1407,__node("MacroAccess",1407,14,31,1407,{ident:__wrap(value,243)},"statement",false,false),"statement",false,false),value:__wrap(valueExpr,243)}},"statement",false,false),__wrap(body,243)],null);}else{body=__node("Block",1411,1,[__node("MacroAccess",1411,11,38,1411,{macroName:"let",macroData:{declarable:__node("MacroAccess",1411,14,37,1411,__node("MacroAccess",1411,14,31,1411,{ident:__wrap(valueIdent,243)},"statement",false,false),"statement",false,false),value:__wrap(valueExpr,243)}},"statement",false,false),__node("MacroAccess",1412,11,38,1412,{macroName:"let",macroData:{declarable:__node("MacroAccess",1412,14,37,1412,__node("MacroAccess",1412,14,31,1412,{ident:__wrap(value,243)},"statement",false,false),"statement",false,false),value:__wrap(valueIdent,243)}},"statement",false,false),__wrap(body,243)],null);}if(reducer==="every"){return __node("MacroAccess",1416,13,104,1416,{macroName:"for",macroData:{reducer:"every",init:__wrap(init,243),test:__wrap(test,243),step:__wrap(increment,243),body:__wrap(body,243),elseBody:__wrap(elseBody,243)}},"expression",false,false);}else if(reducer==="some"){return __node("MacroAccess",1421,13,104,1421,{macroName:"for",macroData:{reducer:"some",init:__wrap(init,243),test:__wrap(test,243),step:__wrap(increment,243),body:__wrap(body,243),elseBody:__wrap(elseBody,243)}},"expression",false,false);}else if(reducer==="first"){return __node("MacroAccess",1426,13,104,1426,{macroName:"for",macroData:{reducer:"first",init:__wrap(init,243),test:__wrap(test,243),step:__wrap(increment,243),body:__wrap(body,243),elseBody:__wrap(elseBody,243)}},"expression",false,false);}else if(reducer==="filter"){body=this.mutateLast(body,function(node){return __node("MacroAccess",1432,14,19,1432,{macroName:"if",macroData:{test:__wrap(node,280),body:__wrap(valueIdent,280),elseIfs:[]}},"statement",false,false);});return __node("MacroAccess",1434,13,104,1434,{macroName:"for",macroData:{init:__wrap(init,243),test:__wrap(test,243),step:__wrap(increment,243),body:__wrap(body,243),elseBody:__wrap(elseBody,243)}},"expression",false,false);}else if(this.position==="expression"){return __node("MacroAccess",1439,13,104,1439,{macroName:"for",macroData:{init:__wrap(init,243),test:__wrap(test,243),step:__wrap(increment,243),body:__wrap(body,243),elseBody:__wrap(elseBody,243)}},"expression",false,false);}else{return __node("MacroAccess",1445,11,104,1445,{macroName:"for",macroData:{init:__wrap(init,243),test:__wrap(test,243),step:__wrap(increment,243),body:__wrap(body,243),elseBody:__wrap(elseBody,243)}},"statement",false,false);}}};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "reducer",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "choice",
                  choices: [
                    {type: "const", value: "every"},
                    {type: "const", value: "some"},
                    {type: "const", value: "first"},
                    {type: "const", value: "filter"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "value",
              asType: {type: "ident", name: "Declarable"}
            },
            {
              type: "ident",
              name: "index",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: ","},
                    {
                      type: "ident",
                      name: "value",
                      asType: {type: "ident", name: "Identifier"}
                    },
                    {
                      type: "ident",
                      name: "length",
                      asType: {
                        type: "many",
                        multiplier: "?",
                        inner: {
                          type: "sequence",
                          items: [
                            {type: "const", value: ","},
                            {
                              type: "this",
                              asType: {type: "ident", name: "Identifier"}
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            },
            {type: "const", value: "in"},
            {
              type: "ident",
              name: "array",
              asType: {type: "ident", name: "Logic"}
            },
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            },
            {
              type: "ident",
              name: "elseBody",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "\n"},
                    {type: "const", value: "else"},
                    {
                      type: "this",
                      asType: {
                        type: "choice",
                        choices: [
                          {type: "ident", name: "Body"},
                          {
                            type: "sequence",
                            items: [
                              {type: "const", value: ";"},
                              {
                                type: "this",
                                asType: {type: "ident", name: "Statement"}
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          names: ["for"],
          id: 111
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var array,body,current,currentStart,index,length,macroData,macroName,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;value=macroData.value;index=macroData.index;array=macroData.array;current=macroData.current;currentStart=macroData.currentStart;body=macroData.body;value=this.macroExpand1(value);body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",1452,59,30,1452,{left:__wrap(current,282),op:":=",right:__wrap(node,282)},"expression",false,false);});if(index!=null){length=index.length;}index=index!=null?index.value:void 0;return __node("Block",1456,1,[__node("MacroAccess",1456,7,38,1456,{macroName:"let",macroData:{declarable:__node("MacroAccess",1456,10,37,1456,__node("MacroAccess",1456,10,31,1456,{isMutable:"mutable",ident:__wrap(current,281)},"statement",false,false),"statement",false,false),value:__wrap(currentStart,281)}},"statement",false,false),__node("MacroAccess",1457,7,111,1457,{macroName:"for",macroData:{value:__node("MacroAccess",1457,10,37,1457,__node("MacroAccess",1457,10,31,1457,{ident:__wrap(value,281)},"statement",false,false),"statement",false,false),index:{value:__wrap(index,281),length:__wrap(length,281)},array:__wrap(array,281),body:__wrap(body,281)}},"statement",false,false),__wrap(current,281)],null);};}.call(this));',
          options: {},
          params: [
            {type: "const", value: "reduce"},
            {
              type: "ident",
              name: "value",
              asType: {type: "ident", name: "Declarable"}
            },
            {
              type: "ident",
              name: "index",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: ","},
                    {
                      type: "ident",
                      name: "value",
                      asType: {type: "ident", name: "Identifier"}
                    },
                    {
                      type: "ident",
                      name: "length",
                      asType: {
                        type: "many",
                        multiplier: "?",
                        inner: {
                          type: "sequence",
                          items: [
                            {type: "const", value: ","},
                            {
                              type: "this",
                              asType: {type: "ident", name: "Identifier"}
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            },
            {type: "const", value: "in"},
            {
              type: "ident",
              name: "array",
              asType: {type: "ident", name: "Logic"}
            },
            {type: "const", value: ","},
            {
              type: "ident",
              name: "current",
              asType: {type: "ident", name: "Identifier"}
            },
            {type: "const", value: "="},
            {type: "ident", name: "currentStart"},
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            }
          ],
          names: ["for"],
          id: 112
        },
        {
          code: 'return (function(){"use strict";var __strnum,__typeof;__strnum=function(strnum){var type;type=typeof strnum;if(type==="string"){return strnum;}else if(type==="number"){return String(strnum);}else{throw TypeError("Expected a string or number, got "+__typeof(strnum));}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node){var arr,body,elseBody,func,index,init,key,letIndex,letValue,loop,macroData,macroName,object,own,post,reducer,runElse,type,value,valueIdent;macroName=macroFullData.macroName;macroData=macroFullData.macroData;reducer=macroData.reducer;key=macroData.key;value=macroData.value;type=macroData.type;object=macroData.object;body=macroData.body;elseBody=macroData.elseBody;index=null;if(value){index=value.index;value=this.macroExpand1(value.value);}own=type==="of";init=[];if(own||value){object=this.cache(object,init,"obj",false);}this["let"](key,false,this.type("string"));letValue=value&&this.macroExpandAll(__node("MacroAccess",1473,52,38,1473,{macroName:"let",macroData:{declarable:__node("MacroAccess",1473,56,37,1473,__node("MacroAccess",1473,56,31,1473,{ident:__wrap(value,284)},"statement",false,false),"statement",false,false),value:__node("Access",1473,65,__wrap(object,284),__wrap(key,284))}},"statement",false,false));letIndex=index&&this.macroExpandAll(__node("MacroAccess",1474,52,38,1474,{macroName:"let",macroData:{declarable:__node("MacroAccess",1474,56,37,1474,__node("MacroAccess",1474,56,31,1474,{isMutable:"mutable",ident:__wrap(index,284)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1474,73,59,1474,{op:"-",node:__node("Const",1474,75,1)},"expression",false,false)}},"statement",false,false));if(this.hasFunc(body)){func=this.tmp("f",false,"function");if(value){if(value.type==="ident"){valueIdent=value.ident;}else{valueIdent=this.tmp("v",false);}}if(value&&valueIdent!==value.ident){body=__node("Block",1480,1,[__node("MacroAccess",1480,11,38,1480,{macroName:"let",macroData:{declarable:__node("MacroAccess",1480,14,37,1480,__node("MacroAccess",1480,14,31,1480,{ident:__wrap(value,284)},"statement",false,false),"statement",false,false),value:__wrap(valueIdent,284)}},"statement",false,false),__wrap(body,284)],null);}if(index){init.push(__node("MacroAccess",1483,23,38,1483,{macroName:"let",macroData:{declarable:__node("MacroAccess",1483,27,37,1483,__node("MacroAccess",1483,27,31,1483,{ident:__wrap(func,284)},"statement",false,false),"statement",false,false),value:__node("Function",1483,37,[__node("Param",1483,38,__wrap(key,294),void 0,false,false,void 0),__node("Param",1483,43,__wrap(valueIdent,294),void 0,false,false,void 0),__node("Param",1483,57,__wrap(index,294),void 0,false,false,void 0)],__wrap(body,294),true,false,false,void 0,false,[])}},"statement",false,false));body=__node("Call",1484,22,__wrap(func,284),[__node("This",1484,30),__wrap(key,284),__node("Access",1484,41,__wrap(object,284),__wrap(key,284)),__wrap(index,284)],false,true);}else if(value){init.push(__node("MacroAccess",1486,23,38,1486,{macroName:"let",macroData:{declarable:__node("MacroAccess",1486,27,37,1486,__node("MacroAccess",1486,27,31,1486,{ident:__wrap(func,284)},"statement",false,false),"statement",false,false),value:__node("Function",1486,37,[__node("Param",1486,38,__wrap(key,296),void 0,false,false,void 0),__node("Param",1486,43,__wrap(valueIdent,296),void 0,false,false,void 0)],__wrap(body,296),true,false,false,void 0,false,[])}},"statement",false,false));body=__node("Call",1487,22,__wrap(func,284),[__node("This",1487,30),__wrap(key,284),__node("Access",1487,41,__wrap(object,284),__wrap(key,284))],false,true);}else{init.push(__node("MacroAccess",1489,23,38,1489,{macroName:"let",macroData:{declarable:__node("MacroAccess",1489,27,37,1489,__node("MacroAccess",1489,27,31,1489,{ident:__wrap(func,284)},"statement",false,false),"statement",false,false),value:__node("Function",1489,37,[__node("Param",1489,38,__wrap(key,298),void 0,false,false,void 0)],__wrap(body,298),true,false,false,void 0,false,[])}},"statement",false,false));body=__node("Call",1490,22,__wrap(func,284),[__node("This",1490,30),__wrap(key,284)],false,true);}}else if(value){body=__node("Block",1493,1,[__wrap(letValue,284),__wrap(body,284)],null);}post=[];if(elseBody){runElse=this.tmp("else",false,"boolean");init.push(__node("MacroAccess",1499,21,38,1499,{macroName:"let",macroData:{declarable:__node("MacroAccess",1499,25,37,1499,__node("MacroAccess",1499,25,31,1499,{ident:__wrap(runElse,284)},"statement",false,false),"statement",false,false),value:__node("Const",1499,37,true)}},"statement",false,false));body=__node("Block",1501,1,[__node("MacroAccess",1501,9,30,1501,{left:__wrap(runElse,284),op:":=",right:__node("Const",1501,21,false)},"statement",false,false),__wrap(body,284)],null);post.push(__node("MacroAccess",1504,9,19,1504,{macroName:"if",macroData:{test:__wrap(runElse,284),body:__wrap(elseBody,284),elseIfs:[]}},"statement",false,false));}if(index){init.push(letIndex);body=__node("Block",1510,1,[__node("MacroAccess",1510,9,52,1510,{left:__wrap(index,284),op:"~+=",right:__node("Const",1510,20,1)},"statement",false,false),__wrap(body,284)],null);}if(own){body=__node("MacroAccess",1515,9,19,1515,{macroName:"if",macroData:{test:__node("MacroAccess",1515,11,71,1515,{left:__wrap(object,284),inverted:false,op:"ownskey",right:__wrap(key,284)},"statement",false,false),body:__wrap(body,284),elseIfs:[]}},"statement",false,false);}if(reducer){if(reducer==="first"){body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",1520,62,39,1520,{macroName:"return",macroData:{node:__wrap(node,302)}},"statement",false,false);});loop=this.forIn(key,object,body);return __node("MacroAccess",1522,12,0,1522,{macroName:"do",macroData:{body:__node("Block",1523,1,[__wrap(init,284),__wrap(loop,284),__wrap(elseBody,284)],null)}},"statement",false,false);}else{if(elseBody){throw Error("Cannot use a for loop with an else with "+__strnum(reducer));}if(reducer==="some"){body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",1531,13,19,1531,{macroName:"if",macroData:{test:__wrap(node,304),body:__node("MacroAccess",1532,15,39,1532,{macroName:"return",macroData:{node:__node("Const",1532,21,true)}},"statement",false,false),elseIfs:[]}},"statement",false,false);});loop=this.forIn(key,object,body);return __node("MacroAccess",1534,14,0,1534,{macroName:"do",macroData:{body:__node("Block",1535,1,[__wrap(init,284),__wrap(loop,284),__node("Const",1537,13,false)],null)}},"statement",false,false);}else if(reducer==="every"){body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",1540,13,19,1540,{macroName:"if",macroData:{test:__node("MacroAccess",1540,15,3,1540,{op:"not",node:__wrap(node,306)},"statement",false,false),body:__node("MacroAccess",1541,15,39,1541,{macroName:"return",macroData:{node:__node("Const",1541,21,false)}},"statement",false,false),elseIfs:[]}},"statement",false,false);});loop=this.forIn(key,object,body);return __node("MacroAccess",1543,14,0,1543,{macroName:"do",macroData:{body:__node("Block",1544,1,[__wrap(init,284),__wrap(loop,284),__node("Const",1546,13,true)],null)}},"statement",false,false);}else{throw Error("Unknown reducer: "+__strnum(reducer));}}}else if(this.position==="expression"){if(elseBody){throw Error("Cannot use a for loop with an else as an expression");}arr=this.tmp("arr",false,this.type(body).array());body=this.mutateLast(body||this.noop(),function(node){return __node("Call",1553,61,__node("Access",1553,61,__wrap(arr,309),__node("Const",1553,67,"push")),[__wrap(node,309)],false,false);});init.unshift(__node("MacroAccess",1554,23,38,1554,{macroName:"let",macroData:{declarable:__node("MacroAccess",1554,27,37,1554,__node("MacroAccess",1554,27,31,1554,{ident:__wrap(arr,284)},"statement",false,false),"statement",false,false),value:__node("Array",1554,34,[])}},"statement",false,false));loop=this.forIn(key,object,body);return __node("Block",1557,1,[__wrap(init,284),__wrap(loop,284),__wrap(arr,284)],null);}else{loop=this.forIn(key,object,body);return __node("Block",1563,1,[__wrap(init,284),__wrap(loop,284),__wrap(post,284)],null);}};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "reducer",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "choice",
                  choices: [
                    {type: "const", value: "every"},
                    {type: "const", value: "some"},
                    {type: "const", value: "first"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "key",
              asType: {type: "ident", name: "Identifier"}
            },
            {
              type: "ident",
              name: "value",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: ","},
                    {
                      type: "ident",
                      name: "value",
                      asType: {type: "ident", name: "Declarable"}
                    },
                    {
                      type: "ident",
                      name: "index",
                      asType: {
                        type: "many",
                        multiplier: "?",
                        inner: {
                          type: "sequence",
                          items: [
                            {type: "const", value: ","},
                            {
                              type: "this",
                              asType: {type: "ident", name: "Identifier"}
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "type",
              asType: {
                type: "choice",
                choices: [
                  {type: "const", value: "of"},
                  {type: "const", value: "ofall"}
                ]
              }
            },
            {
              type: "ident",
              name: "object",
              asType: {type: "ident", name: "Logic"}
            },
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            },
            {
              type: "ident",
              name: "elseBody",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "\n"},
                    {type: "const", value: "else"},
                    {
                      type: "this",
                      asType: {
                        type: "choice",
                        choices: [
                          {type: "ident", name: "Body"},
                          {
                            type: "sequence",
                            items: [
                              {type: "const", value: ";"},
                              {
                                type: "this",
                                asType: {type: "ident", name: "Statement"}
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          names: ["for"],
          id: 113
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var body,current,currentStart,index,key,loop,macroData,macroName,object,type,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;key=macroData.key;value=macroData.value;type=macroData.type;object=macroData.object;current=macroData.current;currentStart=macroData.currentStart;body=macroData.body;body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",1568,59,30,1568,{left:__wrap(current,314),op:":=",right:__wrap(node,314)},"expression",false,false);});if(value!=null){index=value.index;}value=value!=null?value.value:void 0;if(type==="of"){loop=__node("MacroAccess",1572,10,113,1572,{macroName:"for",macroData:{key:__wrap(key,313),value:{value:__node("MacroAccess",1572,20,37,1572,__node("MacroAccess",1572,20,31,1572,{ident:__wrap(value,313)},"statement",false,false),"statement",false,false),index:__wrap(index,313)},type:"of",object:__wrap(object,313),body:__wrap(body,313)}},"statement",false,false);}else{loop=__node("MacroAccess",1575,10,113,1575,{macroName:"for",macroData:{key:__wrap(key,313),value:{value:__node("MacroAccess",1575,20,37,1575,__node("MacroAccess",1575,20,31,1575,{ident:__wrap(value,313)},"statement",false,false),"statement",false,false),index:__wrap(index,313)},type:"ofall",object:__wrap(object,313),body:__wrap(body,313)}},"statement",false,false);}return __node("Block",1578,1,[__node("MacroAccess",1578,7,38,1578,{macroName:"let",macroData:{declarable:__node("MacroAccess",1578,10,37,1578,__node("MacroAccess",1578,10,31,1578,{isMutable:"mutable",ident:__wrap(current,313)},"statement",false,false),"statement",false,false),value:__wrap(currentStart,313)}},"statement",false,false),__wrap(loop,313),__wrap(current,313)],null);};}.call(this));',
          options: {},
          params: [
            {type: "const", value: "reduce"},
            {
              type: "ident",
              name: "key",
              asType: {type: "ident", name: "Identifier"}
            },
            {
              type: "ident",
              name: "value",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: ","},
                    {
                      type: "ident",
                      name: "value",
                      asType: {type: "ident", name: "Declarable"}
                    },
                    {
                      type: "ident",
                      name: "index",
                      asType: {
                        type: "many",
                        multiplier: "?",
                        inner: {
                          type: "sequence",
                          items: [
                            {type: "const", value: ","},
                            {
                              type: "this",
                              asType: {type: "ident", name: "Identifier"}
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "type",
              asType: {
                type: "choice",
                choices: [
                  {type: "const", value: "of"},
                  {type: "const", value: "ofall"}
                ]
              }
            },
            {
              type: "ident",
              name: "object",
              asType: {type: "ident", name: "Logic"}
            },
            {type: "const", value: ","},
            {
              type: "ident",
              name: "current",
              asType: {type: "ident", name: "Identifier"}
            },
            {type: "const", value: "="},
            {type: "ident", name: "currentStart"},
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            }
          ],
          names: ["for"],
          id: 114
        },
        {
          code: 'return (function(){"use strict";var __isArray,__slice,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__slice=Array.prototype.slice;__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node){var _this,catchBody,catchIdent,catchPart,current,elseBody,finallyBody,hasElse,init,macroData,macroName,runElse,tryBody,typedCatches;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;tryBody=macroData.tryBody;typedCatches=macroData.typedCatches;catchPart=macroData.catchPart;elseBody=macroData.elseBody;finallyBody=macroData.finallyBody;hasElse=!!elseBody;if(!catchPart&&hasElse&&!finallyBody){throw Error("Must provide at least a catch, else, or finally to a try block");}if(catchPart!=null){catchIdent=catchPart.ident;}if(catchPart!=null){catchBody=catchPart.body;}if(typedCatches.length!==0){if(!catchIdent){catchIdent=typedCatches[0].ident;}catchBody=(function(){var _arr,_f,_i,current;current=catchBody||__node("MacroAccess",1973,94,11,1973,{op:"throw",node:__wrap(catchIdent,400)},"statement",false,false);for(_arr=__toArray(typedCatches), _i=_arr.length, _f=function(typeCatch){var _this,letErr,typeIdent,types;_this=this;typeIdent=typeCatch.ident;if(this.name(typeIdent)!==this.name(catchIdent)){letErr=__node("MacroAccess",1976,14,38,1976,{macroName:"let",macroData:{declarable:__node("MacroAccess",1976,18,37,1976,__node("MacroAccess",1976,18,31,1976,{ident:__wrap(typeIdent,400)},"statement",false,false),"statement",false,false),value:__wrap(catchIdent,400)}},"statement",false,false);}else{letErr=this.noop();}types=this.array((function(){var _arr,_arr2,_i,_len,type;for(_arr=[], _arr2=__toArray(_this.isTypeUnion(typeCatch.type)?_this.types(typeCatch.type):[typeCatch.type]), _i=0, _len=_arr2.length;_i<_len;++_i){type=_arr2[_i];if(_this.isTypeArray(type)){throw Error("Expected a normal type, cannot use an array type");}else if(_this.isTypeGeneric(type)){throw Error("Expected a normal type, cannot use a generic type");}else if(_this.isTypeFunction(type)){throw Error("Expected a normal type, cannot use a function type");}else if(_this.isTypeObject(type)){throw Error("Expected a normal type, cannot use an object type");}_arr.push(type);}return _arr;}()));return current=__node("MacroAccess",1990,11,19,1990,{macroName:"if",macroData:{test:__node("MacroAccess",1990,13,116,1990,{left:__wrap(catchIdent,400),inverted:false,op:"instanceofsome",right:__wrap(types,400)},"statement",false,false),body:__node("Block",1991,1,[__wrap(letErr,400),__wrap(typeCatch.body,400)],null),elseIfs:[],elseBody:__wrap(current,400)}},"statement",false,false);};_i--;){_f.call(_this,_arr[_i]);}return current;}());}init=[];if(hasElse){runElse=this.tmp("else",false,"boolean");init.push(__node("MacroAccess",1999,20,38,1999,{macroName:"let",macroData:{declarable:__node("MacroAccess",1999,24,37,1999,__node("MacroAccess",1999,24,31,1999,{ident:__wrap(runElse,400)},"statement",false,false),"statement",false,false),value:__node("Const",1999,36,true)}},"statement",false,false));if(catchBody){catchBody=__node("Block",2002,1,[__node("MacroAccess",2002,11,30,2002,{left:__wrap(runElse,400),op:":=",right:__node("Const",2002,23,false)},"statement",false,false),__wrap(catchBody,400)],null);}else{catchIdent=this.tmp("err");catchBody=__node("Block",2007,1,[__node("MacroAccess",2007,11,30,2007,{left:__wrap(runElse,400),op:":=",right:__node("Const",2007,23,false)},"statement",false,false),__node("MacroAccess",2008,11,11,2008,{op:"throw",node:__wrap(catchIdent,400)},"statement",false,false)],null);}}current=tryBody;if(catchBody){current=this.tryCatch(current,catchIdent,catchBody);}if(hasElse){current=this.tryFinally(current,__node("MacroAccess",2015,9,19,2015,{macroName:"if",macroData:{test:__wrap(runElse,400),body:__wrap(elseBody,400),elseIfs:[]}},"statement",false,false));}if(finallyBody){current=this.tryFinally(current,finallyBody);}return __node("Block",2021,1,[__wrap(init,400),__wrap(current,400)],null);};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "tryBody",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            },
            {
              type: "ident",
              name: "typedCatches",
              asType: {
                type: "many",
                multiplier: "*",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "\n"},
                    {type: "const", value: "catch"},
                    {
                      type: "ident",
                      name: "ident",
                      asType: {type: "ident", name: "Identifier"}
                    },
                    {type: "const", value: "as"},
                    {
                      type: "ident",
                      name: "type",
                      asType: {type: "ident", name: "Type"}
                    },
                    {
                      type: "ident",
                      name: "body",
                      asType: {
                        type: "choice",
                        choices: [
                          {type: "ident", name: "Body"},
                          {
                            type: "sequence",
                            items: [
                              {type: "const", value: ";"},
                              {
                                type: "this",
                                asType: {type: "ident", name: "Statement"}
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "catchPart",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "\n"},
                    {type: "const", value: "catch"},
                    {
                      type: "ident",
                      name: "ident",
                      asType: {type: "ident", name: "Identifier"}
                    },
                    {
                      type: "ident",
                      name: "body",
                      asType: {
                        type: "choice",
                        choices: [
                          {type: "ident", name: "Body"},
                          {
                            type: "sequence",
                            items: [
                              {type: "const", value: ";"},
                              {
                                type: "this",
                                asType: {type: "ident", name: "Statement"}
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "elseBody",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "\n"},
                    {type: "const", value: "else"},
                    {
                      type: "this",
                      asType: {
                        type: "choice",
                        choices: [
                          {type: "ident", name: "Body"},
                          {
                            type: "sequence",
                            items: [
                              {type: "const", value: ";"},
                              {
                                type: "this",
                                asType: {type: "ident", name: "Statement"}
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "finallyBody",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "\n"},
                    {type: "const", value: "finally"},
                    {
                      type: "this",
                      asType: {
                        type: "choice",
                        choices: [
                          {type: "ident", name: "Body"},
                          {
                            type: "sequence",
                            items: [
                              {type: "const", value: ";"},
                              {
                                type: "this",
                                asType: {type: "ident", name: "Statement"}
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          names: ["try"],
          id: 117
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var body,captureValue,elseBody,func,index,init,iterable,iterator,macroData,macroName,main,post,reducer,runElse,step,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;reducer=macroData.reducer;value=macroData.value;index=macroData.index;iterable=macroData.iterable;body=macroData.body;elseBody=macroData.elseBody;init=[];iterator=this.cache(__node("Call",2032,30,__node("Access",2032,30,__wrap(iterable,410),__node("Const",2032,41,"iterator")),[],false,false),init,"iter",false);step=[];if(index){init.push(__node("MacroAccess",2036,20,38,2036,{macroName:"let",macroData:{declarable:__node("MacroAccess",2036,24,37,2036,__node("MacroAccess",2036,24,31,2036,{isMutable:"mutable",ident:__wrap(index,410)},"statement",false,false),"statement",false,false),value:__node("Const",2036,42,0)}},"statement",false,false));step.push(__node("MacroAccess",2037,21,52,2037,{left:__wrap(index,410),op:"~+=",right:__node("Const",2037,33,1)},"expression",false,false));}captureValue=__node("MacroAccess",2039,28,117,2039,{macroName:"try",macroData:{tryBody:__node("MacroAccess",2040,7,38,2040,{macroName:"let",macroData:{declarable:__node("MacroAccess",2040,10,37,2040,__node("MacroAccess",2040,10,31,2040,{ident:__wrap(value,410)},"statement",false,false),"statement",false,false),value:__node("Call",2040,19,__node("Access",2040,19,__wrap(iterator,410),__node("Const",2040,30,"next")),[],false,false)}},"statement",false,false),typedCatches:[],catchPart:{ident:__node("Ident",2041,10,"e"),body:__node("MacroAccess",2042,7,19,2042,{macroName:"if",macroData:{test:__node("MacroAccess",2042,9,5,2042,{left:__node("Ident",2042,9,"e"),inverted:false,op:"==",right:__node("Ident",2042,14,"StopIteration")},"statement",false,false),body:__node("MacroAccess",2043,9,16,2043,{macroName:"break",macroData:{}},"statement",false,false),elseIfs:[],elseBody:__node("MacroAccess",2045,9,11,2045,{op:"throw",node:__node("Ident",2045,14,"e")},"statement",false,false)}},"statement",false,false)}}},"statement",false,false);post=[];if(elseBody&&!reducer&&this.position!=="expression"){runElse=this.tmp("else",false,"boolean");init.push(__node("MacroAccess",2050,21,38,2050,{macroName:"let",macroData:{declarable:__node("MacroAccess",2050,25,37,2050,__node("MacroAccess",2050,25,31,2050,{ident:__wrap(runElse,410)},"statement",false,false),"statement",false,false),value:__node("Const",2050,37,true)}},"statement",false,false));body=__node("Block",2052,1,[__node("MacroAccess",2052,9,30,2052,{left:__wrap(runElse,410),op:":=",right:__node("Const",2052,21,false)},"statement",false,false),__wrap(body,410)],null);post.push(__node("MacroAccess",2055,9,19,2055,{macroName:"if",macroData:{test:__wrap(runElse,410),body:__wrap(elseBody,410),elseIfs:[]}},"statement",false,false));}if(this.hasFunc(body)){func=this.tmp("f",false,"function");if(!index){init.push(__node("MacroAccess",2061,22,38,2061,{macroName:"let",macroData:{declarable:__node("MacroAccess",2061,26,37,2061,__node("MacroAccess",2061,26,31,2061,{ident:__wrap(func,410)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",2061,36,115,2061,{op:"",node:__node("Function",2061,36,[__node("Param",2061,37,__wrap(value,421),void 0,false,false,void 0)],__wrap(body,421),true,false,false,void 0,false,[])},"expression",false,false)}},"statement",false,false));body=__node("Block",2063,1,[__wrap(captureValue,410),__node("Call",2064,11,__wrap(func,410),[__node("This",2064,18),__wrap(value,410)],false,true)],null);}else{init.push(__node("MacroAccess",2066,22,38,2066,{macroName:"let",macroData:{declarable:__node("MacroAccess",2066,26,37,2066,__node("MacroAccess",2066,26,31,2066,{ident:__wrap(func,410)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",2066,36,115,2066,{op:"",node:__node("Function",2066,36,[__node("Param",2066,37,__wrap(value,423),void 0,false,false,void 0),__node("Param",2066,44,__wrap(index,423),void 0,false,false,void 0)],__wrap(body,423),true,false,false,void 0,false,[])},"expression",false,false)}},"statement",false,false));body=__node("Block",2068,1,[__wrap(captureValue,410),__node("Call",2069,11,__wrap(func,410),[__node("This",2069,18),__wrap(value,410),__wrap(index,410)],false,true)],null);}}else{body=__node("Block",2072,1,[__wrap(captureValue,410),__wrap(body,410)],null);}if(reducer==="every"){main=__node("MacroAccess",2076,11,104,2076,{macroName:"for",macroData:{reducer:"every",init:__wrap(init,410),test:__node("Const",2076,28,true),step:__wrap(step,410),body:__wrap(body,410),elseBody:__wrap(elseBody,410)}},"expression",false,false);}else if(reducer==="some"){main=__node("MacroAccess",2081,11,104,2081,{macroName:"for",macroData:{reducer:"some",init:__wrap(init,410),test:__node("Const",2081,27,true),step:__wrap(step,410),body:__wrap(body,410),elseBody:__wrap(elseBody,410)}},"expression",false,false);}else if(reducer==="first"){main=__node("MacroAccess",2086,11,104,2086,{macroName:"for",macroData:{reducer:"first",init:__wrap(init,410),test:__node("Const",2086,28,true),step:__wrap(step,410),body:__wrap(body,410),elseBody:__wrap(elseBody,410)}},"expression",false,false);}else if(reducer==="filter"){body=this.mutateLast(body,function(node){return __node("MacroAccess",2092,12,19,2092,{macroName:"if",macroData:{test:__wrap(node,425),body:__wrap(value,425),elseIfs:[]}},"statement",false,false);});main=__node("MacroAccess",2094,11,104,2094,{macroName:"for",macroData:{init:__wrap(init,410),test:__node("Const",2094,22,true),step:__wrap(step,410),body:__wrap(body,410),elseBody:__wrap(elseBody,410)}},"expression",false,false);}else if(this.position==="expression"){main=__node("MacroAccess",2099,11,104,2099,{macroName:"for",macroData:{init:__wrap(init,410),test:__node("Const",2099,22,true),step:__wrap(step,410),body:__wrap(body,410),elseBody:__wrap(elseBody,410)}},"expression",false,false);}else{main=__node("Block",2105,1,[__node("MacroAccess",2105,9,104,2105,{macroName:"for",macroData:{init:__wrap(init,410),test:__node("Const",2105,19,true),step:__wrap(step,410),body:__wrap(body,410)}},"statement",false,false),__wrap(post,410)],null);}return __node("MacroAccess",2109,8,117,2109,{macroName:"try",macroData:{tryBody:__wrap(main,410),typedCatches:[],finallyBody:__node("If",2112,7,__node("MacroAccess",2112,7,20,2112,{op:"",node:__wrap(iterator,410)},"statement",false,false),__node("If",2112,7,__node("Binary",2112,7,__node("Unary",2112,7,"typeof",__node("Access",2112,7,__wrap(iterator,410),__node("Const",2112,18,"close"))),"===",__node("Const",2112,7,"function")),__node("Call",2112,7,__node("Access",2112,7,__wrap(iterator,410),__node("Const",2112,18,"close")),[],false,false),__node("Nothing",0,0),null),__node("Nothing",0,0),null)}},"statement",false,false);};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "reducer",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "choice",
                  choices: [
                    {type: "const", value: "every"},
                    {type: "const", value: "some"},
                    {type: "const", value: "first"},
                    {type: "const", value: "filter"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "value",
              asType: {type: "ident", name: "Identifier"}
            },
            {
              type: "ident",
              name: "index",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: ","},
                    {
                      type: "this",
                      asType: {type: "ident", name: "Identifier"}
                    }
                  ]
                }
              }
            },
            {type: "const", value: "from"},
            {
              type: "ident",
              name: "iterable",
              asType: {type: "ident", name: "Logic"}
            },
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            },
            {
              type: "ident",
              name: "elseBody",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "\n"},
                    {type: "const", value: "else"},
                    {
                      type: "this",
                      asType: {
                        type: "choice",
                        choices: [
                          {type: "ident", name: "Body"},
                          {
                            type: "sequence",
                            items: [
                              {type: "const", value: ";"},
                              {
                                type: "this",
                                asType: {type: "ident", name: "Statement"}
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ],
          names: ["for"],
          id: 118
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var body,current,currentStart,index,iterator,macroData,macroName,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;value=macroData.value;index=macroData.index;iterator=macroData.iterator;current=macroData.current;currentStart=macroData.currentStart;body=macroData.body;body=this.mutateLast(body||this.noop(),function(node){return __node("MacroAccess",2115,59,30,2115,{left:__wrap(current,427),op:":=",right:__wrap(node,427)},"expression",false,false);});return __node("Block",2117,1,[__node("MacroAccess",2117,7,38,2117,{macroName:"let",macroData:{declarable:__node("MacroAccess",2117,10,37,2117,__node("MacroAccess",2117,10,31,2117,{isMutable:"mutable",ident:__wrap(current,426)},"statement",false,false),"statement",false,false),value:__wrap(currentStart,426)}},"statement",false,false),__node("MacroAccess",2118,7,118,2118,{macroName:"for",macroData:{value:__wrap(value,426),index:__wrap(index,426),iterable:__wrap(iterator,426),body:__wrap(body,426)}},"statement",false,false),__wrap(current,426)],null);};}.call(this));',
          options: {},
          params: [
            {type: "const", value: "reduce"},
            {
              type: "ident",
              name: "value",
              asType: {type: "ident", name: "Identifier"}
            },
            {
              type: "ident",
              name: "index",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: ","},
                    {
                      type: "this",
                      asType: {type: "ident", name: "Identifier"}
                    }
                  ]
                }
              }
            },
            {type: "const", value: "from"},
            {
              type: "ident",
              name: "iterator",
              asType: {type: "ident", name: "Logic"}
            },
            {type: "const", value: ","},
            {
              type: "ident",
              name: "current",
              asType: {type: "ident", name: "Identifier"}
            },
            {type: "const", value: "="},
            {type: "ident", name: "currentStart"},
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            }
          ],
          names: ["for"],
          id: 119
        },
        {
          code: 'return (function(){"use strict";var __isArray,__num,__slice,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__slice=Array.prototype.slice;__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node){var _arr,_arr2,_i,_i2,_len,_len2,body,case_,caseNode,caseNodes,cases,defaultCase,isFallthrough,lastNode,macroData,macroName,node,nodes,resultCases;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;cases=macroData.cases;defaultCase=macroData.defaultCase;resultCases=[];for(_arr=__toArray(cases), _i=0, _len=_arr.length;_i<_len;++_i){case_=_arr[_i];caseNodes=[case_.nodeHead].concat(case_.nodeTail);body=case_.body;isFallthrough=false;if(this.isBlock(body)){nodes=this.nodes(body);lastNode=nodes[__num(nodes.length)-1];if(this.isIdent(lastNode)&&this.name(lastNode)==="fallthrough"){body=this.block(nodes.slice(0,-1));isFallthrough=true;}}else if(this.isIdent(body)&&this.name(body)==="fallthrough"){body=this.noop();isFallthrough=true;}for(_arr2=__toArray(caseNodes.slice(0,-1)), _i2=0, _len2=_arr2.length;_i2<_len2;++_i2){caseNode=_arr2[_i2];resultCases.push({node:caseNode,body:this.noop(),fallthrough:true});}resultCases.push({node:caseNodes[__num(caseNodes.length)-1],body:body,fallthrough:isFallthrough});}return this["switch"](node,resultCases,defaultCase);};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "node",
              asType: {type: "ident", name: "Logic"}
            },
            {
              type: "ident",
              name: "cases",
              asType: {
                type: "many",
                multiplier: "*",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "\n"},
                    {type: "const", value: "case"},
                    {
                      type: "ident",
                      name: "nodeHead",
                      asType: {type: "ident", name: "Logic"}
                    },
                    {
                      type: "ident",
                      name: "nodeTail",
                      asType: {
                        type: "many",
                        multiplier: "*",
                        inner: {
                          type: "sequence",
                          items: [
                            {type: "const", value: ","},
                            {
                              type: "this",
                              asType: {type: "ident", name: "Logic"}
                            }
                          ]
                        }
                      }
                    },
                    {
                      type: "ident",
                      name: "body",
                      asType: {
                        type: "many",
                        multiplier: "?",
                        inner: {
                          type: "choice",
                          choices: [
                            {type: "ident", name: "Body"},
                            {
                              type: "sequence",
                              items: [
                                {type: "const", value: ";"},
                                {
                                  type: "this",
                                  asType: {type: "ident", name: "Statement"}
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "defaultCase",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "\n"},
                    {type: "const", value: "default"},
                    {
                      type: "this",
                      asType: {
                        type: "many",
                        multiplier: "?",
                        inner: {
                          type: "choice",
                          choices: [
                            {type: "ident", name: "Body"},
                            {
                              type: "sequence",
                              items: [
                                {type: "const", value: ";"},
                                {
                                  type: "this",
                                  asType: {type: "ident", name: "Statement"}
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          names: ["switch"],
          id: 120
        },
        {
          code: 'return (function(){"use strict";var __isArray,__num,__slice,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__slice=Array.prototype.slice;__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node){var _arr,_i,body,case_,cases,current,defaultCase,fall,isFallthrough,lastNode,macroData,macroName,nodes,result,test;macroName=macroFullData.macroName;macroData=macroFullData.macroData;cases=macroData.cases;defaultCase=macroData.defaultCase;current=defaultCase;for(_arr=__toArray(cases), _i=_arr.length;_i--;){case_=_arr[_i];test=case_.test;body=case_.body;isFallthrough=false;result=void 0;if(this.isBlock(body)){nodes=this.nodes(body);lastNode=nodes[__num(nodes.length)-1];if(this.isIdent(lastNode)&&this.name(lastNode)==="fallthrough"){body=this.block(nodes.slice(0,-1));result=this.isIf(current)?(fall=this.tmp("fall",false,"boolean"),__node("Block",2165,1,[__node("MacroAccess",2165,15,38,2165,{macroName:"let",macroData:{declarable:__node("MacroAccess",2165,18,37,2165,__node("MacroAccess",2165,18,31,2165,{isMutable:"mutable",ident:__wrap(fall,433)},"statement",false,false),"statement",false,false),value:__node("Const",2165,34,false)}},"statement",false,false),__node("MacroAccess",2166,15,19,2166,{macroName:"if",macroData:{test:__wrap(test,433),body:__node("Block",2167,1,[__node("MacroAccess",2167,17,30,2167,{left:__wrap(fall,433),op:":=",right:__node("Const",2167,25,true)},"statement",false,false),__wrap(body,433)],null),elseIfs:[]}},"statement",false,false),__node("MacroAccess",2169,15,19,2169,{macroName:"if",macroData:{test:__node("MacroAccess",2169,17,2,2169,{left:__wrap(fall,433),inverted:false,op:"or",right:__wrap(this.test(current),433)},"statement",false,false),body:__wrap(this.whenTrue(current),433),elseIfs:[],elseBody:__wrap(this.whenFalse(current),433)}},"statement",false,false)],null)):__node("Block",2175,1,[__node("MacroAccess",2175,15,19,2175,{macroName:"if",macroData:{test:__wrap(test,433),body:__wrap(body,433),elseIfs:[]}},"statement",false,false),__wrap(current,433)],null);}}else if(this.isIdent(body)&&this.name(body)==="fallthrough"){if(this.isIf(current)){result=__node("MacroAccess",2180,24,19,2180,{macroName:"if",macroData:{test:__node("MacroAccess",2180,27,2,2180,{left:__wrap(test,433),inverted:false,op:"or",right:__wrap(this.test(current),433)},"statement",false,false),body:__wrap(this.whenTrue(current),433),elseIfs:[],elseBody:__wrap(this.whenFalse(current),433)}},"statement",false,false);}else{result=__node("Block",2186,1,[__wrap(test,433),__wrap(current,433)],null);}}current=result||__node("MacroAccess",2189,20,19,2189,{macroName:"if",macroData:{test:__wrap(case_.test,433),body:__wrap(body,433),elseIfs:[],elseBody:__wrap(current,433)}},"statement",false,false);}return current;};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "cases",
              asType: {
                type: "many",
                multiplier: "*",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "\n"},
                    {type: "const", value: "case"},
                    {
                      type: "ident",
                      name: "test",
                      asType: {type: "ident", name: "Logic"}
                    },
                    {
                      type: "ident",
                      name: "body",
                      asType: {
                        type: "many",
                        multiplier: "?",
                        inner: {
                          type: "choice",
                          choices: [
                            {type: "ident", name: "Body"},
                            {
                              type: "sequence",
                              items: [
                                {type: "const", value: ";"},
                                {
                                  type: "this",
                                  asType: {type: "ident", name: "Statement"}
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "defaultCase",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "\n"},
                    {type: "const", value: "default"},
                    {
                      type: "this",
                      asType: {
                        type: "many",
                        multiplier: "?",
                        inner: {
                          type: "choice",
                          choices: [
                            {type: "ident", name: "Body"},
                            {
                              type: "sequence",
                              items: [
                                {type: "const", value: ";"},
                                {
                                  type: "this",
                                  asType: {type: "ident", name: "Statement"}
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          ],
          names: ["switch"],
          id: 121
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var body,call,func,macroData,macroName,params;macroName=macroFullData.macroName;macroData=macroFullData.macroData;params=macroData.params;call=macroData.call;body=macroData.body;if(!this.isCall(call)){throw Error("async call expression must be a call");}params=params?[params.head].concat(params.tail):[];func=this.func(params,body,true,true);return this.call(this.callFunc(call),this.callArgs(call).concat([__node("MacroAccess",2268,58,115,2268,{op:"mutateFunction!",node:__wrap(func,762)},"expression",false,false)]),this.callIsNew(call),this.callIsApply(call));};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "params",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {
                      type: "ident",
                      name: "head",
                      asType: {type: "ident", name: "Parameter"}
                    },
                    {
                      type: "ident",
                      name: "tail",
                      asType: {
                        type: "many",
                        multiplier: "*",
                        inner: {
                          type: "sequence",
                          items: [
                            {type: "const", value: ","},
                            {
                              type: "this",
                              asType: {type: "ident", name: "Parameter"}
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            },
            {type: "const", value: "<-"},
            {
              type: "ident",
              name: "call",
              asType: {type: "ident", name: "Expression"}
            },
            {
              type: "ident",
              name: "body",
              asType: {type: "ident", name: "DedentedBody"}
            }
          ],
          names: ["async"],
          id: 124
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var body,call,callback,error,func,macroData,macroName,params;macroName=macroFullData.macroName;macroData=macroFullData.macroData;callback=macroData.callback;params=macroData.params;call=macroData.call;body=macroData.body;if(!this.isCall(call)){throw Error("async! call expression must be a call");}error=this.tmp("e",false);params=[this.param(error)].concat(params);func=this.func(params,callback==="throw"?__node("Block",2280,1,[__node("MacroAccess",2280,11,100,2280,{op:"throw?",node:__wrap(error,764)},"statement",false,false),__wrap(body,764)],null):__node("Block",2284,1,[__node("MacroAccess",2284,11,19,2284,{macroName:"if",macroData:{test:__node("MacroAccess",2284,13,20,2284,{op:"?",node:__wrap(error,764)},"statement",false,false),body:__node("MacroAccess",2285,13,39,2285,{macroName:"return",macroData:{node:__node("Call",2285,19,__wrap(callback,764),[__wrap(error,764)],false,false)}},"statement",false,false),elseIfs:[]}},"statement",false,false),__wrap(body,764)],null),true,true);return this.call(this.callFunc(call),this.callArgs(call).concat([__node("MacroAccess",2289,58,115,2289,{op:"mutateFunction!",node:__wrap(func,764)},"expression",false,false)]),this.callIsNew(call),this.callIsApply(call));};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "callback",
              asType: {
                type: "choice",
                choices: [
                  {type: "const", value: "throw"},
                  {type: "ident", name: "Expression"}
                ]
              }
            },
            {
              type: "ident",
              name: "params",
              asType: {
                type: "many",
                multiplier: "*",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: ","},
                    {
                      type: "this",
                      asType: {type: "ident", name: "Parameter"}
                    }
                  ]
                }
              }
            },
            {type: "const", value: "<-"},
            {
              type: "ident",
              name: "call",
              asType: {type: "ident", name: "Expression"}
            },
            {
              type: "ident",
              name: "body",
              asType: {type: "ident", name: "DedentedBody"}
            }
          ],
          names: ["async!"],
          id: 125
        },
        {
          code: 'return (function(){"use strict";var __isArray,__num,__slice,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__slice=Array.prototype.slice;__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node){var _arr,_i,_len,ident,identName,key,macroData,macroName,name,obj,path,requires,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;name=macroData.name;if(this.isConst(name)&&typeof this.value(name)!=="string"){throw Error("Expected a constant string, got "+__typeof(this.value(name)));}if(this.isConst(name)){identName=this.value(name);if(identName.indexOf("/")!==-1){identName=identName.substring(__num(identName.lastIndexOf("/"))+1);}ident=this.ident(identName);return __node("MacroAccess",2302,10,38,2302,{macroName:"let",macroData:{declarable:__node("MacroAccess",2302,14,37,2302,__node("MacroAccess",2302,14,31,2302,{ident:__wrap(ident,767)},"statement",false,false),"statement",false,false),value:__node("Call",2302,23,__node("Ident",2302,23,"require"),[__wrap(name,767)],false,false)}},"statement",false,false);}else if(this.isIdent(name)){path=this.name(name);return __node("MacroAccess",2305,10,38,2305,{macroName:"let",macroData:{declarable:__node("MacroAccess",2305,14,37,2305,__node("MacroAccess",2305,14,31,2305,{ident:__wrap(name,767)},"statement",false,false),"statement",false,false),value:__node("Call",2305,22,__node("Ident",2305,22,"require"),[__wrap(path,767)],false,false)}},"statement",false,false);}else if(this.isObject(name)){requires=[];for(_arr=__toArray(this.pairs(name)), _i=0, _len=_arr.length;_i<_len;++_i){obj=_arr[_i];key=obj.key;value=obj.value;if(!this.isConst(key)){throw Error("If providing an object to require!, all keys must be constant strings");}identName=this.value(key);if(identName.indexOf("/")!==-1){identName=identName.substring(__num(identName.lastIndexOf("/"))+1);}ident=this.ident(identName);if(this.isConst(value)){requires.push(__node("MacroAccess",2317,28,38,2317,{macroName:"let",macroData:{declarable:__node("MacroAccess",2317,32,37,2317,__node("MacroAccess",2317,32,31,2317,{ident:__wrap(ident,767)},"statement",false,false),"statement",false,false),value:__node("Call",2317,41,__node("Ident",2317,41,"require"),[__wrap(value,767)],false,false)}},"statement",false,false));}else if(this.isIdent(value)){path=this.name(value);requires.push(__node("MacroAccess",2320,28,38,2320,{macroName:"let",macroData:{declarable:__node("MacroAccess",2320,32,37,2320,__node("MacroAccess",2320,32,31,2320,{ident:__wrap(ident,767)},"statement",false,false),"statement",false,false),value:__node("Call",2320,41,__node("Ident",2320,41,"require"),[__wrap(path,767)],false,false)}},"statement",false,false));}else{throw Error("If providing an object to require!, all values must be constant strings or idents");}}return this.block(requires);}else{throw Error("Expected either a constant string or ident or object");}};}.call(this));',
          options: {},
          params: [{
            type: "ident",
            name: "name",
            asType: {type: "ident", name: "Expression"}
          }],
          names: ["require!"],
          id: 126
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var _ref,arr,body,done,err,first,init,macroData,macroName,next,rest,result,results,step,test,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;results=macroData.results;next=macroData.next;init=macroData.init;test=macroData.test;step=macroData.step;body=macroData.body;rest=macroData.rest;err=(_ref=results!=null?results:{}).err;result=_ref.result;if(err==null){err=this.tmp("err",true);}if(init==null){init=this.noop();}if(test==null){test=__node("Const",2510,17,true);}if(step==null){step=this.noop(step);}done=this.tmp("done",true,"function");if(!result){if(!step){return __node("Block",2516,1,[__wrap(init,806),__node("MacroAccess",2517,11,17,2517,{macroName:"let",macroData:{ident:__wrap(next,806),func:__node("MacroAccess",2517,20,115,2517,{op:"",node:__node("Function",2517,20,[__node("Param",2517,21,__wrap(err,808),void 0,false,false,void 0)],__node("Block",2518,1,[__node("MacroAccess",2518,13,19,2518,{macroName:"if",macroData:{test:__node("MacroAccess",2518,15,20,2518,{op:"?",node:__wrap(err,808)},"statement",false,false),body:__node("MacroAccess",2519,15,39,2519,{macroName:"return",macroData:{node:__node("Call",2519,21,__wrap(done,808),[__wrap(err,808)],false,false)}},"statement",false,false),elseIfs:[]}},"statement",false,false),__node("MacroAccess",2520,13,19,2520,{macroName:"unless",macroData:{test:__wrap(test,808),body:__node("MacroAccess",2521,15,39,2521,{macroName:"return",macroData:{node:__node("Call",2521,21,__wrap(done,808),[__node("Const",2521,28,null)],false,false)}},"statement",false,false),elseIfs:[]}},"statement",false,false),__wrap(body,808)],null),true,true,false,void 0,false,[])},"statement",false,false)}},"statement",false,false),__node("MacroAccess",2523,11,17,2523,{macroName:"let",macroData:{ident:__wrap(done,806),func:__node("MacroAccess",2523,20,115,2523,{op:"",node:__node("Function",2523,20,[__node("Param",2523,21,__wrap(err,809),void 0,false,false,void 0)],__wrap(rest,809),true,true,false,void 0,false,[])},"statement",false,false)}},"statement",false,false),__node("Call",2525,11,__wrap(next,806),[],false,false)],null);}else{first=this.tmp("first",true,"boolean");return __node("Block",2529,1,[__wrap(init,806),__node("MacroAccess",2530,11,38,2530,{macroName:"let",macroData:{declarable:__node("MacroAccess",2530,14,37,2530,__node("MacroAccess",2530,14,31,2530,{ident:__wrap(first,806)},"statement",false,false),"statement",false,false),value:__node("Const",2530,23,true)}},"statement",false,false),__node("MacroAccess",2531,11,17,2531,{macroName:"let",macroData:{ident:__wrap(next,806),func:__node("MacroAccess",2531,20,115,2531,{op:"",node:__node("Function",2531,20,[__node("Param",2531,21,__wrap(err,812),void 0,false,false,void 0)],__node("Block",2532,1,[__node("MacroAccess",2532,13,19,2532,{macroName:"if",macroData:{test:__node("MacroAccess",2532,15,20,2532,{op:"?",node:__wrap(err,812)},"statement",false,false),body:__node("MacroAccess",2533,15,39,2533,{macroName:"return",macroData:{node:__node("Call",2533,21,__wrap(done,812),[__wrap(err,812)],false,false)}},"statement",false,false),elseIfs:[]}},"statement",false,false),__node("MacroAccess",2534,13,19,2534,{macroName:"if",macroData:{test:__wrap(first,812),body:__node("MacroAccess",2535,15,30,2535,{left:__wrap(first,812),op:":=",right:__node("Const",2535,24,false)},"statement",false,false),elseIfs:[],elseBody:__wrap(step,812)}},"statement",false,false),__node("MacroAccess",2538,13,19,2538,{macroName:"unless",macroData:{test:__wrap(test,812),body:__node("MacroAccess",2539,15,39,2539,{macroName:"return",macroData:{node:__node("Call",2539,21,__wrap(done,812),[__node("Const",2539,28,null)],false,false)}},"statement",false,false),elseIfs:[]}},"statement",false,false),__wrap(body,812)],null),true,true,false,void 0,false,[])},"statement",false,false)}},"statement",false,false),__node("MacroAccess",2541,11,17,2541,{macroName:"let",macroData:{ident:__wrap(done,806),func:__node("MacroAccess",2541,20,115,2541,{op:"",node:__node("Function",2541,20,[__node("Param",2541,21,__wrap(err,813),void 0,false,false,void 0)],__wrap(rest,813),true,true,false,void 0,false,[])},"statement",false,false)}},"statement",false,false),__node("Call",2543,11,__wrap(next,806),[],false,false)],null);}}else{first=this.tmp("first",true,"boolean");value=this.tmp("value",true);arr=this.tmp("arr",true);return __node("Block",2549,1,[__wrap(init,806),__node("MacroAccess",2550,9,38,2550,{macroName:"let",macroData:{declarable:__node("MacroAccess",2550,12,37,2550,__node("MacroAccess",2550,12,31,2550,{ident:__wrap(first,806)},"statement",false,false),"statement",false,false),value:__node("Const",2550,21,true)}},"statement",false,false),__node("MacroAccess",2551,9,38,2551,{macroName:"let",macroData:{declarable:__node("MacroAccess",2551,12,37,2551,__node("MacroAccess",2551,12,31,2551,{ident:__wrap(arr,806)},"statement",false,false),"statement",false,false),value:__node("Array",2551,19,[])}},"statement",false,false),__node("MacroAccess",2552,9,17,2552,{macroName:"let",macroData:{ident:__wrap(next,806),func:__node("MacroAccess",2552,18,115,2552,{op:"",node:__node("Function",2552,18,[__node("Param",2552,19,__wrap(err,819),void 0,false,false,void 0),__node("Param",2552,24,__wrap(value,819),void 0,false,false,void 0)],__node("Block",2553,1,[__node("MacroAccess",2553,11,19,2553,{macroName:"if",macroData:{test:__node("MacroAccess",2553,13,20,2553,{op:"?",node:__wrap(err,819)},"statement",false,false),body:__node("MacroAccess",2554,13,39,2554,{macroName:"return",macroData:{node:__node("Call",2554,19,__wrap(done,819),[__wrap(err,819)],false,false)}},"statement",false,false),elseIfs:[]}},"statement",false,false),__node("MacroAccess",2555,11,19,2555,{macroName:"if",macroData:{test:__wrap(first,819),body:__node("MacroAccess",2556,13,30,2556,{left:__wrap(first,819),op:":=",right:__node("Const",2556,22,false)},"statement",false,false),elseIfs:[],elseBody:__node("Block",2558,1,[__wrap(step,819),__node("MacroAccess",2559,13,19,2559,{macroName:"if",macroData:{test:__node("MacroAccess",2559,15,10,2559,{left:__node("Access",2559,15,__node("Args",2559,15),__node("Const",2559,26,"length")),inverted:false,op:"~>",right:__node("Const",2559,36,1)},"statement",false,false),body:__node("Call",2560,15,__node("Access",2560,15,__wrap(arr,819),__node("Const",2560,20,"push")),[__wrap(value,819)],false,false),elseIfs:[]}},"statement",false,false)],null)}},"statement",false,false),__node("MacroAccess",2561,11,19,2561,{macroName:"unless",macroData:{test:__wrap(test,819),body:__node("MacroAccess",2562,13,39,2562,{macroName:"return",macroData:{node:__node("Call",2562,19,__wrap(done,819),[__node("Const",2562,26,null),__wrap(arr,819)],false,false)}},"statement",false,false),elseIfs:[]}},"statement",false,false),__wrap(body,819)],null),true,true,false,void 0,false,[])},"statement",false,false)}},"statement",false,false),__node("MacroAccess",2564,9,17,2564,{macroName:"let",macroData:{ident:__wrap(done,806),func:__node("MacroAccess",2564,18,115,2564,{op:"",node:__node("Function",2564,18,[__node("Param",2564,19,__wrap(err,820),void 0,false,false,void 0),__node("Param",2564,24,__wrap(result,820),void 0,false,false,void 0)],__wrap(rest,820),true,true,false,void 0,false,[])},"statement",false,false)}},"statement",false,false),__node("Call",2566,9,__wrap(next,806),[],false,false)],null);}};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "results",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {
                      type: "ident",
                      name: "err",
                      asType: {type: "ident", name: "Identifier"}
                    },
                    {
                      type: "ident",
                      name: "result",
                      asType: {
                        type: "many",
                        multiplier: "?",
                        inner: {
                          type: "sequence",
                          items: [
                            {type: "const", value: ","},
                            {
                              type: "this",
                              asType: {type: "ident", name: "Identifier"}
                            }
                          ]
                        }
                      }
                    },
                    {type: "const", value: "<-"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "next",
              asType: {type: "ident", name: "Identifier"}
            },
            {type: "const", value: ","},
            {
              type: "ident",
              name: "init",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Statement"},
                  {type: "const", value: ""}
                ]
              }
            },
            {type: "const", value: ";"},
            {
              type: "ident",
              name: "test",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Logic"},
                  {type: "const", value: ""}
                ]
              }
            },
            {type: "const", value: ";"},
            {
              type: "ident",
              name: "step",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Statement"},
                  {type: "const", value: ""}
                ]
              }
            },
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            },
            {
              type: "ident",
              name: "rest",
              asType: {type: "ident", name: "DedentedBody"}
            }
          ],
          names: ["asyncfor"],
          id: 127
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var _ref,array,body,end,err,inclusive,index,init,length,lengthCalc,macroData,macroName,next,parallelism,rest,result,results,start,step,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;parallelism=macroData.parallelism;results=macroData.results;next=macroData.next;value=macroData.value;index=macroData.index;array=macroData.array;body=macroData.body;rest=macroData.rest;err=(_ref=results!=null?results:{}).err;result=_ref.result;if(err==null){err=this.tmp("err",true);}init=[];value=this.macroExpand1(value);length=null;if(index){length=index.length;index=index.value;}if(parallelism==null){parallelism=__node("Const",2579,25,1);}if(index==null){index=this.tmp("i",true,"number");}if(this.isCall(array)&&this.isIdent(this.callFunc(array))&&this.name(this.callFunc(array))==="__range"&&!this.callIsApply(array)){if(this.isArray(value)||this.isObject(value)){throw Error("Cannot assign a number to a complex declarable");}value=value.ident;start=(_ref=this.callArgs(array))[0];end=_ref[1];step=_ref[2];inclusive=_ref[3];if(this.isConst(start)){if(typeof this.value(start)!=="number"){throw Error("Cannot start with a non-number: #(@value start)");}}else{start=__node("MacroAccess",2592,22,58,2592,{op:"+",node:__wrap(start,821)},"expression",false,false);}if(this.isConst(end)){if(typeof this.value(end)!=="number"){throw Error("Cannot end with a non-number: #(@value start)");}}else if(this.isComplex(end)){end=this.cache(__node("MacroAccess",2598,28,58,2598,{op:"+",node:__wrap(end,821)},"expression",false,false),init,"end",false);}else{init.push(__node("MacroAccess",2600,23,58,2600,{op:"+",node:__wrap(end,821)},"expression",false,false));}if(this.isConst(step)){if(typeof this.value(step)!=="number"){throw Error("Cannot step with a non-number: #(@value step)");}}else if(this.isComplex(step)){step=this.cache(__node("MacroAccess",2606,29,58,2606,{op:"+",node:__wrap(step,821)},"expression",false,false),init,"step",false);}else{init.push(__node("MacroAccess",2608,23,58,2608,{op:"+",node:__wrap(step,821)},"expression",false,false));}body=__node("Block",2611,1,[__node("MacroAccess",2611,9,38,2611,{macroName:"let",macroData:{declarable:__node("MacroAccess",2611,12,37,2611,__node("MacroAccess",2611,12,31,2611,{ident:__wrap(value,821)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",2611,21,49,2611,{left:__node("MacroAccess",2611,21,45,2611,{left:__wrap(index,821),inverted:false,op:"~*",right:__wrap(step,821)},"expression",false,false),inverted:false,op:"~+",right:__wrap(start,821)},"expression",false,false)}},"statement",false,false),__wrap(body,821)],null);lengthCalc=__node("MacroAccess",2614,29,19,2614,{macroName:"if",macroData:{test:__wrap(inclusive,821),body:__node("MacroAccess",2615,9,45,2615,{left:__node("MacroAccess",2615,10,49,2615,{left:__node("MacroAccess",2615,10,49,2615,{left:__wrap(end,821),inverted:false,op:"~-",right:__wrap(start,821)},"expression",false,false),inverted:false,op:"~+",right:__wrap(step,821)},"expression",false,false),inverted:false,op:"~\\\\",right:__wrap(step,821)},"statement",false,false),elseIfs:[],elseBody:__node("MacroAccess",2617,9,45,2617,{left:__node("MacroAccess",2617,10,49,2617,{left:__wrap(end,821),inverted:false,op:"~-",right:__wrap(start,821)},"expression",false,false),inverted:false,op:"~\\\\",right:__wrap(step,821)},"statement",false,false)}},"expression",false,false);if(!length){length=lengthCalc;}else{init.push(__node("MacroAccess",2621,22,38,2621,{macroName:"let",macroData:{declarable:__node("MacroAccess",2621,26,37,2621,__node("MacroAccess",2621,26,31,2621,{ident:__wrap(length,821)},"statement",false,false),"statement",false,false),value:__wrap(lengthCalc,821)}},"statement",false,false));}}else{array=this.cache(array,init,"arr",true);body=__node("Block",2626,1,[__node("MacroAccess",2626,9,38,2626,{macroName:"let",macroData:{declarable:__node("MacroAccess",2626,12,37,2626,__node("MacroAccess",2626,12,31,2626,{ident:__wrap(value,821)},"statement",false,false),"statement",false,false),value:__node("Access",2626,21,__wrap(array,821),__wrap(index,821))}},"statement",false,false),__wrap(body,821)],null);if(!length){length=__node("MacroAccess",2630,23,58,2630,{op:"+",node:__node("Access",2630,25,__wrap(array,821),__node("Const",2630,32,"length"))},"expression",false,false);}else{init.push(__node("MacroAccess",2632,22,38,2632,{macroName:"let",macroData:{declarable:__node("MacroAccess",2632,26,37,2632,__node("MacroAccess",2632,26,31,2632,{ident:__wrap(length,821)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",2632,36,58,2632,{op:"+",node:__node("Access",2632,38,__wrap(array,821),__node("Const",2632,45,"length"))},"expression",false,false)}},"statement",false,false));}}if(!result){return __node("Block",2636,1,[__wrap(init,821),__node("Call",2637,9,__node("Ident",2637,9,"__async"),[__node("MacroAccess",2637,17,58,2637,{op:"+",node:__wrap(parallelism,821)},"expression",false,false),__wrap(length,821),__node("MacroAccess",2637,42,115,2637,{op:"",node:__node("Function",2637,42,[__node("Param",2637,43,__wrap(index,828),void 0,false,false,void 0),__node("Param",2637,50,__wrap(next,828),void 0,false,false,void 0)],__wrap(body,828),true,true,false,void 0,false,[])},"expression",false,false),__node("MacroAccess",2637,70,115,2637,{op:"",node:__node("Function",2637,70,[__node("Param",2637,71,__wrap(err,829),void 0,false,false,void 0)],__wrap(rest,829),true,true,false,void 0,false,[])},"expression",false,false)],false,false)],null);}else{return __node("Block",2640,1,[__wrap(init,821),__node("Call",2641,9,__node("Ident",2641,9,"__asyncResult"),[__node("MacroAccess",2641,24,58,2641,{op:"+",node:__wrap(parallelism,821)},"expression",false,false),__wrap(length,821),__node("MacroAccess",2641,49,115,2641,{op:"",node:__node("Function",2641,49,[__node("Param",2641,50,__wrap(index,830),void 0,false,false,void 0),__node("Param",2641,57,__wrap(next,830),void 0,false,false,void 0)],__wrap(body,830),true,true,false,void 0,false,[])},"expression",false,false),__node("MacroAccess",2641,77,115,2641,{op:"",node:__node("Function",2641,77,[__node("Param",2641,78,__wrap(err,831),void 0,false,false,void 0),__node("Param",2641,83,__wrap(result,831),void 0,false,false,void 0)],__wrap(rest,831),true,true,false,void 0,false,[])},"expression",false,false)],false,false)],null);}};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "parallelism",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "("},
                    {
                      type: "this",
                      asType: {type: "ident", name: "Expression"}
                    },
                    {type: "const", value: ")"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "results",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {
                      type: "ident",
                      name: "err",
                      asType: {type: "ident", name: "Identifier"}
                    },
                    {
                      type: "ident",
                      name: "result",
                      asType: {
                        type: "many",
                        multiplier: "?",
                        inner: {
                          type: "sequence",
                          items: [
                            {type: "const", value: ","},
                            {
                              type: "this",
                              asType: {type: "ident", name: "Identifier"}
                            }
                          ]
                        }
                      }
                    },
                    {type: "const", value: "<-"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "next",
              asType: {type: "ident", name: "Identifier"}
            },
            {type: "const", value: ","},
            {
              type: "ident",
              name: "value",
              asType: {type: "ident", name: "Declarable"}
            },
            {
              type: "ident",
              name: "index",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: ","},
                    {
                      type: "ident",
                      name: "value",
                      asType: {type: "ident", name: "Identifier"}
                    },
                    {
                      type: "ident",
                      name: "length",
                      asType: {
                        type: "many",
                        multiplier: "?",
                        inner: {
                          type: "sequence",
                          items: [
                            {type: "const", value: ","},
                            {
                              type: "this",
                              asType: {type: "ident", name: "Identifier"}
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            },
            {type: "const", value: "in"},
            {type: "ident", name: "array"},
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            },
            {
              type: "ident",
              name: "rest",
              asType: {type: "ident", name: "DedentedBody"}
            }
          ],
          names: ["asyncfor"],
          id: 128
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var _ref,body,err,getKeys,index,init,key,keys,macroData,macroName,next,object,own,parallelism,rest,result,results,type,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;parallelism=macroData.parallelism;results=macroData.results;next=macroData.next;key=macroData.key;value=macroData.value;type=macroData.type;object=macroData.object;body=macroData.body;rest=macroData.rest;err=(_ref=results!=null?results:{}).err;result=_ref.result;own=type==="of";init=[];object=this.cache(object,init,"obj",true);index=null;if(value){index=value.index;value=this.macroExpand1(value.value);}if(value){body=__node("Block",2655,1,[__node("MacroAccess",2655,9,38,2655,{macroName:"let",macroData:{declarable:__node("MacroAccess",2655,12,37,2655,__node("MacroAccess",2655,12,31,2655,{ident:__wrap(value,832)},"statement",false,false),"statement",false,false),value:__node("Access",2655,21,__wrap(object,832),__wrap(key,832))}},"statement",false,false),__wrap(body,832)],null);}keys=this.tmp("keys",true,"stringArray");if(own){getKeys=__node("MacroAccess",2660,10,113,2660,{macroName:"for",macroData:{key:__wrap(key,832),type:"of",object:__wrap(object,832),body:__node("Call",2661,9,__node("Access",2661,9,__wrap(keys,832),__node("Const",2661,15,"push")),[__wrap(key,832)],false,false)}},"statement",false,false);}else{getKeys=__node("MacroAccess",2663,10,113,2663,{macroName:"for",macroData:{key:__wrap(key,832),type:"ofall",object:__wrap(object,832),body:__node("Call",2664,9,__node("Access",2664,9,__wrap(keys,832),__node("Const",2664,15,"push")),[__wrap(key,832)],false,false)}},"statement",false,false);}return __node("Block",2666,1,[__wrap(init,832),__node("MacroAccess",2667,7,38,2667,{macroName:"let",macroData:{declarable:__node("MacroAccess",2667,10,37,2667,__node("MacroAccess",2667,10,31,2667,{ident:__wrap(keys,832)},"statement",false,false),"statement",false,false),value:__node("Array",2667,18,[])}},"statement",false,false),__wrap(getKeys,832),__node("MacroAccess",2669,7,128,2669,{macroName:"asyncfor",macroData:{parallelism:__wrap(parallelism,832),results:{err:__wrap(err,832),result:__wrap(result,832)},next:__wrap(next,832),value:__node("MacroAccess",2669,53,37,2669,__node("MacroAccess",2669,53,31,2669,{ident:__wrap(key,832)},"statement",false,false),"statement",false,false),index:{value:__wrap(index,832)},array:__wrap(keys,832),body:__wrap(body,832),rest:__wrap(rest,832)}},"statement",false,false)],null);};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "parallelism",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "("},
                    {
                      type: "this",
                      asType: {type: "ident", name: "Expression"}
                    },
                    {type: "const", value: ")"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "results",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {
                      type: "ident",
                      name: "err",
                      asType: {type: "ident", name: "Identifier"}
                    },
                    {
                      type: "ident",
                      name: "result",
                      asType: {
                        type: "many",
                        multiplier: "?",
                        inner: {
                          type: "sequence",
                          items: [
                            {type: "const", value: ","},
                            {
                              type: "this",
                              asType: {type: "ident", name: "Identifier"}
                            }
                          ]
                        }
                      }
                    },
                    {type: "const", value: "<-"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "next",
              asType: {type: "ident", name: "Identifier"}
            },
            {type: "const", value: ","},
            {
              type: "ident",
              name: "key",
              asType: {type: "ident", name: "Identifier"}
            },
            {
              type: "ident",
              name: "value",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: ","},
                    {
                      type: "ident",
                      name: "value",
                      asType: {type: "ident", name: "Declarable"}
                    },
                    {
                      type: "ident",
                      name: "index",
                      asType: {
                        type: "many",
                        multiplier: "?",
                        inner: {
                          type: "sequence",
                          items: [
                            {type: "const", value: ","},
                            {
                              type: "this",
                              asType: {type: "ident", name: "Identifier"}
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "type",
              asType: {
                type: "choice",
                choices: [
                  {type: "const", value: "of"},
                  {type: "const", value: "ofall"}
                ]
              }
            },
            {type: "ident", name: "object"},
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            },
            {
              type: "ident",
              name: "rest",
              asType: {type: "ident", name: "DedentedBody"}
            }
          ],
          names: ["asyncfor"],
          id: 129
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var _ref,body,err,index,iterator,macroData,macroName,next,parallelism,rest,result,results,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;parallelism=macroData.parallelism;results=macroData.results;next=macroData.next;value=macroData.value;index=macroData.index;iterator=macroData.iterator;body=macroData.body;rest=macroData.rest;err=(_ref=results!=null?results:{}).err;result=_ref.result;if(index==null){index=this.tmp("i",true);}if(err==null){err=this.tmp("err",true);}if(parallelism==null){parallelism=__node("Const",2678,25,1);}if(!result){return __node("Call",2681,11,__node("Ident",2681,11,"__asyncIter"),[__node("MacroAccess",2681,25,58,2681,{op:"+",node:__wrap(parallelism,839)},"expression",false,false),__wrap(iterator,839),__node("MacroAccess",2681,52,115,2681,{op:"",node:__node("Function",2681,52,[__node("Param",2681,53,__wrap(value,840),void 0,false,false,void 0),__node("Param",2681,60,__wrap(index,840),void 0,false,false,void 0),__node("Param",2681,68,__wrap(next,840),void 0,false,false,void 0)],__wrap(body,840),true,true,false,void 0,false,[])},"expression",false,false),__node("MacroAccess",2681,88,115,2681,{op:"",node:__node("Function",2681,88,[__node("Param",2681,89,__wrap(err,841),void 0,false,false,void 0)],__wrap(rest,841),true,true,false,void 0,false,[])},"expression",false,false)],false,false);}else{return __node("Call",2683,11,__node("Ident",2683,11,"__asyncIterResult"),[__node("MacroAccess",2683,32,58,2683,{op:"+",node:__wrap(parallelism,839)},"expression",false,false),__wrap(iterator,839),__node("MacroAccess",2683,59,115,2683,{op:"",node:__node("Function",2683,59,[__node("Param",2683,60,__wrap(value,842),void 0,false,false,void 0),__node("Param",2683,67,__wrap(index,842),void 0,false,false,void 0),__node("Param",2683,75,__wrap(next,842),void 0,false,false,void 0)],__wrap(body,842),true,true,false,void 0,false,[])},"expression",false,false),__node("MacroAccess",2683,95,115,2683,{op:"",node:__node("Function",2683,95,[__node("Param",2683,96,__wrap(err,843),void 0,false,false,void 0),__node("Param",2683,101,__wrap(result,843),void 0,false,false,void 0)],__wrap(rest,843),true,true,false,void 0,false,[])},"expression",false,false)],false,false);}};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "parallelism",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "("},
                    {
                      type: "this",
                      asType: {type: "ident", name: "Expression"}
                    },
                    {type: "const", value: ")"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "results",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {
                      type: "ident",
                      name: "err",
                      asType: {type: "ident", name: "Identifier"}
                    },
                    {
                      type: "ident",
                      name: "result",
                      asType: {
                        type: "many",
                        multiplier: "?",
                        inner: {
                          type: "sequence",
                          items: [
                            {type: "const", value: ","},
                            {
                              type: "this",
                              asType: {type: "ident", name: "Identifier"}
                            }
                          ]
                        }
                      }
                    },
                    {type: "const", value: "<-"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "next",
              asType: {type: "ident", name: "Identifier"}
            },
            {type: "const", value: ","},
            {
              type: "ident",
              name: "value",
              asType: {type: "ident", name: "Identifier"}
            },
            {
              type: "ident",
              name: "index",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: ","},
                    {
                      type: "this",
                      asType: {type: "ident", name: "Identifier"}
                    }
                  ]
                }
              }
            },
            {type: "const", value: "from"},
            {type: "ident", name: "iterator"},
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            },
            {
              type: "ident",
              name: "rest",
              asType: {type: "ident", name: "DedentedBody"}
            }
          ],
          names: ["asyncfor"],
          id: 130
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var _ref,body,err,macroData,macroName,next,rest,result,results,step,test;macroName=macroFullData.macroName;macroData=macroFullData.macroData;results=macroData.results;next=macroData.next;test=macroData.test;step=macroData.step;body=macroData.body;rest=macroData.rest;if(macroName==="asyncuntil"){test=__node("MacroAccess",2688,19,3,2688,{op:"not",node:__wrap(test,844)},"expression",false,false);}err=(_ref=results!=null?results:{}).err;result=_ref.result;return __node("MacroAccess",2691,7,127,2691,{macroName:"asyncfor",macroData:{results:{err:__wrap(err,844),result:__wrap(result,844)},next:__wrap(next,844),test:__wrap(test,844),step:__wrap(step,844),body:__wrap(body,844),rest:__wrap(rest,844)}},"statement",false,false);};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "results",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {
                      type: "ident",
                      name: "err",
                      asType: {type: "ident", name: "Identifier"}
                    },
                    {
                      type: "ident",
                      name: "result",
                      asType: {
                        type: "many",
                        multiplier: "?",
                        inner: {
                          type: "sequence",
                          items: [
                            {type: "const", value: ","},
                            {
                              type: "this",
                              asType: {type: "ident", name: "Identifier"}
                            }
                          ]
                        }
                      }
                    },
                    {type: "const", value: "<-"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "next",
              asType: {type: "ident", name: "Identifier"}
            },
            {type: "const", value: ","},
            {
              type: "ident",
              name: "test",
              asType: {type: "ident", name: "Logic"}
            },
            {
              type: "ident",
              name: "step",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: ","},
                    {
                      type: "this",
                      asType: {type: "ident", name: "Statement"}
                    }
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            },
            {
              type: "ident",
              name: "rest",
              asType: {type: "ident", name: "DedentedBody"}
            }
          ],
          names: ["asyncwhile", "asyncuntil"],
          id: 131
        },
        {
          code: 'return (function(){"use strict";var __num,__typeof;__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node){var _ref,body,current,done,elseBody,elseIf,elseIfs,err,f,i,innerTest,macroData,macroName,rest,result,results,test;macroName=macroFullData.macroName;macroData=macroFullData.macroData;results=macroData.results;done=macroData.done;test=macroData.test;body=macroData.body;elseIfs=macroData.elseIfs;elseBody=macroData.elseBody;rest=macroData.rest;if(macroName==="asyncunless"){test=__node("MacroAccess",2698,19,3,2698,{op:"not",node:__wrap(test,845)},"expression",false,false);}err=(_ref=results!=null?results:{}).err;result=_ref.result;f=this.tmp("f",false);if(elseBody){current=__node("MacroAccess",2704,11,30,2704,{left:__wrap(f,845),op:":=",right:__node("MacroAccess",2704,19,115,2704,{op:"",node:__node("Function",2704,19,[__node("Param",2704,20,__wrap(done,847),void 0,false,false,void 0)],__wrap(elseBody,847),true,true,false,void 0,false,[])},"expression",false,false)},"expression",false,false);}else{current=__node("MacroAccess",2706,11,30,2706,{left:__wrap(f,845),op:":=",right:__node("MacroAccess",2706,19,115,2706,{op:"",node:__node("Function",2706,19,[__node("Param",2706,20,__wrap(done,848),void 0,false,false,void 0)],__node("Call",2706,30,__wrap(done,848),[],false,false),true,true,false,void 0,false,[])},"expression",false,false)},"expression",false,false);}i=__num(elseIfs.length)-1;for(;i>=0;--i){elseIf=elseIfs[i];innerTest=elseIf.test;if(elseIf.type==="unless"){innerTest=__node("MacroAccess",2713,27,3,2713,{op:"not",node:__wrap(innerTest,845)},"expression",false,false);}current=__node("MacroAccess",2714,21,19,2714,{macroName:"if",macroData:{test:__wrap(innerTest,845),body:__node("MacroAccess",2715,9,30,2715,{left:__wrap(f,845),op:":=",right:__node("MacroAccess",2715,16,115,2715,{op:"",node:__node("Function",2715,16,[__node("Param",2715,17,__wrap(done,850),void 0,false,false,void 0)],__wrap(elseIf.body,850),true,true,false,void 0,false,[])},"expression",false,false)},"statement",false,false),elseIfs:[],elseBody:__wrap(current,845)}},"statement",false,false);}current=__node("MacroAccess",2719,19,19,2719,{macroName:"if",macroData:{test:__wrap(test,845),body:__node("MacroAccess",2720,7,30,2720,{left:__wrap(f,845),op:":=",right:__node("MacroAccess",2720,14,115,2720,{op:"",node:__node("Function",2720,14,[__node("Param",2720,15,__wrap(done,851),void 0,false,false,void 0)],__wrap(body,851),true,true,false,void 0,false,[])},"expression",false,false)},"statement",false,false),elseIfs:[],elseBody:__wrap(current,845)}},"statement",false,false);if(!err&&!result){return __node("Block",2726,1,[__wrap(current,845),__node("Call",2727,9,__wrap(f,845),[__node("MacroAccess",2727,13,115,2727,{op:"",node:__node("Function",2727,13,[],__wrap(rest,852),true,true,false,void 0,false,[])},"expression",false,false)],false,false)],null);}else if(!result){return __node("Block",2730,1,[__wrap(current,845),__node("Call",2731,9,__wrap(f,845),[__node("MacroAccess",2731,13,115,2731,{op:"",node:__node("Function",2731,13,[__node("Param",2731,14,__wrap(err,853),void 0,false,false,void 0)],__wrap(rest,853),true,true,false,void 0,false,[])},"expression",false,false)],false,false)],null);}else{if(err==null){err=this.tmp("err",true);}return __node("Block",2735,1,[__wrap(current,845),__node("Call",2736,9,__wrap(f,845),[__node("MacroAccess",2736,13,115,2736,{op:"",node:__node("Function",2736,13,[__node("Param",2736,14,__wrap(err,854),void 0,false,false,void 0),__node("Param",2736,19,__wrap(result,854),void 0,false,false,void 0)],__wrap(rest,854),true,true,false,void 0,false,[])},"expression",false,false)],false,false)],null);}};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "results",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {
                      type: "ident",
                      name: "err",
                      asType: {type: "ident", name: "Identifier"}
                    },
                    {
                      type: "ident",
                      name: "result",
                      asType: {
                        type: "many",
                        multiplier: "?",
                        inner: {
                          type: "sequence",
                          items: [
                            {type: "const", value: ","},
                            {
                              type: "this",
                              asType: {type: "ident", name: "Identifier"}
                            }
                          ]
                        }
                      }
                    },
                    {type: "const", value: "<-"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "done",
              asType: {type: "ident", name: "Identifier"}
            },
            {type: "const", value: ","},
            {
              type: "ident",
              name: "test",
              asType: {type: "ident", name: "Logic"}
            },
            {
              type: "ident",
              name: "body",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Body"},
                  {
                    type: "sequence",
                    items: [
                      {type: "const", value: ";"},
                      {
                        type: "this",
                        asType: {type: "ident", name: "Statement"}
                      }
                    ]
                  }
                ]
              }
            },
            {
              type: "ident",
              name: "elseIfs",
              asType: {
                type: "many",
                multiplier: "*",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "\n"},
                    {type: "const", value: "else"},
                    {
                      type: "ident",
                      name: "type",
                      asType: {
                        type: "choice",
                        choices: [
                          {type: "const", value: "if"},
                          {type: "const", value: "unless"}
                        ]
                      }
                    },
                    {
                      type: "ident",
                      name: "test",
                      asType: {type: "ident", name: "Logic"}
                    },
                    {
                      type: "ident",
                      name: "body",
                      asType: {
                        type: "choice",
                        choices: [
                          {type: "ident", name: "Body"},
                          {
                            type: "sequence",
                            items: [
                              {type: "const", value: ";"},
                              {
                                type: "this",
                                asType: {type: "ident", name: "Statement"}
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "elseBody",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "\n"},
                    {type: "const", value: "else"},
                    {
                      type: "this",
                      asType: {
                        type: "choice",
                        choices: [
                          {type: "ident", name: "Body"},
                          {
                            type: "sequence",
                            items: [
                              {type: "const", value: ";"},
                              {
                                type: "this",
                                asType: {type: "ident", name: "Statement"}
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "rest",
              asType: {type: "ident", name: "DedentedBody"}
            }
          ],
          names: ["asyncif", "asyncunless"],
          id: 132
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var func,key,macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;key=macroData.key;func=macroData.func;return this.def(key,func);};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "key",
              asType: {type: "ident", name: "ObjectKey"}
            },
            {
              type: "ident",
              name: "func",
              asType: {type: "ident", name: "FunctionDeclaration"}
            }
          ],
          names: ["def"],
          id: 133
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var key,macroData,macroName,value;macroName=macroFullData.macroName;macroData=macroFullData.macroData;key=macroData.key;value=macroData.value;return this.def(key,value);};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "key",
              asType: {type: "ident", name: "ObjectKey"}
            },
            {type: "const", value: "="},
            {
              type: "ident",
              name: "value",
              asType: {type: "ident", name: "ExpressionOrAssignment"}
            }
          ],
          names: ["def"],
          id: 134
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var key,macroData,macroName;macroName=macroFullData.macroName;macroData=macroFullData.macroData;key=macroData.key;return this.def(key,void 0);};}.call(this));',
          options: {},
          params: [{
            type: "ident",
            name: "key",
            asType: {type: "ident", name: "ObjectKey"}
          }],
          names: ["def"],
          id: 135
        },
        {
          code: 'return (function(){"use strict";var __isArray,__owns,__slice,__strnum,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__owns=Object.prototype.hasOwnProperty;__slice=Array.prototype.slice;__strnum=function(strnum){var type;type=typeof strnum;if(type==="string"){return strnum;}else if(type==="number"){return String(strnum);}else{throw TypeError("Expected a string or number, got "+__typeof(strnum));}};__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node){var _arr,_i,_len,_ref,_this,assignment,body,constructorCount,ctor,declaration,displayName,generic,genericArg,genericArgs,genericCache,genericParams,hasSuperclass,hasTopLevelConstructor,i,init,instanceofLets,instanceofs,item,key,macroData,macroName,makeClassFunc,makeClassIdent,name,parts,prototype,result,self,sup,superclass,superproto;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;name=macroData.name;generic=macroData.generic;superclass=macroData.superclass;body=macroData.body;if(generic!=null){genericArgs=[generic.head].concat(__toArray(generic.tail));}else{genericArgs=[];}if(this.isIdent(name)){declaration=name;}else if(this.isAccess(name)){assignment=name;if(this.isConst(this.child(name))&&typeof this.value(this.child(name))==="string"){name=(_ref=this.ident(this.value(this.child(name))))!=null?_ref:this.tmp("class",false,"function");}else{name=this.tmp("class",false,"function");}}else{name=this.tmp("class",false,"function");}hasSuperclass=!!superclass;sup=superclass&&(this.isIdent(superclass)?superclass:this.tmp("super",false,"function"));init=[];if(!superclass){superproto=__node("Access",2768,11,__node("Ident",2768,11,"Object"),__node("Const",2768,19,"prototype"));}else{superproto=this.tmp(this.isIdent(sup)?__strnum(this.name(sup))+"_prototype":"super_prototype",false,"object");}prototype=this.tmp(this.isIdent(name)?__strnum(this.name(name))+"_prototype":"prototype",false,"object");if(superclass){init.push(__node("MacroAccess",2773,20,38,2773,{macroName:"let",macroData:{declarable:__node("MacroAccess",2773,24,37,2773,__node("MacroAccess",2773,24,31,2773,{ident:__wrap(superproto,858)},"statement",false,false),"statement",false,false),value:__node("Access",2773,38,__wrap(sup,858),__node("Const",2773,44,"prototype"))}},"statement",false,false));init.push(__node("MacroAccess",2774,20,38,2774,{macroName:"let",macroData:{declarable:__node("MacroAccess",2774,24,37,2774,__node("MacroAccess",2774,24,31,2774,{ident:__wrap(prototype,858)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",2774,37,30,2774,{left:__node("Access",2774,43,__wrap(name,858),__node("Const",2774,44,"prototype")),op:":=",right:__node("Object",90905,90929,[],__wrap(superproto,858))},"expression",false,false)}},"statement",false,false));init.push(__node("MacroAccess",2775,21,30,2775,{left:__node("Access",2775,32,__wrap(prototype,858),__node("Const",2775,33,"constructor")),op:":=",right:__wrap(name,858)},"expression",false,false));}else{init.push(__node("MacroAccess",2777,20,38,2777,{macroName:"let",macroData:{declarable:__node("MacroAccess",2777,24,37,2777,__node("MacroAccess",2777,24,31,2777,{ident:__wrap(prototype,858)},"statement",false,false),"statement",false,false),value:__node("Access",2777,37,__wrap(name,858),__node("Const",2777,44,"prototype"))}},"statement",false,false));}if(this.isIdent(name)){displayName=this["const"](this.name(name));}if(displayName!=null){if(genericArgs.length>0){parts=[displayName,this["const"]("<")];for(i=0, _len=genericArgs.length;i<_len;++i){genericArg=genericArgs[i];if(i>0){parts.push(this["const"](", "));}parts.push(__node("MacroAccess",2786,26,18,2786,{macroName:"if",macroData:{test:__node("MacroAccess",2786,29,8,2786,{left:__wrap(genericArg,858),inverted:false,op:"!~=",right:__node("Const",2786,46,null)},"expression",false,false),body:__node("Call",2786,56,__node("Ident",2786,56,"__name"),[__wrap(genericArg,858)],false,false),elseIfs:[],elseBody:__node("Const",2786,82,"")}},"expression",false,false));}parts.push(this["const"](">"));displayName=this.binaryChain("+",parts);}init.push(__node("MacroAccess",2789,21,30,2789,{left:__node("Access",2789,27,__wrap(name,858),__node("Const",2789,28,"displayName")),op:":=",right:__wrap(displayName,858)},"expression",false,false));}if(superclass){init.push(__node("If",2792,20,__node("Binary",2792,20,__node("Unary",2792,20,"typeof",__node("Access",2792,20,__wrap(sup,858),__node("Const",2792,26,"extended"))),"===",__node("Const",2792,20,"function")),__node("Call",2792,20,__node("Access",2792,20,__wrap(sup,858),__node("Const",2792,26,"extended")),[__wrap(name,858)],false,false),__node("Nothing",0,0),null));}function fixSupers(node){return _this.walk(node,function(node){var _arr,_arr2,_i,_len,args,child,superArg;if(_this.isSuper(node)){child=_this.superChild(node);if(child!=null){child=fixSupers(child);}for(_arr=[], _arr2=__toArray(_this.superArgs(node)), _i=0, _len=_arr2.length;_i<_len;++_i){superArg=_arr2[_i];_arr.push(fixSupers(superArg));}args=_arr;return _this.call(child!=null?__node("Access",2804,17,__wrap(superproto,870),__wrap(child,870)):!superclass?__node("Ident",2806,17,"Object"):__wrap(sup,870),[__node("This",2809,16)].concat(args),false,true);}});};body=fixSupers(this.macroExpandAll(body));constructorCount=0;this.walk(body,function(node){var key;if(_this.isDef(node)){key=_this.left(node);if(_this.isConst(key)&&_this.value(key)==="constructor"){++constructorCount;}}return;});hasTopLevelConstructor=false;if(constructorCount===1){this.walk(body,function(node){var key;if(_this.isDef(node)){key=_this.left(node);if(_this.isConst(key)&&_this.value(key)==="constructor"&&_this.isFunc(_this.right(node))&&!_this.funcIsCurried(_this.right(node))){hasTopLevelConstructor=true;}return node;}else{return node;}});}self=this.tmp("this");if(hasTopLevelConstructor){body=this.walk(body,function(node){var constructor,key,value;if(_this.isDef(node)){key=_this.left(node);if(_this.isConst(key)&&_this.value(key)==="constructor"){value=_this.right(node);constructor=_this.rewrap(_this.func(_this.funcParams(value),_this.funcBody(value),false,__node("MacroAccess",2846,18,18,2846,{macroName:"if",macroData:{test:__node("MacroAccess",2846,21,72,2846,{left:__node("Eval",2846,21,__node("Const",2846,27,"this")),inverted:false,op:"instanceof",right:__wrap(name,877)},"statement",false,false),body:__node("Eval",2846,56,__node("Const",2846,62,"this")),elseIfs:[],elseBody:__node("Object",93369,93392,[],__wrap(prototype,877))}},"statement",false,false)),value);init.unshift(__node("MacroAccess",2847,29,38,2847,{macroName:"let",macroData:{declarable:__node("MacroAccess",2847,33,37,2847,__node("MacroAccess",2847,33,31,2847,{ident:__wrap(name,877)},"statement",false,false),"statement",false,false),value:__wrap(constructor,877)}},"statement",false,false));return _this.noop();}}else{return node;}});}else if(constructorCount!==0){ctor=this.tmp("ctor",false,"function");result=this.tmp("ref");init.push(__node("Block",2855,1,[__node("MacroAccess",2855,9,38,2855,{macroName:"let",macroData:{declarable:__node("MacroAccess",2855,12,37,2855,__node("MacroAccess",2855,12,31,2855,{isMutable:"mutable",ident:__wrap(ctor,858)},"statement",false,false),"statement",false,false),value:__node("Const",2855,28,void 0)}},"statement",false,false),__node("MacroAccess",2856,9,17,2856,{macroName:"let",macroData:{ident:__wrap(name,858),func:__node("MacroAccess",2856,18,115,2856,{op:"",node:__node("Function",2856,18,[],__node("Block",2857,1,[__node("MacroAccess",2857,11,38,2857,{macroName:"let",macroData:{declarable:__node("MacroAccess",2857,14,37,2857,__node("MacroAccess",2857,14,31,2857,{ident:__wrap(self,884)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",2857,22,18,2857,{macroName:"if",macroData:{test:__node("MacroAccess",2857,25,72,2857,{left:__node("This",2857,25),inverted:false,op:"instanceof",right:__wrap(name,884)},"expression",false,false),body:__node("This",2857,52),elseIfs:[],elseBody:__node("Object",93748,93771,[],__wrap(prototype,884))}},"expression",false,false)}},"statement",false,false),__node("MacroAccess",2859,11,19,2859,{macroName:"if",macroData:{test:__node("MacroAccess",2859,13,26,2859,{op:"isFunction!",node:__wrap(ctor,884)},"statement",false,false),body:__node("Block",2860,1,[__node("MacroAccess",2860,13,38,2860,{macroName:"let",macroData:{declarable:__node("MacroAccess",2860,16,37,2860,__node("MacroAccess",2860,16,31,2860,{ident:__wrap(result,884)},"statement",false,false),"statement",false,false),value:__node("Call",2860,26,__wrap(ctor,884),[__wrap(self,884),__node("Spread",2860,40,__node("Args",2860,44))],false,true)}},"statement",false,false),__node("MacroAccess",2861,13,19,2861,{macroName:"if",macroData:{test:__node("MacroAccess",2861,15,5,2861,{left:__node("Call",2861,15,__node("Ident",2861,15,"Object"),[__wrap(result,884)],false,false),inverted:false,op:"==",right:__wrap(result,884)},"statement",false,false),body:__node("MacroAccess",2862,15,39,2862,{macroName:"return",macroData:{node:__wrap(result,884)}},"statement",false,false),elseIfs:[]}},"statement",false,false)],null),elseIfs:[{type:"if",test:__wrap(hasSuperclass,884),body:__node("Block",2864,1,[__node("MacroAccess",2864,13,38,2864,{macroName:"let",macroData:{declarable:__node("MacroAccess",2864,16,37,2864,__node("MacroAccess",2864,16,31,2864,{ident:__wrap(result,884)},"statement",false,false),"statement",false,false),value:__node("Call",2864,26,__wrap(sup,884),[__wrap(self,884),__node("Spread",2864,39,__node("Args",2864,43))],false,true)}},"statement",false,false),__node("MacroAccess",2865,13,19,2865,{macroName:"if",macroData:{test:__node("MacroAccess",2865,15,5,2865,{left:__node("Call",2865,15,__node("Ident",2865,15,"Object"),[__wrap(result,884)],false,false),inverted:false,op:"==",right:__wrap(result,884)},"statement",false,false),body:__node("MacroAccess",2866,15,39,2866,{macroName:"return",macroData:{node:__wrap(result,884)}},"statement",false,false),elseIfs:[]}},"statement",false,false)],null)}]}},"statement",false,false),__wrap(self,884)],null),true,false,false,void 0,false,[])},"statement",false,false)}},"statement",false,false)],null));body=this.walk(body,function(node){var constructor,firstArg,key,value;if(_this.isDef(node)){key=_this.left(node);if(_this.isConst(key)&&_this.value(key)==="constructor"){value=_this.right(node);if(_this.isCall(value)&&_this.isIdent(_this.callFunc(value))&&_this.name(_this.callFunc(value))==="__curry"&&_this.callArgs(value).length===2&&_this.isFunc(_this.callArgs(value)[1])){firstArg=_this.callArgs(value)[0];constructor=_this.callArgs(value)[1];constructor=_this.rewrap(_this.func(_this.funcParams(constructor),_this.funcBody(constructor),false,__node("MacroAccess",2880,20,18,2880,{macroName:"if",macroData:{test:__node("MacroAccess",2880,23,72,2880,{left:__node("Eval",2880,23,__node("Const",2880,29,"this")),inverted:false,op:"instanceof",right:__wrap(name,888)},"statement",false,false),body:__node("Eval",2880,58,__node("Const",2880,64,"this")),elseIfs:[],elseBody:__node("Object",94808,94831,[],__wrap(prototype,888))}},"statement",false,false),false),value);return __node("MacroAccess",2882,19,30,2882,{left:__wrap(ctor,888),op:":=",right:__node("Call",2882,28,__node("Ident",2882,28,"__curry"),[__wrap(firstArg,888),__wrap(constructor,888)],false,false)},"expression",false,false);}else if(_this.isFunc(value)){constructor=_this.rewrap(_this.func(_this.funcParams(value),_this.funcBody(value),false,__node("MacroAccess",2888,20,18,2888,{macroName:"if",macroData:{test:__node("MacroAccess",2888,23,72,2888,{left:__node("Eval",2888,23,__node("Const",2888,29,"this")),inverted:false,op:"instanceof",right:__wrap(name,888)},"statement",false,false),body:__node("Eval",2888,58,__node("Const",2888,64,"this")),elseIfs:[],elseBody:__node("Object",95171,95194,[],__wrap(prototype,888))}},"statement",false,false),_this.funcIsCurried(value)),value);return __node("MacroAccess",2890,19,30,2890,{left:__wrap(ctor,888),op:":=",right:__wrap(constructor,888)},"expression",false,false);}else{return __node("MacroAccess",2892,19,30,2892,{left:__wrap(ctor,888),op:":=",right:__wrap(value,888)},"expression",false,false);}}}});}else if(!superclass){init.push(__node("MacroAccess",2896,11,17,2896,{macroName:"let",macroData:{ident:__wrap(name,858),func:__node("MacroAccess",2896,20,115,2896,{op:"",node:__node("Function",2896,20,[],__node("MacroAccess",2896,25,18,2896,{macroName:"if",macroData:{test:__node("MacroAccess",2896,28,72,2896,{left:__node("This",2896,28),inverted:false,op:"instanceof",right:__wrap(name,893)},"statement",false,false),body:__node("This",2896,55),elseIfs:[],elseBody:__node("Object",95455,95478,[],__wrap(prototype,893))}},"statement",false,false),true,false,false,void 0,false,[])},"statement",false,false)}},"statement",false,false));}else{result=this.tmp("ref");init.push(__node("MacroAccess",2900,11,17,2900,{macroName:"let",macroData:{ident:__wrap(name,858),func:__node("MacroAccess",2900,20,115,2900,{op:"",node:__node("Function",2900,20,[],__node("Block",2901,1,[__node("MacroAccess",2901,13,38,2901,{macroName:"let",macroData:{declarable:__node("MacroAccess",2901,16,37,2901,__node("MacroAccess",2901,16,31,2901,{ident:__wrap(self,895)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",2901,24,18,2901,{macroName:"if",macroData:{test:__node("MacroAccess",2901,27,72,2901,{left:__node("This",2901,27),inverted:false,op:"instanceof",right:__wrap(name,895)},"expression",false,false),body:__node("This",2901,54),elseIfs:[],elseBody:__node("Object",95628,95651,[],__wrap(prototype,895))}},"expression",false,false)}},"statement",false,false),__node("MacroAccess",2902,13,38,2902,{macroName:"let",macroData:{declarable:__node("MacroAccess",2902,16,37,2902,__node("MacroAccess",2902,16,31,2902,{ident:__wrap(result,895)},"statement",false,false),"statement",false,false),value:__node("Call",2902,26,__wrap(sup,895),[__wrap(self,895),__node("Spread",2902,39,__node("Args",2902,43))],false,true)}},"statement",false,false),__node("MacroAccess",2903,13,19,2903,{macroName:"if",macroData:{test:__node("MacroAccess",2903,15,5,2903,{left:__node("Call",2903,15,__node("Ident",2903,15,"Object"),[__wrap(result,895)],false,false),inverted:false,op:"==",right:__wrap(result,895)},"statement",false,false),body:__wrap(result,895),elseIfs:[],elseBody:__wrap(self,895)}},"statement",false,false)],null),true,false,false,void 0,false,[])},"statement",false,false)}},"statement",false,false));}function changeDefs(node){return _this.walk(node,function(node){var _ref,key,value;if(_this.isDef(node)){key=_this.left(node);if((_ref=_this.right(node))!=null){value=_ref;}else{value=__node("MacroAccess",2911,42,115,2911,{op:"",node:__node("Function",2911,42,[],__node("MacroAccess",2911,44,11,2911,{op:"throw",node:__node("Call",2911,50,__node("Ident",2911,50,"Error"),[__node("MacroAccess",2911,57,67,2911,{left:__node("MacroAccess",2911,57,67,2911,{left:__node("MacroAccess",2911,57,67,2911,{left:__node("MacroAccess",2911,57,67,2911,{left:__node("Const",2911,57,"Not implemented: "),op:"",right:__node("Call",2911,77,__node("Ident",2911,77,"__name"),[__node("Access",2911,84,__node("This",2911,84),__node("Const",2911,85,"constructor"))],false,false)},"expression",false,false),op:"",right:__node("Const",2911,57,".")},"expression",false,false),op:"",right:__wrap(key,902)},"expression",false,false),op:"",right:__node("Const",2911,57,"()")},"expression",false,false)],false,false)},"statement",false,false),true,false,false,void 0,false,[])},"expression",false,false);}return changeDefs(__node("MacroAccess",2912,25,30,2912,{left:__node("Access",2912,36,__wrap(prototype,899),__wrap(key,899)),op:":=",right:__wrap(value,899)},"expression",false,false));}});};body=changeDefs(body);body=this.walk(body,function(node){if(_this.isFunc(node)){if(!_this.funcIsBound(node)){return node;}}else if(_this.isThis(node)){return name;}});result=__node("MacroAccess",2922,29,102,2922,{macroName:"do",macroData:{locals:{ident:__wrap(sup,858),value:__wrap(superclass,858),rest:[]},body:__node("Block",2923,1,[__wrap(init,858),__wrap(body,858),__node("MacroAccess",2925,7,39,2925,{macroName:"return",macroData:{node:__wrap(name,858)}},"statement",false,false)],null)}},"statement",false,false);if(genericArgs.length>0){genericCache=this.tmp("cache",false,"object");for(_arr=[], _i=0, _len=genericArgs.length;_i<_len;++_i){genericArg=genericArgs[_i];_arr.push(this.param(genericArg));}genericParams=_arr;makeClassIdent=this.tmp("make",false,"function");instanceofs={};for(_i=0, _len=genericArgs.length;_i<_len;++_i){genericArg=genericArgs[_i];name=this.name(genericArg);key=this.tmp("instanceof_"+__strnum(name),false,"function");instanceofs[name]={key:key,"let":__node("MacroAccess",2937,19,38,2937,{macroName:"let",macroData:{declarable:__node("MacroAccess",2937,23,37,2937,__node("MacroAccess",2937,23,31,2937,{ident:__wrap(key,858)},"statement",false,false),"statement",false,false),value:__node("Call",2937,30,__node("Ident",2937,30,"__makeInstanceof"),[__wrap(genericArg,858)],false,false)}},"statement",false,false),used:false};}result=this.walk(this.macroExpandAll(result),function(node){var func,left,name,right;if(_this.isBinary(node)&&_this.op(node)==="instanceof"){right=_this.right(node);if(_this.isIdent(right)){name=_this.name(right);if(__owns.call(instanceofs,name)){func=instanceofs[name].key;instanceofs[name].used=true;left=_this.left(node);return __node("Call",2949,26,__wrap(func,912),[__wrap(left,912)],false,false);}}}});_arr=[];for(name in instanceofs){if(__owns.call(instanceofs,name)){item=instanceofs[name];if(item.used){_arr.push(item["let"]);}}}instanceofLets=_arr;if(instanceofLets.length){result=__node("Block",2955,1,[__wrap(instanceofLets,858),__wrap(result,858)],null);}makeClassFunc=this.func(genericParams,result,true,false);result=__node("Call",2958,20,__node("Ident",2958,20,"__genericFunc"),[__wrap(genericArgs.length,858),__wrap(makeClassFunc,858)],false,false);}if(declaration!=null){return __node("MacroAccess",2961,10,38,2961,{macroName:"let",macroData:{declarable:__node("MacroAccess",2961,14,37,2961,__node("MacroAccess",2961,14,31,2961,{ident:__wrap(declaration,858)},"statement",false,false),"statement",false,false),value:__wrap(result,858)}},"statement",false,false);}else if(assignment!=null){return __node("MacroAccess",2963,11,30,2963,{left:__wrap(assignment,858),op:":=",right:__wrap(result,858)},"expression",false,false);}else{return result;}};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "name",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {type: "ident", name: "SimpleAssignable"}
              }
            },
            {
              type: "ident",
              name: "generic",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "<"},
                    {
                      type: "ident",
                      name: "head",
                      asType: {type: "ident", name: "Identifier"}
                    },
                    {
                      type: "ident",
                      name: "tail",
                      asType: {
                        type: "many",
                        multiplier: "*",
                        inner: {
                          type: "sequence",
                          items: [
                            {type: "const", value: ","},
                            {
                              type: "this",
                              asType: {type: "ident", name: "Identifier"}
                            }
                          ]
                        }
                      }
                    },
                    {type: "const", value: ">"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "superclass",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "extends"},
                    {type: "this"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "body",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {type: "ident", name: "Body"}
              }
            }
          ],
          names: ["class"],
          id: 136
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var _ref,_this,assignment,body,declaration,index,macroData,macroName,name,result;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;name=macroData.name;body=macroData.body;if(this.isIdent(name)){declaration=name;}else if(this.isAccess(name)){assignment=name;if(this.isConst(this.child(name))&&typeof this.value(this.child(name))==="string"){name=(_ref=this.ident(this.value(this.child(name))))!=null?_ref:this.tmp("enum",false,"object");}else{name=this.tmp("enum",false,"object");}}else{name=this.tmp("enum",false,"object");}index=0;body=this.walk(this.macroExpandAll(body),function(node){var key,value;if(_this.isDef(node)){key=_this.left(node);value=_this.right(node);if(!_this.isConst(key)){throw Error("Cannot have non-const enum keys");}if(!value){++index;value=index;}return __node("MacroAccess",2992,13,30,2992,{left:__node("Access",2992,13,__node("This",2992,13),__wrap(key,921)),op:":=",right:__wrap(value,921)},"expression",false,false);}else{return node;}});result=__node("MacroAccess",2996,22,103,2996,{macroName:"with",macroData:{node:__node("Object",98695,98698,[],void 0),body:__node("Block",2997,1,[__wrap(body,920),__node("MacroAccess",2998,7,39,2998,{macroName:"return",macroData:{node:__node("This",2998,13)}},"statement",false,false)],null)}},"expression",false,false);if(declaration!=null){return __node("MacroAccess",3001,10,38,3001,{macroName:"let",macroData:{declarable:__node("MacroAccess",3001,14,37,3001,__node("MacroAccess",3001,14,31,3001,{ident:__wrap(declaration,920)},"statement",false,false),"statement",false,false),value:__wrap(result,920)}},"statement",false,false);}else if(assignment!=null){return __node("MacroAccess",3003,11,30,3003,{left:__wrap(assignment,920),op:":=",right:__wrap(result,920)},"expression",false,false);}else{return result;}};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "name",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {type: "ident", name: "SimpleAssignable"}
              }
            },
            {
              type: "ident",
              name: "body",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {type: "ident", name: "Body"}
              }
            }
          ],
          names: ["enum"],
          id: 137
        },
        {
          code: 'return (function(){"use strict";var __isArray,__slice,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__slice=Array.prototype.slice;__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroFullData,__wrap,__node){var _ref,_this,assignment,body,declaration,init,macroData,macroName,name,result,sup,superobject;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;name=macroData.name;superobject=macroData.superobject;body=macroData.body;if(this.isIdent(name)){declaration=name;}else if(this.isAccess(name)){assignment=name;if(this.isConst(this.child(name))&&typeof this.value(this.child(name))==="string"){name=(_ref=this.ident(this.value(this.child(name))))!=null?_ref:this.tmp("ns",false,"object");}else{name=this.tmp("ns",false,"object");}}else{name=this.tmp("ns",false,"object");}sup=superobject&&(this.isIdent(superobject)?superobject:this.tmp("super",false,"object"));init=[];if(!superobject){init.push(__node("MacroAccess",3025,20,38,3025,{macroName:"let",macroData:{declarable:__node("MacroAccess",3025,24,37,3025,__node("MacroAccess",3025,24,31,3025,{ident:__wrap(name,925)},"statement",false,false),"statement",false,false),value:__node("Object",99569,99572,[],void 0)}},"statement",false,false));}else{init.push(__node("MacroAccess",3027,20,38,3027,{macroName:"let",macroData:{declarable:__node("MacroAccess",3027,24,37,3027,__node("MacroAccess",3027,24,31,3027,{ident:__wrap(name,925)},"statement",false,false),"statement",false,false),value:__node("Object",99613,99630,[],__wrap(sup,925))}},"statement",false,false));}function fixSupers(node){return _this.walk(node,function(node){var _arr,_arr2,_i,_len,args,child,parent,superArg;if(_this.isSuper(node)){child=_this.superChild(node);if(child!=null){child=fixSupers(child);}for(_arr=[], _arr2=__toArray(_this.superArgs(node)), _i=0, _len=_arr2.length;_i<_len;++_i){superArg=_arr2[_i];_arr.push(fixSupers(superArg));}args=_arr;if(!superobject){parent=__node("Access",3037,15,__node("Ident",3037,15,"Object"),__node("Const",3037,23,"prototype"));}else{parent=__wrap(sup,931);}return _this.call(child!=null?__node("Access",3042,17,__wrap(parent,931),__wrap(child,931)):__wrap(parent,931),[__node("This",3045,16)].concat(args),false,true);}});};body=fixSupers(this.macroExpandAll(body));function changeDefs(node){return _this.walk(node,function(node){var key,value;if(_this.isDef(node)){key=_this.left(node);value=_this.right(node);return changeDefs(__node("MacroAccess",3054,25,30,3054,{left:__node("Access",3054,31,__wrap(name,935),__wrap(key,935)),op:":=",right:__wrap(value,935)},"expression",false,false));}});};body=changeDefs(body);body=this.walk(body,function(node){if(_this.isFunc(node)){if(!_this.funcIsBound(node)){return node;}}else if(_this.isThis(node)){return name;}});result=__node("MacroAccess",3064,29,102,3064,{macroName:"do",macroData:{locals:{ident:__wrap(sup,925),value:__wrap(superobject,925),rest:[]},body:__node("Block",3065,1,[__wrap(init,925),__wrap(body,925),__node("MacroAccess",3067,7,39,3067,{macroName:"return",macroData:{node:__wrap(name,925)}},"statement",false,false)],null)}},"statement",false,false);if(declaration!=null){return __node("MacroAccess",3070,10,38,3070,{macroName:"let",macroData:{declarable:__node("MacroAccess",3070,14,37,3070,__node("MacroAccess",3070,14,31,3070,{ident:__wrap(declaration,925)},"statement",false,false),"statement",false,false),value:__wrap(result,925)}},"statement",false,false);}else if(assignment!=null){return __node("MacroAccess",3072,11,30,3072,{left:__wrap(assignment,925),op:":=",right:__wrap(result,925)},"expression",false,false);}else{return result;}};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "name",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {type: "ident", name: "SimpleAssignable"}
              }
            },
            {
              type: "ident",
              name: "superobject",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "extends"},
                    {type: "this"}
                  ]
                }
              }
            },
            {
              type: "ident",
              name: "body",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {type: "ident", name: "Body"}
              }
            }
          ],
          names: ["namespace"],
          id: 138
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var _this,macroData,macroName,node;_this=this;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;if(!this.inGenerator){throw Error("Can only use yield in a generator function");}return this.mutateLast(node||this.noop(),function(n){return _this["yield"](n);},true);};}.call(this));',
          options: {},
          params: [{
            type: "ident",
            name: "node",
            asType: {type: "ident", name: "Expression"}
          }],
          names: ["yield"],
          id: 139
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var item,macroData,macroName,node,yieldItem;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;if(!this.inGenerator){throw Error("Can only use yield* in a generator function");}item=this.tmp("item");yieldItem=this["yield"](item);return __node("MacroAccess",3089,7,118,3089,{macroName:"for",macroData:{value:__wrap(item,942),iterable:__wrap(node,942),body:__wrap(yieldItem,942)}},"statement",false,false);};}.call(this));',
          options: {},
          params: [{
            type: "ident",
            name: "node",
            asType: {type: "ident", name: "Expression"}
          }],
          names: ["yield*"],
          id: 140
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var macroData,macroName,node,rest;macroName=macroFullData.macroName;macroData=macroFullData.macroData;node=macroData.node;rest=macroData.rest;return __node("Block",3095,1,[__wrap(rest,945),__node("MacroAccess",3096,7,39,3096,{macroName:"return",macroData:{node:__wrap(node,945)}},"statement",false,false)],null);};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "node",
              asType: {type: "ident", name: "Expression"}
            },
            {
              type: "ident",
              name: "rest",
              asType: {type: "ident", name: "DedentedBody"}
            }
          ],
          names: ["returning"],
          id: 141
        },
        {
          code: 'return (function(){"use strict";return function(macroFullData,__wrap,__node){var label,macroData,macroName,node;macroName=macroFullData.macroName;macroData=macroFullData.macroData;label=macroData.label;node=macroData.node;return this.withLabel(node,label);};}.call(this));',
          options: {},
          params: [
            {
              type: "ident",
              name: "label",
              asType: {type: "ident", name: "Identifier"}
            },
            {
              type: "ident",
              name: "node",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Statement"},
                  {type: "ident", name: "Body"}
                ]
              }
            }
          ],
          names: ["label!"],
          id: 144
        }
      ],
      binaryOperator: [
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(left,"&&",right);};}.call(this));',
          operators: ["and"],
          options: {precedence: 1},
          id: 1
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(left,"||",right);};}.call(this));',
          operators: ["or"],
          options: {precedence: 1},
          id: 2
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(left,"===",right);};}.call(this));',
          operators: ["=="],
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 5
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",37,7,3,37,{op:"not",node:__node("MacroAccess",37,13,5,37,{left:__wrap(left,10),inverted:false,op:"==",right:__wrap(right,10)},"expression",false,false)},"expression",false,false);};}.call(this));',
          operators: ["!="],
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 6
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(left,"==",right);};}.call(this));',
          operators: ["~="],
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 7
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",43,7,3,43,{op:"not",node:__node("MacroAccess",43,13,7,43,{left:__wrap(left,12),inverted:false,op:"~=",right:__wrap(right,12)},"expression",false,false)},"expression",false,false);};}.call(this));',
          operators: ["!~="],
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 8
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(left,op==="~<"&&"<"||"<=",right);};}.call(this));',
          operators: ["~<", "~<="],
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 9
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return op==="~>"&&__node("MacroAccess",51,23,3,51,{op:"not",node:__node("MacroAccess",51,29,9,51,{left:__wrap(left,14),inverted:false,op:"~<=",right:__wrap(right,14)},"expression",false,false)},"expression",false,false)||__node("MacroAccess",51,55,3,51,{op:"not",node:__node("MacroAccess",51,61,9,51,{left:__wrap(left,14),inverted:false,op:"~<",right:__wrap(right,14)},"expression",false,false)},"expression",false,false);};}.call(this));',
          operators: ["~>", "~>="],
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 10
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(this.hasType(left,"numeric")&&this.hasType(right,"numeric")){return this.binary(this.binary(this["const"](""),"+",left),"+",right);}else if(this.isConst(left)&&this.value(left)===""&&this.isType(right,"string")){return right;}else if(this.isConst(right)&&this.value(right)===""&&this.isType(left,"string")){return left;}else{return this.binary(left,"+",right);}};}.call(this));',
          operators: ["~&"],
          options: {precedence: 7, type: "string"},
          id: 29
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(op==="~\\\\"){return __node("Call",313,9,__node("Access",313,9,__node("Ident",313,9,"Math"),__node("Const",313,15,"floor")),[__wrap(this.binary(left,"/",right),81)],false,false);}else if(op==="~*"){return this.binary(left,"*",right);}else if(op==="~/"){return this.binary(left,"/",right);}else{return this.binary(left,"%",right);}};}.call(this));',
          operators: ["~*", "~/", "~%", "~\\"],
          options: {precedence: 11, type: "number"},
          id: 45
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(op==="~+"){if(!this.isType(right,"numeric")){return this.binary(left,"-",__node("MacroAccess",355,30,48,355,{op:"~-",node:__wrap(right,89)},"expression",false,false));}else{if(!this.isType(left,"numeric")){left=__node("MacroAccess",358,21,48,358,{op:"~+",node:__wrap(left,89)},"expression",false,false);}return this.binary(left,"+",right);}}else{return this.binary(left,"-",right);}};}.call(this));',
          operators: ["~+", "~-"],
          options: {precedence: 10, type: "number"},
          id: 49
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right,value;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isConst(right)){value=this.value(right);if(value===0.5){return __node("Call",367,18,__node("Access",367,18,__node("Ident",367,18,"Math"),__node("Const",367,24,"sqrt")),[__wrap(left,90)],false,false);}else if(value===1){return __node("MacroAccess",369,18,48,369,{op:"~+",node:__wrap(left,90)},"expression",false,false);}else if(value===2){return this.maybeCache(left,function(setLeft,left){return __node("MacroAccess",372,13,45,372,{left:__wrap(setLeft,92),inverted:false,op:"~*",right:__wrap(left,92)},"expression",false,false);});}else if(value===3){return this.maybeCache(left,function(setLeft,left){return __node("MacroAccess",375,13,45,375,{left:__node("MacroAccess",375,13,45,375,{left:__wrap(setLeft,93),inverted:false,op:"~*",right:__wrap(left,93)},"expression",false,false),inverted:false,op:"~*",right:__wrap(left,93)},"expression",false,false);});}}return __node("Call",376,7,__node("Access",376,7,__node("Ident",376,7,"Math"),__node("Const",376,13,"pow")),[__wrap(left,90),__wrap(right,90)],false,false);};}.call(this));',
          operators: ["~^"],
          options: {precedence: 12, rightToLeft: true, type: "number"},
          id: 50
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(op==="~bitlshift"){return this.binary(left,"<<",right);}else if(op==="~bitrshift"){return this.binary(left,">>",right);}else{return this.binary(left,">>>",right);}};}.call(this));',
          operators: ["~bitlshift", "~bitrshift", "~biturshift"],
          options: {precedence: 9, maximum: 1, type: "number"},
          id: 54
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",509,7,50,509,{left:__node("MacroAccess",509,7,58,509,{op:"+",node:__wrap(left,119)},"expression",false,false),inverted:false,op:"~^",right:__node("MacroAccess",509,17,58,509,{op:"+",node:__wrap(right,119)},"expression",false,false)},"expression",false,false);};}.call(this));',
          operators: ["^"],
          options: {precedence: 12, rightToLeft: true, type: "number"},
          id: 60
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(op==="*"){return __node("MacroAccess",517,9,45,517,{left:__node("MacroAccess",517,9,58,517,{op:"+",node:__wrap(left,122)},"expression",false,false),inverted:false,op:"~*",right:__node("MacroAccess",517,19,58,517,{op:"+",node:__wrap(right,122)},"expression",false,false)},"expression",false,false);}else if(op==="/"){return __node("MacroAccess",519,9,45,519,{left:__node("MacroAccess",519,9,58,519,{op:"+",node:__wrap(left,122)},"expression",false,false),inverted:false,op:"~/",right:__node("MacroAccess",519,19,58,519,{op:"+",node:__wrap(right,122)},"expression",false,false)},"expression",false,false);}else if(op==="%"){return __node("MacroAccess",521,9,45,521,{left:__node("MacroAccess",521,9,58,521,{op:"+",node:__wrap(left,122)},"expression",false,false),inverted:false,op:"~%",right:__node("MacroAccess",521,19,58,521,{op:"+",node:__wrap(right,122)},"expression",false,false)},"expression",false,false);}else{return __node("MacroAccess",523,9,45,523,{left:__node("MacroAccess",523,9,58,523,{op:"+",node:__wrap(left,122)},"expression",false,false),inverted:false,op:"~\\\\",right:__node("MacroAccess",523,19,58,523,{op:"+",node:__wrap(right,122)},"expression",false,false)},"expression",false,false);}};}.call(this));',
          operators: ["*", "/", "%", "\\"],
          options: {precedence: 11, type: "number"},
          id: 62
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(op==="+"){return __node("MacroAccess",530,9,49,530,{left:__node("MacroAccess",530,9,58,530,{op:"+",node:__wrap(left,124)},"expression",false,false),inverted:false,op:"~+",right:__node("MacroAccess",530,19,58,530,{op:"+",node:__wrap(right,124)},"expression",false,false)},"expression",false,false);}else{return __node("MacroAccess",532,9,49,532,{left:__node("MacroAccess",532,9,58,532,{op:"+",node:__wrap(left,124)},"expression",false,false),inverted:false,op:"~-",right:__node("MacroAccess",532,19,58,532,{op:"+",node:__wrap(right,124)},"expression",false,false)},"expression",false,false);}};}.call(this));',
          operators: ["+", "-"],
          options: {precedence: 10, type: "number"},
          id: 64
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(op==="bitlshift"){return __node("MacroAccess",536,9,54,536,{left:__node("MacroAccess",536,9,58,536,{op:"+",node:__wrap(left,125)},"expression",false,false),inverted:false,op:"~bitlshift",right:__node("MacroAccess",536,27,58,536,{op:"+",node:__wrap(right,125)},"expression",false,false)},"expression",false,false);}else if(op==="bitrshift"){return __node("MacroAccess",538,9,54,538,{left:__node("MacroAccess",538,9,58,538,{op:"+",node:__wrap(left,125)},"expression",false,false),inverted:false,op:"~bitrshift",right:__node("MacroAccess",538,27,58,538,{op:"+",node:__wrap(right,125)},"expression",false,false)},"expression",false,false);}else{return __node("MacroAccess",540,9,54,540,{left:__node("MacroAccess",540,9,58,540,{op:"+",node:__wrap(left,125)},"expression",false,false),inverted:false,op:"~biturshift",right:__node("MacroAccess",540,28,58,540,{op:"+",node:__wrap(right,125)},"expression",false,false)},"expression",false,false);}};}.call(this));',
          operators: ["bitlshift", "bitrshift", "biturshift"],
          options: {precedence: 9, maximum: 1, type: "number"},
          id: 65
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(!this.isType(left,"stringOrNumber")){left=!this.hasType(left,"number")?__node("Call",549,11,__node("Ident",549,11,"__str"),[__wrap(left,128)],false,false):__node("Call",551,11,__node("Ident",551,11,"__strnum"),[__wrap(left,128)],false,false);}if(!this.isType(right,"stringOrNumber")){right=!this.hasType(right,"number")?__node("Call",554,11,__node("Ident",554,11,"__str"),[__wrap(right,128)],false,false):__node("Call",556,11,__node("Ident",556,11,"__strnum"),[__wrap(right,128)],false,false);}return __node("MacroAccess",557,7,29,557,{left:__wrap(left,128),inverted:false,op:"~&",right:__wrap(right,128)},"expression",false,false);};}.call(this));',
          operators: ["&"],
          options: {precedence: 7, type: "string", label: "stringConcat"},
          id: 67
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var elements,f,left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isArray(right)){elements=this.elements(right);if(elements.length===0){if(this.isComplex(left)){return __node("Block",572,1,[__wrap(left,131),__node("Const",573,11,false)],null);}else{return __node("Const",575,13,false);}}else if(elements.length===1){return __node("MacroAccess",577,11,5,577,{left:__wrap(left,131),inverted:false,op:"==",right:__wrap(elements[0],131)},"expression",false,false);}else{f=function(i,current,left){if(i<elements.length){return f(+i+1,__node("MacroAccess",581,25,2,581,{left:__wrap(current,133),inverted:false,op:"or",right:__node("MacroAccess",581,37,5,581,{left:__wrap(left,133),inverted:false,op:"==",right:__wrap(elements[i],133)},"expression",false,false)},"expression",false,false),left);}else{return current;}};return this.maybeCache(left,function(setLeft,left){return f(1,__node("MacroAccess",585,18,5,585,{left:__wrap(setLeft,134),inverted:false,op:"==",right:__wrap(elements[0],134)},"expression",false,false),left);});}}else{return __node("Call",587,9,__node("Ident",587,9,"__in"),[__wrap(left,131),__wrap(right,131)],false,false);}};}.call(this));',
          operators: ["in"],
          options: {precedence: 6, maximum: 1, invertible: true, type: "boolean"},
          id: 69
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(right,"in",left);};}.call(this));',
          operators: ["haskey"],
          options: {precedence: 6, maximum: 1, invertible: true, type: "boolean"},
          id: 70
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("Call",595,7,__node("Ident",595,7,"__owns"),[__wrap(left,136),__wrap(right,136)],false,true);};}.call(this));',
          operators: ["ownskey"],
          options: {
            precedence: 6,
            maximum: 1,
            invertible: true,
            type: "boolean",
            label: "ownership"
          },
          id: 71
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isIdent(right)){if(this.name(right)==="String"){return __node("MacroAccess",600,18,23,600,{op:"isString!",node:__wrap(left,137)},"expression",false,false);}else if(this.name(right)==="Number"){return __node("MacroAccess",602,18,24,602,{op:"isNumber!",node:__wrap(left,137)},"expression",false,false);}else if(this.name(right)==="Boolean"){return __node("MacroAccess",604,18,25,604,{op:"isBoolean!",node:__wrap(left,137)},"expression",false,false);}else if(this.name(right)==="Function"){return __node("MacroAccess",606,18,26,606,{op:"isFunction!",node:__wrap(left,137)},"expression",false,false);}else if(this.name(right)==="Array"){return __node("MacroAccess",608,18,27,608,{op:"isArray!",node:__wrap(left,137)},"expression",false,false);}else if(this.name(right)==="Object"){return __node("MacroAccess",610,18,28,610,{op:"isObject!",node:__wrap(left,137)},"expression",false,false);}}return this.binary(left,"instanceof",right);};}.call(this));',
          operators: ["instanceof"],
          options: {precedence: 6, maximum: 1, invertible: true, type: "boolean"},
          id: 72
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("Call",628,7,__node("Ident",628,7,"__cmp"),[__wrap(left,140),__wrap(right,140)],false,false);};}.call(this));',
          operators: ["<=>"],
          options: {precedence: 5, maximum: 1, type: "number"},
          id: 73
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",631,7,5,631,{left:__node("MacroAccess",631,7,62,631,{left:__wrap(left,141),inverted:false,op:"%",right:__wrap(right,141)},"expression",false,false),inverted:false,op:"==",right:__node("Const",631,26,0)},"expression",false,false);};}.call(this));',
          operators: ["%%"],
          options: {precedence: 2, maximum: 1, invertible: true, type: "boolean"},
          id: 74
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",634,7,5,634,{left:__node("MacroAccess",634,7,45,634,{left:__wrap(left,142),inverted:false,op:"~%",right:__wrap(right,142)},"expression",false,false),inverted:false,op:"==",right:__node("Const",634,27,0)},"expression",false,false);};}.call(this));',
          operators: ["~%%"],
          options: {precedence: 2, maximum: 1, invertible: true, type: "boolean"},
          id: 75
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isType(left,"number")){if(this.isType(right,"number")){if(op==="<"){return __node("MacroAccess",672,13,9,672,{left:__wrap(left,149),inverted:false,op:"~<",right:__wrap(right,149)},"expression",false,false);}else{return __node("MacroAccess",674,13,9,674,{left:__wrap(left,149),inverted:false,op:"~<=",right:__wrap(right,149)},"expression",false,false);}}else if(op==="<"){return __node("MacroAccess",677,13,9,677,{left:__wrap(left,149),inverted:false,op:"~<",right:__node("Call",677,22,__node("Ident",677,22,"__num"),[__wrap(right,149)],false,false)},"expression",false,false);}else{return __node("MacroAccess",679,13,9,679,{left:__wrap(left,149),inverted:false,op:"~<=",right:__node("Call",679,23,__node("Ident",679,23,"__num"),[__wrap(right,149)],false,false)},"expression",false,false);}}else if(this.isType(left,"string")){if(this.isType(right,"string")){if(op==="<"){return __node("MacroAccess",683,13,9,683,{left:__wrap(left,149),inverted:false,op:"~<",right:__wrap(right,149)},"expression",false,false);}else{return __node("MacroAccess",685,13,9,685,{left:__wrap(left,149),inverted:false,op:"~<=",right:__wrap(right,149)},"expression",false,false);}}else if(op==="<"){return __node("MacroAccess",688,13,9,688,{left:__wrap(left,149),inverted:false,op:"~<",right:__node("Call",688,22,__node("Ident",688,22,"__str"),[__wrap(right,149)],false,false)},"expression",false,false);}else{return __node("MacroAccess",690,13,9,690,{left:__wrap(left,149),inverted:false,op:"~<=",right:__node("Call",690,23,__node("Ident",690,23,"__str"),[__wrap(right,149)],false,false)},"expression",false,false);}}else if(this.isType(right,"number")){if(op==="<"){return __node("MacroAccess",693,11,9,693,{left:__node("Call",693,11,__node("Ident",693,11,"__num"),[__wrap(left,149)],false,false),inverted:false,op:"~<",right:__wrap(right,149)},"expression",false,false);}else{return __node("MacroAccess",695,11,9,695,{left:__node("Call",695,11,__node("Ident",695,11,"__num"),[__wrap(left,149)],false,false),inverted:false,op:"~<=",right:__wrap(right,149)},"expression",false,false);}}else if(this.isType(right,"string")){if(op==="<"){return __node("MacroAccess",698,11,9,698,{left:__node("Call",698,11,__node("Ident",698,11,"__str"),[__wrap(left,149)],false,false),inverted:false,op:"~<",right:__wrap(right,149)},"expression",false,false);}else{return __node("MacroAccess",700,11,9,700,{left:__node("Call",700,11,__node("Ident",700,11,"__str"),[__wrap(left,149)],false,false),inverted:false,op:"~<=",right:__wrap(right,149)},"expression",false,false);}}else if(op==="<"){return __node("Call",702,9,__node("Ident",702,9,"__lt"),[__wrap(left,149),__wrap(right,149)],false,false);}else{return __node("Call",704,9,__node("Ident",704,9,"__lte"),[__wrap(left,149),__wrap(right,149)],false,false);}};}.call(this));',
          operators: ["<", "<="],
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 76
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(op===">"){return __node("MacroAccess",708,9,3,708,{op:"not",node:__node("MacroAccess",708,15,76,708,{left:__wrap(left,150),inverted:false,op:"<=",right:__wrap(right,150)},"expression",false,false)},"expression",false,false);}else{return __node("MacroAccess",710,9,3,710,{op:"not",node:__node("MacroAccess",710,15,76,710,{left:__wrap(left,150),inverted:false,op:"<",right:__wrap(right,150)},"expression",false,false)},"expression",false,false);}};}.call(this));',
          operators: [">", ">="],
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 77
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCache(left,function(setLeft,left){return _this.maybeCache(right,function(setRight,right){return __node("MacroAccess",715,11,18,715,{macroName:"if",macroData:{test:__node("MacroAccess",715,14,9,715,{left:__wrap(setLeft,153),inverted:false,op:"~<",right:__wrap(setRight,153)},"expression",false,false),body:__wrap(left,153),elseIfs:[],elseBody:__wrap(right,153)}},"expression",false,false);});});};}.call(this));',
          operators: ["~min"],
          options: {precedence: 8},
          id: 78
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCache(left,function(setLeft,left){return _this.maybeCache(right,function(setRight,right){return __node("MacroAccess",720,11,18,720,{macroName:"if",macroData:{test:__node("MacroAccess",720,14,10,720,{left:__wrap(setLeft,156),inverted:false,op:"~>",right:__wrap(setRight,156)},"expression",false,false),body:__wrap(left,156),elseIfs:[],elseBody:__wrap(right,156)}},"expression",false,false);});});};}.call(this));',
          operators: ["~max"],
          options: {precedence: 8},
          id: 79
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCache(left,function(setLeft,left){return _this.maybeCache(right,function(setRight,right){return __node("MacroAccess",725,11,18,725,{macroName:"if",macroData:{test:__node("MacroAccess",725,14,76,725,{left:__wrap(setLeft,159),inverted:false,op:"<",right:__wrap(setRight,159)},"expression",false,false),body:__wrap(left,159),elseIfs:[],elseBody:__wrap(right,159)}},"expression",false,false);});});};}.call(this));',
          operators: ["min"],
          options: {precedence: 8},
          id: 80
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCache(left,function(setLeft,left){return _this.maybeCache(right,function(setRight,right){return __node("MacroAccess",730,11,18,730,{macroName:"if",macroData:{test:__node("MacroAccess",730,14,77,730,{left:__wrap(setLeft,162),inverted:false,op:">",right:__wrap(setRight,162)},"expression",false,false),body:__wrap(left,162),elseIfs:[],elseBody:__wrap(right,162)}},"expression",false,false);});});};}.call(this));',
          operators: ["max"],
          options: {precedence: 8},
          id: 81
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("Call",733,7,__node("Ident",733,7,"__xor"),[__wrap(left,163),__wrap(right,163)],false,false);};}.call(this));',
          operators: ["xor"],
          options: {precedence: 1},
          id: 82
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCache(left,function(setLeft,left){return __node("MacroAccess",737,9,18,737,{macroName:"if",macroData:{test:__node("MacroAccess",737,12,20,737,{op:"?",node:__wrap(setLeft,165)},"expression",false,false),body:__wrap(left,165),elseIfs:[],elseBody:__wrap(right,165)}},"expression",false,false);});};}.call(this));',
          operators: ["?"],
          options: {precedence: 1},
          id: 83
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(left,"&",right);};}.call(this));',
          operators: ["~bitand"],
          options: {precedence: 1, type: "number"},
          id: 90
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(left,"|",right);};}.call(this));',
          operators: ["~bitor"],
          options: {precedence: 1, type: "number"},
          id: 91
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.binary(left,"^",right);};}.call(this));',
          operators: ["~bitxor"],
          options: {precedence: 1, type: "number"},
          id: 92
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",813,7,90,813,{left:__node("MacroAccess",813,7,58,813,{op:"+",node:__wrap(left,188)},"expression",false,false),inverted:false,op:"~bitand",right:__node("MacroAccess",813,22,58,813,{op:"+",node:__wrap(right,188)},"expression",false,false)},"expression",false,false);};}.call(this));',
          operators: ["bitand"],
          options: {precedence: 1, type: "number"},
          id: 94
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",816,7,91,816,{left:__node("MacroAccess",816,7,58,816,{op:"+",node:__wrap(left,189)},"expression",false,false),inverted:false,op:"~bitor",right:__node("MacroAccess",816,21,58,816,{op:"+",node:__wrap(right,189)},"expression",false,false)},"expression",false,false);};}.call(this));',
          operators: ["bitor"],
          options: {precedence: 1, type: "number"},
          id: 95
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",819,7,92,819,{left:__node("MacroAccess",819,7,58,819,{op:"+",node:__wrap(left,190)},"expression",false,false),inverted:false,op:"~bitxor",right:__node("MacroAccess",819,22,58,819,{op:"+",node:__wrap(right,190)},"expression",false,false)},"expression",false,false);};}.call(this));',
          operators: ["bitxor"],
          options: {precedence: 1, type: "number"},
          id: 96
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("Call",1077,7,__node("Ident",1077,7,"__range"),[__wrap(left,235),__wrap(right,235),__node("Const",1077,31,1),__node("Const",1077,33,true)],false,false);};}.call(this));',
          operators: ["to"],
          options: {maximum: 1, precedence: 4, type: "array"},
          id: 108
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("Call",1080,7,__node("Ident",1080,7,"__range"),[__wrap(left,236),__wrap(right,236),__node("Const",1080,31,1),__node("Const",1080,33,false)],false,false);};}.call(this));',
          operators: ["til"],
          options: {maximum: 1, precedence: 4, type: "array"},
          id: 109
        },
        {
          code: 'return (function(){"use strict";var __num,__typeof;__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroData,__wrap,__node){var callArgs,left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(!this.hasType(right,"number")){throw Error("Must provide a number to the \'by\' operator");}if(this.isConst(right)&&this.value(right)===0){throw Error("\'by\' step must be non-zero");}if(this.isCall(left)&&this.isIdent(this.callFunc(left))&&this.name(this.callFunc(left))==="__range"&&!this.callIsApply(left)){callArgs=this.callArgs(left);return __node("Call",1089,9,__node("Ident",1089,9,"__range"),[__wrap(callArgs[0],237),__wrap(callArgs[1],237),__wrap(right,237),__wrap(callArgs[3],237)],false,false);}else{if(this.isConst(right)&&__num(this.value(right))%1!==0){throw Error("\'by\' step must be an integer");}return __node("Call",1093,9,__node("Ident",1093,9,"__step"),[__wrap(left,237),__wrap(right,237)],false,false);}};}.call(this));',
          operators: ["by"],
          options: {maximum: 1, precedence: 3, type: "array"},
          id: 110
        },
        {
          code: 'return (function(){"use strict";var __lt,__num,__typeof;__lt=function(x,y){var type;type=typeof x;if(type!=="number"&&type!=="string"){throw TypeError("Cannot compare a non-number/string: "+type);}else if(type!==typeof y){throw TypeError("Cannot compare elements of different types: "+type+" vs "+typeof y);}else{return x<y;}};__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroData,__wrap,__node){var element,elements,f,left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isArray(right)){elements=this.elements(right);if(elements.length===0){if(this.isComplex(left)){return __node("Block",1942,1,[__wrap(left,393),__node("Const",1943,11,false)],null);}else{return __node("Const",1945,13,false);}}else if(elements.length===1){element=elements[0];return __node("MacroAccess",1948,11,72,1948,{left:__wrap(left,393),inverted:false,op:"instanceof",right:__wrap(element,393)},"expression",false,false);}else{f=function(i,current,left){var element;if(__lt(i,elements.length)){element=elements[i];return f(__num(i)+1,__node("MacroAccess",1953,24,2,1953,{left:__wrap(current,396),inverted:false,op:"or",right:__node("MacroAccess",1953,36,72,1953,{left:__wrap(left,396),inverted:false,op:"instanceof",right:__wrap(element,396)},"expression",false,false)},"expression",false,false),left);}else{return current;}};return this.maybeCache(left,function(setLeft,left){var element;element=elements[0];return f(1,__node("MacroAccess",1958,18,72,1958,{left:__wrap(setLeft,398),inverted:false,op:"instanceof",right:__wrap(element,398)},"expression",false,false),left);});}}else{return __node("Call",1960,9,__node("Ident",1960,9,"__instanceofsome"),[__wrap(left,393),__wrap(right,393)],false,false);}};}.call(this));',
          operators: ["instanceofsome"],
          options: {precedence: 6, maximum: 1, invertible: true, type: "boolean"},
          id: 116
        },
        {
          code: 'return (function(){"use strict";var __is,__num,__typeof;__is=typeof Object.is==="function"?Object.is:function(x,y){if(x===y){return x!==0||1/x===1/y;}else{return x!==x&&y!==y;}};__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroData,__wrap,__node){var _this,left,op,result,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.hasType(left,"number")&&this.hasType(right,"number")){if(this.isConst(left)){if(this.isConst(right)){result=__is(this.value(left),this.value(right));return __wrap(result,947);}else if(typeof this.value(left)==="number"&&isNaN(this.value(left))){return this.maybeCache(right,function(setRight,right){return __node("MacroAccess",3116,17,6,3116,{left:__wrap(setRight,949),inverted:false,op:"!=",right:__wrap(right,949)},"expression",false,false);});}else if(this.value(left)===0){return this.maybeCache(right,function(setRight,right){if(1/__num(_this.value(left))<0){return __node("MacroAccess",3120,19,1,3120,{left:__node("MacroAccess",3120,19,5,3120,{left:__wrap(setRight,950),inverted:false,op:"==",right:__node("Const",3120,34,0)},"expression",false,false),inverted:false,op:"and",right:__node("MacroAccess",3120,39,76,3120,{left:__node("MacroAccess",3120,39,45,3120,{left:__node("Const",3120,40,1),inverted:false,op:"~/",right:__wrap(right,950)},"expression",false,false),inverted:false,op:"<",right:__node("Const",3120,54,0)},"expression",false,false)},"expression",false,false);}else{return __node("MacroAccess",3122,19,1,3122,{left:__node("MacroAccess",3122,19,5,3122,{left:__wrap(setRight,950),inverted:false,op:"==",right:__node("Const",3122,34,0)},"expression",false,false),inverted:false,op:"and",right:__node("MacroAccess",3122,39,77,3122,{left:__node("MacroAccess",3122,39,45,3122,{left:__node("Const",3122,40,1),inverted:false,op:"~/",right:__wrap(right,950)},"expression",false,false),inverted:false,op:">",right:__node("Const",3122,54,0)},"expression",false,false)},"expression",false,false);}});}else{return __node("MacroAccess",3124,15,5,3124,{left:__wrap(left,947),inverted:false,op:"==",right:__wrap(right,947)},"expression",false,false);}}else if(this.isConst(right)){if(typeof this.value(right)==="number"&&isNaN(this.value(right))){return this.maybeCache(left,function(setLeft,left){return __node("MacroAccess",3128,15,6,3128,{left:__wrap(setLeft,951),inverted:false,op:"!=",right:__wrap(left,951)},"expression",false,false);});}else if(this.value(right)===0){return this.maybeCache(left,function(setLeft,left){if(1/__num(_this.value(right))<0){return __node("MacroAccess",3132,17,1,3132,{left:__node("MacroAccess",3132,17,5,3132,{left:__wrap(setLeft,952),inverted:false,op:"==",right:__node("Const",3132,31,0)},"expression",false,false),inverted:false,op:"and",right:__node("MacroAccess",3132,36,76,3132,{left:__node("MacroAccess",3132,36,45,3132,{left:__node("Const",3132,37,1),inverted:false,op:"~/",right:__wrap(left,952)},"expression",false,false),inverted:false,op:"<",right:__node("Const",3132,50,0)},"expression",false,false)},"expression",false,false);}else{return __node("MacroAccess",3134,17,1,3134,{left:__node("MacroAccess",3134,17,5,3134,{left:__wrap(setLeft,952),inverted:false,op:"==",right:__node("Const",3134,31,0)},"expression",false,false),inverted:false,op:"and",right:__node("MacroAccess",3134,36,77,3134,{left:__node("MacroAccess",3134,36,45,3134,{left:__node("Const",3134,37,1),inverted:false,op:"~/",right:__wrap(left,952)},"expression",false,false),inverted:false,op:">",right:__node("Const",3134,50,0)},"expression",false,false)},"expression",false,false);}});}else{return __node("MacroAccess",3136,13,5,3136,{left:__wrap(left,947),inverted:false,op:"==",right:__wrap(right,947)},"expression",false,false);}}else{return __node("Call",3138,11,__node("Ident",3138,11,"__is"),[__wrap(left,947),__wrap(right,947)],false,false);}}else{return __node("MacroAccess",3140,9,5,3140,{left:__wrap(left,947),inverted:false,op:"==",right:__wrap(right,947)},"expression",false,false);}};}.call(this));',
          operators: ["is"],
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 142
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("MacroAccess",3143,7,3,3143,{op:"not",node:__node("MacroAccess",3143,13,142,3143,{left:__wrap(left,953),inverted:false,op:"is",right:__wrap(right,953)},"expression",false,false)},"expression",false,false);};}.call(this));',
          operators: ["isnt"],
          options: {precedence: 2, maximum: 1, type: "boolean"},
          id: 143
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("Call",3202,7,__node("Ident",3202,7,"__compose"),[__wrap(left,971),__wrap(right,971)],false,false);};}.call(this));',
          operators: ["<<"],
          options: {precedence: 13, type: "function"},
          id: 145
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right,tmp;left=macroData.left;op=macroData.op;right=macroData.right;if(!this.isNoop(left)&&!this.isNoop(right)){tmp=this.tmp("ref");return __node("Block",3208,1,[__node("MacroAccess",3208,7,38,3208,{macroName:"let",macroData:{declarable:__node("MacroAccess",3208,10,37,3208,__node("MacroAccess",3208,10,31,3208,{ident:__wrap(tmp,972)},"statement",false,false),"statement",false,false),value:__wrap(left,972)}},"statement",false,false),__node("Call",3209,7,__node("Ident",3209,7,"__compose"),[__wrap(right,972),__wrap(tmp,972)],false,false)],null);}else{return __node("Call",3211,9,__node("Ident",3211,9,"__compose"),[__wrap(right,972),__wrap(left,972)],false,false);}};}.call(this));',
          operators: [">>"],
          options: {precedence: 13, type: "function", rightToLeft: true},
          id: 146
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return __node("Call",3230,7,__wrap(left,979),[__wrap(right,979)],false,false);};}.call(this));',
          operators: ["<|"],
          options: {precedence: 0, rightToLeft: true},
          id: 147
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right,tmp;left=macroData.left;op=macroData.op;right=macroData.right;if(!this.isNoop(left)&&!this.isNoop(right)){tmp=this.tmp("ref");return __node("Block",3236,1,[__node("MacroAccess",3236,7,38,3236,{macroName:"let",macroData:{declarable:__node("MacroAccess",3236,10,37,3236,__node("MacroAccess",3236,10,31,3236,{ident:__wrap(tmp,980)},"statement",false,false),"statement",false,false),value:__wrap(left,980)}},"statement",false,false),__node("Call",3237,7,__wrap(right,980),[__wrap(tmp,980)],false,false)],null);}else{return __node("Call",3239,9,__wrap(right,980),[__wrap(left,980)],false,false);}};}.call(this));',
          operators: ["|>"],
          options: {precedence: 0},
          id: 148
        },
        {
          code: 'return (function(){"use strict";var __isArray,__slice,__strnum,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__slice=Array.prototype.slice;__strnum=function(strnum){var type;type=typeof strnum;if(type==="string"){return strnum;}else if(type==="number"){return String(strnum);}else{throw TypeError("Expected a string or number, got "+__typeof(strnum));}};__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isObject(right)){return this.maybeCache(left,function(setLeft,nextLeft){var _arr,_ref,block,currentLeft,descriptor,i,key,len,pairs,property,value;currentLeft=setLeft;block=[];pairs=_this.pairs(right);for(_arr=__toArray(pairs), i=0, len=_arr.length;i<len;++i){key=(_ref=_arr[i]).key;value=_ref.value;property=_ref.property;if(property!=null){if((property==="get"||property==="set")&&i<len-1&&pairs[i+1].property!=null&&_this.eq(key,pairs[i+1].key)&&pairs[i+1].property!==property&&((_ref=pairs[i+1].property)==="get"||_ref==="set")){continue;}if(property==="property"){block.push(__node("Call",3258,27,__node("Ident",3258,27,"__defProp"),[__wrap(currentLeft,985),__wrap(key,985),__wrap(value,985)],false,false));}else if(property==="get"||property==="set"){if(i>0&&pairs[i-1].property!=null&&_this.eq(key,pairs[i-1].key)&&pairs[i-1].property!==property&&((_ref=pairs[i-1].property)==="get"||_ref==="set")){descriptor=__node("Object",106871,107059,[{key:__wrap(pairs[i-1].property,985),value:__wrap(pairs[i-1].value,985),property:void 0},{key:__wrap(property,985),value:__wrap(value,985),property:void 0},{key:__node("Const",3264,17,"enumerable"),value:__node("Const",3264,28,true),property:void 0},{key:__node("Const",3265,17,"configurable"),value:__node("Const",3265,30,true),property:void 0}],void 0);}else{descriptor=__node("Object",107095,107217,[{key:__wrap(property,985),value:__wrap(value,985),property:void 0},{key:__node("Const",3270,17,"enumerable"),value:__node("Const",3270,28,true),property:void 0},{key:__node("Const",3271,17,"configurable"),value:__node("Const",3271,30,true),property:void 0}],void 0);}block.push(__node("Call",3273,27,__node("Ident",3273,27,"__defProp"),[__wrap(currentLeft,985),__wrap(key,985),__wrap(descriptor,985)],false,false));}else{throw Error("Unknown property: "+__strnum(property));}}else{block.push(__node("MacroAccess",3277,25,30,3277,{left:__node("Access",3277,39,__wrap(currentLeft,985),__wrap(key,985)),op:":=",right:__wrap(value,985)},"statement",false,false));}currentLeft=nextLeft;}block.push(__wrap(currentLeft,985));return __wrap(block,985);});}else{return __node("Call",3282,9,__node("Ident",3282,9,"__import"),[__wrap(left,984),__wrap(right,984)],false,false);}};}.call(this));',
          operators: ["<<<"],
          options: {precedence: 6},
          id: 149
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right,tmp;left=macroData.left;op=macroData.op;right=macroData.right;if(!this.isNoop(left)&&!this.isNoop(right)){tmp=this.tmp("ref");return __node("Block",3288,1,[__node("MacroAccess",3288,7,38,3288,{macroName:"let",macroData:{declarable:__node("MacroAccess",3288,10,37,3288,__node("MacroAccess",3288,10,31,3288,{ident:__wrap(tmp,992)},"statement",false,false),"statement",false,false),value:__wrap(left,992)}},"statement",false,false),__node("MacroAccess",3289,7,149,3289,{left:__wrap(right,992),inverted:false,op:"<<<",right:__wrap(tmp,992)},"statement",false,false)],null);}else{return __node("MacroAccess",3291,9,149,3291,{left:__wrap(right,992),inverted:false,op:"<<<",right:__wrap(left,992)},"expression",false,false);}};}.call(this));',
          operators: [">>>"],
          options: {precedence: 6, rightToLeft: true},
          id: 150
        }
      ],
      unaryOperator: [
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;return this.mutateLast(node||this.noop(),function(n){return _this.unary("!",n);},true);};}.call(this));',
          operators: ["not"],
          options: {type: "boolean"},
          id: 3
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;return this.mutateLast(node||this.noop(),function(n){return _this.unary("typeof",n);},true);};}.call(this));',
          operators: ["typeof"],
          options: {type: "string"},
          id: 4
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;return this.mutateLast(node||this.noop(),function(n){return _this["throw"](n);},true);};}.call(this));',
          operators: ["throw"],
          options: {type: "none"},
          id: 11
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var node,op;op=macroData.op;node=macroData.node;return this.unary("++post",node);};}.call(this));',
          operators: ["postInc!"],
          options: {type: "number"},
          id: 12
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var node,op;op=macroData.op;node=macroData.node;return this.unary("--post",node);};}.call(this));',
          operators: ["postDec!"],
          options: {type: "number"},
          id: 13
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var node,op;op=macroData.op;node=macroData.node;if(this.isIdentOrTmp(node)&&!this.hasVariable(node)){return __node("MacroAccess",98,9,1,98,{left:__node("MacroAccess",98,9,6,98,{left:__node("MacroAccess",98,9,4,98,{op:"typeof",node:__wrap(node,29)},"expression",false,false),inverted:false,op:"!=",right:__node("Const",98,27,"undefined")},"expression",false,false),inverted:false,op:"and",right:__node("MacroAccess",98,40,6,98,{left:__wrap(node,29),inverted:false,op:"!=",right:__node("Const",98,49,null)},"expression",false,false)},"expression",false,false);}else{return __node("MacroAccess",100,9,8,100,{left:__wrap(node,29),inverted:false,op:"!~=",right:__node("Const",100,19,null)},"expression",false,false);}};}.call(this));',
          operators: ["?"],
          options: {postfix: true, type: "boolean", label: "existential"},
          id: 20
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var node,op;op=macroData.op;node=macroData.node;if(this.isIdentOrTmp(node)&&!this.hasVariable(node)){return __node("MacroAccess",104,9,5,104,{left:__node("MacroAccess",104,9,4,104,{op:"typeof",node:__wrap(node,30)},"expression",false,false),inverted:false,op:"==",right:__node("Const",104,27,"undefined")},"expression",false,false);}else{return __node("MacroAccess",106,9,5,106,{left:__wrap(node,30),inverted:false,op:"==",right:__node("Const",106,18,void 0)},"expression",false,false);}};}.call(this));',
          operators: ["isVoid!", "isUndefined!"],
          options: {type: "boolean"},
          id: 21
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var node,op;op=macroData.op;node=macroData.node;if(this.isIdentOrTmp(node)&&!this.hasVariable(node)){return __node("MacroAccess",110,9,1,110,{left:__node("MacroAccess",110,9,6,110,{left:__node("MacroAccess",110,9,4,110,{op:"typeof",node:__wrap(node,31)},"expression",false,false),inverted:false,op:"!=",right:__node("Const",110,27,"undefined")},"expression",false,false),inverted:false,op:"and",right:__node("MacroAccess",110,40,5,110,{left:__wrap(node,31),inverted:false,op:"==",right:__node("Const",110,49,null)},"expression",false,false)},"expression",false,false);}else{return __node("MacroAccess",112,9,5,112,{left:__wrap(node,31),inverted:false,op:"==",right:__node("Const",112,18,null)},"expression",false,false);}};}.call(this));',
          operators: ["isNull!"],
          options: {type: "boolean"},
          id: 22
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var node,op;op=macroData.op;node=macroData.node;return __node("MacroAccess",115,7,5,115,{left:__node("MacroAccess",115,7,4,115,{op:"typeof",node:__wrap(node,32)},"expression",false,false),inverted:false,op:"==",right:__node("Const",115,25,"string")},"expression",false,false);};}.call(this));',
          operators: ["isString!"],
          options: {type: "boolean"},
          id: 23
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var node,op;op=macroData.op;node=macroData.node;return __node("MacroAccess",118,7,5,118,{left:__node("MacroAccess",118,7,4,118,{op:"typeof",node:__wrap(node,33)},"expression",false,false),inverted:false,op:"==",right:__node("Const",118,25,"number")},"expression",false,false);};}.call(this));',
          operators: ["isNumber!"],
          options: {type: "boolean"},
          id: 24
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var node,op;op=macroData.op;node=macroData.node;return __node("MacroAccess",121,7,5,121,{left:__node("MacroAccess",121,7,4,121,{op:"typeof",node:__wrap(node,34)},"expression",false,false),inverted:false,op:"==",right:__node("Const",121,25,"boolean")},"expression",false,false);};}.call(this));',
          operators: ["isBoolean!"],
          options: {type: "boolean"},
          id: 25
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var node,op;op=macroData.op;node=macroData.node;return __node("MacroAccess",124,7,5,124,{left:__node("MacroAccess",124,7,4,124,{op:"typeof",node:__wrap(node,35)},"expression",false,false),inverted:false,op:"==",right:__node("Const",124,25,"function")},"expression",false,false);};}.call(this));',
          operators: ["isFunction!"],
          options: {type: "boolean"},
          id: 26
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;return this.mutateLast(node||this.noop(),function(n){return _this.isIdentOrTmp(n)&&!_this.hasVariable(n)&&__node("MacroAccess",127,97,1,127,{left:__node("MacroAccess",127,97,5,127,{left:__node("MacroAccess",127,97,4,127,{op:"typeof",node:__wrap(n,37)},"expression",false,false),inverted:false,op:"==",right:__node("Const",127,112,"object")},"expression",false,false),inverted:false,op:"and",right:__node("Call",127,122,__node("Ident",127,122,"__isArray"),[__wrap(n,37)],false,false)},"expression",false,false)||__node("Call",127,146,__node("Ident",127,146,"__isArray"),[__wrap(n,37)],false,false);},true);};}.call(this));',
          operators: ["isArray!"],
          options: {type: "boolean"},
          id: 27
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;return this.mutateLast(node||this.noop(),function(n){return __node("MacroAccess",130,47,1,130,{left:__node("MacroAccess",130,47,5,130,{left:__node("MacroAccess",130,47,4,130,{op:"typeof",node:__wrap(n,39)},"expression",false,false),inverted:false,op:"==",right:__node("Const",130,62,"object")},"expression",false,false),inverted:false,op:"and",right:__node("MacroAccess",130,72,6,130,{left:__wrap(n,39),inverted:false,op:"!=",right:__node("Const",130,78,null)},"expression",false,false)},"expression",false,false);},true);};}.call(this));',
          operators: ["isObject!"],
          options: {type: "boolean"},
          id: 28
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,negate,node,op,value;_this=this;op=macroData.op;node=macroData.node;if(this.isConst(node)){value=Number(this.value(node));if(op==="~-"){negate=function(x){return -x;};value=negate(value);}return this["const"](value);}else{return this.mutateLast(node||this.noop(),function(n){return _this.unary(op==="~+"?"+":"-",n);},true);}};}.call(this));',
          operators: ["~+", "~-"],
          options: {type: "number"},
          id: 48
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;if(this.isIdentOrTmp(node)&&!this.hasVariable(node)){return __node("MacroAccess",468,9,18,468,{macroName:"if",macroData:{test:__node("MacroAccess",468,12,5,468,{left:__node("MacroAccess",468,12,4,468,{op:"typeof",node:__wrap(node,110)},"expression",false,false),inverted:false,op:"==",right:__node("Const",468,30,"undefined")},"expression",false,false),body:__node("Const",468,45,"Undefined"),elseIfs:[],elseBody:__node("Call",468,61,__node("Ident",468,61,"__typeof"),[__wrap(node,110)],false,false)}},"expression",false,false);}else{return this.mutateLast(node||this.noop(),function(n){return __node("Call",470,49,__node("Ident",470,49,"__typeof"),[__wrap(n,111)],false,false);},true);}};}.call(this));',
          operators: ["typeof!"],
          options: {type: "string"},
          id: 57
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;return this.mutateLast(node||this.noop(),function(n){if(_this.isType(n,"number")){return n;}else{return __node("Call",500,11,__node("Ident",500,11,"__num"),[__wrap(n,117)],false,false);}},true);};}.call(this));',
          operators: ["+"],
          options: {type: "number"},
          id: 58
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var node,op;op=macroData.op;node=macroData.node;if(this.isConst(node)&&typeof this.value(node)==="number"){return this["const"](-this.value(node));}else{return __node("MacroAccess",506,9,48,506,{op:"~-",node:__node("MacroAccess",506,13,58,506,{op:"+",node:__wrap(node,118)},"expression",false,false)},"expression",false,false);}};}.call(this));',
          operators: ["-"],
          options: {type: "number"},
          id: 59
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var node,op;op=macroData.op;node=macroData.node;return __node("MacroAccess",526,7,62,526,{left:__wrap(node,123),inverted:false,op:"/",right:__node("Const",526,16,100)},"expression",false,false);};}.call(this));',
          operators: ["%"],
          options: {postfix: true, type: "number"},
          id: 63
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;return this.mutateLast(node||this.noop(),function(n){return _this.unary("~",n);},true);};}.call(this));',
          operators: ["~bitnot"],
          options: {type: "number"},
          id: 97
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var node,op;op=macroData.op;node=macroData.node;return __node("MacroAccess",825,7,97,825,{op:"~bitnot",node:__node("MacroAccess",825,15,58,825,{op:"+",node:__wrap(node,193)},"expression",false,false)},"expression",false,false);};}.call(this));',
          operators: ["bitnot"],
          options: {type: "number"},
          id: 98
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,node,op;_this=this;op=macroData.op;node=macroData.node;if(!this.isAccess(node)){throw Error("Can only use delete on an access");}if(this.position==="expression"){return this.maybeCacheAccess(node,function(setNode,node){var del,tmp;tmp=_this.tmp("ref");del=_this.unary("delete",node);return __node("Block",835,1,[__node("MacroAccess",835,9,38,835,{macroName:"let",macroData:{declarable:__node("MacroAccess",835,12,37,835,__node("MacroAccess",835,12,31,835,{ident:__wrap(tmp,195)},"statement",false,false),"statement",false,false),value:__wrap(setNode,195)}},"statement",false,false),__wrap(del,195),__wrap(tmp,195)],null);});}else{return this.unary("delete",node);}};}.call(this));',
          operators: ["delete"],
          options: {standalone: false},
          id: 99
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var node,op;op=macroData.op;node=macroData.node;return this.maybeCache(node,function(setNode,node){return __node("MacroAccess",843,9,18,843,{macroName:"if",macroData:{test:__node("MacroAccess",843,12,20,843,{op:"?",node:__wrap(setNode,200)},"expression",false,false),body:__node("MacroAccess",843,28,11,843,{op:"throw",node:__wrap(node,200)},"expression",false,false),elseIfs:[]}},"expression",false,false);});};}.call(this));',
          operators: ["throw?"],
          options: {type: "undefined"},
          id: 100
        },
        {
          code: 'return (function(){"use strict";var __isArray,__num,__owns,__slice,__strnum,__toArray,__typeof,__xor;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__num=function(num){if(typeof num!=="number"){throw TypeError("Expected a number, got "+__typeof(num));}else{return num;}};__owns=Object.prototype.hasOwnProperty;__slice=Array.prototype.slice;__strnum=function(strnum){var type;type=typeof strnum;if(type==="string"){return strnum;}else if(type==="number"){return String(strnum);}else{throw TypeError("Expected a string or number, got "+__typeof(strnum));}};__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());__xor=function(x,y){if(x){if(y){return false;}else{return x;}}else{return y||x;}};return function(macroData,__wrap,__node){var _arr,_arr2,_i,_len,_this,body,changed,foundSpread,genericArg,genericArgs,genericCache,genericParams,i,ident,init,initIndex,instanceofLets,instanceofs,item,key,len,makeFunctionFunc,makeFunctionIdent,name,node,op,p,param,params,PRIMORDIAL_TYPES,result,spreadCounter;_this=this;op=macroData.op;node=macroData.node;function article(text){if(/^[aeiou]/i.test(text)){return "an";}else{return "a";}};function withArticle(text){return article(text)+" "+__strnum(text);};PRIMORDIAL_TYPES={Number:true,String:true,Boolean:true,Function:true,Array:true,Object:true};function translateTypeCheck(value,valueName,type,hasDefaultValue){var _arr,_arr2,_i,_len,_ref,check,checks,current,hasBoolean,hasNull,hasVoid,index,key,name,names,pairValue,result,subCheck,t,test,tests,typeNames;if(_this.isIdent(type)){if(__owns.call(PRIMORDIAL_TYPES,_this.name(type))){result=__node("MacroAccess",1619,11,19,1619,{macroName:"if",macroData:{test:__node("MacroAccess",1619,13,72,1619,{left:__wrap(value,328),inverted:true,op:"instanceof",right:__wrap(type,328)},"statement",false,false),body:__node("MacroAccess",1620,13,11,1620,{op:"throw",node:__node("Call",1620,18,__node("Ident",1620,18,"TypeError"),[__node("MacroAccess",1620,29,67,1620,{left:__node("MacroAccess",1620,29,67,1620,{left:__node("MacroAccess",1620,29,67,1620,{left:__node("MacroAccess",1620,29,67,1620,{left:__node("MacroAccess",1620,29,67,1620,{left:__node("Const",1620,29,"Expected "),op:"",right:__wrap(valueName,328)},"expression",false,false),op:"",right:__node("Const",1620,29," to be ")},"expression",false,false),op:"",right:__wrap(withArticle(_this.name(type)),328)},"expression",false,false),op:"",right:__node("Const",1620,29,", got ")},"expression",false,false),op:"",right:__node("MacroAccess",1620,98,57,1620,{op:"typeof!",node:__wrap(value,328)},"expression",false,false)},"expression",false,false)],false,false)},"statement",false,false),elseIfs:[]}},"statement",false,false);}else{result=__node("MacroAccess",1623,11,19,1623,{macroName:"if",macroData:{test:__node("MacroAccess",1623,13,72,1623,{left:__wrap(value,328),inverted:true,op:"instanceof",right:__wrap(type,328)},"statement",false,false),body:__node("MacroAccess",1624,13,11,1624,{op:"throw",node:__node("Call",1624,18,__node("Ident",1624,18,"TypeError"),[__node("MacroAccess",1624,29,67,1624,{left:__node("MacroAccess",1624,29,67,1624,{left:__node("MacroAccess",1624,29,67,1624,{left:__node("MacroAccess",1624,29,67,1624,{left:__node("MacroAccess",1624,29,67,1624,{left:__node("Const",1624,29,"Expected "),op:"",right:__wrap(valueName,328)},"expression",false,false),op:"",right:__node("Const",1624,29," to be a ")},"expression",false,false),op:"",right:__node("Call",1624,64,__node("Ident",1624,64,"__name"),[__wrap(type,328)],false,false)},"expression",false,false),op:"",right:__node("Const",1624,29,", got ")},"expression",false,false),op:"",right:__node("MacroAccess",1624,85,57,1624,{op:"typeof!",node:__wrap(value,328)},"expression",false,false)},"expression",false,false)],false,false)},"statement",false,false),elseIfs:[]}},"statement",false,false);}if(!hasDefaultValue&&_this.name(type)==="Boolean"){return __node("MacroAccess",1626,13,19,1626,{macroName:"if",macroData:{test:__node("MacroAccess",1626,16,3,1626,{op:"not",node:__node("MacroAccess",1626,20,20,1626,{op:"?",node:__wrap(value,328)},"statement",false,true)},"statement",false,true),body:__node("MacroAccess",1627,11,30,1627,{left:__wrap(value,328),op:":=",right:__node("Const",1627,20,false)},"statement",false,true),elseIfs:[],elseBody:__wrap(result,328)}},"statement",false,true);}else{return result;}}else if(_this.isAccess(type)){return __node("MacroAccess",1634,9,19,1634,{macroName:"if",macroData:{test:__node("MacroAccess",1634,11,72,1634,{left:__wrap(value,328),inverted:true,op:"instanceof",right:__wrap(type,328)},"statement",false,false),body:__node("MacroAccess",1635,11,11,1635,{op:"throw",node:__node("Call",1635,16,__node("Ident",1635,16,"TypeError"),[__node("MacroAccess",1635,27,67,1635,{left:__node("MacroAccess",1635,27,67,1635,{left:__node("MacroAccess",1635,27,67,1635,{left:__node("MacroAccess",1635,27,67,1635,{left:__node("MacroAccess",1635,27,67,1635,{left:__node("Const",1635,27,"Expected "),op:"",right:__wrap(valueName,328)},"expression",false,false),op:"",right:__node("Const",1635,27," to be ")},"expression",false,false),op:"",right:__wrap(withArticle(_this.value(_this.child(type))),328)},"expression",false,false),op:"",right:__node("Const",1635,27,", got ")},"expression",false,false),op:"",right:__node("MacroAccess",1635,105,57,1635,{op:"typeof!",node:__wrap(value,328)},"expression",false,false)},"expression",false,false)],false,false)},"statement",false,false),elseIfs:[]}},"statement",false,false);}else if(_this.isTypeUnion(type)){hasBoolean=false;hasVoid=false;hasNull=false;names=[];tests=[];for(_arr=__toArray(_this.types(type)), _i=0, _len=_arr.length;_i<_len;++_i){t=_arr[_i];if(_this.isConst(t)){if(_this.value(t)===null){hasNull=true;names.push(_this["const"]("null"));}else if(_this.value(t)===void 0){hasVoid=true;names.push(_this["const"]("undefined"));}else{throw Error("Unknown const value for typechecking: "+String(_this.value(t)));}}else if(_this.isIdent(t)){if(_this.name(t)==="Boolean"){hasBoolean=true;}if(__owns.call(PRIMORDIAL_TYPES,_this.name(t))){names.push(_this["const"](_this.name(t)));}else{names.push(__node("Call",1659,28,__node("Ident",1659,28,"__name"),[__wrap(t,328)],false,false));}tests.push(__node("MacroAccess",1660,26,72,1660,{left:__wrap(value,328),inverted:true,op:"instanceof",right:__wrap(t,328)},"expression",false,false));}else{throw Error("Not implemented: typechecking for non-idents/consts within a type-union");}}if(tests.length){test=_this.binaryChain("&&",tests);}else{test=__node("Const",1667,13,true);}current=names[0];for(_i=1, _len=names.length;_i<_len;++_i){name=names[_i];current=__node("MacroAccess",1669,14,67,1669,{left:__node("MacroAccess",1669,14,67,1669,{left:__wrap(current,328),op:"",right:__node("Const",1669,14," or ")},"expression",false,false),op:"",right:__wrap(name,328)},"expression",false,false);}typeNames=current;result=__node("MacroAccess",1670,31,19,1670,{macroName:"if",macroData:{test:__wrap(test,328),body:__node("MacroAccess",1671,9,11,1671,{op:"throw",node:__node("Call",1671,14,__node("Ident",1671,14,"TypeError"),[__node("MacroAccess",1671,25,67,1671,{left:__node("MacroAccess",1671,25,67,1671,{left:__node("MacroAccess",1671,25,67,1671,{left:__node("MacroAccess",1671,25,67,1671,{left:__node("MacroAccess",1671,25,67,1671,{left:__node("Const",1671,25,"Expected "),op:"",right:__wrap(valueName,328)},"expression",false,false),op:"",right:__node("Const",1671,25," to be one of ")},"expression",false,false),op:"",right:__wrap(typeNames,328)},"expression",false,false),op:"",right:__node("Const",1671,25,", got ")},"expression",false,false),op:"",right:__node("MacroAccess",1671,85,57,1671,{op:"typeof!",node:__wrap(value,328)},"expression",false,false)},"expression",false,false)],false,false)},"statement",false,false),elseIfs:[]}},"statement",false,false);if(!hasDefaultValue){if(hasNull||hasVoid){if(__xor(hasNull,hasVoid)){result=__node("MacroAccess",1676,27,19,1676,{macroName:"if",macroData:{test:__node("MacroAccess",1676,30,3,1676,{op:"not",node:__node("MacroAccess",1676,34,20,1676,{op:"?",node:__wrap(value,328)},"statement",false,true)},"statement",false,true),body:__node("MacroAccess",1677,15,30,1677,{left:__wrap(value,328),op:":=",right:__node("MacroAccess",1677,24,18,1677,{macroName:"if",macroData:{test:__wrap(hasNull,328),body:__node("Const",1677,42,null),elseIfs:[],elseBody:__node("Const",1677,52,void 0)}},"expression",false,true)},"statement",false,true),elseIfs:[],elseBody:__wrap(result,328)}},"statement",false,true);}else{result=__node("MacroAccess",1681,26,19,1681,{macroName:"if",macroData:{test:__node("MacroAccess",1681,29,20,1681,{op:"?",node:__wrap(value,328)},"statement",false,false),body:__wrap(result,328),elseIfs:[]}},"statement",false,false);}}else if(hasBoolean){result=__node("MacroAccess",1684,25,19,1684,{macroName:"if",macroData:{test:__node("MacroAccess",1684,28,3,1684,{op:"not",node:__node("MacroAccess",1684,32,20,1684,{op:"?",node:__wrap(value,328)},"statement",false,true)},"statement",false,true),body:__node("MacroAccess",1685,13,30,1685,{left:__wrap(value,328),op:":=",right:__node("Const",1685,22,false)},"statement",false,true),elseIfs:[],elseBody:__wrap(result,328)}},"statement",false,true);}}return result;}else if(_this.isTypeGeneric(type)){if(_this.name(_this.basetype(type))==="Array"){index=_this.tmp("i",false,"number");subCheck=translateTypeCheck(__node("Access",1692,51,__wrap(value,328),__wrap(index,328)),__node("MacroAccess",1692,74,67,1692,{left:__node("MacroAccess",1692,74,67,1692,{left:__node("MacroAccess",1692,74,67,1692,{left:__wrap(valueName,328),inverted:false,op:"&",right:__node("Const",1692,89,"[")},"expression",false,false),inverted:false,op:"&",right:__wrap(index,328)},"expression",false,false),inverted:false,op:"&",right:__node("Const",1692,104,"]")},"expression",false,false),_this.typeArguments(type)[0],false);return __node("MacroAccess",1693,12,19,1693,{macroName:"if",macroData:{test:__node("MacroAccess",1693,15,3,1693,{op:"not",node:__node("MacroAccess",1693,19,27,1693,{op:"isArray!",node:__wrap(value,328)},"statement",false,false)},"statement",false,false),body:__node("MacroAccess",1694,11,11,1694,{op:"throw",node:__node("Call",1694,16,__node("Ident",1694,16,"TypeError"),[__node("MacroAccess",1694,27,67,1694,{left:__node("MacroAccess",1694,27,67,1694,{left:__node("MacroAccess",1694,27,67,1694,{left:__node("Const",1694,27,"Expected "),op:"",right:__wrap(valueName,328)},"expression",false,false),op:"",right:__node("Const",1694,27," to be an Array, got ")},"expression",false,false),op:"",right:__node("MacroAccess",1694,74,57,1694,{op:"typeof!",node:__wrap(value,328)},"expression",false,false)},"expression",false,false)],false,false)},"statement",false,false),elseIfs:[],elseBody:__node("MacroAccess",1696,11,104,1696,{macroName:"for",macroData:{init:__node("MacroAccess",1696,16,38,1696,{macroName:"let",macroData:{declarable:__node("MacroAccess",1696,19,37,1696,__node("MacroAccess",1696,19,31,1696,{isMutable:"mutable",ident:__wrap(index,328)},"expression",false,false),"expression",false,false),value:__node("Access",1696,36,__wrap(value,328),__node("Const",1696,44,"length"))}},"expression",false,false),test:__node("MacroAccess",1696,52,13,1696,{op:"postDec!",node:__wrap(index,328)},"statement",false,false),body:__wrap(subCheck,328)}},"statement",false,false)}},"statement",false,false);}else if(_this.name(_this.basetype(type))==="Function"){return translateTypeCheck(value,valueName,_this.basetype(type),hasDefaultValue);}else{throw Error("Not implemented: generic types");}}else if(_this.isTypeObject(type)){for(_arr=[], _arr2=__toArray(_this.pairs(type)), _i=0, _len=_arr2.length;_i<_len;++_i){key=(_ref=_arr2[_i]).key;pairValue=_ref.value;_arr.push(translateTypeCheck(__node("Access",1704,35,__wrap(value,328),__wrap(key,328)),__node("MacroAccess",1704,56,67,1704,{left:__node("MacroAccess",1704,56,67,1704,{left:__wrap(valueName,328),inverted:false,op:"&",right:__node("Const",1704,71,".")},"expression",false,false),inverted:false,op:"&",right:__wrap(key,328)},"expression",false,false),pairValue,false));}checks=_arr;return __node("MacroAccess",1705,10,19,1705,{macroName:"if",macroData:{test:__node("MacroAccess",1705,13,3,1705,{op:"not",node:__node("MacroAccess",1705,17,28,1705,{op:"isObject!",node:__wrap(value,328)},"statement",false,false)},"statement",false,false),body:__node("MacroAccess",1706,9,11,1706,{op:"throw",node:__node("Call",1706,14,__node("Ident",1706,14,"TypeError"),[__node("MacroAccess",1706,25,67,1706,{left:__node("MacroAccess",1706,25,67,1706,{left:__node("MacroAccess",1706,25,67,1706,{left:__node("Const",1706,25,"Expected "),op:"",right:__wrap(valueName,328)},"expression",false,false),op:"",right:__node("Const",1706,25," to be an Object, got ")},"expression",false,false),op:"",right:__node("MacroAccess",1706,73,57,1706,{op:"typeof!",node:__wrap(value,328)},"expression",false,false)},"expression",false,false)],false,false)},"statement",false,false),elseIfs:[],elseBody:__wrap(checks,328)}},"statement",false,false);}else{throw Error("Unknown type to translate: "+__typeof(type));}};init=[];changed=false;function translateParam(param,inDestructure){var _arr,_i,_len,arrayIdent,asType,blankIdent,defaultValue,element,elementIdent,elementParam,foundSpread,i,ident,initIndex,key,len,objectIdent,pair,paramIdent,spreadCounter,typeCheck,value,valueIdent;if(_this.isArray(param)){changed=true;arrayIdent=_this.tmp("p",false,"array");foundSpread=-1;for(_arr=__toArray(_this.elements(param)), i=0, len=_arr.length;i<len;++i){element=_arr[i];initIndex=init.length;elementParam=translateParam(element,true);if(elementParam!=null){elementIdent=_this.paramIdent(elementParam);if(!_this.paramIsSpread(elementParam)){if(foundSpread===-1){init.splice(initIndex,0,__node("MacroAccess",1726,45,38,1726,{macroName:"let",macroData:{declarable:__node("MacroAccess",1726,49,37,1726,__node("MacroAccess",1726,49,31,1726,{ident:__wrap(elementIdent,339)},"statement",false,false),"statement",false,false),value:__node("Access",1726,66,__wrap(arrayIdent,339),__wrap(i,339))}},"statement",false,false));}else{init.splice(initIndex,0,__node("MacroAccess",1728,45,38,1728,{macroName:"let",macroData:{declarable:__node("MacroAccess",1728,49,37,1728,__node("MacroAccess",1728,49,31,1728,{ident:__wrap(elementIdent,339)},"statement",false,false),"statement",false,false),value:__node("Access",1728,66,__wrap(arrayIdent,339),__node("MacroAccess",1728,80,64,1728,{left:__wrap(spreadCounter,339),inverted:false,op:"+",right:__node("MacroAccess",1728,99,64,1728,{left:__node("MacroAccess",1728,99,64,1728,{left:__wrap(i,339),inverted:false,op:"-",right:__wrap(foundSpread,339)},"expression",false,false),inverted:false,op:"-",right:__node("Const",1728,120,1)},"expression",false,false)},"expression",false,false))}},"statement",false,false));}}else{if(foundSpread!==-1){throw Error("Cannot have multiple spread parameters in an array destructure");}foundSpread=i;if(i===len-1){init.splice(initIndex,0,__node("MacroAccess",1734,45,38,1734,{macroName:"let",macroData:{declarable:__node("MacroAccess",1734,49,37,1734,__node("MacroAccess",1734,49,31,1734,{ident:__wrap(elementIdent,339)},"statement",false,false),"statement",false,false),value:__node("Call",1734,66,__node("Ident",1734,66,"__slice"),[__wrap(arrayIdent,339),__node("Spread",1734,89,__node("MacroAccess",1734,94,18,1734,{macroName:"if",macroData:{test:__node("MacroAccess",1734,96,5,1734,{left:__wrap(i,339),inverted:false,op:"==",right:__node("Const",1734,103,0)},"expression",false,false),body:__node("Array",1734,109,[]),elseIfs:[],elseBody:__node("Array",1734,117,[__wrap(i,339)])}},"expression",false,false))],false,true)}},"statement",false,false));}else{spreadCounter=_this.tmp("i",false,"number");init.splice(initIndex,0,__node("Block",1738,1,[__node("MacroAccess",1738,17,38,1738,{macroName:"let",macroData:{declarable:__node("MacroAccess",1738,20,37,1738,__node("MacroAccess",1738,20,31,1738,{isMutable:"mutable",ident:__wrap(spreadCounter,339)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1738,46,64,1738,{left:__node("Access",1738,46,__wrap(arrayIdent,339),__node("Const",1738,60,"length")),inverted:false,op:"-",right:__node("MacroAccess",1738,70,64,1738,{left:__node("MacroAccess",1738,70,64,1738,{left:__wrap(len,339),inverted:false,op:"-",right:__wrap(i,339)},"expression",false,false),inverted:false,op:"-",right:__node("Const",1738,82,1)},"expression",false,false)},"expression",false,false)}},"statement",false,false),__node("MacroAccess",1739,17,38,1739,{macroName:"let",macroData:{declarable:__node("MacroAccess",1739,20,37,1739,__node("MacroAccess",1739,20,31,1739,{ident:__wrap(elementIdent,339)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1739,37,19,1739,{macroName:"if",macroData:{test:__node("MacroAccess",1739,40,77,1739,{left:__wrap(spreadCounter,339),inverted:false,op:">",right:__wrap(i,339)},"expression",false,false),body:__node("Call",1740,19,__node("Ident",1740,19,"__slice"),[__wrap(arrayIdent,339),__wrap(i,339),__wrap(spreadCounter,339)],false,true),elseIfs:[],elseBody:__node("Block",1742,1,[__node("MacroAccess",1742,19,30,1742,{left:__wrap(spreadCounter,339),op:":=",right:__wrap(i,339)},"statement",false,false),__node("Array",1743,19,[])],null)}},"expression",false,false)}},"statement",false,false)],null));}}}}return _this.rewrap(_this.param(arrayIdent,null,false,false,null),param);}else if(_this.isObject(param)){changed=true;objectIdent=_this.tmp("p",false,"object");for(_arr=__toArray(_this.pairs(param)), _i=0, _len=_arr.length;_i<_len;++_i){pair=_arr[_i];initIndex=init.length;value=translateParam(pair.value,true);if(value!=null){valueIdent=_this.paramIdent(value);key=pair.key;init.splice(initIndex,0,__node("MacroAccess",1755,41,38,1755,{macroName:"let",macroData:{declarable:__node("MacroAccess",1755,45,37,1755,__node("MacroAccess",1755,45,31,1755,{ident:__wrap(valueIdent,339)},"statement",false,false),"statement",false,false),value:__node("Access",1755,60,__wrap(objectIdent,339),__wrap(key,339))}},"statement",false,false));}}return _this.rewrap(_this.param(objectIdent,null,false,false,null),param);}else if(_this.isParam(param)){defaultValue=_this.paramDefaultValue(param);asType=_this.paramType(param);paramIdent=_this.paramIdent(param);if(defaultValue!=null||asType!=null||!_this.isIdentOrTmp(paramIdent)){changed=true;if(_this.isIdentOrTmp(paramIdent)){ident=paramIdent;}else if(_this.isAccess(paramIdent)){ident=_this.ident(_this.value(_this.child(paramIdent)));}else{throw Error("Not an ident or this-access: "+__typeof(paramIdent));}if(asType!=null){typeCheck=translateTypeCheck(ident,_this.name(ident),asType,defaultValue!=null);}else{typeCheck=_this.noop();}init.push(defaultValue!=null?__node("MacroAccess",1776,13,19,1776,{macroName:"if",macroData:{test:__node("MacroAccess",1776,15,3,1776,{op:"not",node:__node("MacroAccess",1776,19,20,1776,{op:"?",node:__wrap(ident,339)},"statement",false,true)},"statement",false,true),body:__node("MacroAccess",1777,15,30,1777,{left:__wrap(ident,339),op:":=",right:__wrap(defaultValue,339)},"statement",false,true),elseIfs:[],elseBody:__wrap(typeCheck,339)}},"statement",false,true):typeCheck);if(paramIdent!==ident){init.push(__node("MacroAccess",1783,24,30,1783,{left:__wrap(paramIdent,339),op:":=",right:__wrap(ident,339)},"statement",false,false));}return _this.rewrap(_this.param(ident,null,_this.paramIsSpread(param),_this.paramIsMutable(param),null),param);}else{return param;}}else if(_this.isNothing(param)){changed=true;if(inDestructure){return null;}else{blankIdent=_this.tmp("p",false,"object");return _this.rewrap(_this.param(blankIdent,null,false,false,null),param);}}else{throw Error("Unknown param type: "+__typeof(param));}};foundSpread=-1;params=[];for(_arr=__toArray(this.funcParams(node)), i=0, len=_arr.length;i<len;++i){param=_arr[i];initIndex=init.length;p=translateParam(param,false);ident=this.paramIdent(p);if(this.paramIsSpread(p)){if(foundSpread!==-1){throw Error("Cannot have two spread parameters");}changed=true;foundSpread=i;if(i===len-1){init.splice(initIndex,0,__node("MacroAccess",1811,11,38,1811,{macroName:"let",macroData:{declarable:__node("MacroAccess",1811,14,37,1811,__node("MacroAccess",1811,14,31,1811,{ident:__wrap(ident,324)},"statement",false,false),"statement",false,false),value:__node("Call",1811,23,__node("Ident",1811,23,"__slice"),[__node("Args",1811,33),__node("Spread",1811,43,__node("MacroAccess",1811,48,18,1811,{macroName:"if",macroData:{test:__node("MacroAccess",1811,50,5,1811,{left:__wrap(i,324),inverted:false,op:"==",right:__node("Const",1811,57,0)},"expression",false,false),body:__node("Array",1811,63,[]),elseIfs:[],elseBody:__node("Array",1811,71,[__wrap(i,324)])}},"expression",false,false))],false,true)}},"statement",false,false));}else{spreadCounter=this.tmp("i",false,"number");init.splice(initIndex,0,__node("Block",1815,1,[__node("MacroAccess",1815,11,38,1815,{macroName:"let",macroData:{declarable:__node("MacroAccess",1815,14,37,1815,__node("MacroAccess",1815,14,31,1815,{isMutable:"mutable",ident:__wrap(spreadCounter,324)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1815,40,64,1815,{left:__node("Access",1815,40,__node("Args",1815,40),__node("Const",1815,51,"length")),inverted:false,op:"-",right:__node("MacroAccess",1815,61,64,1815,{left:__node("MacroAccess",1815,61,64,1815,{left:__wrap(len,324),inverted:false,op:"-",right:__wrap(i,324)},"expression",false,false),inverted:false,op:"-",right:__node("Const",1815,73,1)},"expression",false,false)},"expression",false,false)}},"statement",false,false),__node("MacroAccess",1816,11,38,1816,{macroName:"let",macroData:{declarable:__node("MacroAccess",1816,14,37,1816,__node("MacroAccess",1816,14,31,1816,{ident:__wrap(ident,324)},"statement",false,false),"statement",false,false),value:__node("MacroAccess",1816,23,19,1816,{macroName:"if",macroData:{test:__node("MacroAccess",1816,26,77,1816,{left:__wrap(spreadCounter,324),inverted:false,op:">",right:__wrap(i,324)},"expression",false,false),body:__node("Call",1817,13,__node("Ident",1817,13,"__slice"),[__node("Args",1817,22),__wrap(i,324),__wrap(spreadCounter,324)],false,true),elseIfs:[],elseBody:__node("Block",1819,1,[__node("MacroAccess",1819,13,30,1819,{left:__wrap(spreadCounter,324),op:":=",right:__wrap(i,324)},"statement",false,false),__node("Array",1820,13,[])],null)}},"expression",false,false)}},"statement",false,false)],null));}}else if(foundSpread===-1){params.push(p);}else{init.splice(initIndex,0,__node("MacroAccess",1826,11,38,1826,{macroName:"let",macroData:{declarable:__node("MacroAccess",1826,14,37,1826,__node("MacroAccess",1826,14,31,1826,{ident:__wrap(ident,324)},"statement",false,false),"statement",false,false),value:__node("Access",1826,23,__node("Args",1826,23),__node("MacroAccess",1826,34,64,1826,{left:__wrap(spreadCounter,324),inverted:false,op:"+",right:__node("MacroAccess",1826,53,64,1826,{left:__node("MacroAccess",1826,53,64,1826,{left:__wrap(i,324),inverted:false,op:"-",right:__wrap(foundSpread,324)},"expression",false,false),inverted:false,op:"-",right:__node("Const",1826,74,1)},"expression",false,false)},"expression",false,false))}},"statement",false,false));}}if(init.length||changed||this.funcIsCurried(node)){body=this.funcBody(node);result=this.rewrap(this.func(params,__node("Block",1832,1,[__wrap(init,324),__wrap(body,324)],null),this.funcIsAutoReturn(node)&&!this.isNothing(body),this.funcIsBound(node),false,this.funcAsType(node),this.funcIsGenerator(node),this.funcGeneric(node)),node);}else{result=node;}if(this.funcIsCurried(node)){result=__node("Call",1844,19,__node("Ident",1844,19,"__curry"),[__wrap(params.length,324),__wrap(result,324)],false,false);}genericArgs=this.funcGeneric(node);if(__num(genericArgs.length)>0){genericCache=this.tmp("cache",false,"object");for(_arr=[], _arr2=__toArray(genericArgs), _i=0, _len=_arr2.length;_i<_len;++_i){genericArg=_arr2[_i];_arr.push(this.param(genericArg));}genericParams=_arr;makeFunctionIdent=this.tmp("make",false,"function");instanceofs={};for(_arr=__toArray(genericArgs), _i=0, _len=_arr.length;_i<_len;++_i){genericArg=_arr[_i];name=this.name(genericArg);key=this.tmp("instanceof_"+__strnum(name),false,"function");instanceofs[name]={key:key,"let":__node("MacroAccess",1857,17,38,1857,{macroName:"let",macroData:{declarable:__node("MacroAccess",1857,21,37,1857,__node("MacroAccess",1857,21,31,1857,{ident:__wrap(key,324)},"statement",false,false),"statement",false,false),value:__node("Call",1857,28,__node("Ident",1857,28,"__makeInstanceof"),[__wrap(genericArg,324)],false,false)}},"statement",false,false),used:false};}result=this.walk(this.macroExpandAll(result),function(node){var func,left,name,right;if(_this.isBinary(node)&&_this.op(node)==="instanceof"){right=_this.right(node);if(_this.isIdent(right)){name=_this.name(right);if(__owns.call(instanceofs,name)){func=instanceofs[name].key;instanceofs[name].used=true;left=_this.left(node);return __node("Call",1869,24,__wrap(func,377),[__wrap(left,377)],false,false);}}}});_arr=[];for(name in instanceofs){if(__owns.call(instanceofs,name)){item=instanceofs[name];if(item.used){_arr.push(item["let"]);}}}instanceofLets=_arr;if(instanceofLets.length){result=__node("Block",1875,1,[__wrap(instanceofLets,324),__wrap(result,324)],null);}makeFunctionFunc=this.func(genericParams,result,true,false);result=__node("Call",1878,18,__node("Ident",1878,18,"__genericFunc"),[__wrap(genericArgs.length,324),__wrap(makeFunctionFunc,324)],false,false);}return result;};}.call(this));',
          operators: ["mutateFunction!"],
          options: {type: "node", label: "mutateFunction"},
          id: 115
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var node,op;op=macroData.op;node=macroData.node;return __node("Call",2204,7,__node("Ident",2204,7,"__keys"),[__wrap(node,440)],false,false);};}.call(this));',
          operators: ["keys!"],
          options: {},
          id: 122
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var node,op;op=macroData.op;node=macroData.node;return __node("Call",2213,7,__node("Ident",2213,7,"__allkeys"),[__wrap(node,443)],false,false);};}.call(this));',
          operators: ["allkeys!"],
          options: {},
          id: 123
        },
        {
          code: 'return (function(){"use strict";var __isArray,__slice,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__slice=Array.prototype.slice;__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroData,__wrap,__node){var _arr,_i,_len,element,item,node,op,parts,set;op=macroData.op;node=macroData.node;set=this.tmp("s",false,"object");if(this.isArray(node)&&!this.arrayHasSpread(node)){if(this.elements(node).length===0){return __node("Call",3423,11,__node("Ident",3423,11,"Set"),[],false,false);}else{parts=[];for(_arr=__toArray(this.elements(node)), _i=0, _len=_arr.length;_i<_len;++_i){element=_arr[_i];parts.push(__node("Call",3427,23,__node("Access",3427,23,__wrap(set,1024),__node("Const",3427,29,"add")),[__wrap(element,1024)],false,false));}return __node("Block",3429,1,[__node("MacroAccess",3429,9,38,3429,{macroName:"let",macroData:{declarable:__node("MacroAccess",3429,12,37,3429,__node("MacroAccess",3429,12,31,3429,{ident:__wrap(set,1024)},"statement",false,false),"statement",false,false),value:__node("Call",3429,19,__node("Ident",3429,19,"Set"),[],false,false)}},"statement",false,false),__wrap(parts,1024),__wrap(set,1024)],null);}}else{item=this.tmp("x",false,"any");return __node("Block",3435,1,[__node("MacroAccess",3435,7,38,3435,{macroName:"let",macroData:{declarable:__node("MacroAccess",3435,10,37,3435,__node("MacroAccess",3435,10,31,3435,{ident:__wrap(set,1024)},"statement",false,false),"statement",false,false),value:__node("Call",3435,17,__node("Ident",3435,17,"Set"),[],false,false)}},"statement",false,false),__node("MacroAccess",3436,7,111,3436,{macroName:"for",macroData:{value:__node("MacroAccess",3436,10,37,3436,__node("MacroAccess",3436,10,31,3436,{ident:__wrap(item,1024)},"statement",false,false),"statement",false,false),array:__wrap(node,1024),body:__node("Call",3437,9,__node("Access",3437,9,__wrap(set,1024),__node("Const",3437,14,"add")),[__wrap(item,1024)],false,false)}},"statement",false,false),__wrap(set,1024)],null);}};}.call(this));',
          operators: ["set!"],
          options: {type: "object", label: "constructSet"},
          id: 151
        },
        {
          code: 'return (function(){"use strict";var __isArray,__slice,__toArray,__typeof;__isArray=typeof Array.isArray==="function"?Array.isArray:(function(){var _toString;_toString=Object.prototype.toString;return function(x){return _toString.call(x)==="[object Array]";};}());__slice=Array.prototype.slice;__toArray=function(x){if(x==null){throw TypeError("Expected an object, got "+__typeof(x));}else if(__isArray(x)){return x;}else if(typeof x==="string"){return x.split("");}else{return __slice.call(x);}};__typeof=(function(){var _toString;_toString=Object.prototype.toString;return function(o){if(o===void 0){return "Undefined";}else if(o===null){return "Null";}else{return o.constructor&&o.constructor.name||_toString.call(o).slice(8,-1);}};}());return function(macroData,__wrap,__node){var _arr,_i,_len,_ref,key,map,node,op,pairs,parts,property,value;op=macroData.op;node=macroData.node;if(!this.isObject(node)){throw Error("map! can only be used on literal objects");}pairs=this.pairs(node);if(pairs.length===0){return __node("Call",3446,9,__node("Ident",3446,9,"Map"),[],false,false);}else{map=this.tmp("m",false,"object");parts=[];for(_arr=__toArray(pairs), _i=0, _len=_arr.length;_i<_len;++_i){key=(_ref=_arr[_i]).key;value=_ref.value;property=_ref.property;if(property!=null){throw Error("Cannot use map! on an object with custom properties");}parts.push(__node("Call",3453,21,__node("Access",3453,21,__wrap(map,1030),__node("Const",3453,27,"set")),[__wrap(key,1030),__wrap(value,1030)],false,false));}return __node("Block",3455,1,[__node("MacroAccess",3455,7,38,3455,{macroName:"let",macroData:{declarable:__node("MacroAccess",3455,10,37,3455,__node("MacroAccess",3455,10,31,3455,{ident:__wrap(map,1030)},"statement",false,false),"statement",false,false),value:__node("Call",3455,17,__node("Ident",3455,17,"Map"),[],false,false)}},"statement",false,false),__wrap(parts,1030),__wrap(map,1030)],null);}};}.call(this));',
          operators: ["map!"],
          options: {type: "object", label: "constructMap"},
          id: 152
        }
      ],
      helpers: {
        GLOBAL: {
          helper: {
            type: "IfExpression",
            line: 1,
            column: 1,
            test: {
              type: "Binary",
              line: 1,
              column: 1,
              left: {
                type: "Unary",
                line: 1,
                column: 1,
                op: "typeof",
                node: {type: "Ident", line: 132, column: 39, name: "window"}
              },
              op: "!==",
              right: {type: "Const", line: 104, column: 27, value: "undefined"}
            },
            whenTrue: {type: "Ident", line: 132, column: 51, name: "window"},
            whenFalse: {
              type: "IfExpression",
              line: 1,
              column: 1,
              test: {
                type: "Binary",
                line: 1,
                column: 1,
                left: {
                  type: "Unary",
                  line: 1,
                  column: 1,
                  op: "typeof",
                  node: {type: "Ident", line: 132, column: 79, name: "global"}
                },
                op: "!==",
                right: {type: "Const", line: 104, column: 27, value: "undefined"}
              },
              whenTrue: {type: "Ident", line: 132, column: 91, name: "global"},
              whenFalse: {type: "This", line: 132, column: 103}
            }
          },
          type: {type: "any"},
          dependencies: ["GLOBAL", "global", "window"]
        },
        __xor: {
          helper: {
            type: "Func",
            line: 134,
            column: 24,
            params: [
              {type: "Ident", line: 134, column: 25, name: "x"},
              {type: "Ident", line: 134, column: 27, name: "y"}
            ],
            body: {
              type: "IfStatement",
              line: 1,
              column: 1,
              test: {type: "Ident", line: 135, column: 5, name: "x"},
              whenTrue: {
                type: "IfStatement",
                line: 1,
                column: 1,
                test: {type: "Ident", line: 136, column: 7, name: "y"},
                whenTrue: {
                  type: "Return",
                  line: 137,
                  column: 7,
                  node: {type: "Const", line: 137, column: 7, value: false}
                },
                whenFalse: {
                  type: "Return",
                  line: 139,
                  column: 7,
                  node: {type: "Ident", line: 139, column: 7, name: "x"}
                }
              },
              whenFalse: {
                type: "Return",
                line: 1,
                column: 1,
                node: {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 141, column: 5, name: "y"},
                  op: "||",
                  right: {type: "Ident", line: 141, column: 9, name: "x"}
                }
              }
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "any"}]
          },
          dependencies: ["__xor", "x", "y"]
        },
        __typeof: {
          helper: {
            type: "Call",
            line: 3,
            column: 9,
            func: {
              type: "Func",
              line: 3,
              column: 12,
              variables: ["_toString"],
              body: {
                type: "BlockStatement",
                line: 457,
                column: 1,
                body: [
                  {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 457, column: 6, name: "_toString"},
                    op: "=",
                    right: {
                      type: "Binary",
                      line: 457,
                      column: 19,
                      left: {
                        type: "Binary",
                        line: 457,
                        column: 19,
                        left: {type: "Ident", line: 457, column: 19, name: "Object"},
                        op: ".",
                        right: {type: "Const", line: 457, column: 27, value: "prototype"}
                      },
                      op: ".",
                      right: {type: "Const", line: 457, column: 37, value: "toString"}
                    }
                  },
                  {
                    type: "Return",
                    line: 458,
                    column: 4,
                    node: {
                      type: "Func",
                      line: 458,
                      column: 4,
                      params: [{type: "Ident", line: 458, column: 5, name: "o"}],
                      body: {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 459, column: 16, name: "o"},
                          op: "===",
                          right: {type: "Const", line: 106, column: 18}
                        },
                        whenTrue: {
                          type: "Return",
                          line: 460,
                          column: 7,
                          node: {type: "Const", line: 460, column: 7, value: "Undefined"}
                        },
                        whenFalse: {
                          type: "IfStatement",
                          line: 1,
                          column: 1,
                          test: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 461, column: 21, name: "o"},
                            op: "===",
                            right: {type: "Const", line: 112, column: 18, value: null}
                          },
                          whenTrue: {
                            type: "Return",
                            line: 462,
                            column: 7,
                            node: {type: "Const", line: 462, column: 7, value: "Null"}
                          },
                          whenFalse: {
                            type: "Return",
                            line: 1,
                            column: 1,
                            node: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {
                                type: "Binary",
                                line: 1,
                                column: 1,
                                left: {
                                  type: "Binary",
                                  line: 464,
                                  column: 8,
                                  left: {type: "Ident", line: 464, column: 8, name: "o"},
                                  op: ".",
                                  right: {type: "Const", line: 464, column: 10, value: "constructor"}
                                },
                                op: "&&",
                                right: {
                                  type: "Binary",
                                  line: 464,
                                  column: 25,
                                  left: {
                                    type: "Binary",
                                    line: 464,
                                    column: 25,
                                    left: {type: "Ident", line: 464, column: 25, name: "o"},
                                    op: ".",
                                    right: {type: "Const", line: 464, column: 28, value: "constructor"}
                                  },
                                  op: ".",
                                  right: {type: "Const", line: 464, column: 40, value: "name"}
                                }
                              },
                              op: "||",
                              right: {
                                type: "Call",
                                line: 464,
                                column: 48,
                                func: {
                                  type: "Binary",
                                  line: 464,
                                  column: 48,
                                  left: {
                                    type: "Call",
                                    line: 464,
                                    column: 48,
                                    func: {
                                      type: "Binary",
                                      line: 464,
                                      column: 48,
                                      left: {type: "Ident", line: 464, column: 48, name: "_toString"},
                                      op: ".",
                                      right: {type: "Const", line: 464, column: 48, value: "call"}
                                    },
                                    args: [{type: "Ident", line: 464, column: 61, name: "o"}]
                                  },
                                  op: ".",
                                  right: {type: "Const", line: 464, column: 64, value: "slice"}
                                },
                                args: [
                                  {type: "Const", line: 464, column: 70, value: 8},
                                  {type: "Const", line: 1, column: 1, value: -1}
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "simple", name: "string"}]
          },
          dependencies: ["__typeof", "_toString", "o", "Object"]
        },
        __num: {
          helper: {
            type: "Func",
            line: 472,
            column: 24,
            params: [{type: "Ident", line: 472, column: 25, name: "num"}],
            body: {
              type: "IfStatement",
              line: 1,
              column: 1,
              test: {
                type: "Binary",
                line: 1,
                column: 1,
                left: {
                  type: "Unary",
                  line: 1,
                  column: 1,
                  op: "typeof",
                  node: {type: "Ident", line: 473, column: 20, name: "num"}
                },
                op: "!==",
                right: {type: "Const", line: 118, column: 25, value: "number"}
              },
              whenTrue: {
                type: "Throw",
                line: 1,
                column: 1,
                node: {
                  type: "Call",
                  line: 474,
                  column: 10,
                  func: {type: "Ident", line: 474, column: 10, name: "TypeError"},
                  args: [{
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Const", line: 474, column: 21, value: "Expected a number, got "},
                    op: "+",
                    right: {
                      type: "Call",
                      line: 470,
                      column: 49,
                      func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                      args: [{type: "Ident", line: 474, column: 57, name: "num"}]
                    }
                  }]
                }
              },
              whenFalse: {
                type: "Return",
                line: 476,
                column: 5,
                node: {type: "Ident", line: 476, column: 5, name: "num"}
              }
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "simple", name: "number"}]
          },
          dependencies: ["__num", "__typeof", "num", "TypeError"]
        },
        __str: {
          helper: {
            type: "Func",
            line: 478,
            column: 24,
            params: [{type: "Ident", line: 478, column: 25, name: "str"}],
            body: {
              type: "IfStatement",
              line: 1,
              column: 1,
              test: {
                type: "Binary",
                line: 1,
                column: 1,
                left: {
                  type: "Unary",
                  line: 1,
                  column: 1,
                  op: "typeof",
                  node: {type: "Ident", line: 479, column: 20, name: "str"}
                },
                op: "!==",
                right: {type: "Const", line: 115, column: 25, value: "string"}
              },
              whenTrue: {
                type: "Throw",
                line: 1,
                column: 1,
                node: {
                  type: "Call",
                  line: 480,
                  column: 10,
                  func: {type: "Ident", line: 480, column: 10, name: "TypeError"},
                  args: [{
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Const", line: 480, column: 21, value: "Expected a string, got "},
                    op: "+",
                    right: {
                      type: "Call",
                      line: 470,
                      column: 49,
                      func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                      args: [{type: "Ident", line: 480, column: 57, name: "str"}]
                    }
                  }]
                }
              },
              whenFalse: {
                type: "Return",
                line: 482,
                column: 5,
                node: {type: "Ident", line: 482, column: 5, name: "str"}
              }
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "simple", name: "string"}]
          },
          dependencies: ["__str", "__typeof", "str", "TypeError"]
        },
        __strnum: {
          helper: {
            type: "Func",
            line: 484,
            column: 27,
            params: [{type: "Ident", line: 484, column: 28, name: "strnum"}],
            variables: ["type"],
            body: {
              type: "BlockStatement",
              line: 485,
              column: 1,
              body: [
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 485, column: 6, name: "type"},
                  op: "=",
                  right: {
                    type: "Unary",
                    line: 1,
                    column: 1,
                    op: "typeof",
                    node: {type: "Ident", line: 485, column: 20, name: "strnum"}
                  }
                },
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 486, column: 5, name: "type"},
                    op: "===",
                    right: {type: "Const", line: 486, column: 15, value: "string"}
                  },
                  whenTrue: {
                    type: "Return",
                    line: 487,
                    column: 5,
                    node: {type: "Ident", line: 487, column: 5, name: "strnum"}
                  },
                  whenFalse: {
                    type: "IfStatement",
                    line: 1,
                    column: 1,
                    test: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 488, column: 10, name: "type"},
                      op: "===",
                      right: {type: "Const", line: 488, column: 20, value: "number"}
                    },
                    whenTrue: {
                      type: "Return",
                      line: 489,
                      column: 5,
                      node: {
                        type: "Call",
                        line: 489,
                        column: 5,
                        func: {type: "Ident", line: 489, column: 5, name: "String"},
                        args: [{type: "Ident", line: 489, column: 12, name: "strnum"}]
                      }
                    },
                    whenFalse: {
                      type: "Throw",
                      line: 1,
                      column: 1,
                      node: {
                        type: "Call",
                        line: 491,
                        column: 10,
                        func: {type: "Ident", line: 491, column: 10, name: "TypeError"},
                        args: [{
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Const", line: 491, column: 21, value: "Expected a string or number, got "},
                          op: "+",
                          right: {
                            type: "Call",
                            line: 470,
                            column: 49,
                            func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                            args: [{type: "Ident", line: 491, column: 67, name: "strnum"}]
                          }
                        }]
                      }
                    }
                  }
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "simple", name: "string"}]
          },
          dependencies: [
            "__strnum",
            "__typeof",
            "String",
            "strnum",
            "type",
            "TypeError"
          ]
        },
        __owns: {
          helper: {
            type: "Binary",
            line: 592,
            column: 23,
            left: {
              type: "Binary",
              line: 592,
              column: 23,
              left: {type: "Ident", line: 592, column: 23, name: "Object"},
              op: ".",
              right: {type: "Const", line: 592, column: 31, value: "prototype"}
            },
            op: ".",
            right: {type: "Const", line: 592, column: 41, value: "hasOwnProperty"}
          },
          type: {type: "any"},
          dependencies: ["__owns", "Object"]
        },
        __cmp: {
          helper: {
            type: "Func",
            line: 613,
            column: 24,
            params: [
              {type: "Ident", line: 613, column: 25, name: "left"},
              {type: "Ident", line: 613, column: 30, name: "right"}
            ],
            variables: ["type"],
            body: {
              type: "IfStatement",
              line: 1,
              column: 1,
              test: {
                type: "Binary",
                line: 1,
                column: 1,
                left: {type: "Ident", line: 614, column: 5, name: "left"},
                op: "===",
                right: {type: "Ident", line: 614, column: 13, name: "right"}
              },
              whenTrue: {
                type: "Return",
                line: 615,
                column: 5,
                node: {
                  type: "Const",
                  line: 615,
                  column: 5,
                  value: 0,
                  sign: 1
                }
              },
              whenFalse: {
                type: "BlockStatement",
                line: 617,
                column: 1,
                body: [
                  {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 617, column: 8, name: "type"},
                    op: "=",
                    right: {
                      type: "Unary",
                      line: 1,
                      column: 1,
                      op: "typeof",
                      node: {type: "Ident", line: 617, column: 22, name: "left"}
                    }
                  },
                  {
                    type: "IfStatement",
                    line: 1,
                    column: 1,
                    test: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Ident", line: 618, column: 7, name: "type"},
                        op: "!==",
                        right: {type: "Const", line: 618, column: 17, value: "number"}
                      },
                      op: "&&",
                      right: {
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Ident", line: 618, column: 27, name: "type"},
                        op: "!==",
                        right: {type: "Const", line: 618, column: 37, value: "string"}
                      }
                    },
                    whenTrue: {
                      type: "Throw",
                      line: 1,
                      column: 1,
                      node: {
                        type: "Call",
                        line: 619,
                        column: 12,
                        func: {type: "Ident", line: 619, column: 12, name: "TypeError"},
                        args: [{
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Const", line: 619, column: 23, value: "Cannot compare a non-number/string: "},
                          op: "+",
                          right: {type: "Ident", line: 619, column: 64, name: "type"}
                        }]
                      }
                    },
                    whenFalse: {
                      type: "IfStatement",
                      line: 1,
                      column: 1,
                      test: {
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Ident", line: 620, column: 12, name: "type"},
                        op: "!==",
                        right: {
                          type: "Unary",
                          line: 1,
                          column: 1,
                          op: "typeof",
                          node: {type: "Ident", line: 620, column: 27, name: "right"}
                        }
                      },
                      whenTrue: {
                        type: "Throw",
                        line: 1,
                        column: 1,
                        node: {
                          type: "Call",
                          line: 621,
                          column: 12,
                          func: {type: "Ident", line: 621, column: 12, name: "TypeError"},
                          args: [{
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {
                                type: "Binary",
                                line: 1,
                                column: 1,
                                left: {type: "Const", line: 621, column: 23, value: "Cannot compare elements of different types: "},
                                op: "+",
                                right: {type: "Ident", line: 621, column: 72, name: "type"}
                              },
                              op: "+",
                              right: {type: "Const", line: 621, column: 81, value: " vs "}
                            },
                            op: "+",
                            right: {
                              type: "Unary",
                              line: 1,
                              column: 1,
                              op: "typeof",
                              node: {type: "Ident", line: 621, column: 97, name: "right"}
                            }
                          }]
                        }
                      },
                      whenFalse: {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 622, column: 12, name: "left"},
                          op: "<",
                          right: {type: "Ident", line: 622, column: 20, name: "right"}
                        },
                        whenTrue: {
                          type: "Return",
                          line: 1,
                          column: 1,
                          node: {type: "Const", line: 1, column: 1, value: -1}
                        },
                        whenFalse: {
                          type: "Return",
                          line: 625,
                          column: 7,
                          node: {type: "Const", line: 625, column: 7, value: 1}
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "simple", name: "number"}]
          },
          dependencies: [
            "__cmp",
            "left",
            "right",
            "type",
            "TypeError"
          ]
        },
        __int: {
          helper: {
            type: "Func",
            line: 636,
            column: 24,
            params: [{type: "Ident", line: 636, column: 25, name: "num"}],
            body: {
              type: "IfStatement",
              line: 1,
              column: 1,
              test: {
                type: "Binary",
                line: 1,
                column: 1,
                left: {
                  type: "Unary",
                  line: 1,
                  column: 1,
                  op: "typeof",
                  node: {type: "Ident", line: 637, column: 20, name: "num"}
                },
                op: "!==",
                right: {type: "Const", line: 118, column: 25, value: "number"}
              },
              whenTrue: {
                type: "Throw",
                line: 1,
                column: 1,
                node: {
                  type: "Call",
                  line: 638,
                  column: 10,
                  func: {type: "Ident", line: 638, column: 10, name: "TypeError"},
                  args: [{
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Const", line: 638, column: 21, value: "Expected a number, got "},
                    op: "+",
                    right: {
                      type: "Call",
                      line: 470,
                      column: 49,
                      func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                      args: [{type: "Ident", line: 638, column: 57, name: "num"}]
                    }
                  }]
                }
              },
              whenFalse: {
                type: "IfStatement",
                line: 1,
                column: 1,
                test: {
                  type: "Binary",
                  line: 634,
                  column: 7,
                  left: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 639, column: 10, name: "num"},
                    op: "%",
                    right: {type: "Const", line: 639, column: 23, value: 1}
                  },
                  op: "!==",
                  right: {
                    type: "Const",
                    line: 634,
                    column: 27,
                    value: 0,
                    sign: 1
                  }
                },
                whenTrue: {
                  type: "Throw",
                  line: 1,
                  column: 1,
                  node: {
                    type: "Call",
                    line: 640,
                    column: 10,
                    func: {type: "Ident", line: 640, column: 10, name: "TypeError"},
                    args: [{
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Const", line: 640, column: 21, value: "Expected an integer, got "},
                      op: "+",
                      right: {type: "Ident", line: 640, column: 51, name: "num"}
                    }]
                  }
                },
                whenFalse: {
                  type: "Return",
                  line: 642,
                  column: 5,
                  node: {type: "Ident", line: 642, column: 5, name: "num"}
                }
              }
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "simple", name: "number"}]
          },
          dependencies: ["__int", "__typeof", "num", "TypeError"]
        },
        __nonzero: {
          helper: {
            type: "Func",
            line: 644,
            column: 28,
            params: [{type: "Ident", line: 644, column: 29, name: "num"}],
            body: {
              type: "IfStatement",
              line: 1,
              column: 1,
              test: {
                type: "Binary",
                line: 1,
                column: 1,
                left: {type: "Ident", line: 645, column: 5, name: "num"},
                op: "===",
                right: {
                  type: "Const",
                  line: 645,
                  column: 13,
                  value: 0,
                  sign: 1
                }
              },
              whenTrue: {
                type: "Throw",
                line: 1,
                column: 1,
                node: {
                  type: "Call",
                  line: 646,
                  column: 10,
                  func: {type: "Ident", line: 646, column: 10, name: "RangeError"},
                  args: [{
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Const", line: 646, column: 22, value: "Expected non-zero, got "},
                    op: "+",
                    right: {type: "Ident", line: 646, column: 50, name: "num"}
                  }]
                }
              },
              whenFalse: {
                type: "Return",
                line: 648,
                column: 5,
                node: {type: "Ident", line: 648, column: 5, name: "num"}
              }
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "any"}]
          },
          dependencies: ["__nonzero", "num", "RangeError"]
        },
        __lt: {
          helper: {
            type: "Func",
            line: 650,
            column: 23,
            params: [
              {type: "Ident", line: 650, column: 24, name: "x"},
              {type: "Ident", line: 650, column: 26, name: "y"}
            ],
            variables: ["type"],
            body: {
              type: "BlockStatement",
              line: 651,
              column: 1,
              body: [
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 651, column: 6, name: "type"},
                  op: "=",
                  right: {
                    type: "Unary",
                    line: 1,
                    column: 1,
                    op: "typeof",
                    node: {type: "Ident", line: 651, column: 20, name: "x"}
                  }
                },
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 581,
                    column: 25,
                    left: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 652, column: 5, name: "type"},
                      op: "!==",
                      right: {type: "Const", line: 652, column: 20, value: "number"}
                    },
                    op: "&&",
                    right: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 652, column: 5, name: "type"},
                      op: "!==",
                      right: {type: "Const", line: 652, column: 29, value: "string"}
                    }
                  },
                  whenTrue: {
                    type: "Throw",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 653,
                      column: 10,
                      func: {type: "Ident", line: 653, column: 10, name: "TypeError"},
                      args: [{
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Const", line: 653, column: 21, value: "Cannot compare a non-number/string: "},
                        op: "+",
                        right: {type: "Ident", line: 653, column: 62, name: "type"}
                      }]
                    }
                  },
                  whenFalse: {
                    type: "IfStatement",
                    line: 1,
                    column: 1,
                    test: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 654, column: 10, name: "type"},
                      op: "!==",
                      right: {
                        type: "Unary",
                        line: 1,
                        column: 1,
                        op: "typeof",
                        node: {type: "Ident", line: 654, column: 25, name: "y"}
                      }
                    },
                    whenTrue: {
                      type: "Throw",
                      line: 1,
                      column: 1,
                      node: {
                        type: "Call",
                        line: 655,
                        column: 10,
                        func: {type: "Ident", line: 655, column: 10, name: "TypeError"},
                        args: [{
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Const", line: 655, column: 21, value: "Cannot compare elements of different types: "},
                              op: "+",
                              right: {type: "Ident", line: 655, column: 70, name: "type"}
                            },
                            op: "+",
                            right: {type: "Const", line: 655, column: 79, value: " vs "}
                          },
                          op: "+",
                          right: {
                            type: "Unary",
                            line: 1,
                            column: 1,
                            op: "typeof",
                            node: {type: "Ident", line: 655, column: 95, name: "y"}
                          }
                        }]
                      }
                    },
                    whenFalse: {
                      type: "Return",
                      line: 1,
                      column: 1,
                      node: {
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Ident", line: 657, column: 5, name: "x"},
                        op: "<",
                        right: {type: "Ident", line: 657, column: 9, name: "y"}
                      }
                    }
                  }
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "simple", name: "boolean"}]
          },
          dependencies: [
            "__lt",
            "type",
            "TypeError",
            "x",
            "y"
          ]
        },
        __lte: {
          helper: {
            type: "Func",
            line: 659,
            column: 24,
            params: [
              {type: "Ident", line: 659, column: 25, name: "x"},
              {type: "Ident", line: 659, column: 27, name: "y"}
            ],
            variables: ["type"],
            body: {
              type: "BlockStatement",
              line: 660,
              column: 1,
              body: [
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 660, column: 6, name: "type"},
                  op: "=",
                  right: {
                    type: "Unary",
                    line: 1,
                    column: 1,
                    op: "typeof",
                    node: {type: "Ident", line: 660, column: 20, name: "x"}
                  }
                },
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 581,
                    column: 25,
                    left: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 661, column: 5, name: "type"},
                      op: "!==",
                      right: {type: "Const", line: 661, column: 20, value: "number"}
                    },
                    op: "&&",
                    right: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 661, column: 5, name: "type"},
                      op: "!==",
                      right: {type: "Const", line: 661, column: 29, value: "string"}
                    }
                  },
                  whenTrue: {
                    type: "Throw",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 662,
                      column: 10,
                      func: {type: "Ident", line: 662, column: 10, name: "TypeError"},
                      args: [{
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Const", line: 662, column: 21, value: "Cannot compare a non-number/string: "},
                        op: "+",
                        right: {type: "Ident", line: 662, column: 62, name: "type"}
                      }]
                    }
                  },
                  whenFalse: {
                    type: "IfStatement",
                    line: 1,
                    column: 1,
                    test: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 663, column: 10, name: "type"},
                      op: "!==",
                      right: {
                        type: "Unary",
                        line: 1,
                        column: 1,
                        op: "typeof",
                        node: {type: "Ident", line: 663, column: 25, name: "y"}
                      }
                    },
                    whenTrue: {
                      type: "Throw",
                      line: 1,
                      column: 1,
                      node: {
                        type: "Call",
                        line: 664,
                        column: 10,
                        func: {type: "Ident", line: 664, column: 10, name: "TypeError"},
                        args: [{
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Const", line: 664, column: 21, value: "Cannot compare elements of different types: "},
                              op: "+",
                              right: {type: "Ident", line: 664, column: 70, name: "type"}
                            },
                            op: "+",
                            right: {type: "Const", line: 664, column: 79, value: " vs "}
                          },
                          op: "+",
                          right: {
                            type: "Unary",
                            line: 1,
                            column: 1,
                            op: "typeof",
                            node: {type: "Ident", line: 664, column: 95, name: "y"}
                          }
                        }]
                      }
                    },
                    whenFalse: {
                      type: "Return",
                      line: 1,
                      column: 1,
                      node: {
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Ident", line: 666, column: 5, name: "x"},
                        op: "<=",
                        right: {type: "Ident", line: 666, column: 10, name: "y"}
                      }
                    }
                  }
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "simple", name: "boolean"}]
          },
          dependencies: [
            "__lte",
            "type",
            "TypeError",
            "x",
            "y"
          ]
        },
        __slice: {
          helper: {
            type: "Binary",
            line: 921,
            column: 24,
            left: {
              type: "Binary",
              line: 921,
              column: 24,
              left: {type: "Ident", line: 921, column: 24, name: "Array"},
              op: ".",
              right: {type: "Const", line: 921, column: 31, value: "prototype"}
            },
            op: ".",
            right: {type: "Const", line: 921, column: 41, value: "slice"}
          },
          type: {type: "any"},
          dependencies: ["__slice", "Array"]
        },
        __freeze: {
          helper: {
            type: "IfExpression",
            line: 1,
            column: 1,
            test: {
              type: "Binary",
              line: 1,
              column: 1,
              left: {
                type: "Unary",
                line: 1,
                column: 1,
                op: "typeof",
                node: {
                  type: "Binary",
                  line: 923,
                  column: 41,
                  left: {type: "Ident", line: 923, column: 41, name: "Object"},
                  op: ".",
                  right: {type: "Const", line: 923, column: 49, value: "freeze"}
                }
              },
              op: "===",
              right: {type: "Const", line: 124, column: 25, value: "function"}
            },
            whenTrue: {
              type: "Binary",
              line: 924,
              column: 3,
              left: {type: "Ident", line: 924, column: 3, name: "Object"},
              op: ".",
              right: {type: "Const", line: 924, column: 10, value: "freeze"}
            },
            whenFalse: {
              type: "Func",
              line: 926,
              column: 4,
              params: [{type: "Ident", line: 926, column: 5, name: "x"}],
              body: {
                type: "Return",
                line: 926,
                column: 10,
                node: {type: "Ident", line: 926, column: 10, name: "x"}
              }
            }
          },
          type: {type: "any"},
          dependencies: ["__freeze", "Object", "x"]
        },
        __freezeFunc: {
          helper: {
            type: "Func",
            line: 928,
            column: 32,
            params: [{type: "Ident", line: 928, column: 33, name: "x"}],
            body: {
              type: "BlockStatement",
              line: 929,
              column: 1,
              body: [
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {
                      type: "Binary",
                      line: 929,
                      column: 5,
                      left: {type: "Ident", line: 929, column: 5, name: "x"},
                      op: ".",
                      right: {type: "Const", line: 929, column: 8, value: "prototype"}
                    },
                    op: "!=",
                    right: {type: "Const", line: 100, column: 19, value: null}
                  },
                  whenTrue: {
                    type: "Call",
                    line: 930,
                    column: 5,
                    func: {type: "Ident", line: 930, column: 5, name: "__freeze"},
                    args: [{
                      type: "Binary",
                      line: 930,
                      column: 14,
                      left: {type: "Ident", line: 930, column: 14, name: "x"},
                      op: ".",
                      right: {type: "Const", line: 930, column: 16, value: "prototype"}
                    }]
                  }
                },
                {
                  type: "Return",
                  line: 931,
                  column: 3,
                  node: {
                    type: "Call",
                    line: 931,
                    column: 3,
                    func: {type: "Ident", line: 931, column: 3, name: "__freeze"},
                    args: [{type: "Ident", line: 931, column: 12, name: "x"}]
                  }
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "any"}]
          },
          dependencies: ["__freeze", "__freezeFunc", "x"]
        },
        __isArray: {
          helper: {
            type: "IfExpression",
            line: 1,
            column: 1,
            test: {
              type: "Binary",
              line: 1,
              column: 1,
              left: {
                type: "Unary",
                line: 1,
                column: 1,
                op: "typeof",
                node: {
                  type: "Binary",
                  line: 933,
                  column: 43,
                  left: {type: "Ident", line: 933, column: 43, name: "Array"},
                  op: ".",
                  right: {type: "Const", line: 933, column: 50, value: "isArray"}
                }
              },
              op: "===",
              right: {type: "Const", line: 124, column: 25, value: "function"}
            },
            whenTrue: {
              type: "Binary",
              line: 934,
              column: 3,
              left: {type: "Ident", line: 934, column: 3, name: "Array"},
              op: ".",
              right: {type: "Const", line: 934, column: 9, value: "isArray"}
            },
            whenFalse: {
              type: "Call",
              line: 3,
              column: 9,
              func: {
                type: "Func",
                line: 3,
                column: 12,
                variables: ["_toString"],
                body: {
                  type: "BlockStatement",
                  line: 937,
                  column: 1,
                  body: [
                    {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 937, column: 8, name: "_toString"},
                      op: "=",
                      right: {
                        type: "Binary",
                        line: 937,
                        column: 21,
                        left: {
                          type: "Binary",
                          line: 937,
                          column: 21,
                          left: {type: "Ident", line: 937, column: 21, name: "Object"},
                          op: ".",
                          right: {type: "Const", line: 937, column: 29, value: "prototype"}
                        },
                        op: ".",
                        right: {type: "Const", line: 937, column: 39, value: "toString"}
                      }
                    },
                    {
                      type: "Return",
                      line: 938,
                      column: 6,
                      node: {
                        type: "Func",
                        line: 938,
                        column: 6,
                        params: [{type: "Ident", line: 938, column: 7, name: "x"}],
                        body: {
                          type: "Return",
                          line: 1,
                          column: 1,
                          node: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Call",
                              line: 938,
                              column: 23,
                              func: {
                                type: "Binary",
                                line: 938,
                                column: 23,
                                left: {type: "Ident", line: 938, column: 23, name: "_toString"},
                                op: ".",
                                right: {type: "Const", line: 938, column: 23, value: "call"}
                              },
                              args: [{type: "Ident", line: 938, column: 36, name: "x"}]
                            },
                            op: "===",
                            right: {type: "Const", line: 938, column: 42, value: "[object Array]"}
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          type: {type: "any"},
          dependencies: [
            "__isArray",
            "_toString",
            "Array",
            "Object",
            "x"
          ]
        },
        __isObject: {
          helper: {
            type: "Func",
            line: 940,
            column: 30,
            params: [{type: "Ident", line: 940, column: 31, name: "x"}],
            body: {
              type: "Return",
              line: 1,
              column: 1,
              node: {
                type: "Binary",
                line: 1,
                column: 1,
                left: {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {
                    type: "Unary",
                    line: 1,
                    column: 1,
                    op: "typeof",
                    node: {type: "Ident", line: 940, column: 54, name: "x"}
                  },
                  op: "===",
                  right: {type: "Const", line: 940, column: 61, value: "object"}
                },
                op: "&&",
                right: {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 940, column: 71, name: "x"},
                  op: "!==",
                  right: {type: "Const", line: 940, column: 76, value: null}
                }
              }
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "simple", name: "boolean"}]
          },
          dependencies: ["__isObject", "x"]
        },
        __toArray: {
          helper: {
            type: "Func",
            line: 942,
            column: 29,
            params: [{type: "Ident", line: 942, column: 30, name: "x"}],
            body: {
              type: "IfStatement",
              line: 1,
              column: 1,
              test: {
                type: "Binary",
                line: 1,
                column: 1,
                left: {type: "Ident", line: 943, column: 9, name: "x"},
                op: "==",
                right: {type: "Const", line: 100, column: 19, value: null}
              },
              whenTrue: {
                type: "Throw",
                line: 1,
                column: 1,
                node: {
                  type: "Call",
                  line: 944,
                  column: 10,
                  func: {type: "Ident", line: 944, column: 10, name: "TypeError"},
                  args: [{
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Const", line: 944, column: 21, value: "Expected an object, got "},
                    op: "+",
                    right: {
                      type: "Call",
                      line: 470,
                      column: 49,
                      func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                      args: [{type: "Ident", line: 944, column: 58, name: "x"}]
                    }
                  }]
                }
              },
              whenFalse: {
                type: "IfStatement",
                line: 1,
                column: 1,
                test: {
                  type: "Call",
                  line: 127,
                  column: 146,
                  func: {type: "Ident", line: 127, column: 146, name: "__isArray"},
                  args: [{type: "Ident", line: 945, column: 20, name: "x"}]
                },
                whenTrue: {
                  type: "Return",
                  line: 946,
                  column: 5,
                  node: {type: "Ident", line: 946, column: 5, name: "x"}
                },
                whenFalse: {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {
                      type: "Unary",
                      line: 1,
                      column: 1,
                      op: "typeof",
                      node: {type: "Ident", line: 947, column: 17, name: "x"}
                    },
                    op: "===",
                    right: {type: "Const", line: 947, column: 24, value: "string"}
                  },
                  whenTrue: {
                    type: "Return",
                    line: 948,
                    column: 5,
                    node: {
                      type: "Call",
                      line: 948,
                      column: 5,
                      func: {
                        type: "Binary",
                        line: 948,
                        column: 5,
                        left: {type: "Ident", line: 948, column: 5, name: "x"},
                        op: ".",
                        right: {type: "Const", line: 948, column: 7, value: "split"}
                      },
                      args: [{type: "Const", line: 948, column: 13, value: ""}]
                    }
                  },
                  whenFalse: {
                    type: "Return",
                    line: 950,
                    column: 5,
                    node: {
                      type: "Call",
                      line: 950,
                      column: 5,
                      func: {
                        type: "Binary",
                        line: 950,
                        column: 5,
                        left: {type: "Ident", line: 950, column: 5, name: "__slice"},
                        op: ".",
                        right: {type: "Const", line: 950, column: 5, value: "call"}
                      },
                      args: [{type: "Ident", line: 950, column: 14, name: "x"}]
                    }
                  }
                }
              }
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{
              type: "generic",
              base: {type: "simple", name: "arrayBase"},
              args: [{type: "any"}]
            }]
          },
          dependencies: [
            "__isArray",
            "__slice",
            "__toArray",
            "__typeof",
            "TypeError",
            "x"
          ]
        },
        __create: {
          helper: {
            type: "IfExpression",
            line: 1,
            column: 1,
            test: {
              type: "Binary",
              line: 1,
              column: 1,
              left: {
                type: "Unary",
                line: 1,
                column: 1,
                op: "typeof",
                node: {
                  type: "Binary",
                  line: 952,
                  column: 41,
                  left: {type: "Ident", line: 952, column: 41, name: "Object"},
                  op: ".",
                  right: {type: "Const", line: 952, column: 49, value: "create"}
                }
              },
              op: "===",
              right: {type: "Const", line: 124, column: 25, value: "function"}
            },
            whenTrue: {
              type: "Binary",
              line: 953,
              column: 3,
              left: {type: "Ident", line: 953, column: 3, name: "Object"},
              op: ".",
              right: {type: "Const", line: 953, column: 10, value: "create"}
            },
            whenFalse: {
              type: "Func",
              line: 955,
              column: 4,
              params: [{type: "Ident", line: 955, column: 5, name: "x"}],
              body: {
                type: "BlockStatement",
                line: 956,
                column: 1,
                body: [
                  {
                    type: "Func",
                    line: 1,
                    column: 1,
                    name: {type: "Ident", line: 956, column: 8, name: "F"}
                  },
                  {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {
                      type: "Binary",
                      line: 957,
                      column: 6,
                      left: {type: "Ident", line: 957, column: 5, name: "F"},
                      op: ".",
                      right: {type: "Const", line: 957, column: 7, value: "prototype"}
                    },
                    op: "=",
                    right: {type: "Ident", line: 957, column: 19, name: "x"}
                  },
                  {
                    type: "Return",
                    line: 958,
                    column: 5,
                    node: {
                      type: "Call",
                      line: 958,
                      column: 5,
                      func: {type: "Ident", line: 958, column: 8, name: "F"},
                      isNew: true
                    }
                  }
                ]
              }
            }
          },
          type: {type: "any"},
          dependencies: ["__create", "F", "Object", "x"]
        },
        __pow: {
          helper: {
            type: "Binary",
            line: 960,
            column: 22,
            left: {type: "Ident", line: 960, column: 22, name: "Math"},
            op: ".",
            right: {type: "Const", line: 960, column: 28, value: "pow"}
          },
          type: {type: "any"},
          dependencies: ["__pow", "Math"]
        },
        __floor: {
          helper: {
            type: "Binary",
            line: 961,
            column: 24,
            left: {type: "Ident", line: 961, column: 24, name: "Math"},
            op: ".",
            right: {type: "Const", line: 961, column: 30, value: "floor"}
          },
          type: {type: "any"},
          dependencies: ["__floor", "Math"]
        },
        __sqrt: {
          helper: {
            type: "Binary",
            line: 962,
            column: 23,
            left: {type: "Ident", line: 962, column: 23, name: "Math"},
            op: ".",
            right: {type: "Const", line: 962, column: 29, value: "sqrt"}
          },
          type: {type: "any"},
          dependencies: ["__sqrt", "Math"]
        },
        __log: {
          helper: {
            type: "Binary",
            line: 963,
            column: 22,
            left: {type: "Ident", line: 963, column: 22, name: "Math"},
            op: ".",
            right: {type: "Const", line: 963, column: 28, value: "log"}
          },
          type: {type: "any"},
          dependencies: ["__log", "Math"]
        },
        __in: {
          helper: {
            type: "IfExpression",
            line: 1,
            column: 1,
            test: {
              type: "Binary",
              line: 1,
              column: 1,
              left: {
                type: "Unary",
                line: 1,
                column: 1,
                op: "typeof",
                node: {
                  type: "Binary",
                  line: 1095,
                  column: 37,
                  left: {
                    type: "Binary",
                    line: 1095,
                    column: 37,
                    left: {type: "Ident", line: 1095, column: 37, name: "Array"},
                    op: ".",
                    right: {type: "Const", line: 1095, column: 44, value: "prototype"}
                  },
                  op: ".",
                  right: {type: "Const", line: 1095, column: 54, value: "indexOf"}
                }
              },
              op: "===",
              right: {type: "Const", line: 124, column: 25, value: "function"}
            },
            whenTrue: {
              type: "Call",
              line: 3,
              column: 9,
              func: {
                type: "Func",
                line: 3,
                column: 12,
                variables: ["indexOf"],
                body: {
                  type: "BlockStatement",
                  line: 1097,
                  column: 1,
                  body: [
                    {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 1097, column: 8, name: "indexOf"},
                      op: "=",
                      right: {
                        type: "Binary",
                        line: 1097,
                        column: 19,
                        left: {
                          type: "Binary",
                          line: 1097,
                          column: 19,
                          left: {type: "Ident", line: 1097, column: 19, name: "Array"},
                          op: ".",
                          right: {type: "Const", line: 1097, column: 26, value: "prototype"}
                        },
                        op: ".",
                        right: {type: "Const", line: 1097, column: 36, value: "indexOf"}
                      }
                    },
                    {
                      type: "Return",
                      line: 1098,
                      column: 6,
                      node: {
                        type: "Func",
                        line: 1098,
                        column: 6,
                        params: [
                          {type: "Ident", line: 1098, column: 7, name: "child"},
                          {type: "Ident", line: 1098, column: 13, name: "parent"}
                        ],
                        body: {
                          type: "Return",
                          line: 1,
                          column: 1,
                          node: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Call",
                              line: 1098,
                              column: 35,
                              func: {
                                type: "Binary",
                                line: 1098,
                                column: 35,
                                left: {type: "Ident", line: 1098, column: 35, name: "indexOf"},
                                op: ".",
                                right: {type: "Const", line: 1098, column: 35, value: "call"}
                              },
                              args: [
                                {type: "Ident", line: 1098, column: 46, name: "parent"},
                                {type: "Ident", line: 1098, column: 53, name: "child"}
                              ]
                            },
                            op: "!==",
                            right: {type: "Const", line: 1, column: 1, value: -1}
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            whenFalse: {
              type: "Func",
              line: 1100,
              column: 4,
              params: [
                {type: "Ident", line: 1100, column: 5, name: "child"},
                {type: "Ident", line: 1100, column: 11, name: "parent"}
              ],
              variables: ["i", "len"],
              body: {
                type: "BlockStatement",
                line: 1101,
                column: 1,
                body: [
                  {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 1101, column: 8, name: "len"},
                    op: "=",
                    right: {
                      type: "Unary",
                      line: 1,
                      column: 1,
                      op: "+",
                      node: {
                        type: "Binary",
                        line: 1101,
                        column: 17,
                        left: {type: "Ident", line: 1101, column: 17, name: "parent"},
                        op: ".",
                        right: {type: "Const", line: 1101, column: 24, value: "length"}
                      }
                    }
                  },
                  {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 1102, column: 16, name: "i"},
                    op: "=",
                    right: {type: "Const", line: 1, column: 1, value: -1}
                  },
                  {
                    type: "For",
                    line: 1,
                    column: 1,
                    test: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {
                        type: "Unary",
                        line: 1,
                        column: 1,
                        op: "++",
                        node: {type: "Ident", line: 1103, column: 12, name: "i"}
                      },
                      op: "<",
                      right: {type: "Ident", line: 1103, column: 22, name: "len"}
                    },
                    body: {
                      type: "IfStatement",
                      line: 1,
                      column: 1,
                      test: {
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 1104, column: 9, name: "child"},
                          op: "===",
                          right: {
                            type: "Binary",
                            line: 1104,
                            column: 18,
                            left: {type: "Ident", line: 1104, column: 18, name: "parent"},
                            op: ".",
                            right: {type: "Ident", line: 1104, column: 26, name: "i"}
                          }
                        },
                        op: "&&",
                        right: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 1104, column: 46, name: "i"},
                          op: "in",
                          right: {type: "Ident", line: 1104, column: 32, name: "parent"}
                        }
                      },
                      whenTrue: {
                        type: "Return",
                        line: 1,
                        column: 1,
                        node: {type: "Const", line: 1105, column: 15, value: true}
                      }
                    }
                  },
                  {
                    type: "Return",
                    line: 1106,
                    column: 5,
                    node: {type: "Const", line: 1106, column: 5, value: false}
                  }
                ]
              }
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "simple", name: "boolean"}]
          },
          dependencies: [
            "__in",
            "Array",
            "child",
            "i",
            "indexOf",
            "len",
            "parent"
          ]
        },
        __genericFunc: {
          helper: {
            type: "Func",
            line: 1582,
            column: 33,
            params: [
              {type: "Ident", line: 1582, column: 34, name: "numArgs"},
              {type: "Ident", line: 1582, column: 53, name: "make"}
            ],
            variables: ["any", "cache", "result"],
            body: {
              type: "BlockStatement",
              line: 1583,
              column: 1,
              body: [
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 1583, column: 6, name: "cache"},
                  op: "=",
                  right: {
                    type: "Call",
                    line: 1583,
                    column: 14,
                    func: {type: "Ident", line: 1583, column: 14, name: "WeakMap"}
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 1584, column: 6, name: "any"},
                  op: "=",
                  right: {type: "Obj", line: 52536, column: 52539}
                },
                {
                  type: "Func",
                  line: 1,
                  column: 1,
                  name: {type: "Ident", line: 1585, column: 6, name: "generic"},
                  variables: [
                    "_ref",
                    "current",
                    "i",
                    "item",
                    "type"
                  ],
                  body: {
                    type: "BlockStatement",
                    line: 1456,
                    column: 1,
                    body: [
                      {
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Ident", line: 1586, column: 41, name: "current"},
                        op: "=",
                        right: {type: "Ident", line: 1586, column: 51, name: "cache"}
                      },
                      {
                        type: "For",
                        line: 1,
                        column: 1,
                        init: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 1586, column: 15, name: "i"},
                          op: "=",
                          right: {type: "Ident", line: 1586, column: 20, name: "numArgs"}
                        },
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 1586, column: 15, name: "i"},
                          op: ">=",
                          right: {
                            type: "Const",
                            line: 1586,
                            column: 33,
                            value: 0,
                            sign: 1
                          }
                        },
                        step: {
                          type: "Unary",
                          line: 1,
                          column: 1,
                          op: "--",
                          node: {type: "Ident", line: 1586, column: 15, name: "i"}
                        },
                        body: {
                          type: "BlockStatement",
                          line: 1587,
                          column: 1,
                          body: [
                            {
                              type: "IfStatement",
                              line: 1,
                              column: 1,
                              test: {
                                type: "Binary",
                                line: 1,
                                column: 1,
                                left: {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {type: "Ident", line: 1, column: 1, name: "_ref"},
                                  op: "=",
                                  right: {
                                    type: "Binary",
                                    line: 1587,
                                    column: 17,
                                    left: {type: "Arguments", line: 1587, column: 17},
                                    op: ".",
                                    right: {type: "Ident", line: 1587, column: 28, name: "i"}
                                  }
                                },
                                op: "!=",
                                right: {type: "Const", line: 100, column: 19, value: null}
                              },
                              whenTrue: {
                                type: "Binary",
                                line: 1,
                                column: 1,
                                left: {type: "Ident", line: 1587, column: 10, name: "type"},
                                op: "=",
                                right: {type: "Ident", line: 1, column: 1, name: "_ref"}
                              },
                              whenFalse: {
                                type: "Binary",
                                line: 1,
                                column: 1,
                                left: {type: "Ident", line: 1587, column: 10, name: "type"},
                                op: "=",
                                right: {type: "Ident", line: 1587, column: 32, name: "any"}
                              }
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 1588, column: 18, name: "item"},
                              op: "=",
                              right: {
                                type: "Call",
                                line: 1588,
                                column: 25,
                                func: {
                                  type: "Binary",
                                  line: 1588,
                                  column: 25,
                                  left: {type: "Ident", line: 1588, column: 25, name: "current"},
                                  op: ".",
                                  right: {type: "Const", line: 1588, column: 34, value: "get"}
                                },
                                args: [{type: "Ident", line: 1588, column: 38, name: "type"}]
                              }
                            },
                            {
                              type: "IfStatement",
                              line: 1,
                              column: 1,
                              test: {
                                type: "Binary",
                                line: 1,
                                column: 1,
                                left: {type: "Ident", line: 1589, column: 13, name: "item"},
                                op: "==",
                                right: {type: "Const", line: 100, column: 19, value: null}
                              },
                              whenTrue: {
                                type: "BlockStatement",
                                line: 1590,
                                column: 1,
                                body: [
                                  {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {type: "Ident", line: 1590, column: 9, name: "item"},
                                    op: "=",
                                    right: {
                                      type: "IfExpression",
                                      line: 1,
                                      column: 1,
                                      test: {
                                        type: "Binary",
                                        line: 1,
                                        column: 1,
                                        left: {type: "Ident", line: 1590, column: 19, name: "i"},
                                        op: "===",
                                        right: {
                                          type: "Const",
                                          line: 1590,
                                          column: 25,
                                          value: 0,
                                          sign: 1
                                        }
                                      },
                                      whenTrue: {
                                        type: "Call",
                                        line: 1591,
                                        column: 11,
                                        func: {
                                          type: "Binary",
                                          line: 1591,
                                          column: 11,
                                          left: {type: "Ident", line: 1591, column: 11, name: "make"},
                                          op: ".",
                                          right: {type: "Const", line: 1591, column: 11, value: "apply"}
                                        },
                                        args: [
                                          {type: "This", line: 1591, column: 17},
                                          {type: "Arguments", line: 1591, column: 26}
                                        ]
                                      },
                                      whenFalse: {
                                        type: "Call",
                                        line: 1593,
                                        column: 11,
                                        func: {type: "Ident", line: 1593, column: 11, name: "WeakMap"}
                                      }
                                    }
                                  },
                                  {
                                    type: "Call",
                                    line: 1594,
                                    column: 9,
                                    func: {
                                      type: "Binary",
                                      line: 1594,
                                      column: 9,
                                      left: {type: "Ident", line: 1594, column: 9, name: "current"},
                                      op: ".",
                                      right: {type: "Const", line: 1594, column: 17, value: "set"}
                                    },
                                    args: [
                                      {type: "Ident", line: 1594, column: 21, name: "type"},
                                      {type: "Ident", line: 1594, column: 26, name: "item"}
                                    ]
                                  }
                                ]
                              }
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 1586, column: 41, name: "current"},
                              op: "=",
                              right: {type: "Ident", line: 1595, column: 7, name: "item"}
                            }
                          ]
                        }
                      },
                      {
                        type: "Return",
                        line: 1586,
                        column: 41,
                        node: {type: "Ident", line: 1586, column: 41, name: "current"}
                      }
                    ]
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 1596, column: 6, name: "result"},
                  op: "=",
                  right: {
                    type: "Call",
                    line: 1596,
                    column: 15,
                    func: {type: "Ident", line: 1596, column: 15, name: "generic"}
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {
                    type: "Binary",
                    line: 1597,
                    column: 9,
                    left: {type: "Ident", line: 1597, column: 3, name: "result"},
                    op: ".",
                    right: {type: "Const", line: 1597, column: 10, value: "generic"}
                  },
                  op: "=",
                  right: {type: "Ident", line: 1597, column: 20, name: "generic"}
                },
                {
                  type: "Return",
                  line: 1598,
                  column: 3,
                  node: {type: "Ident", line: 1598, column: 3, name: "result"}
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "any"}]
          },
          dependencies: [
            "__genericFunc",
            "__toArray",
            "any",
            "cache",
            "current",
            "generic",
            "i",
            "item",
            "make",
            "numArgs",
            "result",
            "type",
            "WeakMap"
          ]
        },
        __range: {
          helper: {
            type: "Func",
            line: 1832,
            column: 1,
            params: [
              {type: "Ident", line: 1881, column: 27, name: "start"},
              {type: "Ident", line: 1881, column: 43, name: "end"},
              {type: "Ident", line: 1881, column: 58, name: "step"},
              {type: "Ident", line: 1881, column: 74, name: "inclusive"}
            ],
            variables: ["i", "result"],
            body: {
              type: "BlockStatement",
              line: 1832,
              column: 1,
              body: [
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 602,
                    column: 18,
                    left: {
                      type: "Unary",
                      line: 1,
                      column: 1,
                      op: "typeof",
                      node: {type: "Ident", line: 1881, column: 27, name: "start"}
                    },
                    op: "!==",
                    right: {type: "Const", line: 118, column: 25, value: "number"}
                  },
                  whenTrue: {
                    type: "Throw",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 1620,
                      column: 18,
                      func: {type: "Ident", line: 1620, column: 18, name: "TypeError"},
                      args: [{
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Const", line: 1, column: 1, value: "Expected start to be a Number, got "},
                        op: "+",
                        right: {
                          type: "Call",
                          line: 470,
                          column: 49,
                          func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                          args: [{type: "Ident", line: 1881, column: 27, name: "start"}]
                        }
                      }]
                    }
                  }
                },
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 602,
                    column: 18,
                    left: {
                      type: "Unary",
                      line: 1,
                      column: 1,
                      op: "typeof",
                      node: {type: "Ident", line: 1881, column: 43, name: "end"}
                    },
                    op: "!==",
                    right: {type: "Const", line: 118, column: 25, value: "number"}
                  },
                  whenTrue: {
                    type: "Throw",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 1620,
                      column: 18,
                      func: {type: "Ident", line: 1620, column: 18, name: "TypeError"},
                      args: [{
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Const", line: 1, column: 1, value: "Expected end to be a Number, got "},
                        op: "+",
                        right: {
                          type: "Call",
                          line: 470,
                          column: 49,
                          func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                          args: [{type: "Ident", line: 1881, column: 43, name: "end"}]
                        }
                      }]
                    }
                  }
                },
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 602,
                    column: 18,
                    left: {
                      type: "Unary",
                      line: 1,
                      column: 1,
                      op: "typeof",
                      node: {type: "Ident", line: 1881, column: 58, name: "step"}
                    },
                    op: "!==",
                    right: {type: "Const", line: 118, column: 25, value: "number"}
                  },
                  whenTrue: {
                    type: "Throw",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 1620,
                      column: 18,
                      func: {type: "Ident", line: 1620, column: 18, name: "TypeError"},
                      args: [{
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Const", line: 1, column: 1, value: "Expected step to be a Number, got "},
                        op: "+",
                        right: {
                          type: "Call",
                          line: 470,
                          column: 49,
                          func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                          args: [{type: "Ident", line: 1881, column: 58, name: "step"}]
                        }
                      }]
                    }
                  }
                },
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 1881, column: 74, name: "inclusive"},
                    op: "==",
                    right: {type: "Const", line: 100, column: 19, value: null}
                  },
                  whenTrue: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 1881, column: 74, name: "inclusive"},
                    op: "=",
                    right: {type: "Const", line: 1627, column: 20, value: false}
                  },
                  whenFalse: {
                    type: "IfStatement",
                    line: 1,
                    column: 1,
                    test: {
                      type: "Binary",
                      line: 604,
                      column: 18,
                      left: {
                        type: "Unary",
                        line: 1,
                        column: 1,
                        op: "typeof",
                        node: {type: "Ident", line: 1881, column: 74, name: "inclusive"}
                      },
                      op: "!==",
                      right: {type: "Const", line: 121, column: 25, value: "boolean"}
                    },
                    whenTrue: {
                      type: "Throw",
                      line: 1,
                      column: 1,
                      node: {
                        type: "Call",
                        line: 1620,
                        column: 18,
                        func: {type: "Ident", line: 1620, column: 18, name: "TypeError"},
                        args: [{
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Const", line: 1, column: 1, value: "Expected inclusive to be a Boolean, got "},
                          op: "+",
                          right: {
                            type: "Call",
                            line: 470,
                            column: 49,
                            func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                            args: [{type: "Ident", line: 1881, column: 74, name: "inclusive"}]
                          }
                        }]
                      }
                    }
                  }
                },
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 1882, column: 5, name: "step"},
                    op: "===",
                    right: {
                      type: "Const",
                      line: 1882,
                      column: 14,
                      value: 0,
                      sign: 1
                    }
                  },
                  whenTrue: {
                    type: "Throw",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 1883,
                      column: 10,
                      func: {type: "Ident", line: 1883, column: 10, name: "RangeError"},
                      args: [{type: "Const", line: 1883, column: 22, value: "step cannot be zero"}]
                    }
                  },
                  whenFalse: {
                    type: "IfStatement",
                    line: 1,
                    column: 1,
                    test: {
                      type: "Unary",
                      line: 1,
                      column: 1,
                      op: "!",
                      node: {
                        type: "Call",
                        line: 1884,
                        column: 14,
                        func: {type: "Ident", line: 1884, column: 14, name: "isFinite"},
                        args: [{type: "Ident", line: 1884, column: 25, name: "start"}]
                      }
                    },
                    whenTrue: {
                      type: "Throw",
                      line: 1,
                      column: 1,
                      node: {
                        type: "Call",
                        line: 1885,
                        column: 10,
                        func: {type: "Ident", line: 1885, column: 10, name: "RangeError"},
                        args: [{type: "Const", line: 1885, column: 22, value: "start must be finite"}]
                      }
                    },
                    whenFalse: {
                      type: "IfStatement",
                      line: 1,
                      column: 1,
                      test: {
                        type: "Unary",
                        line: 1,
                        column: 1,
                        op: "!",
                        node: {
                          type: "Call",
                          line: 1886,
                          column: 14,
                          func: {type: "Ident", line: 1886, column: 14, name: "isFinite"},
                          args: [{type: "Ident", line: 1886, column: 25, name: "end"}]
                        }
                      },
                      whenTrue: {
                        type: "Throw",
                        line: 1,
                        column: 1,
                        node: {
                          type: "Call",
                          line: 1887,
                          column: 10,
                          func: {type: "Ident", line: 1887, column: 10, name: "RangeError"},
                          args: [{type: "Const", line: 1887, column: 22, value: "end must be finite"}]
                        }
                      }
                    }
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 1888, column: 6, name: "result"},
                  op: "=",
                  right: {type: "Arr", line: 1888, column: 15}
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 1889, column: 14, name: "i"},
                  op: "=",
                  right: {type: "Ident", line: 1889, column: 18, name: "start"}
                },
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 1890, column: 5, name: "step"},
                    op: ">",
                    right: {
                      type: "Const",
                      line: 1890,
                      column: 14,
                      value: 0,
                      sign: 1
                    }
                  },
                  whenTrue: {
                    type: "BlockStatement",
                    line: 1891,
                    column: 1,
                    body: [
                      {
                        type: "For",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 1891, column: 10, name: "i"},
                          op: "<",
                          right: {type: "Ident", line: 1891, column: 15, name: "end"}
                        },
                        step: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 1891, column: 20, name: "i"},
                          op: "+=",
                          right: {type: "Ident", line: 1891, column: 26, name: "step"}
                        },
                        body: {
                          type: "Call",
                          line: 1892,
                          column: 7,
                          func: {
                            type: "Binary",
                            line: 1892,
                            column: 7,
                            left: {type: "Ident", line: 1892, column: 7, name: "result"},
                            op: ".",
                            right: {type: "Const", line: 1892, column: 14, value: "push"}
                          },
                          args: [{type: "Ident", line: 1892, column: 19, name: "i"}]
                        }
                      },
                      {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 1893, column: 7, name: "inclusive"},
                          op: "&&",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 1893, column: 21, name: "i"},
                            op: "<=",
                            right: {type: "Ident", line: 1893, column: 27, name: "end"}
                          }
                        },
                        whenTrue: {
                          type: "Call",
                          line: 1894,
                          column: 7,
                          func: {
                            type: "Binary",
                            line: 1894,
                            column: 7,
                            left: {type: "Ident", line: 1894, column: 7, name: "result"},
                            op: ".",
                            right: {type: "Const", line: 1894, column: 14, value: "push"}
                          },
                          args: [{type: "Ident", line: 1894, column: 19, name: "i"}]
                        }
                      }
                    ]
                  },
                  whenFalse: {
                    type: "BlockStatement",
                    line: 1896,
                    column: 1,
                    body: [
                      {
                        type: "For",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 1896, column: 10, name: "i"},
                          op: ">",
                          right: {type: "Ident", line: 1896, column: 15, name: "end"}
                        },
                        step: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 1896, column: 20, name: "i"},
                          op: "+=",
                          right: {type: "Ident", line: 1896, column: 26, name: "step"}
                        },
                        body: {
                          type: "Call",
                          line: 1897,
                          column: 7,
                          func: {
                            type: "Binary",
                            line: 1897,
                            column: 7,
                            left: {type: "Ident", line: 1897, column: 7, name: "result"},
                            op: ".",
                            right: {type: "Const", line: 1897, column: 14, value: "push"}
                          },
                          args: [{type: "Ident", line: 1897, column: 19, name: "i"}]
                        }
                      },
                      {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 1898, column: 7, name: "inclusive"},
                          op: "&&",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 1898, column: 21, name: "i"},
                            op: ">=",
                            right: {type: "Ident", line: 1898, column: 27, name: "end"}
                          }
                        },
                        whenTrue: {
                          type: "Call",
                          line: 1899,
                          column: 7,
                          func: {
                            type: "Binary",
                            line: 1899,
                            column: 7,
                            left: {type: "Ident", line: 1899, column: 7, name: "result"},
                            op: ".",
                            right: {type: "Const", line: 1899, column: 14, value: "push"}
                          },
                          args: [{type: "Ident", line: 1899, column: 19, name: "i"}]
                        }
                      }
                    ]
                  }
                },
                {
                  type: "Return",
                  line: 1900,
                  column: 3,
                  node: {type: "Ident", line: 1900, column: 3, name: "result"}
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{
              type: "generic",
              base: {type: "simple", name: "arrayBase"},
              args: [{type: "simple", name: "number"}]
            }]
          },
          dependencies: [
            "__range",
            "__typeof",
            "end",
            "i",
            "inclusive",
            "isFinite",
            "RangeError",
            "result",
            "start",
            "step",
            "TypeError"
          ]
        },
        __step: {
          helper: {
            type: "Func",
            line: 1832,
            column: 1,
            params: [
              {type: "Ident", line: 1902, column: 26, name: "array"},
              {type: "Ident", line: 1902, column: 32, name: "step"}
            ],
            variables: ["i", "len", "result"],
            body: {
              type: "BlockStatement",
              line: 1832,
              column: 1,
              body: [
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 602,
                    column: 18,
                    left: {
                      type: "Unary",
                      line: 1,
                      column: 1,
                      op: "typeof",
                      node: {type: "Ident", line: 1902, column: 32, name: "step"}
                    },
                    op: "!==",
                    right: {type: "Const", line: 118, column: 25, value: "number"}
                  },
                  whenTrue: {
                    type: "Throw",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 1620,
                      column: 18,
                      func: {type: "Ident", line: 1620, column: 18, name: "TypeError"},
                      args: [{
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Const", line: 1, column: 1, value: "Expected step to be a Number, got "},
                        op: "+",
                        right: {
                          type: "Call",
                          line: 470,
                          column: 49,
                          func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                          args: [{type: "Ident", line: 1902, column: 32, name: "step"}]
                        }
                      }]
                    }
                  }
                },
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 1903, column: 5, name: "step"},
                    op: "===",
                    right: {
                      type: "Const",
                      line: 1903,
                      column: 14,
                      value: 0,
                      sign: 1
                    }
                  },
                  whenTrue: {
                    type: "Throw",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 1904,
                      column: 10,
                      func: {type: "Ident", line: 1904, column: 10, name: "RangeError"},
                      args: [{type: "Const", line: 1904, column: 22, value: "step cannot be zero"}]
                    }
                  },
                  whenFalse: {
                    type: "IfStatement",
                    line: 1,
                    column: 1,
                    test: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 1905, column: 10, name: "step"},
                      op: "===",
                      right: {type: "Const", line: 1905, column: 19, value: 1}
                    },
                    whenTrue: {
                      type: "Return",
                      line: 1906,
                      column: 5,
                      node: {
                        type: "Call",
                        line: 1906,
                        column: 5,
                        func: {type: "Ident", line: 1906, column: 5, name: "__toArray"},
                        args: [{type: "Ident", line: 1906, column: 16, name: "array"}]
                      }
                    },
                    whenFalse: {
                      type: "IfStatement",
                      line: 1,
                      column: 1,
                      test: {
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Ident", line: 1907, column: 10, name: "step"},
                        op: "===",
                        right: {type: "Const", line: 1, column: 1, value: -1}
                      },
                      whenTrue: {
                        type: "Return",
                        line: 1908,
                        column: 5,
                        node: {
                          type: "Call",
                          line: 1908,
                          column: 5,
                          func: {
                            type: "Binary",
                            line: 1908,
                            column: 5,
                            left: {
                              type: "Call",
                              line: 1908,
                              column: 5,
                              func: {
                                type: "Binary",
                                line: 1908,
                                column: 5,
                                left: {type: "Ident", line: 1908, column: 5, name: "__slice"},
                                op: ".",
                                right: {type: "Const", line: 1908, column: 5, value: "call"}
                              },
                              args: [{type: "Ident", line: 1908, column: 14, name: "array"}]
                            },
                            op: ".",
                            right: {type: "Const", line: 1908, column: 21, value: "reverse"}
                          }
                        }
                      },
                      whenFalse: {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 631,
                          column: 7,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 1909, column: 10, name: "step"},
                            op: "%",
                            right: {type: "Const", line: 1909, column: 23, value: 1}
                          },
                          op: "!==",
                          right: {
                            type: "Const",
                            line: 631,
                            column: 26,
                            value: 0,
                            sign: 1
                          }
                        },
                        whenTrue: {
                          type: "Throw",
                          line: 1,
                          column: 1,
                          node: {
                            type: "Call",
                            line: 1910,
                            column: 10,
                            func: {type: "Ident", line: 1910, column: 10, name: "RangeError"},
                            args: [{
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Const", line: 1910, column: 22, value: "step must be an integer, got "},
                              op: "+",
                              right: {
                                type: "Call",
                                line: 1910,
                                column: 54,
                                func: {type: "Ident", line: 1910, column: 54, name: "String"},
                                args: [{type: "Ident", line: 1910, column: 61, name: "step"}]
                              }
                            }]
                          }
                        },
                        whenFalse: {
                          type: "BlockStatement",
                          line: 1912,
                          column: 1,
                          body: [
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 1912, column: 8, name: "result"},
                              op: "=",
                              right: {type: "Arr", line: 1912, column: 17}
                            },
                            {
                              type: "IfStatement",
                              line: 1,
                              column: 1,
                              test: {
                                type: "Binary",
                                line: 1,
                                column: 1,
                                left: {type: "Ident", line: 1913, column: 7, name: "step"},
                                op: ">",
                                right: {
                                  type: "Const",
                                  line: 1913,
                                  column: 15,
                                  value: 0,
                                  sign: 1
                                }
                              },
                              whenTrue: {
                                type: "BlockStatement",
                                line: 1914,
                                column: 1,
                                body: [
                                  {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {type: "Ident", line: 1914, column: 18, name: "i"},
                                    op: "=",
                                    right: {
                                      type: "Const",
                                      line: 1914,
                                      column: 23,
                                      value: 0,
                                      sign: 1
                                    }
                                  },
                                  {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {type: "Ident", line: 1915, column: 10, name: "len"},
                                    op: "=",
                                    right: {
                                      type: "Call",
                                      line: 500,
                                      column: 11,
                                      func: {type: "Ident", line: 500, column: 11, name: "__num"},
                                      args: [{
                                        type: "Binary",
                                        line: 1915,
                                        column: 18,
                                        left: {type: "Ident", line: 1915, column: 18, name: "array"},
                                        op: ".",
                                        right: {type: "Const", line: 1915, column: 24, value: "length"}
                                      }]
                                    }
                                  },
                                  {
                                    type: "For",
                                    line: 1,
                                    column: 1,
                                    test: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 1916, column: 12, name: "i"},
                                      op: "<",
                                      right: {type: "Ident", line: 1916, column: 16, name: "len"}
                                    },
                                    step: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 1916, column: 21, name: "i"},
                                      op: "+=",
                                      right: {type: "Ident", line: 1916, column: 26, name: "step"}
                                    },
                                    body: {
                                      type: "Call",
                                      line: 1917,
                                      column: 9,
                                      func: {
                                        type: "Binary",
                                        line: 1917,
                                        column: 9,
                                        left: {type: "Ident", line: 1917, column: 9, name: "result"},
                                        op: ".",
                                        right: {type: "Const", line: 1917, column: 16, value: "push"}
                                      },
                                      args: [{
                                        type: "Binary",
                                        line: 1917,
                                        column: 21,
                                        left: {type: "Ident", line: 1917, column: 21, name: "array"},
                                        op: ".",
                                        right: {type: "Ident", line: 1917, column: 27, name: "i"}
                                      }]
                                    }
                                  }
                                ]
                              },
                              whenFalse: {
                                type: "BlockStatement",
                                line: 1919,
                                column: 1,
                                body: [
                                  {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {type: "Ident", line: 1919, column: 18, name: "i"},
                                    op: "=",
                                    right: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {
                                        type: "Call",
                                        line: 500,
                                        column: 11,
                                        func: {type: "Ident", line: 500, column: 11, name: "__num"},
                                        args: [{
                                          type: "Binary",
                                          line: 1919,
                                          column: 22,
                                          left: {type: "Ident", line: 1919, column: 22, name: "array"},
                                          op: ".",
                                          right: {type: "Const", line: 1919, column: 29, value: "length"}
                                        }]
                                      },
                                      op: "-",
                                      right: {type: "Const", line: 1919, column: 38, value: 1}
                                    }
                                  },
                                  {
                                    type: "For",
                                    line: 1,
                                    column: 1,
                                    test: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 1920, column: 12, name: "i"},
                                      op: ">=",
                                      right: {
                                        type: "Const",
                                        line: 1920,
                                        column: 18,
                                        value: 0,
                                        sign: 1
                                      }
                                    },
                                    step: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 1920, column: 20, name: "i"},
                                      op: "+=",
                                      right: {type: "Ident", line: 1920, column: 25, name: "step"}
                                    },
                                    body: {
                                      type: "Call",
                                      line: 1921,
                                      column: 9,
                                      func: {
                                        type: "Binary",
                                        line: 1921,
                                        column: 9,
                                        left: {type: "Ident", line: 1921, column: 9, name: "result"},
                                        op: ".",
                                        right: {type: "Const", line: 1921, column: 16, value: "push"}
                                      },
                                      args: [{
                                        type: "Binary",
                                        line: 1921,
                                        column: 21,
                                        left: {type: "Ident", line: 1921, column: 21, name: "array"},
                                        op: ".",
                                        right: {type: "Ident", line: 1921, column: 27, name: "i"}
                                      }]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              type: "Return",
                              line: 1922,
                              column: 5,
                              node: {type: "Ident", line: 1922, column: 5, name: "result"}
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{
              type: "generic",
              base: {type: "simple", name: "arrayBase"},
              args: [{type: "any"}]
            }]
          },
          dependencies: [
            "__num",
            "__slice",
            "__step",
            "__toArray",
            "__typeof",
            "array",
            "i",
            "len",
            "RangeError",
            "result",
            "step",
            "String",
            "TypeError"
          ]
        },
        __sliceStep: {
          helper: {
            type: "Func",
            line: 1924,
            column: 31,
            params: [
              {type: "Ident", line: 1924, column: 32, name: "array"},
              {type: "Ident", line: 1924, column: 38, name: "start"},
              {type: "Ident", line: 1924, column: 45, name: "end"},
              {type: "Ident", line: 1924, column: 58, name: "step"},
              {type: "Ident", line: 1924, column: 64, name: "inclusive"}
            ],
            variables: ["arr"],
            body: {
              type: "BlockStatement",
              line: 1925,
              column: 1,
              body: [
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 1925, column: 15, name: "step"},
                    op: "<",
                    right: {
                      type: "Const",
                      line: 1925,
                      column: 24,
                      value: 0,
                      sign: 1
                    }
                  },
                  whenTrue: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 1925, column: 6, name: "arr"},
                    op: "=",
                    right: {
                      type: "Call",
                      line: 1926,
                      column: 5,
                      func: {
                        type: "Binary",
                        line: 1926,
                        column: 5,
                        left: {type: "Ident", line: 1926, column: 5, name: "__slice"},
                        op: ".",
                        right: {type: "Const", line: 1926, column: 5, value: "call"}
                      },
                      args: [
                        {type: "Ident", line: 1926, column: 14, name: "array"},
                        {
                          type: "IfExpression",
                          line: 1,
                          column: 1,
                          test: {type: "Ident", line: 1926, column: 23, name: "inclusive"},
                          whenTrue: {type: "Ident", line: 1926, column: 38, name: "end"},
                          whenFalse: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Unary",
                              line: 1,
                              column: 1,
                              op: "+",
                              node: {type: "Ident", line: 1926, column: 47, name: "end"}
                            },
                            op: "+",
                            right: {type: "Const", line: 1926, column: 55, value: 1}
                          }
                        },
                        {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Unary",
                              line: 1,
                              column: 1,
                              op: "+",
                              node: {type: "Ident", line: 1926, column: 57, name: "start"}
                            },
                            op: "+",
                            right: {type: "Const", line: 1926, column: 67, value: 1}
                          },
                          op: "||",
                          right: {
                            type: "Const",
                            line: 1926,
                            column: 71,
                            value: 1,
                            infinite: true
                          }
                        }
                      ]
                    }
                  },
                  whenFalse: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 1925, column: 6, name: "arr"},
                    op: "=",
                    right: {
                      type: "Call",
                      line: 1928,
                      column: 5,
                      func: {
                        type: "Binary",
                        line: 1928,
                        column: 5,
                        left: {type: "Ident", line: 1928, column: 5, name: "__slice"},
                        op: ".",
                        right: {type: "Const", line: 1928, column: 5, value: "call"}
                      },
                      args: [
                        {type: "Ident", line: 1928, column: 14, name: "array"},
                        {type: "Ident", line: 1928, column: 20, name: "start"},
                        {
                          type: "IfExpression",
                          line: 1,
                          column: 1,
                          test: {type: "Ident", line: 1928, column: 30, name: "inclusive"},
                          whenTrue: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {
                                type: "Unary",
                                line: 1,
                                column: 1,
                                op: "+",
                                node: {type: "Ident", line: 1928, column: 45, name: "end"}
                              },
                              op: "+",
                              right: {type: "Const", line: 1928, column: 53, value: 1}
                            },
                            op: "||",
                            right: {
                              type: "Const",
                              line: 1928,
                              column: 57,
                              value: 1,
                              infinite: true
                            }
                          },
                          whenFalse: {type: "Ident", line: 1928, column: 71, name: "end"}
                        }
                      ]
                    }
                  }
                },
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 1929, column: 5, name: "step"},
                    op: "===",
                    right: {type: "Const", line: 1929, column: 14, value: 1}
                  },
                  whenTrue: {
                    type: "Return",
                    line: 1930,
                    column: 5,
                    node: {type: "Ident", line: 1930, column: 5, name: "arr"}
                  },
                  whenFalse: {
                    type: "IfStatement",
                    line: 1,
                    column: 1,
                    test: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 1931, column: 10, name: "step"},
                      op: "===",
                      right: {type: "Const", line: 1, column: 1, value: -1}
                    },
                    whenTrue: {
                      type: "Return",
                      line: 1932,
                      column: 5,
                      node: {
                        type: "Call",
                        line: 1932,
                        column: 5,
                        func: {
                          type: "Binary",
                          line: 1932,
                          column: 5,
                          left: {type: "Ident", line: 1932, column: 5, name: "arr"},
                          op: ".",
                          right: {type: "Const", line: 1932, column: 9, value: "reverse"}
                        }
                      }
                    },
                    whenFalse: {
                      type: "Return",
                      line: 1934,
                      column: 5,
                      node: {
                        type: "Call",
                        line: 1934,
                        column: 5,
                        func: {type: "Ident", line: 1934, column: 5, name: "__step"},
                        args: [
                          {type: "Ident", line: 1934, column: 12, name: "arr"},
                          {type: "Ident", line: 1934, column: 16, name: "step"}
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{
              type: "generic",
              base: {type: "simple", name: "arrayBase"},
              args: [{type: "any"}]
            }]
          },
          dependencies: [
            "__slice",
            "__sliceStep",
            "__step",
            "arr",
            "array",
            "end",
            "inclusive",
            "start",
            "step"
          ]
        },
        StopIteration: {
          helper: {
            type: "IfExpression",
            line: 1,
            column: 1,
            test: {
              type: "Binary",
              line: 1,
              column: 1,
              left: {
                type: "Binary",
                line: 2024,
                column: 33,
                left: {type: "Ident", line: 2024, column: 33, name: "GLOBAL"},
                op: ".",
                right: {type: "Const", line: 2024, column: 41, value: "StopIteration"}
              },
              op: "!=",
              right: {type: "Const", line: 100, column: 19, value: null}
            },
            whenTrue: {
              type: "Binary",
              line: 2025,
              column: 3,
              left: {type: "Ident", line: 2025, column: 3, name: "GLOBAL"},
              op: ".",
              right: {type: "Const", line: 2025, column: 10, value: "StopIteration"}
            },
            whenFalse: {
              type: "Call",
              line: 2027,
              column: 3,
              func: {type: "Ident", line: 2027, column: 3, name: "__freeze"},
              args: [{type: "Obj", line: 68158, column: 68160}]
            }
          },
          type: {type: "any"},
          dependencies: ["__freeze", "GLOBAL", "StopIteration"]
        },
        __keys: {
          helper: {
            type: "IfExpression",
            line: 1,
            column: 1,
            test: {
              type: "Binary",
              line: 1,
              column: 1,
              left: {
                type: "Unary",
                line: 1,
                column: 1,
                op: "typeof",
                node: {
                  type: "Binary",
                  line: 2194,
                  column: 39,
                  left: {type: "Ident", line: 2194, column: 39, name: "Object"},
                  op: ".",
                  right: {type: "Const", line: 2194, column: 47, value: "keys"}
                }
              },
              op: "===",
              right: {type: "Const", line: 124, column: 25, value: "function"}
            },
            whenTrue: {
              type: "Binary",
              line: 2195,
              column: 3,
              left: {type: "Ident", line: 2195, column: 3, name: "Object"},
              op: ".",
              right: {type: "Const", line: 2195, column: 10, value: "keys"}
            },
            whenFalse: {
              type: "Func",
              line: 2197,
              column: 4,
              params: [{type: "Ident", line: 2197, column: 5, name: "x"}],
              variables: ["key", "keys"],
              body: {
                type: "BlockStatement",
                line: 2198,
                column: 1,
                body: [
                  {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 2198, column: 8, name: "keys"},
                    op: "=",
                    right: {type: "Arr", line: 2198, column: 15}
                  },
                  {
                    type: "ForIn",
                    line: 1,
                    column: 1,
                    key: {type: "Ident", line: 2199, column: 8, name: "key"},
                    object: {type: "Ident", line: 2199, column: 15, name: "x"},
                    body: {
                      type: "IfStatement",
                      line: 1,
                      column: 1,
                      test: {
                        type: "Call",
                        line: 595,
                        column: 7,
                        func: {
                          type: "Binary",
                          line: 595,
                          column: 7,
                          left: {type: "Ident", line: 595, column: 7, name: "__owns"},
                          op: ".",
                          right: {type: "Const", line: 595, column: 7, value: "call"}
                        },
                        args: [
                          {type: "Ident", line: 2199, column: 15, name: "x"},
                          {type: "Ident", line: 2199, column: 8, name: "key"}
                        ]
                      },
                      whenTrue: {
                        type: "Call",
                        line: 2200,
                        column: 7,
                        func: {
                          type: "Binary",
                          line: 2200,
                          column: 7,
                          left: {type: "Ident", line: 2200, column: 7, name: "keys"},
                          op: ".",
                          right: {type: "Const", line: 2200, column: 12, value: "push"}
                        },
                        args: [{type: "Ident", line: 2200, column: 17, name: "key"}]
                      }
                    }
                  },
                  {
                    type: "Return",
                    line: 2201,
                    column: 5,
                    node: {type: "Ident", line: 2201, column: 5, name: "keys"}
                  }
                ]
              }
            }
          },
          type: {type: "any"},
          dependencies: [
            "__keys",
            "__owns",
            "key",
            "keys",
            "Object",
            "x"
          ]
        },
        __allkeys: {
          helper: {
            type: "Func",
            line: 2206,
            column: 28,
            params: [{type: "Ident", line: 2206, column: 29, name: "x"}],
            variables: ["key", "keys"],
            body: {
              type: "BlockStatement",
              line: 2207,
              column: 1,
              body: [
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2207, column: 6, name: "keys"},
                  op: "=",
                  right: {type: "Arr", line: 2207, column: 13}
                },
                {
                  type: "ForIn",
                  line: 1,
                  column: 1,
                  key: {type: "Ident", line: 2208, column: 6, name: "key"},
                  object: {type: "Ident", line: 2208, column: 16, name: "x"},
                  body: {
                    type: "Call",
                    line: 2209,
                    column: 5,
                    func: {
                      type: "Binary",
                      line: 2209,
                      column: 5,
                      left: {type: "Ident", line: 2209, column: 5, name: "keys"},
                      op: ".",
                      right: {type: "Const", line: 2209, column: 10, value: "push"}
                    },
                    args: [{type: "Ident", line: 2209, column: 15, name: "key"}]
                  }
                },
                {
                  type: "Return",
                  line: 2210,
                  column: 3,
                  node: {type: "Ident", line: 2210, column: 3, name: "keys"}
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{
              type: "generic",
              base: {type: "simple", name: "arrayBase"},
              args: [{type: "simple", name: "string"}]
            }]
          },
          dependencies: ["__allkeys", "key", "keys", "x"]
        },
        __new: {
          helper: {
            type: "Call",
            line: 3,
            column: 9,
            func: {
              type: "Func",
              line: 3,
              column: 12,
              variables: ["newCreators"],
              body: {
                type: "BlockStatement",
                line: 2216,
                column: 1,
                body: [
                  {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 2216, column: 6, name: "newCreators"},
                    op: "=",
                    right: {type: "Arr", line: 2216, column: 21}
                  },
                  {
                    type: "Return",
                    line: 2217,
                    column: 4,
                    node: {
                      type: "Func",
                      line: 2217,
                      column: 4,
                      params: [
                        {type: "Ident", line: 2217, column: 5, name: "Ctor"},
                        {type: "Ident", line: 2217, column: 10, name: "args"}
                      ],
                      variables: ["creator", "func", "i", "length"],
                      body: {
                        type: "BlockStatement",
                        line: 2218,
                        column: 1,
                        body: [
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2218, column: 8, name: "length"},
                            op: "=",
                            right: {
                              type: "Binary",
                              line: 2218,
                              column: 17,
                              left: {type: "Ident", line: 2218, column: 17, name: "args"},
                              op: ".",
                              right: {type: "Const", line: 2218, column: 23, value: "length"}
                            }
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2219, column: 16, name: "creator"},
                            op: "=",
                            right: {
                              type: "Binary",
                              line: 2219,
                              column: 26,
                              left: {type: "Ident", line: 2219, column: 26, name: "newCreators"},
                              op: ".",
                              right: {type: "Ident", line: 2219, column: 40, name: "length"}
                            }
                          },
                          {
                            type: "IfStatement",
                            line: 1,
                            column: 1,
                            test: {
                              type: "Unary",
                              line: 1,
                              column: 1,
                              op: "!",
                              node: {type: "Ident", line: 2220, column: 11, name: "creator"}
                            },
                            whenTrue: {
                              type: "BlockStatement",
                              line: 2221,
                              column: 1,
                              body: [
                                {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {type: "Ident", line: 2221, column: 10, name: "func"},
                                  op: "=",
                                  right: {
                                    type: "Arr",
                                    line: 2221,
                                    column: 17,
                                    elements: [{type: "Const", line: 2221, column: 19, value: "return new C("}]
                                  }
                                },
                                {
                                  type: "For",
                                  line: 1,
                                  column: 1,
                                  init: {
                                    type: "BlockExpression",
                                    line: 0,
                                    column: 0,
                                    body: [
                                      {
                                        type: "Binary",
                                        line: 1,
                                        column: 1,
                                        left: {type: "Ident", line: 2222, column: 10, name: "i"},
                                        op: "=",
                                        right: {
                                          type: "Const",
                                          line: 2222,
                                          column: 16,
                                          value: 0,
                                          sign: 1
                                        }
                                      },
                                      {
                                        type: "Call",
                                        line: 500,
                                        column: 11,
                                        func: {type: "Ident", line: 500, column: 11, name: "__num"},
                                        args: [{type: "Ident", line: 2222, column: 21, name: "length"}]
                                      }
                                    ]
                                  },
                                  test: {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {type: "Ident", line: 2222, column: 10, name: "i"},
                                    op: "<",
                                    right: {type: "Ident", line: 2222, column: 21, name: "length"}
                                  },
                                  step: {
                                    type: "Unary",
                                    line: 1,
                                    column: 1,
                                    op: "++",
                                    node: {type: "Ident", line: 2222, column: 10, name: "i"}
                                  },
                                  body: {
                                    type: "BlockStatement",
                                    line: 2223,
                                    column: 1,
                                    body: [
                                      {
                                        type: "IfStatement",
                                        line: 1,
                                        column: 1,
                                        test: {
                                          type: "Binary",
                                          line: 1,
                                          column: 1,
                                          left: {type: "Ident", line: 2223, column: 11, name: "i"},
                                          op: ">",
                                          right: {
                                            type: "Const",
                                            line: 2223,
                                            column: 16,
                                            value: 0,
                                            sign: 1
                                          }
                                        },
                                        whenTrue: {
                                          type: "Call",
                                          line: 2224,
                                          column: 11,
                                          func: {
                                            type: "Binary",
                                            line: 2224,
                                            column: 11,
                                            left: {type: "Ident", line: 2224, column: 11, name: "func"},
                                            op: ".",
                                            right: {type: "Const", line: 2224, column: 16, value: "push"}
                                          },
                                          args: [{type: "Const", line: 2224, column: 21, value: ", "}]
                                        }
                                      },
                                      {
                                        type: "Call",
                                        line: 2225,
                                        column: 9,
                                        func: {
                                          type: "Binary",
                                          line: 2225,
                                          column: 9,
                                          left: {type: "Ident", line: 2225, column: 9, name: "func"},
                                          op: ".",
                                          right: {type: "Const", line: 2225, column: 14, value: "push"}
                                        },
                                        args: [
                                          {type: "Const", line: 2225, column: 19, value: "a["},
                                          {type: "Ident", line: 2225, column: 24, name: "i"},
                                          {type: "Const", line: 2225, column: 28, value: "]"}
                                        ]
                                      }
                                    ]
                                  }
                                },
                                {
                                  type: "Call",
                                  line: 2226,
                                  column: 7,
                                  func: {
                                    type: "Binary",
                                    line: 2226,
                                    column: 7,
                                    left: {type: "Ident", line: 2226, column: 7, name: "func"},
                                    op: ".",
                                    right: {type: "Const", line: 2226, column: 12, value: "push"}
                                  },
                                  args: [{type: "Const", line: 2226, column: 17, value: ");"}]
                                },
                                {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {type: "Ident", line: 2227, column: 7, name: "creator"},
                                  op: "=",
                                  right: {
                                    type: "Call",
                                    line: 2227,
                                    column: 17,
                                    func: {type: "Ident", line: 2227, column: 17, name: "Function"},
                                    args: [
                                      {type: "Const", line: 2227, column: 27, value: "C"},
                                      {type: "Const", line: 2227, column: 32, value: "a"},
                                      {
                                        type: "Call",
                                        line: 2227,
                                        column: 36,
                                        func: {
                                          type: "Binary",
                                          line: 2227,
                                          column: 36,
                                          left: {type: "Ident", line: 2227, column: 36, name: "func"},
                                          op: ".",
                                          right: {type: "Const", line: 2227, column: 42, value: "join"}
                                        },
                                        args: [{type: "Const", line: 2227, column: 47, value: ""}]
                                      }
                                    ]
                                  }
                                },
                                {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {
                                    type: "Binary",
                                    line: 2228,
                                    column: 19,
                                    left: {type: "Ident", line: 2228, column: 7, name: "newCreators"},
                                    op: ".",
                                    right: {type: "Ident", line: 2228, column: 20, name: "length"}
                                  },
                                  op: "=",
                                  right: {type: "Ident", line: 2228, column: 30, name: "creator"}
                                }
                              ]
                            }
                          },
                          {
                            type: "Return",
                            line: 2229,
                            column: 5,
                            node: {
                              type: "Call",
                              line: 2229,
                              column: 5,
                              func: {type: "Ident", line: 2229, column: 5, name: "creator"},
                              args: [
                                {type: "Ident", line: 2229, column: 13, name: "Ctor"},
                                {type: "Ident", line: 2229, column: 18, name: "args"}
                              ]
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "any"}]
          },
          dependencies: [
            "__new",
            "__num",
            "args",
            "creator",
            "Ctor",
            "func",
            "Function",
            "i",
            "length",
            "newCreators"
          ]
        },
        __instanceofsome: {
          helper: {
            type: "Func",
            line: 2231,
            column: 35,
            params: [
              {type: "Ident", line: 2231, column: 36, name: "value"},
              {type: "Ident", line: 2231, column: 42, name: "array"}
            ],
            body: {
              type: "Return",
              line: 3,
              column: 9,
              node: {
                type: "Call",
                line: 3,
                column: 9,
                func: {
                  type: "Func",
                  line: 3,
                  column: 12,
                  variables: ["_arr", "_i", "item"],
                  body: {
                    type: "BlockStatement",
                    line: 0,
                    column: 0,
                    body: [
                      {
                        type: "For",
                        line: 1,
                        column: 1,
                        init: {
                          type: "BlockExpression",
                          line: 0,
                          column: 0,
                          body: [
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 1, column: 1, name: "_arr"},
                              op: "=",
                              right: {
                                type: "Call",
                                line: 1285,
                                column: 22,
                                func: {type: "Ident", line: 1285, column: 22, name: "__toArray"},
                                args: [{type: "Ident", line: 2232, column: 19, name: "array"}]
                              }
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 1, column: 1, name: "_i"},
                              op: "=",
                              right: {
                                type: "Binary",
                                line: 1324,
                                column: 49,
                                left: {type: "Ident", line: 1, column: 1, name: "_arr"},
                                op: ".",
                                right: {type: "Const", line: 1324, column: 56, value: "length"}
                              }
                            }
                          ]
                        },
                        test: {
                          type: "Unary",
                          line: 1,
                          column: 1,
                          op: "--post",
                          node: {type: "Ident", line: 1, column: 1, name: "_i"}
                        },
                        body: {
                          type: "BlockStatement",
                          line: 1407,
                          column: 1,
                          body: [
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2232, column: 11, name: "item"},
                              op: "=",
                              right: {
                                type: "Binary",
                                line: 1288,
                                column: 75,
                                left: {type: "Ident", line: 1, column: 1, name: "_arr"},
                                op: ".",
                                right: {type: "Ident", line: 1, column: 1, name: "_i"}
                              }
                            },
                            {
                              type: "IfStatement",
                              line: 1,
                              column: 1,
                              test: {
                                type: "Binary",
                                line: 1,
                                column: 1,
                                left: {type: "Ident", line: 2233, column: 5, name: "value"},
                                op: "instanceof",
                                right: {type: "Ident", line: 2233, column: 21, name: "item"}
                              },
                              whenTrue: {
                                type: "Return",
                                line: 1,
                                column: 1,
                                node: {type: "Const", line: 983, column: 21, value: true}
                              }
                            }
                          ]
                        }
                      },
                      {
                        type: "Return",
                        line: 1,
                        column: 1,
                        node: {type: "Const", line: 984, column: 64, value: false}
                      }
                    ]
                  }
                }
              }
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "simple", name: "boolean"}]
          },
          dependencies: [
            "__instanceofsome",
            "__toArray",
            "array",
            "item",
            "value"
          ]
        },
        __makeInstanceof: {
          helper: {
            type: "Call",
            line: 3,
            column: 9,
            func: {
              type: "Func",
              line: 3,
              column: 12,
              body: {
                type: "BlockStatement",
                line: 2236,
                column: 1,
                body: [
                  {
                    type: "Func",
                    line: 1,
                    column: 1,
                    name: {type: "Ident", line: 2236, column: 6, name: "retTrue"},
                    body: {
                      type: "Return",
                      line: 2236,
                      column: 21,
                      node: {type: "Const", line: 2236, column: 21, value: true}
                    }
                  },
                  {
                    type: "Func",
                    line: 1,
                    column: 1,
                    name: {type: "Ident", line: 2237, column: 6, name: "str"},
                    params: [{type: "Ident", line: 2237, column: 14, name: "x"}],
                    body: {
                      type: "Return",
                      line: 1,
                      column: 1,
                      node: {
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {
                          type: "Unary",
                          line: 1,
                          column: 1,
                          op: "typeof",
                          node: {type: "Ident", line: 2237, column: 14, name: "x"}
                        },
                        op: "===",
                        right: {type: "Const", line: 115, column: 25, value: "string"}
                      }
                    }
                  },
                  {
                    type: "Func",
                    line: 1,
                    column: 1,
                    name: {type: "Ident", line: 2238, column: 6, name: "num"},
                    params: [{type: "Ident", line: 2238, column: 14, name: "x"}],
                    body: {
                      type: "Return",
                      line: 1,
                      column: 1,
                      node: {
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {
                          type: "Unary",
                          line: 1,
                          column: 1,
                          op: "typeof",
                          node: {type: "Ident", line: 2238, column: 14, name: "x"}
                        },
                        op: "===",
                        right: {type: "Const", line: 118, column: 25, value: "number"}
                      }
                    }
                  },
                  {
                    type: "Func",
                    line: 1,
                    column: 1,
                    name: {type: "Ident", line: 2239, column: 6, name: "func"},
                    params: [{type: "Ident", line: 2239, column: 15, name: "x"}],
                    body: {
                      type: "Return",
                      line: 1,
                      column: 1,
                      node: {
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {
                          type: "Unary",
                          line: 1,
                          column: 1,
                          op: "typeof",
                          node: {type: "Ident", line: 2239, column: 15, name: "x"}
                        },
                        op: "===",
                        right: {type: "Const", line: 124, column: 25, value: "function"}
                      }
                    }
                  },
                  {
                    type: "Func",
                    line: 1,
                    column: 1,
                    name: {type: "Ident", line: 2240, column: 6, name: "bool"},
                    params: [{type: "Ident", line: 2240, column: 15, name: "x"}],
                    body: {
                      type: "Return",
                      line: 1,
                      column: 1,
                      node: {
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {
                          type: "Unary",
                          line: 1,
                          column: 1,
                          op: "typeof",
                          node: {type: "Ident", line: 2240, column: 15, name: "x"}
                        },
                        op: "===",
                        right: {type: "Const", line: 121, column: 25, value: "boolean"}
                      }
                    }
                  },
                  {
                    type: "Return",
                    line: 2241,
                    column: 4,
                    node: {
                      type: "Func",
                      line: 2241,
                      column: 4,
                      params: [{type: "Ident", line: 2241, column: 5, name: "ctor"}],
                      body: {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 2242, column: 11, name: "ctor"},
                          op: "==",
                          right: {type: "Const", line: 100, column: 19, value: null}
                        },
                        whenTrue: {
                          type: "Return",
                          line: 2243,
                          column: 7,
                          node: {type: "Ident", line: 2243, column: 7, name: "retTrue"}
                        },
                        whenFalse: {
                          type: "IfStatement",
                          line: 1,
                          column: 1,
                          test: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2244, column: 12, name: "ctor"},
                            op: "===",
                            right: {type: "Ident", line: 2244, column: 20, name: "String"}
                          },
                          whenTrue: {
                            type: "Return",
                            line: 2245,
                            column: 7,
                            node: {type: "Ident", line: 2245, column: 7, name: "str"}
                          },
                          whenFalse: {
                            type: "IfStatement",
                            line: 1,
                            column: 1,
                            test: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2246, column: 12, name: "ctor"},
                              op: "===",
                              right: {type: "Ident", line: 2246, column: 20, name: "Number"}
                            },
                            whenTrue: {
                              type: "Return",
                              line: 2247,
                              column: 7,
                              node: {type: "Ident", line: 2247, column: 7, name: "num"}
                            },
                            whenFalse: {
                              type: "IfStatement",
                              line: 1,
                              column: 1,
                              test: {
                                type: "Binary",
                                line: 1,
                                column: 1,
                                left: {type: "Ident", line: 2248, column: 12, name: "ctor"},
                                op: "===",
                                right: {type: "Ident", line: 2248, column: 20, name: "Function"}
                              },
                              whenTrue: {
                                type: "Return",
                                line: 2249,
                                column: 7,
                                node: {type: "Ident", line: 2249, column: 7, name: "func"}
                              },
                              whenFalse: {
                                type: "IfStatement",
                                line: 1,
                                column: 1,
                                test: {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {type: "Ident", line: 2250, column: 12, name: "ctor"},
                                  op: "===",
                                  right: {type: "Ident", line: 2250, column: 20, name: "Boolean"}
                                },
                                whenTrue: {
                                  type: "Return",
                                  line: 2251,
                                  column: 7,
                                  node: {type: "Ident", line: 2251, column: 7, name: "bool"}
                                },
                                whenFalse: {
                                  type: "IfStatement",
                                  line: 1,
                                  column: 1,
                                  test: {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {type: "Ident", line: 2252, column: 12, name: "ctor"},
                                    op: "===",
                                    right: {type: "Ident", line: 2252, column: 20, name: "Array"}
                                  },
                                  whenTrue: {
                                    type: "Return",
                                    line: 2253,
                                    column: 7,
                                    node: {type: "Ident", line: 2253, column: 7, name: "__isArray"}
                                  },
                                  whenFalse: {
                                    type: "IfStatement",
                                    line: 1,
                                    column: 1,
                                    test: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 2254, column: 12, name: "ctor"},
                                      op: "===",
                                      right: {type: "Ident", line: 2254, column: 20, name: "Object"}
                                    },
                                    whenTrue: {
                                      type: "Return",
                                      line: 2255,
                                      column: 7,
                                      node: {type: "Ident", line: 2255, column: 7, name: "__isObject"}
                                    },
                                    whenFalse: {
                                      type: "Return",
                                      line: 2257,
                                      column: 8,
                                      node: {
                                        type: "Func",
                                        line: 2257,
                                        column: 8,
                                        params: [{type: "Ident", line: 2257, column: 8, name: "_x"}],
                                        body: {
                                          type: "Return",
                                          line: 1,
                                          column: 1,
                                          node: {
                                            type: "Binary",
                                            line: 1,
                                            column: 1,
                                            left: {type: "Ident", line: 2257, column: 8, name: "_x"},
                                            op: "instanceof",
                                            right: {type: "Ident", line: 2257, column: 18, name: "ctor"}
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{
              type: "generic",
              base: {type: "simple", name: "functionBase"},
              args: [{type: "simple", name: "boolean"}]
            }]
          },
          dependencies: [
            "__isArray",
            "__isObject",
            "__makeInstanceof",
            "Array",
            "bool",
            "Boolean",
            "ctor",
            "func",
            "Function",
            "num",
            "Number",
            "Object",
            "retTrue",
            "str",
            "String",
            "x"
          ]
        },
        __name: {
          helper: {
            type: "Func",
            line: 1832,
            column: 1,
            params: [{type: "Ident", line: 2259, column: 26, name: "func"}],
            body: {
              type: "BlockStatement",
              line: 1832,
              column: 1,
              body: [
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 606,
                    column: 18,
                    left: {
                      type: "Unary",
                      line: 1,
                      column: 1,
                      op: "typeof",
                      node: {type: "Ident", line: 2259, column: 26, name: "func"}
                    },
                    op: "!==",
                    right: {type: "Const", line: 124, column: 25, value: "function"}
                  },
                  whenTrue: {
                    type: "Throw",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 1620,
                      column: 18,
                      func: {type: "Ident", line: 1620, column: 18, name: "TypeError"},
                      args: [{
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Const", line: 1, column: 1, value: "Expected func to be a Function, got "},
                        op: "+",
                        right: {
                          type: "Call",
                          line: 470,
                          column: 49,
                          func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                          args: [{type: "Ident", line: 2259, column: 26, name: "func"}]
                        }
                      }]
                    }
                  }
                },
                {
                  type: "Return",
                  line: 1,
                  column: 1,
                  node: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {
                        type: "Binary",
                        line: 2259,
                        column: 50,
                        left: {type: "Ident", line: 2259, column: 50, name: "func"},
                        op: ".",
                        right: {type: "Const", line: 2259, column: 56, value: "displayName"}
                      },
                      op: "||",
                      right: {
                        type: "Binary",
                        line: 2259,
                        column: 71,
                        left: {type: "Ident", line: 2259, column: 71, name: "func"},
                        op: ".",
                        right: {type: "Const", line: 2259, column: 77, value: "name"}
                      }
                    },
                    op: "||",
                    right: {type: "Const", line: 2259, column: 85, value: ""}
                  }
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "simple", name: "string"}]
          },
          dependencies: ["__name", "__typeof", "func", "TypeError"]
        },
        __once: {
          helper: {
            type: "Func",
            line: 2327,
            column: 25,
            params: [{type: "Ident", line: 2327, column: 33, name: "func"}],
            body: {
              type: "BlockStatement",
              line: 2328,
              column: 1,
              body: [
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {
                      type: "Unary",
                      line: 1,
                      column: 1,
                      op: "typeof",
                      node: {type: "Ident", line: 2328, column: 22, name: "func"}
                    },
                    op: "!==",
                    right: {type: "Const", line: 124, column: 25, value: "function"}
                  },
                  whenTrue: {
                    type: "Throw",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 2329,
                      column: 10,
                      func: {type: "Ident", line: 2329, column: 10, name: "Error"},
                      args: [{
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Const", line: 2329, column: 17, value: "Expected func to be a Function, got "},
                        op: "+",
                        right: {
                          type: "Call",
                          line: 470,
                          column: 49,
                          func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                          args: [{type: "Ident", line: 2329, column: 63, name: "func"}]
                        }
                      }]
                    }
                  }
                },
                {
                  type: "Return",
                  line: 2330,
                  column: 4,
                  node: {
                    type: "Func",
                    line: 2330,
                    column: 4,
                    variables: ["f"],
                    body: {
                      type: "BlockStatement",
                      line: 1,
                      column: 1,
                      body: [
                        {type: "Ident", line: 2330, column: 10, name: "func"},
                        {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 2331, column: 8, name: "f"},
                          op: "=",
                          right: {type: "Ident", line: 2331, column: 12, name: "func"}
                        },
                        {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 2332, column: 5, name: "func"},
                          op: "=",
                          right: {type: "Const", line: 2332, column: 12, value: null}
                        },
                        {
                          type: "Return",
                          line: 2333,
                          column: 5,
                          node: {
                            type: "Call",
                            line: 2333,
                            column: 5,
                            func: {
                              type: "Binary",
                              line: 2333,
                              column: 5,
                              left: {type: "Ident", line: 2333, column: 5, name: "f"},
                              op: ".",
                              right: {type: "Const", line: 2333, column: 5, value: "apply"}
                            },
                            args: [
                              {type: "This", line: 2333, column: 8},
                              {type: "Arguments", line: 2333, column: 17}
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{
              type: "generic",
              base: {type: "simple", name: "functionBase"},
              args: [{type: "any"}]
            }]
          },
          dependencies: [
            "__once",
            "__toArray",
            "__typeof",
            "Error",
            "f",
            "func"
          ]
        },
        __async: {
          helper: {
            type: "Func",
            line: 2337,
            column: 26,
            params: [
              {type: "Ident", line: 2337, column: 34, name: "limit"},
              {type: "Ident", line: 2337, column: 41, name: "length"},
              {type: "Ident", line: 2337, column: 49, name: "onValue"},
              {type: "Ident", line: 2337, column: 67, name: "onComplete"}
            ],
            variables: ["broken", "index", "slotsUsed", "sync"],
            body: {
              type: "BlockStatement",
              line: 2338,
              column: 1,
              body: [
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 2338, column: 5, name: "length"},
                    op: "<=",
                    right: {
                      type: "Const",
                      line: 2338,
                      column: 17,
                      value: 0,
                      sign: 1
                    }
                  },
                  whenTrue: {
                    type: "Return",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 2339,
                      column: 11,
                      func: {type: "Ident", line: 2339, column: 11, name: "onComplete"},
                      args: [{type: "Const", line: 2339, column: 24, value: null}]
                    }
                  }
                },
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 2340, column: 5, name: "limit"},
                      op: "<",
                      right: {type: "Const", line: 2340, column: 15, value: 1}
                    },
                    op: "||",
                    right: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 2340, column: 19, name: "limit"},
                      op: "!==",
                      right: {type: "Ident", line: 2340, column: 28, name: "limit"}
                    }
                  },
                  whenTrue: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 2341, column: 5, name: "limit"},
                    op: "=",
                    right: {
                      type: "Const",
                      line: 2341,
                      column: 13,
                      value: 1,
                      infinite: true
                    }
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2343, column: 14, name: "broken"},
                  op: "=",
                  right: {type: "Const", line: 2343, column: 23, value: null}
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2344, column: 14, name: "slotsUsed"},
                  op: "=",
                  right: {
                    type: "Const",
                    line: 2344,
                    column: 28,
                    value: 0,
                    sign: 1
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2345, column: 14, name: "sync"},
                  op: "=",
                  right: {type: "Const", line: 2345, column: 21, value: false}
                },
                {
                  type: "Func",
                  line: 1,
                  column: 1,
                  name: {type: "Ident", line: 2346, column: 6, name: "onValueCallback"},
                  params: [{type: "Ident", line: 2346, column: 25, name: "err"}],
                  body: {
                    type: "BlockStatement",
                    line: 2347,
                    column: 1,
                    body: [
                      {
                        type: "Unary",
                        line: 1,
                        column: 1,
                        op: "--",
                        node: {type: "Ident", line: 2347, column: 5, name: "slotsUsed"}
                      },
                      {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2348, column: 7, name: "err"},
                            op: "!=",
                            right: {type: "Const", line: 100, column: 19, value: null}
                          },
                          op: "&&",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2348, column: 20, name: "broken"},
                            op: "==",
                            right: {type: "Const", line: 100, column: 19, value: null}
                          }
                        },
                        whenTrue: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 2349, column: 7, name: "broken"},
                          op: "=",
                          right: {type: "Ident", line: 2349, column: 16, name: "err"}
                        }
                      },
                      {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Unary",
                          line: 1,
                          column: 1,
                          op: "!",
                          node: {type: "Ident", line: 2350, column: 11, name: "sync"}
                        },
                        whenTrue: {
                          type: "Return",
                          line: 2351,
                          column: 7,
                          node: {
                            type: "Call",
                            line: 2351,
                            column: 7,
                            func: {type: "Ident", line: 2351, column: 7, name: "next"}
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2352, column: 14, name: "index"},
                  op: "=",
                  right: {
                    type: "Const",
                    line: 2352,
                    column: 23,
                    value: 0,
                    sign: 1
                  }
                },
                {
                  type: "Func",
                  line: 1,
                  column: 1,
                  name: {type: "Ident", line: 2353, column: 6, name: "next"},
                  variables: ["f", "i"],
                  body: {
                    type: "BlockStatement",
                    line: 2354,
                    column: 1,
                    body: [
                      {
                        type: "For",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2354, column: 14, name: "broken"},
                              op: "==",
                              right: {type: "Const", line: 100, column: 19, value: null}
                            },
                            op: "&&",
                            right: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2354, column: 26, name: "slotsUsed"},
                              op: "<",
                              right: {type: "Ident", line: 2354, column: 40, name: "limit"}
                            }
                          },
                          op: "&&",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2354, column: 50, name: "index"},
                            op: "<",
                            right: {type: "Ident", line: 2354, column: 59, name: "length"}
                          }
                        },
                        body: {
                          type: "BlockStatement",
                          line: 2355,
                          column: 1,
                          body: [
                            {
                              type: "Unary",
                              line: 1,
                              column: 1,
                              op: "++",
                              node: {type: "Ident", line: 2355, column: 7, name: "slotsUsed"}
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2356, column: 10, name: "i"},
                              op: "=",
                              right: {type: "Ident", line: 2356, column: 14, name: "index"}
                            },
                            {
                              type: "Unary",
                              line: 1,
                              column: 1,
                              op: "++",
                              node: {type: "Ident", line: 2357, column: 7, name: "index"}
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2358, column: 7, name: "sync"},
                              op: "=",
                              right: {type: "Const", line: 2358, column: 14, value: true}
                            },
                            {
                              type: "Call",
                              line: 2359,
                              column: 7,
                              func: {type: "Ident", line: 2359, column: 7, name: "onValue"},
                              args: [
                                {type: "Ident", line: 2359, column: 16, name: "i"},
                                {
                                  type: "Call",
                                  line: 2359,
                                  column: 18,
                                  func: {type: "Ident", line: 2359, column: 18, name: "__once"},
                                  args: [{type: "Ident", line: 2359, column: 26, name: "onValueCallback"}]
                                }
                              ]
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2360, column: 7, name: "sync"},
                              op: "=",
                              right: {type: "Const", line: 2360, column: 14, value: false}
                            }
                          ]
                        }
                      },
                      {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2361, column: 7, name: "broken"},
                            op: "!=",
                            right: {type: "Const", line: 100, column: 19, value: null}
                          },
                          op: "||",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2361, column: 18, name: "slotsUsed"},
                            op: "===",
                            right: {
                              type: "Const",
                              line: 2361,
                              column: 33,
                              value: 0,
                              sign: 1
                            }
                          }
                        },
                        whenTrue: {
                          type: "BlockStatement",
                          line: 2362,
                          column: 1,
                          body: [
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2362, column: 10, name: "f"},
                              op: "=",
                              right: {type: "Ident", line: 2362, column: 14, name: "onComplete"}
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2363, column: 7, name: "onComplete"},
                              op: "=",
                              right: {type: "Const", line: 2363, column: 21}
                            },
                            {
                              type: "IfStatement",
                              line: 1,
                              column: 1,
                              test: {type: "Ident", line: 2364, column: 9, name: "f"},
                              whenTrue: {
                                type: "Return",
                                line: 2365,
                                column: 9,
                                node: {
                                  type: "Call",
                                  line: 2365,
                                  column: 9,
                                  func: {type: "Ident", line: 2365, column: 9, name: "f"},
                                  args: [{type: "Ident", line: 2365, column: 11, name: "broken"}]
                                }
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  type: "Return",
                  line: 2366,
                  column: 3,
                  node: {
                    type: "Call",
                    line: 2366,
                    column: 3,
                    func: {type: "Ident", line: 2366, column: 3, name: "next"}
                  }
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "any"}]
          },
          dependencies: [
            "__async",
            "__once",
            "broken",
            "err",
            "f",
            "i",
            "index",
            "length",
            "limit",
            "next",
            "onComplete",
            "onValue",
            "onValueCallback",
            "slotsUsed",
            "sync"
          ]
        },
        __asyncResult: {
          helper: {
            type: "Func",
            line: 2368,
            column: 33,
            params: [
              {type: "Ident", line: 2368, column: 41, name: "limit"},
              {type: "Ident", line: 2368, column: 48, name: "length"},
              {type: "Ident", line: 2368, column: 56, name: "onValue"},
              {type: "Ident", line: 2368, column: 74, name: "onComplete"}
            ],
            variables: [
              "broken",
              "index",
              "result",
              "slotsUsed",
              "sync"
            ],
            body: {
              type: "BlockStatement",
              line: 2369,
              column: 1,
              body: [
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 2369, column: 5, name: "length"},
                    op: "<=",
                    right: {
                      type: "Const",
                      line: 2369,
                      column: 17,
                      value: 0,
                      sign: 1
                    }
                  },
                  whenTrue: {
                    type: "Return",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 2370,
                      column: 11,
                      func: {type: "Ident", line: 2370, column: 11, name: "onComplete"},
                      args: [
                        {type: "Const", line: 2370, column: 24, value: null},
                        {type: "Arr", line: 2370, column: 29}
                      ]
                    }
                  }
                },
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 2371, column: 5, name: "limit"},
                      op: "<",
                      right: {type: "Const", line: 2371, column: 15, value: 1}
                    },
                    op: "||",
                    right: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 2371, column: 19, name: "limit"},
                      op: "!==",
                      right: {type: "Ident", line: 2371, column: 28, name: "limit"}
                    }
                  },
                  whenTrue: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 2372, column: 5, name: "limit"},
                    op: "=",
                    right: {
                      type: "Const",
                      line: 2372,
                      column: 13,
                      value: 1,
                      infinite: true
                    }
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2374, column: 14, name: "broken"},
                  op: "=",
                  right: {type: "Const", line: 2374, column: 23, value: null}
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2375, column: 14, name: "slotsUsed"},
                  op: "=",
                  right: {
                    type: "Const",
                    line: 2375,
                    column: 28,
                    value: 0,
                    sign: 1
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2376, column: 14, name: "sync"},
                  op: "=",
                  right: {type: "Const", line: 2376, column: 21, value: false}
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2377, column: 6, name: "result"},
                  op: "=",
                  right: {type: "Arr", line: 2377, column: 15}
                },
                {
                  type: "Func",
                  line: 1,
                  column: 1,
                  name: {type: "Ident", line: 2378, column: 6, name: "onValueCallback"},
                  params: [
                    {type: "Ident", line: 2378, column: 25, name: "err"},
                    {type: "Ident", line: 2378, column: 29, name: "value"}
                  ],
                  body: {
                    type: "BlockStatement",
                    line: 2379,
                    column: 1,
                    body: [
                      {
                        type: "Unary",
                        line: 1,
                        column: 1,
                        op: "--",
                        node: {type: "Ident", line: 2379, column: 5, name: "slotsUsed"}
                      },
                      {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2380, column: 7, name: "err"},
                            op: "!=",
                            right: {type: "Const", line: 100, column: 19, value: null}
                          },
                          op: "&&",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2380, column: 20, name: "broken"},
                            op: "==",
                            right: {type: "Const", line: 100, column: 19, value: null}
                          }
                        },
                        whenTrue: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 2381, column: 7, name: "broken"},
                          op: "=",
                          right: {type: "Ident", line: 2381, column: 16, name: "err"}
                        }
                      },
                      {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2382, column: 11, name: "broken"},
                            op: "==",
                            right: {type: "Const", line: 100, column: 19, value: null}
                          },
                          op: "&&",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 2382,
                              column: 23,
                              left: {type: "Arguments", line: 2382, column: 23},
                              op: ".",
                              right: {type: "Const", line: 2382, column: 34, value: "length"}
                            },
                            op: ">",
                            right: {type: "Const", line: 2382, column: 44, value: 1}
                          }
                        },
                        whenTrue: {
                          type: "Call",
                          line: 2383,
                          column: 7,
                          func: {
                            type: "Binary",
                            line: 2383,
                            column: 7,
                            left: {type: "Ident", line: 2383, column: 7, name: "result"},
                            op: ".",
                            right: {type: "Const", line: 2383, column: 14, value: "push"}
                          },
                          args: [{type: "Ident", line: 2383, column: 19, name: "value"}]
                        }
                      },
                      {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Unary",
                          line: 1,
                          column: 1,
                          op: "!",
                          node: {type: "Ident", line: 2384, column: 11, name: "sync"}
                        },
                        whenTrue: {
                          type: "Return",
                          line: 2385,
                          column: 7,
                          node: {
                            type: "Call",
                            line: 2385,
                            column: 7,
                            func: {type: "Ident", line: 2385, column: 7, name: "next"}
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2386, column: 14, name: "index"},
                  op: "=",
                  right: {
                    type: "Const",
                    line: 2386,
                    column: 23,
                    value: 0,
                    sign: 1
                  }
                },
                {
                  type: "Func",
                  line: 1,
                  column: 1,
                  name: {type: "Ident", line: 2387, column: 6, name: "next"},
                  variables: ["f", "i"],
                  body: {
                    type: "BlockStatement",
                    line: 2388,
                    column: 1,
                    body: [
                      {
                        type: "For",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2388, column: 14, name: "broken"},
                              op: "==",
                              right: {type: "Const", line: 100, column: 19, value: null}
                            },
                            op: "&&",
                            right: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2388, column: 26, name: "slotsUsed"},
                              op: "<",
                              right: {type: "Ident", line: 2388, column: 40, name: "limit"}
                            }
                          },
                          op: "&&",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2388, column: 50, name: "index"},
                            op: "<",
                            right: {type: "Ident", line: 2388, column: 59, name: "length"}
                          }
                        },
                        body: {
                          type: "BlockStatement",
                          line: 2389,
                          column: 1,
                          body: [
                            {
                              type: "Unary",
                              line: 1,
                              column: 1,
                              op: "++",
                              node: {type: "Ident", line: 2389, column: 7, name: "slotsUsed"}
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2390, column: 10, name: "i"},
                              op: "=",
                              right: {type: "Ident", line: 2390, column: 14, name: "index"}
                            },
                            {
                              type: "Unary",
                              line: 1,
                              column: 1,
                              op: "++",
                              node: {type: "Ident", line: 2391, column: 7, name: "index"}
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2392, column: 7, name: "sync"},
                              op: "=",
                              right: {type: "Const", line: 2392, column: 14, value: true}
                            },
                            {
                              type: "Call",
                              line: 2393,
                              column: 7,
                              func: {type: "Ident", line: 2393, column: 7, name: "onValue"},
                              args: [
                                {type: "Ident", line: 2393, column: 16, name: "i"},
                                {
                                  type: "Call",
                                  line: 2393,
                                  column: 18,
                                  func: {type: "Ident", line: 2393, column: 18, name: "__once"},
                                  args: [{type: "Ident", line: 2393, column: 26, name: "onValueCallback"}]
                                }
                              ]
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2394, column: 7, name: "sync"},
                              op: "=",
                              right: {type: "Const", line: 2394, column: 14, value: false}
                            }
                          ]
                        }
                      },
                      {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2395, column: 7, name: "broken"},
                            op: "!=",
                            right: {type: "Const", line: 100, column: 19, value: null}
                          },
                          op: "||",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2395, column: 18, name: "slotsUsed"},
                            op: "===",
                            right: {
                              type: "Const",
                              line: 2395,
                              column: 33,
                              value: 0,
                              sign: 1
                            }
                          }
                        },
                        whenTrue: {
                          type: "BlockStatement",
                          line: 2396,
                          column: 1,
                          body: [
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2396, column: 10, name: "f"},
                              op: "=",
                              right: {type: "Ident", line: 2396, column: 14, name: "onComplete"}
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2397, column: 7, name: "onComplete"},
                              op: "=",
                              right: {type: "Const", line: 2397, column: 21}
                            },
                            {
                              type: "IfStatement",
                              line: 1,
                              column: 1,
                              test: {type: "Ident", line: 2398, column: 9, name: "f"},
                              whenTrue: {
                                type: "IfStatement",
                                line: 1,
                                column: 1,
                                test: {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {type: "Ident", line: 2399, column: 11, name: "broken"},
                                  op: "!=",
                                  right: {type: "Const", line: 100, column: 19, value: null}
                                },
                                whenTrue: {
                                  type: "Return",
                                  line: 2400,
                                  column: 11,
                                  node: {
                                    type: "Call",
                                    line: 2400,
                                    column: 11,
                                    func: {type: "Ident", line: 2400, column: 11, name: "f"},
                                    args: [{type: "Ident", line: 2400, column: 13, name: "broken"}]
                                  }
                                },
                                whenFalse: {
                                  type: "Return",
                                  line: 2402,
                                  column: 11,
                                  node: {
                                    type: "Call",
                                    line: 2402,
                                    column: 11,
                                    func: {type: "Ident", line: 2402, column: 11, name: "f"},
                                    args: [
                                      {type: "Const", line: 2402, column: 13, value: null},
                                      {type: "Ident", line: 2402, column: 18, name: "result"}
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  type: "Return",
                  line: 2403,
                  column: 3,
                  node: {
                    type: "Call",
                    line: 2403,
                    column: 3,
                    func: {type: "Ident", line: 2403, column: 3, name: "next"}
                  }
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "any"}]
          },
          dependencies: [
            "__asyncResult",
            "__once",
            "broken",
            "err",
            "f",
            "i",
            "index",
            "length",
            "limit",
            "next",
            "onComplete",
            "onValue",
            "onValueCallback",
            "result",
            "slotsUsed",
            "sync",
            "value"
          ]
        },
        __asyncIter: {
          helper: {
            type: "Func",
            line: 2405,
            column: 31,
            params: [
              {type: "Ident", line: 2405, column: 39, name: "limit"},
              {type: "Ident", line: 2405, column: 46, name: "iterator"},
              {type: "Ident", line: 2405, column: 56, name: "onValue"},
              {type: "Ident", line: 2405, column: 74, name: "onComplete"}
            ],
            variables: [
              "broken",
              "close",
              "done",
              "index",
              "slotsUsed",
              "sync"
            ],
            body: {
              type: "BlockStatement",
              line: 2406,
              column: 1,
              body: [
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 2406, column: 5, name: "limit"},
                      op: "<",
                      right: {type: "Const", line: 2406, column: 15, value: 1}
                    },
                    op: "||",
                    right: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 2406, column: 19, name: "limit"},
                      op: "!==",
                      right: {type: "Ident", line: 2406, column: 28, name: "limit"}
                    }
                  },
                  whenTrue: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 2407, column: 5, name: "limit"},
                    op: "=",
                    right: {
                      type: "Const",
                      line: 2407,
                      column: 13,
                      value: 1,
                      infinite: true
                    }
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2408, column: 14, name: "broken"},
                  op: "=",
                  right: {type: "Const", line: 2408, column: 23, value: null}
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2409, column: 14, name: "slotsUsed"},
                  op: "=",
                  right: {
                    type: "Const",
                    line: 2409,
                    column: 28,
                    value: 0,
                    sign: 1
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2410, column: 14, name: "sync"},
                  op: "=",
                  right: {type: "Const", line: 2410, column: 21, value: false}
                },
                {
                  type: "Func",
                  line: 1,
                  column: 1,
                  name: {type: "Ident", line: 2411, column: 6, name: "onValueCallback"},
                  params: [{type: "Ident", line: 2411, column: 25, name: "err"}],
                  body: {
                    type: "BlockStatement",
                    line: 2412,
                    column: 1,
                    body: [
                      {
                        type: "Unary",
                        line: 1,
                        column: 1,
                        op: "--",
                        node: {type: "Ident", line: 2412, column: 5, name: "slotsUsed"}
                      },
                      {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2413, column: 7, name: "err"},
                            op: "!=",
                            right: {type: "Const", line: 100, column: 19, value: null}
                          },
                          op: "&&",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2413, column: 20, name: "broken"},
                            op: "==",
                            right: {type: "Const", line: 100, column: 19, value: null}
                          }
                        },
                        whenTrue: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 2414, column: 7, name: "broken"},
                          op: "=",
                          right: {type: "Ident", line: 2414, column: 16, name: "err"}
                        }
                      },
                      {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Unary",
                          line: 1,
                          column: 1,
                          op: "!",
                          node: {type: "Ident", line: 2415, column: 11, name: "sync"}
                        },
                        whenTrue: {
                          type: "Return",
                          line: 2416,
                          column: 7,
                          node: {
                            type: "Call",
                            line: 2416,
                            column: 7,
                            func: {type: "Ident", line: 2416, column: 7, name: "next"}
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2417, column: 14, name: "index"},
                  op: "=",
                  right: {
                    type: "Const",
                    line: 2417,
                    column: 23,
                    value: 0,
                    sign: 1
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2418, column: 14, name: "done"},
                  op: "=",
                  right: {type: "Const", line: 2418, column: 21, value: false}
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2419, column: 14, name: "close"},
                  op: "=",
                  right: {
                    type: "Func",
                    line: 2419,
                    column: 24,
                    body: {
                      type: "BlockStatement",
                      line: 2420,
                      column: 1,
                      body: [
                        {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 2420, column: 5, name: "close"},
                          op: "=",
                          right: {type: "Const", line: 2420, column: 13, value: null}
                        },
                        {
                          type: "IfStatement",
                          line: 2421,
                          column: 5,
                          test: {
                            type: "Binary",
                            line: 2421,
                            column: 5,
                            left: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2421, column: 5, name: "iterator"},
                              op: "!=",
                              right: {type: "Const", line: 100, column: 19, value: null}
                            },
                            op: "&&",
                            right: {
                              type: "Binary",
                              line: 2421,
                              column: 5,
                              left: {
                                type: "Unary",
                                line: 2421,
                                column: 5,
                                op: "typeof",
                                node: {
                                  type: "Binary",
                                  line: 2421,
                                  column: 5,
                                  left: {type: "Ident", line: 2421, column: 5, name: "iterator"},
                                  op: ".",
                                  right: {type: "Const", line: 2421, column: 15, value: "close"}
                                }
                              },
                              op: "===",
                              right: {type: "Const", line: 2421, column: 5, value: "function"}
                            }
                          },
                          whenTrue: {
                            type: "Return",
                            line: 2421,
                            column: 5,
                            node: {
                              type: "Call",
                              line: 2421,
                              column: 5,
                              func: {
                                type: "Binary",
                                line: 2421,
                                column: 5,
                                left: {type: "Ident", line: 2421, column: 5, name: "iterator"},
                                op: ".",
                                right: {type: "Const", line: 2421, column: 15, value: "close"}
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  type: "Func",
                  line: 1,
                  column: 1,
                  name: {type: "Ident", line: 2422, column: 6, name: "next"},
                  variables: ["f", "i", "value"],
                  body: {
                    type: "BlockStatement",
                    line: 2423,
                    column: 1,
                    body: [
                      {
                        type: "For",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2423, column: 14, name: "broken"},
                              op: "==",
                              right: {type: "Const", line: 100, column: 19, value: null}
                            },
                            op: "&&",
                            right: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2423, column: 26, name: "slotsUsed"},
                              op: "<",
                              right: {type: "Ident", line: 2423, column: 40, name: "limit"}
                            }
                          },
                          op: "&&",
                          right: {
                            type: "Unary",
                            line: 1,
                            column: 1,
                            op: "!",
                            node: {type: "Ident", line: 2423, column: 54, name: "done"}
                          }
                        },
                        body: {
                          type: "BlockStatement",
                          line: 2424,
                          column: 1,
                          body: [
                            {
                              type: "TryCatch",
                              line: 1,
                              column: 1,
                              tryBody: {
                                type: "Binary",
                                line: 1,
                                column: 1,
                                left: {type: "Ident", line: 2425, column: 12, name: "value"},
                                op: "=",
                                right: {
                                  type: "Call",
                                  line: 2425,
                                  column: 20,
                                  func: {
                                    type: "Binary",
                                    line: 2425,
                                    column: 20,
                                    left: {type: "Ident", line: 2425, column: 20, name: "iterator"},
                                    op: ".",
                                    right: {type: "Const", line: 2425, column: 30, value: "next"}
                                  }
                                }
                              },
                              catchIdent: {type: "Ident", line: 2426, column: 12, name: "e"},
                              catchBody: {
                                type: "BlockStatement",
                                line: 2427,
                                column: 1,
                                body: [
                                  {
                                    type: "IfStatement",
                                    line: 1,
                                    column: 1,
                                    test: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 2427, column: 11, name: "e"},
                                      op: "===",
                                      right: {type: "Ident", line: 2427, column: 16, name: "StopIteration"}
                                    },
                                    whenTrue: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 2428, column: 11, name: "done"},
                                      op: "=",
                                      right: {type: "Const", line: 2428, column: 18, value: true}
                                    },
                                    whenFalse: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 2430, column: 11, name: "broken"},
                                      op: "=",
                                      right: {type: "Ident", line: 2430, column: 20, name: "e"}
                                    }
                                  },
                                  {type: "Break", line: 1, column: 1}
                                ]
                              }
                            },
                            {
                              type: "Unary",
                              line: 1,
                              column: 1,
                              op: "++",
                              node: {type: "Ident", line: 2432, column: 7, name: "slotsUsed"}
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2433, column: 10, name: "i"},
                              op: "=",
                              right: {type: "Ident", line: 2433, column: 14, name: "index"}
                            },
                            {
                              type: "Unary",
                              line: 1,
                              column: 1,
                              op: "++",
                              node: {type: "Ident", line: 2434, column: 7, name: "index"}
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2435, column: 7, name: "sync"},
                              op: "=",
                              right: {type: "Const", line: 2435, column: 14, value: true}
                            },
                            {
                              type: "TryCatch",
                              line: 1,
                              column: 1,
                              tryBody: {
                                type: "Call",
                                line: 2437,
                                column: 9,
                                func: {type: "Ident", line: 2437, column: 9, name: "onValue"},
                                args: [
                                  {type: "Ident", line: 2437, column: 18, name: "value"},
                                  {type: "Ident", line: 2437, column: 24, name: "i"},
                                  {
                                    type: "Call",
                                    line: 2437,
                                    column: 27,
                                    func: {type: "Ident", line: 2437, column: 27, name: "__once"},
                                    args: [{type: "Ident", line: 2437, column: 35, name: "onValueCallback"}]
                                  }
                                ]
                              },
                              catchIdent: {type: "Ident", line: 2438, column: 12, name: "e"},
                              catchBody: {
                                type: "BlockStatement",
                                line: 2439,
                                column: 1,
                                body: [
                                  {type: "Ident", line: 2439, column: 11, name: "close"},
                                  {
                                    type: "Call",
                                    line: 2440,
                                    column: 11,
                                    func: {type: "Ident", line: 2440, column: 11, name: "close"}
                                  },
                                  {
                                    type: "Throw",
                                    line: 1,
                                    column: 1,
                                    node: {type: "Ident", line: 2441, column: 14, name: "e"}
                                  }
                                ]
                              }
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2442, column: 7, name: "sync"},
                              op: "=",
                              right: {type: "Const", line: 2442, column: 14, value: false}
                            }
                          ]
                        }
                      },
                      {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2443, column: 7, name: "broken"},
                            op: "!=",
                            right: {type: "Const", line: 100, column: 19, value: null}
                          },
                          op: "||",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2443, column: 18, name: "slotsUsed"},
                            op: "===",
                            right: {
                              type: "Const",
                              line: 2443,
                              column: 33,
                              value: 0,
                              sign: 1
                            }
                          }
                        },
                        whenTrue: {
                          type: "BlockStatement",
                          line: 2444,
                          column: 1,
                          body: [
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2444, column: 10, name: "f"},
                              op: "=",
                              right: {type: "Ident", line: 2444, column: 14, name: "onComplete"}
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2445, column: 7, name: "onComplete"},
                              op: "=",
                              right: {type: "Const", line: 2445, column: 21}
                            },
                            {type: "Ident", line: 2446, column: 9, name: "close"},
                            {
                              type: "Call",
                              line: 2447,
                              column: 9,
                              func: {type: "Ident", line: 2447, column: 9, name: "close"}
                            },
                            {
                              type: "IfStatement",
                              line: 1,
                              column: 1,
                              test: {type: "Ident", line: 2448, column: 9, name: "f"},
                              whenTrue: {
                                type: "Return",
                                line: 2449,
                                column: 9,
                                node: {
                                  type: "Call",
                                  line: 2449,
                                  column: 9,
                                  func: {type: "Ident", line: 2449, column: 9, name: "f"},
                                  args: [{type: "Ident", line: 2449, column: 11, name: "broken"}]
                                }
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  type: "Return",
                  line: 2450,
                  column: 3,
                  node: {
                    type: "Call",
                    line: 2450,
                    column: 3,
                    func: {type: "Ident", line: 2450, column: 3, name: "next"}
                  }
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "any"}]
          },
          dependencies: [
            "__asyncIter",
            "__once",
            "broken",
            "close",
            "done",
            "e",
            "err",
            "f",
            "i",
            "index",
            "iterator",
            "limit",
            "next",
            "onComplete",
            "onValue",
            "onValueCallback",
            "slotsUsed",
            "StopIteration",
            "sync",
            "value"
          ]
        },
        __asyncIterResult: {
          helper: {
            type: "Func",
            line: 2452,
            column: 38,
            params: [
              {type: "Ident", line: 2452, column: 46, name: "limit"},
              {type: "Ident", line: 2452, column: 53, name: "iterator"},
              {type: "Ident", line: 2452, column: 63, name: "onValue"},
              {type: "Ident", line: 2452, column: 81, name: "onComplete"}
            ],
            variables: [
              "broken",
              "close",
              "done",
              "index",
              "result",
              "slotsUsed",
              "sync"
            ],
            body: {
              type: "BlockStatement",
              line: 2453,
              column: 1,
              body: [
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 2453, column: 5, name: "limit"},
                      op: "<",
                      right: {type: "Const", line: 2453, column: 15, value: 1}
                    },
                    op: "||",
                    right: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 2453, column: 19, name: "limit"},
                      op: "!==",
                      right: {type: "Ident", line: 2453, column: 28, name: "limit"}
                    }
                  },
                  whenTrue: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 2454, column: 5, name: "limit"},
                    op: "=",
                    right: {
                      type: "Const",
                      line: 2454,
                      column: 13,
                      value: 1,
                      infinite: true
                    }
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2455, column: 14, name: "broken"},
                  op: "=",
                  right: {type: "Const", line: 2455, column: 23, value: null}
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2456, column: 14, name: "slotsUsed"},
                  op: "=",
                  right: {
                    type: "Const",
                    line: 2456,
                    column: 28,
                    value: 0,
                    sign: 1
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2457, column: 14, name: "sync"},
                  op: "=",
                  right: {type: "Const", line: 2457, column: 21, value: false}
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2458, column: 6, name: "result"},
                  op: "=",
                  right: {type: "Arr", line: 2458, column: 15}
                },
                {
                  type: "Func",
                  line: 1,
                  column: 1,
                  name: {type: "Ident", line: 2459, column: 6, name: "onValueCallback"},
                  params: [
                    {type: "Ident", line: 2459, column: 25, name: "err"},
                    {type: "Ident", line: 2459, column: 29, name: "value"}
                  ],
                  body: {
                    type: "BlockStatement",
                    line: 2460,
                    column: 1,
                    body: [
                      {
                        type: "Unary",
                        line: 1,
                        column: 1,
                        op: "--",
                        node: {type: "Ident", line: 2460, column: 5, name: "slotsUsed"}
                      },
                      {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2461, column: 7, name: "err"},
                            op: "!=",
                            right: {type: "Const", line: 100, column: 19, value: null}
                          },
                          op: "&&",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2461, column: 20, name: "broken"},
                            op: "==",
                            right: {type: "Const", line: 100, column: 19, value: null}
                          }
                        },
                        whenTrue: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 2462, column: 7, name: "broken"},
                          op: "=",
                          right: {type: "Ident", line: 2462, column: 16, name: "err"}
                        }
                      },
                      {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2463, column: 11, name: "broken"},
                            op: "==",
                            right: {type: "Const", line: 100, column: 19, value: null}
                          },
                          op: "&&",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 2463,
                              column: 23,
                              left: {type: "Arguments", line: 2463, column: 23},
                              op: ".",
                              right: {type: "Const", line: 2463, column: 34, value: "length"}
                            },
                            op: ">",
                            right: {type: "Const", line: 2463, column: 44, value: 1}
                          }
                        },
                        whenTrue: {
                          type: "Call",
                          line: 2464,
                          column: 7,
                          func: {
                            type: "Binary",
                            line: 2464,
                            column: 7,
                            left: {type: "Ident", line: 2464, column: 7, name: "result"},
                            op: ".",
                            right: {type: "Const", line: 2464, column: 14, value: "push"}
                          },
                          args: [{type: "Ident", line: 2464, column: 19, name: "value"}]
                        }
                      },
                      {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Unary",
                          line: 1,
                          column: 1,
                          op: "!",
                          node: {type: "Ident", line: 2465, column: 11, name: "sync"}
                        },
                        whenTrue: {
                          type: "Return",
                          line: 2466,
                          column: 7,
                          node: {
                            type: "Call",
                            line: 2466,
                            column: 7,
                            func: {type: "Ident", line: 2466, column: 7, name: "next"}
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2467, column: 14, name: "index"},
                  op: "=",
                  right: {
                    type: "Const",
                    line: 2467,
                    column: 23,
                    value: 0,
                    sign: 1
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2468, column: 14, name: "done"},
                  op: "=",
                  right: {type: "Const", line: 2468, column: 21, value: false}
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 2469, column: 14, name: "close"},
                  op: "=",
                  right: {
                    type: "Func",
                    line: 2469,
                    column: 24,
                    body: {
                      type: "BlockStatement",
                      line: 2470,
                      column: 1,
                      body: [
                        {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 2470, column: 5, name: "close"},
                          op: "=",
                          right: {type: "Const", line: 2470, column: 13, value: null}
                        },
                        {
                          type: "IfStatement",
                          line: 2471,
                          column: 5,
                          test: {
                            type: "Binary",
                            line: 2471,
                            column: 5,
                            left: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2471, column: 5, name: "iterator"},
                              op: "!=",
                              right: {type: "Const", line: 100, column: 19, value: null}
                            },
                            op: "&&",
                            right: {
                              type: "Binary",
                              line: 2471,
                              column: 5,
                              left: {
                                type: "Unary",
                                line: 2471,
                                column: 5,
                                op: "typeof",
                                node: {
                                  type: "Binary",
                                  line: 2471,
                                  column: 5,
                                  left: {type: "Ident", line: 2471, column: 5, name: "iterator"},
                                  op: ".",
                                  right: {type: "Const", line: 2471, column: 15, value: "close"}
                                }
                              },
                              op: "===",
                              right: {type: "Const", line: 2471, column: 5, value: "function"}
                            }
                          },
                          whenTrue: {
                            type: "Return",
                            line: 2471,
                            column: 5,
                            node: {
                              type: "Call",
                              line: 2471,
                              column: 5,
                              func: {
                                type: "Binary",
                                line: 2471,
                                column: 5,
                                left: {type: "Ident", line: 2471, column: 5, name: "iterator"},
                                op: ".",
                                right: {type: "Const", line: 2471, column: 15, value: "close"}
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  type: "Func",
                  line: 1,
                  column: 1,
                  name: {type: "Ident", line: 2472, column: 6, name: "next"},
                  variables: ["f", "i", "value"],
                  body: {
                    type: "BlockStatement",
                    line: 2473,
                    column: 1,
                    body: [
                      {
                        type: "For",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2473, column: 14, name: "broken"},
                              op: "==",
                              right: {type: "Const", line: 100, column: 19, value: null}
                            },
                            op: "&&",
                            right: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2473, column: 26, name: "slotsUsed"},
                              op: "<",
                              right: {type: "Ident", line: 2473, column: 40, name: "limit"}
                            }
                          },
                          op: "&&",
                          right: {
                            type: "Unary",
                            line: 1,
                            column: 1,
                            op: "!",
                            node: {type: "Ident", line: 2473, column: 54, name: "done"}
                          }
                        },
                        body: {
                          type: "BlockStatement",
                          line: 2474,
                          column: 1,
                          body: [
                            {
                              type: "TryCatch",
                              line: 1,
                              column: 1,
                              tryBody: {
                                type: "Binary",
                                line: 1,
                                column: 1,
                                left: {type: "Ident", line: 2475, column: 12, name: "value"},
                                op: "=",
                                right: {
                                  type: "Call",
                                  line: 2475,
                                  column: 20,
                                  func: {
                                    type: "Binary",
                                    line: 2475,
                                    column: 20,
                                    left: {type: "Ident", line: 2475, column: 20, name: "iterator"},
                                    op: ".",
                                    right: {type: "Const", line: 2475, column: 30, value: "next"}
                                  }
                                }
                              },
                              catchIdent: {type: "Ident", line: 2476, column: 12, name: "e"},
                              catchBody: {
                                type: "BlockStatement",
                                line: 2477,
                                column: 1,
                                body: [
                                  {
                                    type: "IfStatement",
                                    line: 1,
                                    column: 1,
                                    test: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 2477, column: 11, name: "e"},
                                      op: "===",
                                      right: {type: "Ident", line: 2477, column: 16, name: "StopIteration"}
                                    },
                                    whenTrue: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 2478, column: 11, name: "done"},
                                      op: "=",
                                      right: {type: "Const", line: 2478, column: 18, value: true}
                                    },
                                    whenFalse: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 2480, column: 11, name: "broken"},
                                      op: "=",
                                      right: {type: "Ident", line: 2480, column: 20, name: "e"}
                                    }
                                  },
                                  {type: "Break", line: 1, column: 1}
                                ]
                              }
                            },
                            {
                              type: "Unary",
                              line: 1,
                              column: 1,
                              op: "++",
                              node: {type: "Ident", line: 2482, column: 7, name: "slotsUsed"}
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2483, column: 10, name: "i"},
                              op: "=",
                              right: {type: "Ident", line: 2483, column: 14, name: "index"}
                            },
                            {
                              type: "Unary",
                              line: 1,
                              column: 1,
                              op: "++",
                              node: {type: "Ident", line: 2484, column: 7, name: "index"}
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2485, column: 7, name: "sync"},
                              op: "=",
                              right: {type: "Const", line: 2485, column: 14, value: true}
                            },
                            {
                              type: "TryCatch",
                              line: 1,
                              column: 1,
                              tryBody: {
                                type: "Call",
                                line: 2487,
                                column: 9,
                                func: {type: "Ident", line: 2487, column: 9, name: "onValue"},
                                args: [
                                  {type: "Ident", line: 2487, column: 18, name: "value"},
                                  {type: "Ident", line: 2487, column: 24, name: "i"},
                                  {
                                    type: "Call",
                                    line: 2487,
                                    column: 27,
                                    func: {type: "Ident", line: 2487, column: 27, name: "__once"},
                                    args: [{type: "Ident", line: 2487, column: 35, name: "onValueCallback"}]
                                  }
                                ]
                              },
                              catchIdent: {type: "Ident", line: 2488, column: 12, name: "e"},
                              catchBody: {
                                type: "BlockStatement",
                                line: 2489,
                                column: 1,
                                body: [
                                  {type: "Ident", line: 2489, column: 11, name: "close"},
                                  {
                                    type: "Call",
                                    line: 2490,
                                    column: 11,
                                    func: {type: "Ident", line: 2490, column: 11, name: "close"}
                                  },
                                  {
                                    type: "Throw",
                                    line: 1,
                                    column: 1,
                                    node: {type: "Ident", line: 2491, column: 14, name: "e"}
                                  }
                                ]
                              }
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2492, column: 7, name: "sync"},
                              op: "=",
                              right: {type: "Const", line: 2492, column: 14, value: false}
                            }
                          ]
                        }
                      },
                      {
                        type: "IfStatement",
                        line: 1,
                        column: 1,
                        test: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2493, column: 7, name: "broken"},
                            op: "!=",
                            right: {type: "Const", line: 100, column: 19, value: null}
                          },
                          op: "||",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 2493, column: 18, name: "slotsUsed"},
                            op: "===",
                            right: {
                              type: "Const",
                              line: 2493,
                              column: 33,
                              value: 0,
                              sign: 1
                            }
                          }
                        },
                        whenTrue: {
                          type: "BlockStatement",
                          line: 2494,
                          column: 1,
                          body: [
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2494, column: 10, name: "f"},
                              op: "=",
                              right: {type: "Ident", line: 2494, column: 14, name: "onComplete"}
                            },
                            {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 2495, column: 7, name: "onComplete"},
                              op: "=",
                              right: {type: "Const", line: 2495, column: 21}
                            },
                            {type: "Ident", line: 2496, column: 9, name: "close"},
                            {
                              type: "Call",
                              line: 2497,
                              column: 9,
                              func: {type: "Ident", line: 2497, column: 9, name: "close"}
                            },
                            {
                              type: "IfStatement",
                              line: 1,
                              column: 1,
                              test: {type: "Ident", line: 2498, column: 9, name: "f"},
                              whenTrue: {
                                type: "IfStatement",
                                line: 1,
                                column: 1,
                                test: {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {type: "Ident", line: 2499, column: 11, name: "broken"},
                                  op: "!=",
                                  right: {type: "Const", line: 100, column: 19, value: null}
                                },
                                whenTrue: {
                                  type: "Return",
                                  line: 2500,
                                  column: 11,
                                  node: {
                                    type: "Call",
                                    line: 2500,
                                    column: 11,
                                    func: {type: "Ident", line: 2500, column: 11, name: "f"},
                                    args: [{type: "Ident", line: 2500, column: 13, name: "broken"}]
                                  }
                                },
                                whenFalse: {
                                  type: "Return",
                                  line: 2502,
                                  column: 11,
                                  node: {
                                    type: "Call",
                                    line: 2502,
                                    column: 11,
                                    func: {type: "Ident", line: 2502, column: 11, name: "f"},
                                    args: [
                                      {type: "Const", line: 2502, column: 13, value: null},
                                      {type: "Ident", line: 2502, column: 18, name: "result"}
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  type: "Return",
                  line: 2503,
                  column: 3,
                  node: {
                    type: "Call",
                    line: 2503,
                    column: 3,
                    func: {type: "Ident", line: 2503, column: 3, name: "next"}
                  }
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "any"}]
          },
          dependencies: [
            "__asyncIterResult",
            "__once",
            "broken",
            "close",
            "done",
            "e",
            "err",
            "f",
            "i",
            "index",
            "iterator",
            "limit",
            "next",
            "onComplete",
            "onValue",
            "onValueCallback",
            "result",
            "slotsUsed",
            "StopIteration",
            "sync",
            "value"
          ]
        },
        __is: {
          helper: {
            type: "IfExpression",
            line: 1,
            column: 1,
            test: {
              type: "Binary",
              line: 1,
              column: 1,
              left: {
                type: "Unary",
                line: 1,
                column: 1,
                op: "typeof",
                node: {
                  type: "Binary",
                  line: 3098,
                  column: 37,
                  left: {type: "Ident", line: 3098, column: 37, name: "Object"},
                  op: ".",
                  right: {type: "Const", line: 3098, column: 45, value: "is"}
                }
              },
              op: "===",
              right: {type: "Const", line: 124, column: 25, value: "function"}
            },
            whenTrue: {
              type: "Binary",
              line: 3099,
              column: 3,
              left: {type: "Ident", line: 3099, column: 3, name: "Object"},
              op: ".",
              right: {type: "Const", line: 3099, column: 10, value: "is"}
            },
            whenFalse: {
              type: "Func",
              line: 3101,
              column: 4,
              params: [
                {type: "Ident", line: 3101, column: 5, name: "x"},
                {type: "Ident", line: 3101, column: 7, name: "y"}
              ],
              body: {
                type: "IfStatement",
                line: 1,
                column: 1,
                test: {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 3102, column: 7, name: "x"},
                  op: "===",
                  right: {type: "Ident", line: 3102, column: 12, name: "y"}
                },
                whenTrue: {
                  type: "Return",
                  line: 1,
                  column: 1,
                  node: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 3103, column: 7, name: "x"},
                      op: "!==",
                      right: {
                        type: "Const",
                        line: 3103,
                        column: 12,
                        value: 0,
                        sign: 1
                      }
                    },
                    op: "||",
                    right: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Const", line: 3103, column: 18, value: 1},
                        op: "/",
                        right: {type: "Ident", line: 3103, column: 22, name: "x"}
                      },
                      op: "===",
                      right: {
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Const", line: 3103, column: 28, value: 1},
                        op: "/",
                        right: {type: "Ident", line: 3103, column: 32, name: "y"}
                      }
                    }
                  }
                },
                whenFalse: {
                  type: "Return",
                  line: 1,
                  column: 1,
                  node: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 3105, column: 7, name: "x"},
                      op: "!==",
                      right: {type: "Ident", line: 3105, column: 11, name: "x"}
                    },
                    op: "&&",
                    right: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 3105, column: 17, name: "y"},
                      op: "!==",
                      right: {type: "Ident", line: 3105, column: 22, name: "y"}
                    }
                  }
                }
              }
            }
          },
          type: {type: "any"},
          dependencies: ["__is", "Object", "x", "y"]
        },
        __bind: {
          helper: {
            type: "Func",
            line: 3145,
            column: 25,
            params: [
              {type: "Ident", line: 3145, column: 26, name: "parent"},
              {type: "Ident", line: 3145, column: 33, name: "child"}
            ],
            variables: ["func"],
            body: {
              type: "BlockStatement",
              line: 3146,
              column: 1,
              body: [
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 3146, column: 9, name: "parent"},
                    op: "==",
                    right: {type: "Const", line: 100, column: 19, value: null}
                  },
                  whenTrue: {
                    type: "Throw",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 3147,
                      column: 10,
                      func: {type: "Ident", line: 3147, column: 10, name: "TypeError"},
                      args: [{
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Const", line: 3147, column: 21, value: "Expected parent to be an object, got "},
                        op: "+",
                        right: {
                          type: "Call",
                          line: 470,
                          column: 49,
                          func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                          args: [{type: "Ident", line: 3147, column: 68, name: "parent"}]
                        }
                      }]
                    }
                  }
                },
                {
                  type: "Binary",
                  line: 1,
                  column: 1,
                  left: {type: "Ident", line: 3148, column: 6, name: "func"},
                  op: "=",
                  right: {
                    type: "Binary",
                    line: 3148,
                    column: 13,
                    left: {type: "Ident", line: 3148, column: 13, name: "parent"},
                    op: ".",
                    right: {type: "Ident", line: 3148, column: 21, name: "child"}
                  }
                },
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {
                      type: "Unary",
                      line: 1,
                      column: 1,
                      op: "typeof",
                      node: {type: "Ident", line: 3149, column: 22, name: "func"}
                    },
                    op: "!==",
                    right: {type: "Const", line: 124, column: 25, value: "function"}
                  },
                  whenTrue: {
                    type: "Throw",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 3150,
                      column: 10,
                      func: {type: "Ident", line: 3150, column: 10, name: "Error"},
                      args: [{
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Const", line: 3150, column: 17, value: "Trying to bind child '"},
                          op: "+",
                          right: {
                            type: "Call",
                            line: 3150,
                            column: 42,
                            func: {type: "Ident", line: 3150, column: 42, name: "String"},
                            args: [{type: "Ident", line: 3150, column: 49, name: "child"}]
                          }
                        },
                        op: "+",
                        right: {type: "Const", line: 3150, column: 17, value: "' which is not a function"}
                      }]
                    }
                  }
                },
                {
                  type: "Return",
                  line: 3151,
                  column: 4,
                  node: {
                    type: "Func",
                    line: 3151,
                    column: 4,
                    body: {
                      type: "Return",
                      line: 3151,
                      column: 7,
                      node: {
                        type: "Call",
                        line: 3151,
                        column: 7,
                        func: {
                          type: "Binary",
                          line: 3151,
                          column: 7,
                          left: {type: "Ident", line: 3151, column: 7, name: "func"},
                          op: ".",
                          right: {type: "Const", line: 3151, column: 7, value: "apply"}
                        },
                        args: [
                          {type: "Ident", line: 3151, column: 14, name: "parent"},
                          {type: "Arguments", line: 3151, column: 25}
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{
              type: "generic",
              base: {type: "simple", name: "functionBase"},
              args: [{type: "any"}]
            }]
          },
          dependencies: [
            "__bind",
            "__toArray",
            "__typeof",
            "child",
            "Error",
            "func",
            "parent",
            "String",
            "TypeError"
          ]
        },
        __defProp: {
          helper: {
            type: "Call",
            line: 3,
            column: 9,
            func: {
              type: "Func",
              line: 3,
              column: 12,
              variables: [
                "defineGetter",
                "defineSetter",
                "fallback",
                "lookupGetter",
                "lookupSetter",
                "supportsAccessors"
              ],
              body: {
                type: "BlockStatement",
                line: 3154,
                column: 1,
                body: [
                  {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 3154, column: 6, name: "fallback"},
                    op: "=",
                    right: {
                      type: "Binary",
                      line: 3154,
                      column: 17,
                      left: {type: "Ident", line: 3154, column: 17, name: "Object"},
                      op: ".",
                      right: {type: "Const", line: 3154, column: 25, value: "defineProperty"}
                    }
                  },
                  {
                    type: "IfStatement",
                    line: 1,
                    column: 1,
                    test: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {
                          type: "Unary",
                          line: 1,
                          column: 1,
                          op: "typeof",
                          node: {type: "Ident", line: 3155, column: 18, name: "fallback"}
                        },
                        op: "===",
                        right: {type: "Const", line: 124, column: 25, value: "function"}
                      },
                      op: "&&",
                      right: {
                        type: "Call",
                        line: 3,
                        column: 9,
                        func: {
                          type: "Func",
                          line: 3,
                          column: 12,
                          variables: ["o"],
                          body: {
                            type: "TryCatch",
                            line: 1,
                            column: 1,
                            tryBody: {
                              type: "BlockStatement",
                              line: 3157,
                              column: 1,
                              body: [
                                {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {type: "Ident", line: 3157, column: 12, name: "o"},
                                  op: "=",
                                  right: {type: "Obj", line: 103316, column: 103319}
                                },
                                {
                                  type: "Call",
                                  line: 3158,
                                  column: 9,
                                  func: {type: "Ident", line: 3158, column: 9, name: "fallback"},
                                  args: [
                                    {type: "Ident", line: 3158, column: 18, name: "o"},
                                    {type: "Const", line: 3158, column: 22, value: "sentinel"},
                                    {type: "Obj", line: 103350, column: 103353}
                                  ]
                                },
                                {
                                  type: "Return",
                                  line: 1,
                                  column: 1,
                                  node: {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {type: "Const", line: 3159, column: 19, value: "sentinel"},
                                    op: "in",
                                    right: {type: "Ident", line: 3159, column: 9, name: "o"}
                                  }
                                }
                              ]
                            },
                            catchIdent: {type: "Ident", line: 3160, column: 12, name: "e"},
                            catchBody: {
                              type: "Return",
                              line: 3161,
                              column: 9,
                              node: {type: "Const", line: 3161, column: 9, value: false}
                            }
                          }
                        }
                      }
                    },
                    whenTrue: {
                      type: "Return",
                      line: 3162,
                      column: 5,
                      node: {type: "Ident", line: 3162, column: 5, name: "fallback"}
                    },
                    whenFalse: {
                      type: "BlockStatement",
                      line: 3164,
                      column: 1,
                      body: [
                        {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 3164, column: 8, name: "supportsAccessors"},
                          op: "=",
                          right: {
                            type: "Call",
                            line: 595,
                            column: 7,
                            func: {
                              type: "Binary",
                              line: 595,
                              column: 7,
                              left: {type: "Ident", line: 595, column: 7, name: "__owns"},
                              op: ".",
                              right: {type: "Const", line: 595, column: 7, value: "call"}
                            },
                            args: [
                              {
                                type: "Binary",
                                line: 3164,
                                column: 29,
                                left: {type: "Ident", line: 3164, column: 29, name: "Object"},
                                op: ".",
                                right: {type: "Const", line: 3164, column: 37, value: "prototype"}
                              },
                              {type: "Const", line: 3164, column: 56, value: "__defineGetter__"}
                            ]
                          }
                        },
                        {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 3165, column: 8, name: "lookupGetter"},
                          op: "=",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 3165, column: 24, name: "supportsAccessors"},
                            op: "&&",
                            right: {
                              type: "Binary",
                              line: 3165,
                              column: 47,
                              left: {
                                type: "Binary",
                                line: 3165,
                                column: 47,
                                left: {type: "Ident", line: 3165, column: 47, name: "Object"},
                                op: ".",
                                right: {type: "Const", line: 3165, column: 47, value: "prototype"}
                              },
                              op: ".",
                              right: {type: "Const", line: 3165, column: 56, value: "__lookupGetter__"}
                            }
                          }
                        },
                        {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 3166, column: 8, name: "lookupSetter"},
                          op: "=",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 3166, column: 24, name: "supportsAccessors"},
                            op: "&&",
                            right: {
                              type: "Binary",
                              line: 3166,
                              column: 47,
                              left: {
                                type: "Binary",
                                line: 3166,
                                column: 47,
                                left: {type: "Ident", line: 3166, column: 47, name: "Object"},
                                op: ".",
                                right: {type: "Const", line: 3166, column: 47, value: "prototype"}
                              },
                              op: ".",
                              right: {type: "Const", line: 3166, column: 56, value: "__lookupSetter__"}
                            }
                          }
                        },
                        {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 3167, column: 8, name: "defineGetter"},
                          op: "=",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 3167, column: 24, name: "supportsAccessors"},
                            op: "&&",
                            right: {
                              type: "Binary",
                              line: 3167,
                              column: 47,
                              left: {
                                type: "Binary",
                                line: 3167,
                                column: 47,
                                left: {type: "Ident", line: 3167, column: 47, name: "Object"},
                                op: ".",
                                right: {type: "Const", line: 3167, column: 47, value: "prototype"}
                              },
                              op: ".",
                              right: {type: "Const", line: 3167, column: 56, value: "__defineGetter__"}
                            }
                          }
                        },
                        {
                          type: "Binary",
                          line: 1,
                          column: 1,
                          left: {type: "Ident", line: 3168, column: 8, name: "defineSetter"},
                          op: "=",
                          right: {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 3168, column: 24, name: "supportsAccessors"},
                            op: "&&",
                            right: {
                              type: "Binary",
                              line: 3168,
                              column: 47,
                              left: {
                                type: "Binary",
                                line: 3168,
                                column: 47,
                                left: {type: "Ident", line: 3168, column: 47, name: "Object"},
                                op: ".",
                                right: {type: "Const", line: 3168, column: 47, value: "prototype"}
                              },
                              op: ".",
                              right: {type: "Const", line: 3168, column: 56, value: "__defineSetter__"}
                            }
                          }
                        },
                        {
                          type: "Return",
                          line: 1832,
                          column: 1,
                          node: {
                            type: "Func",
                            line: 1832,
                            column: 1,
                            params: [
                              {type: "Ident", line: 3169, column: 7, name: "object"},
                              {type: "Ident", line: 3169, column: 23, name: "property"},
                              {type: "Ident", line: 3169, column: 43, name: "descriptor"}
                            ],
                            variables: ["proto"],
                            body: {
                              type: "BlockStatement",
                              line: 1832,
                              column: 1,
                              body: [
                                {
                                  type: "IfStatement",
                                  line: 1,
                                  column: 1,
                                  test: {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {
                                      type: "Binary",
                                      line: 610,
                                      column: 18,
                                      left: {
                                        type: "Binary",
                                        line: 1,
                                        column: 1,
                                        left: {
                                          type: "Unary",
                                          line: 1,
                                          column: 1,
                                          op: "typeof",
                                          node: {type: "Ident", line: 3169, column: 7, name: "object"}
                                        },
                                        op: "!==",
                                        right: {type: "Const", line: 130, column: 62, value: "object"}
                                      },
                                      op: "||",
                                      right: {
                                        type: "Binary",
                                        line: 1,
                                        column: 1,
                                        left: {type: "Ident", line: 3169, column: 7, name: "object"},
                                        op: "===",
                                        right: {type: "Const", line: 130, column: 78, value: null}
                                      }
                                    },
                                    op: "&&",
                                    right: {
                                      type: "Binary",
                                      line: 606,
                                      column: 18,
                                      left: {
                                        type: "Unary",
                                        line: 1,
                                        column: 1,
                                        op: "typeof",
                                        node: {type: "Ident", line: 3169, column: 7, name: "object"}
                                      },
                                      op: "!==",
                                      right: {type: "Const", line: 124, column: 25, value: "function"}
                                    }
                                  },
                                  whenTrue: {
                                    type: "Throw",
                                    line: 1,
                                    column: 1,
                                    node: {
                                      type: "Call",
                                      line: 1671,
                                      column: 14,
                                      func: {type: "Ident", line: 1671, column: 14, name: "TypeError"},
                                      args: [{
                                        type: "Binary",
                                        line: 1,
                                        column: 1,
                                        left: {
                                          type: "Const",
                                          line: 1,
                                          column: 1,
                                          value: "Expected object to be one of Object or Function, got "
                                        },
                                        op: "+",
                                        right: {
                                          type: "Call",
                                          line: 470,
                                          column: 49,
                                          func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                                          args: [{type: "Ident", line: 3169, column: 7, name: "object"}]
                                        }
                                      }]
                                    }
                                  }
                                },
                                {
                                  type: "IfStatement",
                                  line: 1,
                                  column: 1,
                                  test: {
                                    type: "Binary",
                                    line: 600,
                                    column: 18,
                                    left: {
                                      type: "Unary",
                                      line: 1,
                                      column: 1,
                                      op: "typeof",
                                      node: {type: "Ident", line: 3169, column: 23, name: "property"}
                                    },
                                    op: "!==",
                                    right: {type: "Const", line: 115, column: 25, value: "string"}
                                  },
                                  whenTrue: {
                                    type: "Throw",
                                    line: 1,
                                    column: 1,
                                    node: {
                                      type: "Call",
                                      line: 1620,
                                      column: 18,
                                      func: {type: "Ident", line: 1620, column: 18, name: "TypeError"},
                                      args: [{
                                        type: "Binary",
                                        line: 1,
                                        column: 1,
                                        left: {type: "Const", line: 1, column: 1, value: "Expected property to be a String, got "},
                                        op: "+",
                                        right: {
                                          type: "Call",
                                          line: 470,
                                          column: 49,
                                          func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                                          args: [{type: "Ident", line: 3169, column: 23, name: "property"}]
                                        }
                                      }]
                                    }
                                  }
                                },
                                {
                                  type: "IfStatement",
                                  line: 1,
                                  column: 1,
                                  test: {
                                    type: "Binary",
                                    line: 610,
                                    column: 18,
                                    left: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {
                                        type: "Unary",
                                        line: 1,
                                        column: 1,
                                        op: "typeof",
                                        node: {type: "Ident", line: 3169, column: 43, name: "descriptor"}
                                      },
                                      op: "!==",
                                      right: {type: "Const", line: 130, column: 62, value: "object"}
                                    },
                                    op: "||",
                                    right: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 3169, column: 43, name: "descriptor"},
                                      op: "===",
                                      right: {type: "Const", line: 130, column: 78, value: null}
                                    }
                                  },
                                  whenTrue: {
                                    type: "Throw",
                                    line: 1,
                                    column: 1,
                                    node: {
                                      type: "Call",
                                      line: 1620,
                                      column: 18,
                                      func: {type: "Ident", line: 1620, column: 18, name: "TypeError"},
                                      args: [{
                                        type: "Binary",
                                        line: 1,
                                        column: 1,
                                        left: {type: "Const", line: 1, column: 1, value: "Expected descriptor to be an Object, got "},
                                        op: "+",
                                        right: {
                                          type: "Call",
                                          line: 470,
                                          column: 49,
                                          func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                                          args: [{type: "Ident", line: 3169, column: 43, name: "descriptor"}]
                                        }
                                      }]
                                    }
                                  }
                                },
                                {
                                  type: "IfStatement",
                                  line: 1,
                                  column: 1,
                                  test: {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {
                                      type: "Unary",
                                      line: 1,
                                      column: 1,
                                      op: "typeof",
                                      node: {type: "Ident", line: 3170, column: 22, name: "fallback"}
                                    },
                                    op: "===",
                                    right: {type: "Const", line: 124, column: 25, value: "function"}
                                  },
                                  whenTrue: {
                                    type: "TryCatch",
                                    line: 1,
                                    column: 1,
                                    tryBody: {
                                      type: "Return",
                                      line: 1,
                                      column: 1,
                                      node: {
                                        type: "Call",
                                        line: 3172,
                                        column: 17,
                                        func: {type: "Ident", line: 3172, column: 17, name: "fallback"},
                                        args: [
                                          {type: "Ident", line: 3172, column: 27, name: "object"},
                                          {type: "Ident", line: 3172, column: 34, name: "property"},
                                          {type: "Ident", line: 3172, column: 44, name: "descriptor"}
                                        ]
                                      }
                                    },
                                    catchIdent: {type: "Ident", line: 3173, column: 14, name: "e"},
                                    catchBody: {type: "Const", line: 3174, column: 11}
                                  }
                                },
                                {
                                  type: "IfStatement",
                                  line: 1,
                                  column: 1,
                                  test: {
                                    type: "Call",
                                    line: 595,
                                    column: 7,
                                    func: {
                                      type: "Binary",
                                      line: 595,
                                      column: 7,
                                      left: {type: "Ident", line: 595, column: 7, name: "__owns"},
                                      op: ".",
                                      right: {type: "Const", line: 595, column: 7, value: "call"}
                                    },
                                    args: [
                                      {type: "Ident", line: 3176, column: 9, name: "descriptor"},
                                      {type: "Const", line: 3176, column: 30, value: "value"}
                                    ]
                                  },
                                  whenTrue: {
                                    type: "IfStatement",
                                    line: 1,
                                    column: 1,
                                    test: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 3177, column: 11, name: "supportsAccessors"},
                                      op: "&&",
                                      right: {
                                        type: "Call",
                                        line: 3177,
                                        column: 36,
                                        func: {
                                          type: "Binary",
                                          line: 3177,
                                          column: 36,
                                          left: {type: "Ident", line: 3177, column: 36, name: "lookupGetter"},
                                          op: ".",
                                          right: {type: "Const", line: 3177, column: 36, value: "call"}
                                        },
                                        args: [
                                          {type: "Ident", line: 3177, column: 51, name: "object"},
                                          {
                                            type: "Binary",
                                            line: 1,
                                            column: 1,
                                            left: {type: "Ident", line: 3177, column: 58, name: "property"},
                                            op: "||",
                                            right: {
                                              type: "Call",
                                              line: 3177,
                                              column: 70,
                                              func: {
                                                type: "Binary",
                                                line: 3177,
                                                column: 70,
                                                left: {type: "Ident", line: 3177, column: 70, name: "lookupSetter"},
                                                op: ".",
                                                right: {type: "Const", line: 3177, column: 70, value: "call"}
                                              },
                                              args: [
                                                {type: "Ident", line: 3177, column: 86, name: "object"},
                                                {type: "Ident", line: 3177, column: 93, name: "property"}
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    whenTrue: {
                                      type: "BlockStatement",
                                      line: 3178,
                                      column: 1,
                                      body: [
                                        {
                                          type: "Binary",
                                          line: 1,
                                          column: 1,
                                          left: {type: "Ident", line: 3178, column: 14, name: "proto"},
                                          op: "=",
                                          right: {
                                            type: "Binary",
                                            line: 3178,
                                            column: 22,
                                            left: {type: "Ident", line: 3178, column: 22, name: "object"},
                                            op: ".",
                                            right: {type: "Const", line: 3178, column: 30, value: "__proto__"}
                                          }
                                        },
                                        {
                                          type: "Binary",
                                          line: 1,
                                          column: 1,
                                          left: {
                                            type: "Binary",
                                            line: 3179,
                                            column: 17,
                                            left: {type: "Ident", line: 3179, column: 11, name: "object"},
                                            op: ".",
                                            right: {type: "Const", line: 3179, column: 18, value: "__proto__"}
                                          },
                                          op: "=",
                                          right: {
                                            type: "Binary",
                                            line: 3179,
                                            column: 30,
                                            left: {type: "Ident", line: 3179, column: 30, name: "Object"},
                                            op: ".",
                                            right: {type: "Const", line: 3179, column: 38, value: "prototype"}
                                          }
                                        },
                                        {
                                          type: "Unary",
                                          line: 1,
                                          column: 1,
                                          op: "delete",
                                          node: {
                                            type: "Binary",
                                            line: 3180,
                                            column: 17,
                                            left: {type: "Ident", line: 3180, column: 17, name: "object"},
                                            op: ".",
                                            right: {type: "Ident", line: 3180, column: 25, name: "property"}
                                          }
                                        },
                                        {
                                          type: "Binary",
                                          line: 1,
                                          column: 1,
                                          left: {
                                            type: "Binary",
                                            line: 3181,
                                            column: 17,
                                            left: {type: "Ident", line: 3181, column: 11, name: "object"},
                                            op: ".",
                                            right: {type: "Ident", line: 3181, column: 18, name: "property"}
                                          },
                                          op: "=",
                                          right: {
                                            type: "Binary",
                                            line: 3181,
                                            column: 30,
                                            left: {type: "Ident", line: 3181, column: 30, name: "descriptor"},
                                            op: ".",
                                            right: {type: "Const", line: 3181, column: 42, value: "value"}
                                          }
                                        },
                                        {
                                          type: "Binary",
                                          line: 1,
                                          column: 1,
                                          left: {
                                            type: "Binary",
                                            line: 3182,
                                            column: 17,
                                            left: {type: "Ident", line: 3182, column: 11, name: "object"},
                                            op: ".",
                                            right: {type: "Const", line: 3182, column: 18, value: "__proto__"}
                                          },
                                          op: "=",
                                          right: {type: "Ident", line: 3182, column: 30, name: "proto"}
                                        }
                                      ]
                                    },
                                    whenFalse: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {
                                        type: "Binary",
                                        line: 3184,
                                        column: 17,
                                        left: {type: "Ident", line: 3184, column: 11, name: "object"},
                                        op: ".",
                                        right: {type: "Ident", line: 3184, column: 18, name: "property"}
                                      },
                                      op: "=",
                                      right: {
                                        type: "Binary",
                                        line: 3184,
                                        column: 30,
                                        left: {type: "Ident", line: 3184, column: 30, name: "descriptor"},
                                        op: ".",
                                        right: {type: "Const", line: 3184, column: 42, value: "value"}
                                      }
                                    }
                                  },
                                  whenFalse: {
                                    type: "BlockStatement",
                                    line: 3186,
                                    column: 1,
                                    body: [
                                      {
                                        type: "IfStatement",
                                        line: 1,
                                        column: 1,
                                        test: {
                                          type: "Unary",
                                          line: 1,
                                          column: 1,
                                          op: "!",
                                          node: {type: "Ident", line: 3186, column: 15, name: "supportsAccessors"}
                                        },
                                        whenTrue: {
                                          type: "Throw",
                                          line: 1,
                                          column: 1,
                                          node: {
                                            type: "Call",
                                            line: 3187,
                                            column: 16,
                                            func: {type: "Ident", line: 3187, column: 16, name: "Error"},
                                            args: [{
                                              type: "Const",
                                              line: 3187,
                                              column: 23,
                                              value: "Getters and setters cannot be defined on this Javascript engine"
                                            }]
                                          }
                                        }
                                      },
                                      {
                                        type: "IfStatement",
                                        line: 1,
                                        column: 1,
                                        test: {
                                          type: "Call",
                                          line: 595,
                                          column: 7,
                                          func: {
                                            type: "Binary",
                                            line: 595,
                                            column: 7,
                                            left: {type: "Ident", line: 595, column: 7, name: "__owns"},
                                            op: ".",
                                            right: {type: "Const", line: 595, column: 7, value: "call"}
                                          },
                                          args: [
                                            {type: "Ident", line: 3188, column: 11, name: "descriptor"},
                                            {type: "Const", line: 3188, column: 32, value: "get"}
                                          ]
                                        },
                                        whenTrue: {
                                          type: "Call",
                                          line: 3189,
                                          column: 11,
                                          func: {
                                            type: "Binary",
                                            line: 3189,
                                            column: 11,
                                            left: {type: "Ident", line: 3189, column: 11, name: "defineGetter"},
                                            op: ".",
                                            right: {type: "Const", line: 3189, column: 11, value: "call"}
                                          },
                                          args: [
                                            {type: "Ident", line: 3189, column: 26, name: "object"},
                                            {type: "Ident", line: 3189, column: 33, name: "property"},
                                            {
                                              type: "Binary",
                                              line: 3189,
                                              column: 43,
                                              left: {type: "Ident", line: 3189, column: 43, name: "descriptor"},
                                              op: ".",
                                              right: {type: "Const", line: 3189, column: 55, value: "get"}
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        type: "IfStatement",
                                        line: 1,
                                        column: 1,
                                        test: {
                                          type: "Call",
                                          line: 595,
                                          column: 7,
                                          func: {
                                            type: "Binary",
                                            line: 595,
                                            column: 7,
                                            left: {type: "Ident", line: 595, column: 7, name: "__owns"},
                                            op: ".",
                                            right: {type: "Const", line: 595, column: 7, value: "call"}
                                          },
                                          args: [
                                            {type: "Ident", line: 3190, column: 11, name: "descriptor"},
                                            {type: "Const", line: 3190, column: 32, value: "set"}
                                          ]
                                        },
                                        whenTrue: {
                                          type: "Call",
                                          line: 3191,
                                          column: 11,
                                          func: {
                                            type: "Binary",
                                            line: 3191,
                                            column: 11,
                                            left: {type: "Ident", line: 3191, column: 11, name: "defineSetter"},
                                            op: ".",
                                            right: {type: "Const", line: 3191, column: 11, value: "call"}
                                          },
                                          args: [
                                            {type: "Ident", line: 3191, column: 26, name: "object"},
                                            {type: "Ident", line: 3191, column: 33, name: "property"},
                                            {
                                              type: "Binary",
                                              line: 3191,
                                              column: 43,
                                              left: {type: "Ident", line: 3191, column: 43, name: "descriptor"},
                                              op: ".",
                                              right: {type: "Const", line: 3191, column: 55, value: "set"}
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  type: "Return",
                                  line: 3192,
                                  column: 7,
                                  node: {type: "Ident", line: 3192, column: 7, name: "object"}
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            }
          },
          type: {type: "any"},
          dependencies: [
            "__defProp",
            "__owns",
            "__typeof",
            "defineGetter",
            "defineSetter",
            "descriptor",
            "e",
            "Error",
            "fallback",
            "lookupGetter",
            "lookupSetter",
            "o",
            "object",
            "Object",
            "property",
            "proto",
            "supportsAccessors",
            "TypeError"
          ]
        },
        __compose: {
          helper: {
            type: "Func",
            line: 1832,
            column: 1,
            params: [
              {type: "Ident", line: 3198, column: 29, name: "left"},
              {type: "Ident", line: 3198, column: 40, name: "right"}
            ],
            body: {
              type: "BlockStatement",
              line: 1832,
              column: 1,
              body: [
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 606,
                    column: 18,
                    left: {
                      type: "Unary",
                      line: 1,
                      column: 1,
                      op: "typeof",
                      node: {type: "Ident", line: 3198, column: 29, name: "left"}
                    },
                    op: "!==",
                    right: {type: "Const", line: 124, column: 25, value: "function"}
                  },
                  whenTrue: {
                    type: "Throw",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 1620,
                      column: 18,
                      func: {type: "Ident", line: 1620, column: 18, name: "TypeError"},
                      args: [{
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Const", line: 1, column: 1, value: "Expected left to be a Function, got "},
                        op: "+",
                        right: {
                          type: "Call",
                          line: 470,
                          column: 49,
                          func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                          args: [{type: "Ident", line: 3198, column: 29, name: "left"}]
                        }
                      }]
                    }
                  }
                },
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 606,
                    column: 18,
                    left: {
                      type: "Unary",
                      line: 1,
                      column: 1,
                      op: "typeof",
                      node: {type: "Ident", line: 3198, column: 40, name: "right"}
                    },
                    op: "!==",
                    right: {type: "Const", line: 124, column: 25, value: "function"}
                  },
                  whenTrue: {
                    type: "Throw",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 1620,
                      column: 18,
                      func: {type: "Ident", line: 1620, column: 18, name: "TypeError"},
                      args: [{
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Const", line: 1, column: 1, value: "Expected right to be a Function, got "},
                        op: "+",
                        right: {
                          type: "Call",
                          line: 470,
                          column: 49,
                          func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                          args: [{type: "Ident", line: 3198, column: 40, name: "right"}]
                        }
                      }]
                    }
                  }
                },
                {
                  type: "Return",
                  line: 3199,
                  column: 4,
                  node: {
                    type: "Func",
                    line: 3199,
                    column: 4,
                    body: {
                      type: "Return",
                      line: 3199,
                      column: 6,
                      node: {
                        type: "Call",
                        line: 3199,
                        column: 6,
                        func: {
                          type: "Binary",
                          line: 3199,
                          column: 6,
                          left: {type: "Ident", line: 3199, column: 6, name: "left"},
                          op: ".",
                          right: {type: "Const", line: 3199, column: 6, value: "call"}
                        },
                        args: [
                          {type: "This", line: 3199, column: 13},
                          {
                            type: "Call",
                            line: 3199,
                            column: 18,
                            func: {
                              type: "Binary",
                              line: 3199,
                              column: 18,
                              left: {type: "Ident", line: 3199, column: 18, name: "right"},
                              op: ".",
                              right: {type: "Const", line: 3199, column: 18, value: "apply"}
                            },
                            args: [
                              {type: "This", line: 3199, column: 26},
                              {type: "Arguments", line: 3199, column: 35}
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{
              type: "generic",
              base: {type: "simple", name: "functionBase"},
              args: [{type: "any"}]
            }]
          },
          dependencies: [
            "__compose",
            "__toArray",
            "__typeof",
            "left",
            "right",
            "TypeError"
          ]
        },
        __curry: {
          helper: {
            type: "Func",
            line: 1832,
            column: 1,
            params: [
              {type: "Ident", line: 3213, column: 27, name: "numArgs"},
              {type: "Ident", line: 3213, column: 46, name: "f"}
            ],
            variables: ["currier"],
            body: {
              type: "BlockStatement",
              line: 1832,
              column: 1,
              body: [
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 602,
                    column: 18,
                    left: {
                      type: "Unary",
                      line: 1,
                      column: 1,
                      op: "typeof",
                      node: {type: "Ident", line: 3213, column: 27, name: "numArgs"}
                    },
                    op: "!==",
                    right: {type: "Const", line: 118, column: 25, value: "number"}
                  },
                  whenTrue: {
                    type: "Throw",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 1620,
                      column: 18,
                      func: {type: "Ident", line: 1620, column: 18, name: "TypeError"},
                      args: [{
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Const", line: 1, column: 1, value: "Expected numArgs to be a Number, got "},
                        op: "+",
                        right: {
                          type: "Call",
                          line: 470,
                          column: 49,
                          func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                          args: [{type: "Ident", line: 3213, column: 27, name: "numArgs"}]
                        }
                      }]
                    }
                  }
                },
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 606,
                    column: 18,
                    left: {
                      type: "Unary",
                      line: 1,
                      column: 1,
                      op: "typeof",
                      node: {type: "Ident", line: 3213, column: 46, name: "f"}
                    },
                    op: "!==",
                    right: {type: "Const", line: 124, column: 25, value: "function"}
                  },
                  whenTrue: {
                    type: "Throw",
                    line: 1,
                    column: 1,
                    node: {
                      type: "Call",
                      line: 1620,
                      column: 18,
                      func: {type: "Ident", line: 1620, column: 18, name: "TypeError"},
                      args: [{
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Const", line: 1, column: 1, value: "Expected f to be a Function, got "},
                        op: "+",
                        right: {
                          type: "Call",
                          line: 470,
                          column: 49,
                          func: {type: "Ident", line: 470, column: 49, name: "__typeof"},
                          args: [{type: "Ident", line: 3213, column: 46, name: "f"}]
                        }
                      }]
                    }
                  }
                },
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {type: "Ident", line: 3214, column: 5, name: "numArgs"},
                    op: ">",
                    right: {type: "Const", line: 3214, column: 17, value: 1}
                  },
                  whenTrue: {
                    type: "BlockStatement",
                    line: 3215,
                    column: 1,
                    body: [
                      {
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Ident", line: 3215, column: 8, name: "currier"},
                        op: "=",
                        right: {
                          type: "Func",
                          line: 3215,
                          column: 16,
                          params: [{type: "Ident", line: 3215, column: 17, name: "args"}],
                          variables: ["ret"],
                          body: {
                            type: "IfStatement",
                            line: 1,
                            column: 1,
                            test: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {
                                type: "Call",
                                line: 693,
                                column: 11,
                                func: {type: "Ident", line: 693, column: 11, name: "__num"},
                                args: [{
                                  type: "Binary",
                                  line: 3216,
                                  column: 9,
                                  left: {type: "Ident", line: 3216, column: 9, name: "args"},
                                  op: ".",
                                  right: {type: "Const", line: 3216, column: 15, value: "length"}
                                }]
                              },
                              op: ">=",
                              right: {type: "Ident", line: 3216, column: 24, name: "numArgs"}
                            },
                            whenTrue: {
                              type: "Return",
                              line: 3217,
                              column: 9,
                              node: {
                                type: "Call",
                                line: 3217,
                                column: 9,
                                func: {
                                  type: "Binary",
                                  line: 3217,
                                  column: 9,
                                  left: {type: "Ident", line: 3217, column: 9, name: "f"},
                                  op: ".",
                                  right: {type: "Const", line: 3217, column: 11, value: "apply"}
                                },
                                args: [
                                  {type: "This", line: 3217, column: 17},
                                  {type: "Ident", line: 3217, column: 22, name: "args"}
                                ]
                              }
                            },
                            whenFalse: {
                              type: "BlockStatement",
                              line: 3219,
                              column: 1,
                              body: [
                                {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {type: "Ident", line: 3219, column: 12, name: "ret"},
                                  op: "=",
                                  right: {
                                    type: "Func",
                                    line: 3219,
                                    column: 16,
                                    body: {
                                      type: "IfStatement",
                                      line: 1,
                                      column: 1,
                                      test: {
                                        type: "Binary",
                                        line: 1,
                                        column: 1,
                                        left: {
                                          type: "Binary",
                                          line: 3220,
                                          column: 13,
                                          left: {type: "Arguments", line: 3220, column: 13},
                                          op: ".",
                                          right: {type: "Const", line: 3220, column: 24, value: "length"}
                                        },
                                        op: "===",
                                        right: {
                                          type: "Const",
                                          line: 3220,
                                          column: 34,
                                          value: 0,
                                          sign: 1
                                        }
                                      },
                                      whenTrue: {
                                        type: "Return",
                                        line: 3221,
                                        column: 13,
                                        node: {type: "Ident", line: 3221, column: 13, name: "ret"}
                                      },
                                      whenFalse: {
                                        type: "Return",
                                        line: 3223,
                                        column: 13,
                                        node: {
                                          type: "Call",
                                          line: 3223,
                                          column: 13,
                                          func: {
                                            type: "Binary",
                                            line: 3223,
                                            column: 13,
                                            left: {type: "Ident", line: 3223, column: 13, name: "currier"},
                                            op: ".",
                                            right: {type: "Const", line: 3223, column: 13, value: "call"}
                                          },
                                          args: [
                                            {type: "This", line: 3223, column: 22},
                                            {
                                              type: "Call",
                                              line: 3223,
                                              column: 27,
                                              func: {
                                                type: "Binary",
                                                line: 3223,
                                                column: 27,
                                                left: {type: "Ident", line: 3223, column: 27, name: "args"},
                                                op: ".",
                                                right: {type: "Const", line: 3223, column: 33, value: "concat"}
                                              },
                                              args: [{
                                                type: "Call",
                                                line: 3223,
                                                column: 40,
                                                func: {
                                                  type: "Binary",
                                                  line: 3223,
                                                  column: 40,
                                                  left: {type: "Ident", line: 3223, column: 40, name: "__slice"},
                                                  op: ".",
                                                  right: {type: "Const", line: 3223, column: 40, value: "call"}
                                                },
                                                args: [{type: "Arguments", line: 3223, column: 49}]
                                              }]
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  type: "Return",
                                  line: 3224,
                                  column: 9,
                                  node: {type: "Ident", line: 3224, column: 9, name: "ret"}
                                }
                              ]
                            }
                          }
                        }
                      },
                      {
                        type: "Return",
                        line: 3225,
                        column: 5,
                        node: {
                          type: "Call",
                          line: 3225,
                          column: 5,
                          func: {type: "Ident", line: 3225, column: 5, name: "currier"},
                          args: [{type: "Arr", line: 3225, column: 13}]
                        }
                      }
                    ]
                  },
                  whenFalse: {
                    type: "Return",
                    line: 3227,
                    column: 5,
                    node: {type: "Ident", line: 3227, column: 5, name: "f"}
                  }
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{
              type: "generic",
              base: {type: "simple", name: "functionBase"},
              args: [{type: "any"}]
            }]
          },
          dependencies: [
            "__curry",
            "__num",
            "__slice",
            "__typeof",
            "args",
            "currier",
            "f",
            "numArgs",
            "ret",
            "TypeError"
          ]
        },
        __import: {
          helper: {
            type: "Func",
            line: 3241,
            column: 27,
            params: [
              {type: "Ident", line: 3241, column: 28, name: "dest"},
              {type: "Ident", line: 3241, column: 33, name: "source"}
            ],
            variables: ["k"],
            body: {
              type: "BlockStatement",
              line: 3242,
              column: 1,
              body: [
                {
                  type: "ForIn",
                  line: 1,
                  column: 1,
                  key: {type: "Ident", line: 3242, column: 6, name: "k"},
                  object: {type: "Ident", line: 3242, column: 11, name: "source"},
                  body: {
                    type: "IfStatement",
                    line: 1,
                    column: 1,
                    test: {
                      type: "Call",
                      line: 595,
                      column: 7,
                      func: {
                        type: "Binary",
                        line: 595,
                        column: 7,
                        left: {type: "Ident", line: 595, column: 7, name: "__owns"},
                        op: ".",
                        right: {type: "Const", line: 595, column: 7, value: "call"}
                      },
                      args: [
                        {type: "Ident", line: 3242, column: 11, name: "source"},
                        {type: "Ident", line: 3242, column: 6, name: "k"}
                      ]
                    },
                    whenTrue: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {
                        type: "Binary",
                        line: 3243,
                        column: 9,
                        left: {type: "Ident", line: 3243, column: 5, name: "dest"},
                        op: ".",
                        right: {type: "Ident", line: 3243, column: 10, name: "k"}
                      },
                      op: "=",
                      right: {
                        type: "Binary",
                        line: 3243,
                        column: 15,
                        left: {type: "Ident", line: 3243, column: 15, name: "source"},
                        op: ".",
                        right: {type: "Ident", line: 3243, column: 23, name: "k"}
                      }
                    }
                  }
                },
                {
                  type: "Return",
                  line: 3244,
                  column: 3,
                  node: {type: "Ident", line: 3244, column: 3, name: "dest"}
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "object", pairs: {}}]
          },
          dependencies: [
            "__import",
            "__owns",
            "dest",
            "k",
            "source"
          ]
        },
        WeakMap: {
          helper: {
            type: "IfExpression",
            line: 1,
            column: 1,
            test: {
              type: "Binary",
              line: 1,
              column: 1,
              left: {
                type: "Unary",
                line: 1,
                column: 1,
                op: "typeof",
                node: {
                  type: "Binary",
                  line: 3293,
                  column: 40,
                  left: {type: "Ident", line: 3293, column: 40, name: "GLOBAL"},
                  op: ".",
                  right: {type: "Const", line: 3293, column: 48, value: "WeakMap"}
                }
              },
              op: "===",
              right: {type: "Const", line: 124, column: 25, value: "function"}
            },
            whenTrue: {
              type: "Binary",
              line: 3293,
              column: 60,
              left: {type: "Ident", line: 3293, column: 60, name: "GLOBAL"},
              op: ".",
              right: {type: "Const", line: 3293, column: 68, value: "WeakMap"}
            },
            whenFalse: {
              type: "Call",
              line: 3,
              column: 9,
              func: {
                type: "Func",
                line: 3,
                column: 12,
                body: {
                  type: "BlockStatement",
                  line: 3294,
                  column: 1,
                  body: [
                    {
                      type: "Func",
                      line: 1,
                      column: 1,
                      name: {type: "Ident", line: 3294, column: 6, name: "WeakMap"},
                      variables: ["keys", "values"],
                      body: {
                        type: "BlockStatement",
                        line: 3295,
                        column: 1,
                        body: [
                          {
                            type: "IfStatement",
                            line: 1,
                            column: 1,
                            test: {
                              type: "Unary",
                              line: 1,
                              column: 1,
                              op: "!",
                              node: {
                                type: "Binary",
                                line: 1,
                                column: 1,
                                left: {type: "This", line: 3295, column: 7},
                                op: "instanceof",
                                right: {type: "Ident", line: 3295, column: 27, name: "WeakMap"}
                              }
                            },
                            whenTrue: {
                              type: "Return",
                              line: 1,
                              column: 1,
                              node: {
                                type: "Call",
                                line: 3296,
                                column: 13,
                                func: {
                                  type: "Binary",
                                  line: 3296,
                                  column: 13,
                                  left: {type: "Ident", line: 3296, column: 13, name: "WeakMap"},
                                  op: ".",
                                  right: {type: "Const", line: 3296, column: 13, value: "apply"}
                                },
                                args: [
                                  {
                                    type: "Call",
                                    line: 107935,
                                    column: 107964,
                                    func: {type: "Ident", line: 107935, column: 107964, name: "__create"},
                                    args: [{
                                      type: "Binary",
                                      line: 3296,
                                      column: 32,
                                      left: {type: "Ident", line: 3296, column: 32, name: "WeakMap"},
                                      op: ".",
                                      right: {type: "Const", line: 3296, column: 41, value: "prototype"}
                                    }]
                                  },
                                  {type: "Arguments", line: 3296, column: 57}
                                ]
                              }
                            }
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 3297, column: 8, name: "keys"},
                            op: "=",
                            right: {type: "Arr", line: 3297, column: 15}
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 3298, column: 8, name: "values"},
                            op: "=",
                            right: {type: "Arr", line: 3298, column: 17}
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 3300,
                              column: 5,
                              left: {type: "This", line: 3300, column: 5},
                              op: ".",
                              right: {type: "Const", line: 3300, column: 6, value: "get"}
                            },
                            op: "=",
                            right: {
                              type: "Func",
                              line: 3300,
                              column: 14,
                              params: [
                                {type: "Ident", line: 3300, column: 15, name: "key"},
                                {type: "Ident", line: 3300, column: 19, name: "fallback"}
                              ],
                              variables: ["index"],
                              body: {
                                type: "BlockStatement",
                                line: 3301,
                                column: 1,
                                body: [
                                  {
                                    type: "IfStatement",
                                    line: 1,
                                    column: 1,
                                    test: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {
                                        type: "Call",
                                        line: 3301,
                                        column: 9,
                                        func: {type: "Ident", line: 3301, column: 9, name: "Object"},
                                        args: [{type: "Ident", line: 3301, column: 17, name: "key"}]
                                      },
                                      op: "!==",
                                      right: {type: "Ident", line: 3301, column: 24, name: "key"}
                                    },
                                    whenTrue: {
                                      type: "Throw",
                                      line: 1,
                                      column: 1,
                                      node: {
                                        type: "Call",
                                        line: 3302,
                                        column: 14,
                                        func: {type: "Ident", line: 3302, column: 14, name: "TypeError"},
                                        args: [{type: "Const", line: 3302, column: 25, value: "Invalid value used as weak map key"}]
                                      }
                                    }
                                  },
                                  {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {type: "Ident", line: 3303, column: 10, name: "index"},
                                    op: "=",
                                    right: {
                                      type: "Call",
                                      line: 3303,
                                      column: 18,
                                      func: {
                                        type: "Binary",
                                        line: 3303,
                                        column: 18,
                                        left: {type: "Ident", line: 3303, column: 18, name: "keys"},
                                        op: ".",
                                        right: {type: "Const", line: 3303, column: 24, value: "indexOf"}
                                      },
                                      args: [{type: "Ident", line: 3303, column: 33, name: "key"}]
                                    }
                                  },
                                  {
                                    type: "IfStatement",
                                    line: 1,
                                    column: 1,
                                    test: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 3304, column: 9, name: "index"},
                                      op: "===",
                                      right: {type: "Const", line: 1, column: 1, value: -1}
                                    },
                                    whenTrue: {
                                      type: "Return",
                                      line: 3305,
                                      column: 9,
                                      node: {type: "Ident", line: 3305, column: 9, name: "fallback"}
                                    },
                                    whenFalse: {
                                      type: "Return",
                                      line: 3307,
                                      column: 9,
                                      node: {
                                        type: "Binary",
                                        line: 3307,
                                        column: 9,
                                        left: {type: "Ident", line: 3307, column: 9, name: "values"},
                                        op: ".",
                                        right: {type: "Ident", line: 3307, column: 16, name: "index"}
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 3308,
                              column: 5,
                              left: {type: "This", line: 3308, column: 5},
                              op: ".",
                              right: {type: "Const", line: 3308, column: 6, value: "has"}
                            },
                            op: "=",
                            right: {
                              type: "Func",
                              line: 3308,
                              column: 14,
                              params: [{type: "Ident", line: 3308, column: 15, name: "key"}],
                              body: {
                                type: "BlockStatement",
                                line: 3309,
                                column: 1,
                                body: [
                                  {
                                    type: "IfStatement",
                                    line: 1,
                                    column: 1,
                                    test: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {
                                        type: "Call",
                                        line: 3309,
                                        column: 9,
                                        func: {type: "Ident", line: 3309, column: 9, name: "Object"},
                                        args: [{type: "Ident", line: 3309, column: 17, name: "key"}]
                                      },
                                      op: "!==",
                                      right: {type: "Ident", line: 3309, column: 24, name: "key"}
                                    },
                                    whenTrue: {
                                      type: "Throw",
                                      line: 1,
                                      column: 1,
                                      node: {
                                        type: "Call",
                                        line: 3310,
                                        column: 14,
                                        func: {type: "Ident", line: 3310, column: 14, name: "TypeError"},
                                        args: [{type: "Const", line: 3310, column: 25, value: "Invalid value used as weak map key"}]
                                      }
                                    }
                                  },
                                  {
                                    type: "Return",
                                    line: 1,
                                    column: 1,
                                    node: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {
                                        type: "Call",
                                        line: 3311,
                                        column: 7,
                                        func: {
                                          type: "Binary",
                                          line: 3311,
                                          column: 7,
                                          left: {type: "Ident", line: 3311, column: 7, name: "keys"},
                                          op: ".",
                                          right: {type: "Const", line: 3311, column: 12, value: "indexOf"}
                                        },
                                        args: [{type: "Ident", line: 3311, column: 21, name: "key"}]
                                      },
                                      op: "!==",
                                      right: {type: "Const", line: 1, column: 1, value: -1}
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 3312,
                              column: 5,
                              left: {type: "This", line: 3312, column: 5},
                              op: ".",
                              right: {type: "Const", line: 3312, column: 6, value: "set"}
                            },
                            op: "=",
                            right: {
                              type: "Func",
                              line: 3312,
                              column: 14,
                              params: [
                                {type: "Ident", line: 3312, column: 15, name: "key"},
                                {type: "Ident", line: 3312, column: 19, name: "value"}
                              ],
                              variables: ["index"],
                              body: {
                                type: "BlockStatement",
                                line: 3313,
                                column: 1,
                                body: [
                                  {
                                    type: "IfStatement",
                                    line: 1,
                                    column: 1,
                                    test: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {
                                        type: "Call",
                                        line: 3313,
                                        column: 9,
                                        func: {type: "Ident", line: 3313, column: 9, name: "Object"},
                                        args: [{type: "Ident", line: 3313, column: 17, name: "key"}]
                                      },
                                      op: "!==",
                                      right: {type: "Ident", line: 3313, column: 24, name: "key"}
                                    },
                                    whenTrue: {
                                      type: "Throw",
                                      line: 1,
                                      column: 1,
                                      node: {
                                        type: "Call",
                                        line: 3314,
                                        column: 14,
                                        func: {type: "Ident", line: 3314, column: 14, name: "TypeError"},
                                        args: [{type: "Const", line: 3314, column: 25, value: "Invalid value used as weak map key"}]
                                      }
                                    }
                                  },
                                  {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {type: "Ident", line: 3315, column: 18, name: "index"},
                                    op: "=",
                                    right: {
                                      type: "Call",
                                      line: 3315,
                                      column: 26,
                                      func: {
                                        type: "Binary",
                                        line: 3315,
                                        column: 26,
                                        left: {type: "Ident", line: 3315, column: 26, name: "keys"},
                                        op: ".",
                                        right: {type: "Const", line: 3315, column: 32, value: "indexOf"}
                                      },
                                      args: [{type: "Ident", line: 3315, column: 41, name: "key"}]
                                    }
                                  },
                                  {
                                    type: "IfStatement",
                                    line: 1,
                                    column: 1,
                                    test: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 3316, column: 9, name: "index"},
                                      op: "===",
                                      right: {type: "Const", line: 1, column: 1, value: -1}
                                    },
                                    whenTrue: {
                                      type: "BlockStatement",
                                      line: 3317,
                                      column: 1,
                                      body: [
                                        {
                                          type: "Binary",
                                          line: 1,
                                          column: 1,
                                          left: {type: "Ident", line: 3317, column: 9, name: "index"},
                                          op: "=",
                                          right: {
                                            type: "Binary",
                                            line: 3317,
                                            column: 17,
                                            left: {type: "Ident", line: 3317, column: 17, name: "keys"},
                                            op: ".",
                                            right: {type: "Const", line: 3317, column: 23, value: "length"}
                                          }
                                        },
                                        {
                                          type: "Binary",
                                          line: 1,
                                          column: 1,
                                          left: {
                                            type: "Binary",
                                            line: 3318,
                                            column: 13,
                                            left: {type: "Ident", line: 3318, column: 9, name: "keys"},
                                            op: ".",
                                            right: {type: "Ident", line: 3318, column: 14, name: "index"}
                                          },
                                          op: "=",
                                          right: {type: "Ident", line: 3318, column: 23, name: "key"}
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {
                                      type: "Binary",
                                      line: 3319,
                                      column: 13,
                                      left: {type: "Ident", line: 3319, column: 7, name: "values"},
                                      op: ".",
                                      right: {type: "Ident", line: 3319, column: 14, name: "index"}
                                    },
                                    op: "=",
                                    right: {type: "Ident", line: 3319, column: 23, name: "value"}
                                  }
                                ]
                              }
                            }
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 3320,
                              column: 5,
                              left: {type: "This", line: 3320, column: 5},
                              op: ".",
                              right: {type: "Const", line: 3320, column: 6, value: "delete"}
                            },
                            op: "=",
                            right: {
                              type: "Func",
                              line: 3320,
                              column: 17,
                              params: [{type: "Ident", line: 3320, column: 18, name: "key"}],
                              variables: ["index"],
                              body: {
                                type: "BlockStatement",
                                line: 3321,
                                column: 1,
                                body: [
                                  {
                                    type: "IfStatement",
                                    line: 1,
                                    column: 1,
                                    test: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {
                                        type: "Call",
                                        line: 3321,
                                        column: 9,
                                        func: {type: "Ident", line: 3321, column: 9, name: "Object"},
                                        args: [{type: "Ident", line: 3321, column: 17, name: "key"}]
                                      },
                                      op: "!==",
                                      right: {type: "Ident", line: 3321, column: 24, name: "key"}
                                    },
                                    whenTrue: {
                                      type: "Throw",
                                      line: 1,
                                      column: 1,
                                      node: {
                                        type: "Call",
                                        line: 3322,
                                        column: 14,
                                        func: {type: "Ident", line: 3322, column: 14, name: "TypeError"},
                                        args: [{type: "Const", line: 3322, column: 25, value: "Invalid value used as weak map key"}]
                                      }
                                    }
                                  },
                                  {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {type: "Ident", line: 3323, column: 18, name: "index"},
                                    op: "=",
                                    right: {
                                      type: "Call",
                                      line: 3323,
                                      column: 26,
                                      func: {
                                        type: "Binary",
                                        line: 3323,
                                        column: 26,
                                        left: {type: "Ident", line: 3323, column: 26, name: "keys"},
                                        op: ".",
                                        right: {type: "Const", line: 3323, column: 32, value: "indexOf"}
                                      },
                                      args: [{type: "Ident", line: 3323, column: 41, name: "key"}]
                                    }
                                  },
                                  {
                                    type: "IfStatement",
                                    line: 1,
                                    column: 1,
                                    test: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 3324, column: 9, name: "index"},
                                      op: "!==",
                                      right: {type: "Const", line: 1, column: 1, value: -1}
                                    },
                                    whenTrue: {
                                      type: "BlockStatement",
                                      line: 3325,
                                      column: 1,
                                      body: [
                                        {
                                          type: "Call",
                                          line: 3325,
                                          column: 9,
                                          func: {
                                            type: "Binary",
                                            line: 3325,
                                            column: 9,
                                            left: {type: "Ident", line: 3325, column: 9, name: "keys"},
                                            op: ".",
                                            right: {type: "Const", line: 3325, column: 14, value: "splice"}
                                          },
                                          args: [
                                            {type: "Ident", line: 3325, column: 21, name: "index"},
                                            {type: "Const", line: 3325, column: 28, value: 1}
                                          ]
                                        },
                                        {
                                          type: "Call",
                                          line: 3326,
                                          column: 9,
                                          func: {
                                            type: "Binary",
                                            line: 3326,
                                            column: 9,
                                            left: {type: "Ident", line: 3326, column: 9, name: "values"},
                                            op: ".",
                                            right: {type: "Const", line: 3326, column: 16, value: "splice"}
                                          },
                                          args: [
                                            {type: "Ident", line: 3326, column: 23, name: "index"},
                                            {type: "Const", line: 3326, column: 30, value: 1}
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            type: "Return",
                            line: 3327,
                            column: 5,
                            node: {type: "This", line: 3327, column: 5}
                          }
                        ]
                      }
                    },
                    {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {
                        type: "Binary",
                        line: 3328,
                        column: 10,
                        left: {type: "Ident", line: 3328, column: 3, name: "WeakMap"},
                        op: ".",
                        right: {type: "Const", line: 3328, column: 11, value: "displayName"}
                      },
                      op: "=",
                      right: {type: "Const", line: 3328, column: 27, value: "WeakMap"}
                    },
                    {
                      type: "Return",
                      line: 3329,
                      column: 3,
                      node: {type: "Ident", line: 3329, column: 3, name: "WeakMap"}
                    }
                  ]
                }
              }
            }
          },
          type: {type: "any"},
          dependencies: [
            "__create",
            "__toArray",
            "fallback",
            "GLOBAL",
            "index",
            "key",
            "keys",
            "Object",
            "TypeError",
            "value",
            "values",
            "WeakMap"
          ]
        },
        __indexOfIdentical: {
          helper: {
            type: "Func",
            line: 3331,
            column: 39,
            params: [
              {type: "Ident", line: 3331, column: 40, name: "array"},
              {type: "Ident", line: 3331, column: 46, name: "item"}
            ],
            variables: ["_arr", "check", "i", "inf"],
            body: {
              type: "BlockStatement",
              line: 3332,
              column: 1,
              body: [
                {
                  type: "IfStatement",
                  line: 1,
                  column: 1,
                  test: {
                    type: "Binary",
                    line: 1,
                    column: 1,
                    left: {
                      type: "Unary",
                      line: 1,
                      column: 1,
                      op: "typeof",
                      node: {type: "Ident", line: 3332, column: 12, name: "item"}
                    },
                    op: "===",
                    right: {type: "Const", line: 3332, column: 22, value: "number"}
                  },
                  whenTrue: {
                    type: "IfStatement",
                    line: 1,
                    column: 1,
                    test: {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {type: "Ident", line: 3333, column: 7, name: "item"},
                      op: "!==",
                      right: {type: "Ident", line: 3333, column: 7, name: "item"}
                    },
                    whenTrue: {
                      type: "BlockStatement",
                      line: 3334,
                      column: 1,
                      body: [
                        {
                          type: "For",
                          line: 1,
                          column: 1,
                          init: {
                            type: "BlockExpression",
                            line: 0,
                            column: 0,
                            body: [
                              {
                                type: "Binary",
                                line: 1,
                                column: 1,
                                left: {type: "Ident", line: 1, column: 1, name: "_arr"},
                                op: "=",
                                right: {
                                  type: "Call",
                                  line: 1285,
                                  column: 22,
                                  func: {type: "Ident", line: 1285, column: 22, name: "__toArray"},
                                  args: [{type: "Ident", line: 3334, column: 22, name: "array"}]
                                }
                              },
                              {
                                type: "Binary",
                                line: 1,
                                column: 1,
                                left: {type: "Ident", line: 3334, column: 17, name: "i"},
                                op: "=",
                                right: {
                                  type: "Binary",
                                  line: 1324,
                                  column: 49,
                                  left: {type: "Ident", line: 1, column: 1, name: "_arr"},
                                  op: ".",
                                  right: {type: "Const", line: 1324, column: 56, value: "length"}
                                }
                              }
                            ]
                          },
                          test: {
                            type: "Unary",
                            line: 1,
                            column: 1,
                            op: "--post",
                            node: {type: "Ident", line: 3334, column: 17, name: "i"}
                          },
                          body: {
                            type: "BlockStatement",
                            line: 1407,
                            column: 1,
                            body: [
                              {
                                type: "Binary",
                                line: 1,
                                column: 1,
                                left: {type: "Ident", line: 3334, column: 10, name: "check"},
                                op: "=",
                                right: {
                                  type: "Binary",
                                  line: 1288,
                                  column: 75,
                                  left: {type: "Ident", line: 1, column: 1, name: "_arr"},
                                  op: ".",
                                  right: {type: "Ident", line: 3334, column: 17, name: "i"}
                                }
                              },
                              {
                                type: "IfStatement",
                                line: 1,
                                column: 1,
                                test: {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {type: "Ident", line: 3335, column: 11, name: "check"},
                                  op: "!==",
                                  right: {type: "Ident", line: 3335, column: 11, name: "check"}
                                },
                                whenTrue: {
                                  type: "Return",
                                  line: 1,
                                  column: 1,
                                  node: {type: "Ident", line: 3336, column: 17, name: "i"}
                                }
                              }
                            ]
                          }
                        },
                        {
                          type: "Return",
                          line: 1,
                          column: 1,
                          node: {type: "Const", line: 1, column: 1, value: -1}
                        }
                      ]
                    },
                    whenFalse: {
                      type: "IfStatement",
                      line: 1,
                      column: 1,
                      test: {
                        type: "Binary",
                        line: 1,
                        column: 1,
                        left: {type: "Ident", line: 3338, column: 12, name: "item"},
                        op: "===",
                        right: {
                          type: "Const",
                          line: 3338,
                          column: 21,
                          value: 0,
                          sign: 1
                        }
                      },
                      whenTrue: {
                        type: "BlockStatement",
                        line: 3339,
                        column: 1,
                        body: [
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 3339, column: 10, name: "inf"},
                            op: "=",
                            right: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Const", line: 3339, column: 17, value: 1},
                              op: "/",
                              right: {type: "Ident", line: 3339, column: 21, name: "item"}
                            }
                          },
                          {
                            type: "For",
                            line: 1,
                            column: 1,
                            init: {
                              type: "BlockExpression",
                              line: 0,
                              column: 0,
                              body: [
                                {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {type: "Ident", line: 1, column: 1, name: "_arr"},
                                  op: "=",
                                  right: {
                                    type: "Call",
                                    line: 1285,
                                    column: 22,
                                    func: {type: "Ident", line: 1285, column: 22, name: "__toArray"},
                                    args: [{type: "Ident", line: 3340, column: 22, name: "array"}]
                                  }
                                },
                                {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {type: "Ident", line: 3340, column: 17, name: "i"},
                                  op: "=",
                                  right: {
                                    type: "Binary",
                                    line: 1324,
                                    column: 49,
                                    left: {type: "Ident", line: 1, column: 1, name: "_arr"},
                                    op: ".",
                                    right: {type: "Const", line: 1324, column: 56, value: "length"}
                                  }
                                }
                              ]
                            },
                            test: {
                              type: "Unary",
                              line: 1,
                              column: 1,
                              op: "--post",
                              node: {type: "Ident", line: 3340, column: 17, name: "i"}
                            },
                            body: {
                              type: "BlockStatement",
                              line: 1407,
                              column: 1,
                              body: [
                                {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {type: "Ident", line: 3340, column: 10, name: "check"},
                                  op: "=",
                                  right: {
                                    type: "Binary",
                                    line: 1288,
                                    column: 75,
                                    left: {type: "Ident", line: 1, column: 1, name: "_arr"},
                                    op: ".",
                                    right: {type: "Ident", line: 3340, column: 17, name: "i"}
                                  }
                                },
                                {
                                  type: "IfStatement",
                                  line: 1,
                                  column: 1,
                                  test: {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 3341, column: 11, name: "check"},
                                      op: "===",
                                      right: {
                                        type: "Const",
                                        line: 3341,
                                        column: 21,
                                        value: 0,
                                        sign: 1
                                      }
                                    },
                                    op: "&&",
                                    right: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {
                                        type: "Binary",
                                        line: 1,
                                        column: 1,
                                        left: {type: "Const", line: 3341, column: 27, value: 1},
                                        op: "/",
                                        right: {type: "Ident", line: 3341, column: 31, name: "check"}
                                      },
                                      op: "===",
                                      right: {type: "Ident", line: 3341, column: 40, name: "inf"}
                                    }
                                  },
                                  whenTrue: {
                                    type: "Return",
                                    line: 1,
                                    column: 1,
                                    node: {type: "Ident", line: 3342, column: 17, name: "i"}
                                  }
                                }
                              ]
                            }
                          },
                          {
                            type: "Return",
                            line: 1,
                            column: 1,
                            node: {type: "Const", line: 1, column: 1, value: -1}
                          }
                        ]
                      }
                    }
                  }
                },
                {
                  type: "Return",
                  line: 3344,
                  column: 3,
                  node: {
                    type: "Call",
                    line: 3344,
                    column: 3,
                    func: {
                      type: "Binary",
                      line: 3344,
                      column: 3,
                      left: {type: "Ident", line: 3344, column: 3, name: "array"},
                      op: ".",
                      right: {type: "Const", line: 3344, column: 9, value: "indexOf"}
                    },
                    args: [{type: "Ident", line: 3344, column: 18, name: "item"}]
                  }
                }
              ]
            }
          },
          type: {
            type: "generic",
            base: {type: "simple", name: "functionBase"},
            args: [{type: "any"}]
          },
          dependencies: [
            "__indexOfIdentical",
            "__toArray",
            "array",
            "check",
            "i",
            "inf",
            "item"
          ]
        },
        Map: {
          helper: {
            type: "IfExpression",
            line: 1,
            column: 1,
            test: {
              type: "Binary",
              line: 1,
              column: 1,
              left: {
                type: "Unary",
                line: 1,
                column: 1,
                op: "typeof",
                node: {
                  type: "Binary",
                  line: 3346,
                  column: 36,
                  left: {type: "Ident", line: 3346, column: 36, name: "GLOBAL"},
                  op: ".",
                  right: {type: "Const", line: 3346, column: 44, value: "Map"}
                }
              },
              op: "===",
              right: {type: "Const", line: 124, column: 25, value: "function"}
            },
            whenTrue: {
              type: "Binary",
              line: 3346,
              column: 52,
              left: {type: "Ident", line: 3346, column: 52, name: "GLOBAL"},
              op: ".",
              right: {type: "Const", line: 3346, column: 60, value: "Map"}
            },
            whenFalse: {
              type: "Call",
              line: 3,
              column: 9,
              func: {
                type: "Func",
                line: 3,
                column: 12,
                body: {
                  type: "BlockStatement",
                  line: 3347,
                  column: 1,
                  body: [
                    {
                      type: "Func",
                      line: 1,
                      column: 1,
                      name: {type: "Ident", line: 3347, column: 6, name: "Map"},
                      params: [{type: "Ident", line: 3347, column: 11, name: "iterable"}],
                      variables: [
                        "_arr",
                        "_i",
                        "_iter",
                        "_len",
                        "keys",
                        "values",
                        "x"
                      ],
                      body: {
                        type: "BlockStatement",
                        line: 3348,
                        column: 1,
                        body: [
                          {
                            type: "IfStatement",
                            line: 1,
                            column: 1,
                            test: {
                              type: "Unary",
                              line: 1,
                              column: 1,
                              op: "!",
                              node: {
                                type: "Binary",
                                line: 1,
                                column: 1,
                                left: {type: "This", line: 3348, column: 7},
                                op: "instanceof",
                                right: {type: "Ident", line: 3348, column: 27, name: "Map"}
                              }
                            },
                            whenTrue: {
                              type: "Return",
                              line: 1,
                              column: 1,
                              node: {
                                type: "Call",
                                line: 3349,
                                column: 13,
                                func: {
                                  type: "Binary",
                                  line: 3349,
                                  column: 13,
                                  left: {type: "Ident", line: 3349, column: 13, name: "Map"},
                                  op: ".",
                                  right: {type: "Const", line: 3349, column: 13, value: "apply"}
                                },
                                args: [
                                  {
                                    type: "Call",
                                    line: 109461,
                                    column: 109486,
                                    func: {type: "Ident", line: 109461, column: 109486, name: "__create"},
                                    args: [{
                                      type: "Binary",
                                      line: 3349,
                                      column: 28,
                                      left: {type: "Ident", line: 3349, column: 28, name: "Map"},
                                      op: ".",
                                      right: {type: "Const", line: 3349, column: 33, value: "prototype"}
                                    }]
                                  },
                                  {type: "Arguments", line: 3349, column: 49}
                                ]
                              }
                            }
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 3350, column: 8, name: "keys"},
                            op: "=",
                            right: {type: "Arr", line: 3350, column: 15}
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 3351, column: 8, name: "values"},
                            op: "=",
                            right: {type: "Arr", line: 3351, column: 17}
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 3352,
                              column: 5,
                              left: {type: "This", line: 3352, column: 5},
                              op: ".",
                              right: {type: "Const", line: 3352, column: 6, value: "get"}
                            },
                            op: "=",
                            right: {
                              type: "Func",
                              line: 3352,
                              column: 14,
                              params: [
                                {type: "Ident", line: 3352, column: 15, name: "key"},
                                {type: "Ident", line: 3352, column: 19, name: "fallback"}
                              ],
                              variables: ["index"],
                              body: {
                                type: "BlockStatement",
                                line: 3353,
                                column: 1,
                                body: [
                                  {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {type: "Ident", line: 3353, column: 10, name: "index"},
                                    op: "=",
                                    right: {
                                      type: "Call",
                                      line: 3353,
                                      column: 18,
                                      func: {type: "Ident", line: 3353, column: 18, name: "__indexOfIdentical"},
                                      args: [
                                        {type: "Ident", line: 3353, column: 40, name: "keys"},
                                        {type: "Ident", line: 3353, column: 45, name: "key"}
                                      ]
                                    }
                                  },
                                  {
                                    type: "IfStatement",
                                    line: 1,
                                    column: 1,
                                    test: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 3354, column: 9, name: "index"},
                                      op: "===",
                                      right: {type: "Const", line: 1, column: 1, value: -1}
                                    },
                                    whenTrue: {
                                      type: "Return",
                                      line: 3355,
                                      column: 9,
                                      node: {type: "Ident", line: 3355, column: 9, name: "fallback"}
                                    },
                                    whenFalse: {
                                      type: "Return",
                                      line: 3357,
                                      column: 9,
                                      node: {
                                        type: "Binary",
                                        line: 3357,
                                        column: 9,
                                        left: {type: "Ident", line: 3357, column: 9, name: "values"},
                                        op: ".",
                                        right: {type: "Ident", line: 3357, column: 16, name: "index"}
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 3358,
                              column: 5,
                              left: {type: "This", line: 3358, column: 5},
                              op: ".",
                              right: {type: "Const", line: 3358, column: 6, value: "has"}
                            },
                            op: "=",
                            right: {
                              type: "Func",
                              line: 3358,
                              column: 14,
                              params: [{type: "Ident", line: 3358, column: 15, name: "key"}],
                              body: {
                                type: "Return",
                                line: 1,
                                column: 1,
                                node: {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {
                                    type: "Call",
                                    line: 3359,
                                    column: 7,
                                    func: {type: "Ident", line: 3359, column: 7, name: "__indexOfIdentical"},
                                    args: [
                                      {type: "Ident", line: 3359, column: 28, name: "keys"},
                                      {type: "Ident", line: 3359, column: 33, name: "key"}
                                    ]
                                  },
                                  op: "!==",
                                  right: {type: "Const", line: 1, column: 1, value: -1}
                                }
                              }
                            }
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 3360,
                              column: 5,
                              left: {type: "This", line: 3360, column: 5},
                              op: ".",
                              right: {type: "Const", line: 3360, column: 6, value: "set"}
                            },
                            op: "=",
                            right: {
                              type: "Func",
                              line: 3360,
                              column: 14,
                              params: [
                                {type: "Ident", line: 3360, column: 15, name: "key"},
                                {type: "Ident", line: 3360, column: 19, name: "value"}
                              ],
                              variables: ["index"],
                              body: {
                                type: "BlockExpression",
                                line: 3361,
                                column: 1,
                                body: [
                                  {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {type: "Ident", line: 3361, column: 18, name: "index"},
                                    op: "=",
                                    right: {
                                      type: "Call",
                                      line: 3361,
                                      column: 26,
                                      func: {type: "Ident", line: 3361, column: 26, name: "__indexOfIdentical"},
                                      args: [
                                        {type: "Ident", line: 3361, column: 48, name: "keys"},
                                        {type: "Ident", line: 3361, column: 53, name: "key"}
                                      ]
                                    }
                                  },
                                  {
                                    type: "IfExpression",
                                    line: 1,
                                    column: 1,
                                    test: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 3362, column: 9, name: "index"},
                                      op: "===",
                                      right: {type: "Const", line: 1, column: 1, value: -1}
                                    },
                                    whenTrue: {
                                      type: "BlockExpression",
                                      line: 3363,
                                      column: 1,
                                      body: [
                                        {
                                          type: "Binary",
                                          line: 1,
                                          column: 1,
                                          left: {type: "Ident", line: 3363, column: 9, name: "index"},
                                          op: "=",
                                          right: {
                                            type: "Binary",
                                            line: 3363,
                                            column: 17,
                                            left: {type: "Ident", line: 3363, column: 17, name: "keys"},
                                            op: ".",
                                            right: {type: "Const", line: 3363, column: 23, value: "length"}
                                          }
                                        },
                                        {
                                          type: "Binary",
                                          line: 1,
                                          column: 1,
                                          left: {
                                            type: "Binary",
                                            line: 3364,
                                            column: 13,
                                            left: {type: "Ident", line: 3364, column: 9, name: "keys"},
                                            op: ".",
                                            right: {type: "Ident", line: 3364, column: 14, name: "index"}
                                          },
                                          op: "=",
                                          right: {type: "Ident", line: 3364, column: 23, name: "key"}
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {
                                      type: "Binary",
                                      line: 3365,
                                      column: 13,
                                      left: {type: "Ident", line: 3365, column: 7, name: "values"},
                                      op: ".",
                                      right: {type: "Ident", line: 3365, column: 14, name: "index"}
                                    },
                                    op: "=",
                                    right: {type: "Ident", line: 3365, column: 23, name: "value"}
                                  }
                                ]
                              }
                            }
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 3366,
                              column: 5,
                              left: {type: "This", line: 3366, column: 5},
                              op: ".",
                              right: {type: "Const", line: 3366, column: 6, value: "delete"}
                            },
                            op: "=",
                            right: {
                              type: "Func",
                              line: 3366,
                              column: 17,
                              params: [{type: "Ident", line: 3366, column: 18, name: "key"}],
                              variables: ["index"],
                              body: {
                                type: "BlockExpression",
                                line: 3367,
                                column: 1,
                                body: [
                                  {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {type: "Ident", line: 3367, column: 10, name: "index"},
                                    op: "=",
                                    right: {
                                      type: "Call",
                                      line: 3367,
                                      column: 18,
                                      func: {type: "Ident", line: 3367, column: 18, name: "__indexOfIdentical"},
                                      args: [
                                        {type: "Ident", line: 3367, column: 40, name: "keys"},
                                        {type: "Ident", line: 3367, column: 45, name: "key"}
                                      ]
                                    }
                                  },
                                  {
                                    type: "IfExpression",
                                    line: 1,
                                    column: 1,
                                    test: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 3368, column: 9, name: "index"},
                                      op: "!==",
                                      right: {type: "Const", line: 1, column: 1, value: -1}
                                    },
                                    whenTrue: {
                                      type: "BlockExpression",
                                      line: 3369,
                                      column: 1,
                                      body: [
                                        {
                                          type: "Call",
                                          line: 3369,
                                          column: 9,
                                          func: {
                                            type: "Binary",
                                            line: 3369,
                                            column: 9,
                                            left: {type: "Ident", line: 3369, column: 9, name: "keys"},
                                            op: ".",
                                            right: {type: "Const", line: 3369, column: 14, value: "splice"}
                                          },
                                          args: [
                                            {type: "Ident", line: 3369, column: 21, name: "index"},
                                            {type: "Const", line: 3369, column: 28, value: 1}
                                          ]
                                        },
                                        {
                                          type: "Call",
                                          line: 3370,
                                          column: 9,
                                          func: {
                                            type: "Binary",
                                            line: 3370,
                                            column: 9,
                                            left: {type: "Ident", line: 3370, column: 9, name: "values"},
                                            op: ".",
                                            right: {type: "Const", line: 3370, column: 16, value: "splice"}
                                          },
                                          args: [
                                            {type: "Ident", line: 3370, column: 23, name: "index"},
                                            {type: "Const", line: 3370, column: 30, value: 1}
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 3371,
                              column: 5,
                              left: {type: "This", line: 3371, column: 5},
                              op: ".",
                              right: {type: "Const", line: 3371, column: 6, value: "keys"}
                            },
                            op: "=",
                            right: {
                              type: "Func",
                              line: 3371,
                              column: 15,
                              variables: [
                                "_e",
                                "_i",
                                "_len",
                                "_state",
                                "key"
                              ],
                              body: {
                                type: "BlockStatement",
                                line: 1,
                                column: 1,
                                body: [
                                  {
                                    type: "Binary",
                                    line: 3371,
                                    column: 15,
                                    left: {type: "Ident", line: 3371, column: 15, name: "_state"},
                                    op: "=",
                                    right: {type: "Const", line: 3371, column: 15, value: 1}
                                  },
                                  {
                                    type: "Func",
                                    line: 3371,
                                    column: 15,
                                    name: {type: "Ident", line: 3371, column: 15, name: "_close"},
                                    body: {
                                      type: "Binary",
                                      line: 3371,
                                      column: 15,
                                      left: {type: "Ident", line: 3371, column: 15, name: "_state"},
                                      op: "=",
                                      right: {
                                        type: "Const",
                                        line: 3371,
                                        column: 15,
                                        value: 0,
                                        sign: 1
                                      }
                                    }
                                  },
                                  {
                                    type: "Return",
                                    line: 3371,
                                    column: 15,
                                    node: {
                                      type: "Obj",
                                      line: 3371,
                                      column: 15,
                                      elements: [
                                        {
                                          line: 3371,
                                          column: 15,
                                          key: "close",
                                          value: {type: "Ident", line: 3371, column: 15, name: "_close"}
                                        },
                                        {
                                          line: 3371,
                                          column: 15,
                                          key: "iterator",
                                          value: {
                                            type: "Func",
                                            line: 3371,
                                            column: 15,
                                            body: {
                                              type: "Return",
                                              line: 3371,
                                              column: 15,
                                              node: {type: "This", line: 3371, column: 15}
                                            }
                                          }
                                        },
                                        {
                                          line: 3371,
                                          column: 15,
                                          key: "next",
                                          value: {
                                            type: "Func",
                                            line: 3371,
                                            column: 15,
                                            body: {
                                              type: "For",
                                              line: 3371,
                                              column: 15,
                                              test: {type: "Const", line: 3371, column: 15, value: true},
                                              body: {
                                                type: "TryCatch",
                                                line: 3371,
                                                column: 15,
                                                tryBody: {
                                                  type: "Switch",
                                                  line: 3371,
                                                  column: 15,
                                                  node: {type: "Ident", line: 3371, column: 15, name: "_state"},
                                                  cases: [
                                                    {
                                                      line: 3371,
                                                      column: 15,
                                                      node: {
                                                        type: "Const",
                                                        line: 3371,
                                                        column: 15,
                                                        value: 0,
                                                        sign: 1
                                                      },
                                                      body: {
                                                        type: "Throw",
                                                        line: 3371,
                                                        column: 15,
                                                        node: {type: "Ident", line: 3371, column: 15, name: "StopIteration"}
                                                      }
                                                    },
                                                    {
                                                      line: 0,
                                                      column: 0,
                                                      node: {type: "Const", line: 0, column: 0, value: 1},
                                                      body: {
                                                        type: "BlockStatement",
                                                        line: 3371,
                                                        column: 15,
                                                        body: [
                                                          {
                                                            type: "Binary",
                                                            line: 1,
                                                            column: 1,
                                                            left: {type: "Ident", line: 1, column: 1, name: "_i"},
                                                            op: "=",
                                                            right: {
                                                              type: "Const",
                                                              line: 1241,
                                                              column: 32,
                                                              value: 0,
                                                              sign: 1
                                                            }
                                                          },
                                                          {
                                                            type: "Binary",
                                                            line: 1,
                                                            column: 1,
                                                            left: {type: "Ident", line: 1, column: 1, name: "_len"},
                                                            op: "=",
                                                            right: {
                                                              type: "Binary",
                                                              line: 1292,
                                                              column: 61,
                                                              left: {type: "Ident", line: 3372, column: 17, name: "keys"},
                                                              op: ".",
                                                              right: {type: "Const", line: 1292, column: 68, value: "length"}
                                                            }
                                                          },
                                                          {
                                                            type: "Binary",
                                                            line: 1,
                                                            column: 1,
                                                            left: {type: "Ident", line: 3371, column: 15, name: "_state"},
                                                            op: "=",
                                                            right: {type: "Const", line: 1, column: 1, value: 3}
                                                          },
                                                          {type: "Break", line: 1, column: 1}
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      line: 1,
                                                      column: 1,
                                                      node: {type: "Const", line: 1, column: 1, value: 2},
                                                      body: {
                                                        type: "BlockStatement",
                                                        line: 3371,
                                                        column: 15,
                                                        body: [
                                                          {
                                                            type: "Unary",
                                                            line: 1,
                                                            column: 1,
                                                            op: "++",
                                                            node: {type: "Ident", line: 1, column: 1, name: "_i"}
                                                          },
                                                          {
                                                            type: "Binary",
                                                            line: 1,
                                                            column: 1,
                                                            left: {type: "Ident", line: 3371, column: 15, name: "_state"},
                                                            op: "=",
                                                            right: {type: "Const", line: 1, column: 1, value: 3}
                                                          },
                                                          {type: "Break", line: 1, column: 1}
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      line: 1,
                                                      column: 1,
                                                      node: {type: "Const", line: 1, column: 1, value: 3},
                                                      body: {
                                                        type: "BlockStatement",
                                                        line: 3371,
                                                        column: 15,
                                                        body: [
                                                          {
                                                            type: "Binary",
                                                            line: 1,
                                                            column: 1,
                                                            left: {type: "Ident", line: 3371, column: 15, name: "_state"},
                                                            op: "=",
                                                            right: {
                                                              type: "IfExpression",
                                                              line: 1,
                                                              column: 1,
                                                              test: {
                                                                type: "Binary",
                                                                line: 1,
                                                                column: 1,
                                                                left: {type: "Ident", line: 1, column: 1, name: "_i"},
                                                                op: "<",
                                                                right: {type: "Ident", line: 1, column: 1, name: "_len"}
                                                              },
                                                              whenTrue: {type: "Const", line: 1, column: 1, value: 4},
                                                              whenFalse: {type: "Const", line: 1, column: 1, value: 6}
                                                            }
                                                          },
                                                          {type: "Break", line: 1, column: 1}
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      line: 1,
                                                      column: 1,
                                                      node: {type: "Const", line: 1, column: 1, value: 4},
                                                      body: {
                                                        type: "BlockStatement",
                                                        line: 3371,
                                                        column: 15,
                                                        body: [
                                                          {
                                                            type: "Binary",
                                                            line: 1,
                                                            column: 1,
                                                            left: {type: "Ident", line: 3372, column: 10, name: "key"},
                                                            op: "=",
                                                            right: {
                                                              type: "Binary",
                                                              line: 1288,
                                                              column: 75,
                                                              left: {type: "Ident", line: 3372, column: 17, name: "keys"},
                                                              op: ".",
                                                              right: {type: "Ident", line: 1, column: 1, name: "_i"}
                                                            }
                                                          },
                                                          {
                                                            type: "Binary",
                                                            line: 1,
                                                            column: 1,
                                                            left: {type: "Ident", line: 3371, column: 15, name: "_state"},
                                                            op: "=",
                                                            right: {type: "Const", line: 1, column: 1, value: 5}
                                                          },
                                                          {
                                                            type: "Return",
                                                            line: 1,
                                                            column: 1,
                                                            node: {type: "Ident", line: 3373, column: 14, name: "key"}
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      line: 1407,
                                                      column: 1,
                                                      node: {type: "Const", line: 1407, column: 1, value: 5},
                                                      body: {
                                                        type: "BlockStatement",
                                                        line: 3371,
                                                        column: 15,
                                                        body: [
                                                          {
                                                            type: "Binary",
                                                            line: 1407,
                                                            column: 1,
                                                            left: {type: "Ident", line: 3371, column: 15, name: "_state"},
                                                            op: "=",
                                                            right: {type: "Const", line: 1407, column: 1, value: 2}
                                                          },
                                                          {type: "Break", line: 1407, column: 1}
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      line: 3371,
                                                      column: 15,
                                                      node: {type: "Const", line: 3371, column: 15, value: 6},
                                                      body: {
                                                        type: "BlockStatement",
                                                        line: 3371,
                                                        column: 15,
                                                        body: [
                                                          {
                                                            type: "Binary",
                                                            line: 3371,
                                                            column: 15,
                                                            left: {type: "Ident", line: 3371, column: 15, name: "_state"},
                                                            op: "=",
                                                            right: {
                                                              type: "Const",
                                                              line: 3371,
                                                              column: 15,
                                                              value: 0,
                                                              sign: 1
                                                            }
                                                          },
                                                          {type: "Break", line: 3371, column: 15}
                                                        ]
                                                      }
                                                    }
                                                  ],
                                                  defaultCase: {
                                                    type: "Throw",
                                                    line: 3371,
                                                    column: 15,
                                                    node: {
                                                      type: "Call",
                                                      line: 3371,
                                                      column: 15,
                                                      func: {type: "Ident", line: 3371, column: 15, name: "Error"},
                                                      args: [{
                                                        type: "Binary",
                                                        line: 3371,
                                                        column: 15,
                                                        left: {type: "Const", line: 3371, column: 15, value: "Unknown state: "},
                                                        op: "+",
                                                        right: {type: "Ident", line: 3371, column: 15, name: "_state"}
                                                      }]
                                                    }
                                                  }
                                                },
                                                catchIdent: {type: "Ident", line: 3371, column: 15, name: "_e"},
                                                catchBody: {
                                                  type: "BlockStatement",
                                                  line: 3371,
                                                  column: 15,
                                                  body: [
                                                    {
                                                      type: "Call",
                                                      line: 3371,
                                                      column: 15,
                                                      func: {type: "Ident", line: 3371, column: 15, name: "_close"}
                                                    },
                                                    {
                                                      type: "Throw",
                                                      line: 3371,
                                                      column: 15,
                                                      node: {type: "Ident", line: 3371, column: 15, name: "_e"}
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 3374,
                              column: 5,
                              left: {type: "This", line: 3374, column: 5},
                              op: ".",
                              right: {type: "Const", line: 3374, column: 6, value: "values"}
                            },
                            op: "=",
                            right: {
                              type: "Func",
                              line: 3374,
                              column: 17,
                              variables: [
                                "_e",
                                "_i",
                                "_len",
                                "_state",
                                "value"
                              ],
                              body: {
                                type: "BlockStatement",
                                line: 1,
                                column: 1,
                                body: [
                                  {
                                    type: "Binary",
                                    line: 3374,
                                    column: 17,
                                    left: {type: "Ident", line: 3374, column: 17, name: "_state"},
                                    op: "=",
                                    right: {type: "Const", line: 3374, column: 17, value: 1}
                                  },
                                  {
                                    type: "Func",
                                    line: 3374,
                                    column: 17,
                                    name: {type: "Ident", line: 3374, column: 17, name: "_close"},
                                    body: {
                                      type: "Binary",
                                      line: 3374,
                                      column: 17,
                                      left: {type: "Ident", line: 3374, column: 17, name: "_state"},
                                      op: "=",
                                      right: {
                                        type: "Const",
                                        line: 3374,
                                        column: 17,
                                        value: 0,
                                        sign: 1
                                      }
                                    }
                                  },
                                  {
                                    type: "Return",
                                    line: 3374,
                                    column: 17,
                                    node: {
                                      type: "Obj",
                                      line: 3374,
                                      column: 17,
                                      elements: [
                                        {
                                          line: 3374,
                                          column: 17,
                                          key: "close",
                                          value: {type: "Ident", line: 3374, column: 17, name: "_close"}
                                        },
                                        {
                                          line: 3374,
                                          column: 17,
                                          key: "iterator",
                                          value: {
                                            type: "Func",
                                            line: 3374,
                                            column: 17,
                                            body: {
                                              type: "Return",
                                              line: 3374,
                                              column: 17,
                                              node: {type: "This", line: 3374, column: 17}
                                            }
                                          }
                                        },
                                        {
                                          line: 3374,
                                          column: 17,
                                          key: "next",
                                          value: {
                                            type: "Func",
                                            line: 3374,
                                            column: 17,
                                            body: {
                                              type: "For",
                                              line: 3374,
                                              column: 17,
                                              test: {type: "Const", line: 3374, column: 17, value: true},
                                              body: {
                                                type: "TryCatch",
                                                line: 3374,
                                                column: 17,
                                                tryBody: {
                                                  type: "Switch",
                                                  line: 3374,
                                                  column: 17,
                                                  node: {type: "Ident", line: 3374, column: 17, name: "_state"},
                                                  cases: [
                                                    {
                                                      line: 3374,
                                                      column: 17,
                                                      node: {
                                                        type: "Const",
                                                        line: 3374,
                                                        column: 17,
                                                        value: 0,
                                                        sign: 1
                                                      },
                                                      body: {
                                                        type: "Throw",
                                                        line: 3374,
                                                        column: 17,
                                                        node: {type: "Ident", line: 3374, column: 17, name: "StopIteration"}
                                                      }
                                                    },
                                                    {
                                                      line: 0,
                                                      column: 0,
                                                      node: {type: "Const", line: 0, column: 0, value: 1},
                                                      body: {
                                                        type: "BlockStatement",
                                                        line: 3374,
                                                        column: 17,
                                                        body: [
                                                          {
                                                            type: "Binary",
                                                            line: 1,
                                                            column: 1,
                                                            left: {type: "Ident", line: 1, column: 1, name: "_i"},
                                                            op: "=",
                                                            right: {
                                                              type: "Const",
                                                              line: 1241,
                                                              column: 32,
                                                              value: 0,
                                                              sign: 1
                                                            }
                                                          },
                                                          {
                                                            type: "Binary",
                                                            line: 1,
                                                            column: 1,
                                                            left: {type: "Ident", line: 1, column: 1, name: "_len"},
                                                            op: "=",
                                                            right: {
                                                              type: "Binary",
                                                              line: 1292,
                                                              column: 61,
                                                              left: {type: "Ident", line: 3375, column: 19, name: "values"},
                                                              op: ".",
                                                              right: {type: "Const", line: 1292, column: 68, value: "length"}
                                                            }
                                                          },
                                                          {
                                                            type: "Binary",
                                                            line: 1,
                                                            column: 1,
                                                            left: {type: "Ident", line: 3374, column: 17, name: "_state"},
                                                            op: "=",
                                                            right: {type: "Const", line: 1, column: 1, value: 3}
                                                          },
                                                          {type: "Break", line: 1, column: 1}
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      line: 1,
                                                      column: 1,
                                                      node: {type: "Const", line: 1, column: 1, value: 2},
                                                      body: {
                                                        type: "BlockStatement",
                                                        line: 3374,
                                                        column: 17,
                                                        body: [
                                                          {
                                                            type: "Unary",
                                                            line: 1,
                                                            column: 1,
                                                            op: "++",
                                                            node: {type: "Ident", line: 1, column: 1, name: "_i"}
                                                          },
                                                          {
                                                            type: "Binary",
                                                            line: 1,
                                                            column: 1,
                                                            left: {type: "Ident", line: 3374, column: 17, name: "_state"},
                                                            op: "=",
                                                            right: {type: "Const", line: 1, column: 1, value: 3}
                                                          },
                                                          {type: "Break", line: 1, column: 1}
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      line: 1,
                                                      column: 1,
                                                      node: {type: "Const", line: 1, column: 1, value: 3},
                                                      body: {
                                                        type: "BlockStatement",
                                                        line: 3374,
                                                        column: 17,
                                                        body: [
                                                          {
                                                            type: "Binary",
                                                            line: 1,
                                                            column: 1,
                                                            left: {type: "Ident", line: 3374, column: 17, name: "_state"},
                                                            op: "=",
                                                            right: {
                                                              type: "IfExpression",
                                                              line: 1,
                                                              column: 1,
                                                              test: {
                                                                type: "Binary",
                                                                line: 1,
                                                                column: 1,
                                                                left: {type: "Ident", line: 1, column: 1, name: "_i"},
                                                                op: "<",
                                                                right: {type: "Ident", line: 1, column: 1, name: "_len"}
                                                              },
                                                              whenTrue: {type: "Const", line: 1, column: 1, value: 4},
                                                              whenFalse: {type: "Const", line: 1, column: 1, value: 6}
                                                            }
                                                          },
                                                          {type: "Break", line: 1, column: 1}
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      line: 1,
                                                      column: 1,
                                                      node: {type: "Const", line: 1, column: 1, value: 4},
                                                      body: {
                                                        type: "BlockStatement",
                                                        line: 3374,
                                                        column: 17,
                                                        body: [
                                                          {
                                                            type: "Binary",
                                                            line: 1,
                                                            column: 1,
                                                            left: {type: "Ident", line: 3375, column: 10, name: "value"},
                                                            op: "=",
                                                            right: {
                                                              type: "Binary",
                                                              line: 1288,
                                                              column: 75,
                                                              left: {type: "Ident", line: 3375, column: 19, name: "values"},
                                                              op: ".",
                                                              right: {type: "Ident", line: 1, column: 1, name: "_i"}
                                                            }
                                                          },
                                                          {
                                                            type: "Binary",
                                                            line: 1,
                                                            column: 1,
                                                            left: {type: "Ident", line: 3374, column: 17, name: "_state"},
                                                            op: "=",
                                                            right: {type: "Const", line: 1, column: 1, value: 5}
                                                          },
                                                          {
                                                            type: "Return",
                                                            line: 1,
                                                            column: 1,
                                                            node: {type: "Ident", line: 3376, column: 14, name: "value"}
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      line: 1407,
                                                      column: 1,
                                                      node: {type: "Const", line: 1407, column: 1, value: 5},
                                                      body: {
                                                        type: "BlockStatement",
                                                        line: 3374,
                                                        column: 17,
                                                        body: [
                                                          {
                                                            type: "Binary",
                                                            line: 1407,
                                                            column: 1,
                                                            left: {type: "Ident", line: 3374, column: 17, name: "_state"},
                                                            op: "=",
                                                            right: {type: "Const", line: 1407, column: 1, value: 2}
                                                          },
                                                          {type: "Break", line: 1407, column: 1}
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      line: 3374,
                                                      column: 17,
                                                      node: {type: "Const", line: 3374, column: 17, value: 6},
                                                      body: {
                                                        type: "BlockStatement",
                                                        line: 3374,
                                                        column: 17,
                                                        body: [
                                                          {
                                                            type: "Binary",
                                                            line: 3374,
                                                            column: 17,
                                                            left: {type: "Ident", line: 3374, column: 17, name: "_state"},
                                                            op: "=",
                                                            right: {
                                                              type: "Const",
                                                              line: 3374,
                                                              column: 17,
                                                              value: 0,
                                                              sign: 1
                                                            }
                                                          },
                                                          {type: "Break", line: 3374, column: 17}
                                                        ]
                                                      }
                                                    }
                                                  ],
                                                  defaultCase: {
                                                    type: "Throw",
                                                    line: 3374,
                                                    column: 17,
                                                    node: {
                                                      type: "Call",
                                                      line: 3374,
                                                      column: 17,
                                                      func: {type: "Ident", line: 3374, column: 17, name: "Error"},
                                                      args: [{
                                                        type: "Binary",
                                                        line: 3374,
                                                        column: 17,
                                                        left: {type: "Const", line: 3374, column: 17, value: "Unknown state: "},
                                                        op: "+",
                                                        right: {type: "Ident", line: 3374, column: 17, name: "_state"}
                                                      }]
                                                    }
                                                  }
                                                },
                                                catchIdent: {type: "Ident", line: 3374, column: 17, name: "_e"},
                                                catchBody: {
                                                  type: "BlockStatement",
                                                  line: 3374,
                                                  column: 17,
                                                  body: [
                                                    {
                                                      type: "Call",
                                                      line: 3374,
                                                      column: 17,
                                                      func: {type: "Ident", line: 3374, column: 17, name: "_close"}
                                                    },
                                                    {
                                                      type: "Throw",
                                                      line: 3374,
                                                      column: 17,
                                                      node: {type: "Ident", line: 3374, column: 17, name: "_e"}
                                                    }
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 3377,
                              column: 5,
                              left: {type: "This", line: 3377, column: 5},
                              op: ".",
                              right: {type: "Const", line: 3377, column: 6, value: "items"}
                            },
                            op: "=",
                            right: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {
                                type: "Binary",
                                line: 3377,
                                column: 14,
                                left: {type: "This", line: 3377, column: 14},
                                op: ".",
                                right: {type: "Const", line: 3377, column: 16, value: "iterator"}
                              },
                              op: "=",
                              right: {
                                type: "Func",
                                line: 3377,
                                column: 29,
                                variables: ["_e", "_state", "i", "key"],
                                body: {
                                  type: "BlockStatement",
                                  line: 1,
                                  column: 1,
                                  body: [
                                    {
                                      type: "Binary",
                                      line: 3377,
                                      column: 29,
                                      left: {type: "Ident", line: 3377, column: 29, name: "_state"},
                                      op: "=",
                                      right: {type: "Const", line: 3377, column: 29, value: 1}
                                    },
                                    {
                                      type: "Func",
                                      line: 3377,
                                      column: 29,
                                      name: {type: "Ident", line: 3377, column: 29, name: "_close"},
                                      body: {
                                        type: "Binary",
                                        line: 3377,
                                        column: 29,
                                        left: {type: "Ident", line: 3377, column: 29, name: "_state"},
                                        op: "=",
                                        right: {
                                          type: "Const",
                                          line: 3377,
                                          column: 29,
                                          value: 0,
                                          sign: 1
                                        }
                                      }
                                    },
                                    {
                                      type: "Return",
                                      line: 3377,
                                      column: 29,
                                      node: {
                                        type: "Obj",
                                        line: 3377,
                                        column: 29,
                                        elements: [
                                          {
                                            line: 3377,
                                            column: 29,
                                            key: "close",
                                            value: {type: "Ident", line: 3377, column: 29, name: "_close"}
                                          },
                                          {
                                            line: 3377,
                                            column: 29,
                                            key: "iterator",
                                            value: {
                                              type: "Func",
                                              line: 3377,
                                              column: 29,
                                              body: {
                                                type: "Return",
                                                line: 3377,
                                                column: 29,
                                                node: {type: "This", line: 3377, column: 29}
                                              }
                                            }
                                          },
                                          {
                                            line: 3377,
                                            column: 29,
                                            key: "next",
                                            value: {
                                              type: "Func",
                                              line: 3377,
                                              column: 29,
                                              body: {
                                                type: "For",
                                                line: 3377,
                                                column: 29,
                                                test: {type: "Const", line: 3377, column: 29, value: true},
                                                body: {
                                                  type: "TryCatch",
                                                  line: 3377,
                                                  column: 29,
                                                  tryBody: {
                                                    type: "Switch",
                                                    line: 3377,
                                                    column: 29,
                                                    node: {type: "Ident", line: 3377, column: 29, name: "_state"},
                                                    cases: [
                                                      {
                                                        line: 3377,
                                                        column: 29,
                                                        node: {
                                                          type: "Const",
                                                          line: 3377,
                                                          column: 29,
                                                          value: 0,
                                                          sign: 1
                                                        },
                                                        body: {
                                                          type: "Throw",
                                                          line: 3377,
                                                          column: 29,
                                                          node: {type: "Ident", line: 3377, column: 29, name: "StopIteration"}
                                                        }
                                                      },
                                                      {
                                                        line: 1,
                                                        column: 1,
                                                        node: {type: "Const", line: 1, column: 1, value: 1},
                                                        body: {
                                                          type: "BlockStatement",
                                                          line: 3377,
                                                          column: 29,
                                                          body: [
                                                            {
                                                              type: "Binary",
                                                              line: 1,
                                                              column: 1,
                                                              left: {type: "Ident", line: 3378, column: 15, name: "i"},
                                                              op: "=",
                                                              right: {
                                                                type: "Binary",
                                                                line: 1324,
                                                                column: 49,
                                                                left: {type: "Ident", line: 3378, column: 20, name: "keys"},
                                                                op: ".",
                                                                right: {type: "Const", line: 1324, column: 56, value: "length"}
                                                              }
                                                            },
                                                            {
                                                              type: "Binary",
                                                              line: 1,
                                                              column: 1,
                                                              left: {type: "Ident", line: 3377, column: 29, name: "_state"},
                                                              op: "=",
                                                              right: {type: "Const", line: 1, column: 1, value: 3}
                                                            },
                                                            {type: "Break", line: 1, column: 1}
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        line: 1,
                                                        column: 1,
                                                        node: {type: "Const", line: 1, column: 1, value: 2},
                                                        body: {
                                                          type: "BlockStatement",
                                                          line: 3377,
                                                          column: 29,
                                                          body: [
                                                            {
                                                              type: "Binary",
                                                              line: 1,
                                                              column: 1,
                                                              left: {type: "Ident", line: 3377, column: 29, name: "_state"},
                                                              op: "=",
                                                              right: {type: "Const", line: 1, column: 1, value: 3}
                                                            },
                                                            {type: "Break", line: 1, column: 1}
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        line: 1,
                                                        column: 1,
                                                        node: {type: "Const", line: 1, column: 1, value: 3},
                                                        body: {
                                                          type: "BlockStatement",
                                                          line: 3377,
                                                          column: 29,
                                                          body: [
                                                            {
                                                              type: "Binary",
                                                              line: 1,
                                                              column: 1,
                                                              left: {type: "Ident", line: 3377, column: 29, name: "_state"},
                                                              op: "=",
                                                              right: {
                                                                type: "IfExpression",
                                                                line: 1,
                                                                column: 1,
                                                                test: {
                                                                  type: "Unary",
                                                                  line: 1,
                                                                  column: 1,
                                                                  op: "--post",
                                                                  node: {type: "Ident", line: 3378, column: 15, name: "i"}
                                                                },
                                                                whenTrue: {type: "Const", line: 1, column: 1, value: 4},
                                                                whenFalse: {type: "Const", line: 1, column: 1, value: 6}
                                                              }
                                                            },
                                                            {type: "Break", line: 1, column: 1}
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        line: 1,
                                                        column: 1,
                                                        node: {type: "Const", line: 1, column: 1, value: 4},
                                                        body: {
                                                          type: "BlockStatement",
                                                          line: 3377,
                                                          column: 29,
                                                          body: [
                                                            {
                                                              type: "Binary",
                                                              line: 1,
                                                              column: 1,
                                                              left: {type: "Ident", line: 3378, column: 10, name: "key"},
                                                              op: "=",
                                                              right: {
                                                                type: "Binary",
                                                                line: 1288,
                                                                column: 75,
                                                                left: {type: "Ident", line: 3378, column: 20, name: "keys"},
                                                                op: ".",
                                                                right: {type: "Ident", line: 3378, column: 15, name: "i"}
                                                              }
                                                            },
                                                            {
                                                              type: "Binary",
                                                              line: 1,
                                                              column: 1,
                                                              left: {type: "Ident", line: 3377, column: 29, name: "_state"},
                                                              op: "=",
                                                              right: {type: "Const", line: 1, column: 1, value: 5}
                                                            },
                                                            {
                                                              type: "Return",
                                                              line: 1,
                                                              column: 1,
                                                              node: {
                                                                type: "Arr",
                                                                line: 3379,
                                                                column: 14,
                                                                elements: [
                                                                  {type: "Ident", line: 3379, column: 16, name: "key"},
                                                                  {
                                                                    type: "Binary",
                                                                    line: 3379,
                                                                    column: 20,
                                                                    left: {type: "Ident", line: 3379, column: 20, name: "values"},
                                                                    op: ".",
                                                                    right: {type: "Ident", line: 3379, column: 28, name: "i"}
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        line: 1407,
                                                        column: 1,
                                                        node: {type: "Const", line: 1407, column: 1, value: 5},
                                                        body: {
                                                          type: "BlockStatement",
                                                          line: 3377,
                                                          column: 29,
                                                          body: [
                                                            {
                                                              type: "Binary",
                                                              line: 1407,
                                                              column: 1,
                                                              left: {type: "Ident", line: 3377, column: 29, name: "_state"},
                                                              op: "=",
                                                              right: {type: "Const", line: 1407, column: 1, value: 2}
                                                            },
                                                            {type: "Break", line: 1407, column: 1}
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        line: 3377,
                                                        column: 29,
                                                        node: {type: "Const", line: 3377, column: 29, value: 6},
                                                        body: {
                                                          type: "BlockStatement",
                                                          line: 3377,
                                                          column: 29,
                                                          body: [
                                                            {
                                                              type: "Binary",
                                                              line: 3377,
                                                              column: 29,
                                                              left: {type: "Ident", line: 3377, column: 29, name: "_state"},
                                                              op: "=",
                                                              right: {
                                                                type: "Const",
                                                                line: 3377,
                                                                column: 29,
                                                                value: 0,
                                                                sign: 1
                                                              }
                                                            },
                                                            {type: "Break", line: 3377, column: 29}
                                                          ]
                                                        }
                                                      }
                                                    ],
                                                    defaultCase: {
                                                      type: "Throw",
                                                      line: 3377,
                                                      column: 29,
                                                      node: {
                                                        type: "Call",
                                                        line: 3377,
                                                        column: 29,
                                                        func: {type: "Ident", line: 3377, column: 29, name: "Error"},
                                                        args: [{
                                                          type: "Binary",
                                                          line: 3377,
                                                          column: 29,
                                                          left: {type: "Const", line: 3377, column: 29, value: "Unknown state: "},
                                                          op: "+",
                                                          right: {type: "Ident", line: 3377, column: 29, name: "_state"}
                                                        }]
                                                      }
                                                    }
                                                  },
                                                  catchIdent: {type: "Ident", line: 3377, column: 29, name: "_e"},
                                                  catchBody: {
                                                    type: "BlockStatement",
                                                    line: 3377,
                                                    column: 29,
                                                    body: [
                                                      {
                                                        type: "Call",
                                                        line: 3377,
                                                        column: 29,
                                                        func: {type: "Ident", line: 3377, column: 29, name: "_close"}
                                                      },
                                                      {
                                                        type: "Throw",
                                                        line: 3377,
                                                        column: 29,
                                                        node: {type: "Ident", line: 3377, column: 29, name: "_e"}
                                                      }
                                                    ]
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          {
                            type: "IfStatement",
                            line: 1,
                            column: 1,
                            test: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 3380, column: 7, name: "iterable"},
                              op: "!=",
                              right: {type: "Const", line: 100, column: 19, value: null}
                            },
                            whenTrue: {
                              type: "IfStatement",
                              line: 1,
                              column: 1,
                              test: {
                                type: "Call",
                                line: 127,
                                column: 146,
                                func: {type: "Ident", line: 127, column: 146, name: "__isArray"},
                                args: [{type: "Ident", line: 3381, column: 19, name: "iterable"}]
                              },
                              whenTrue: {
                                type: "For",
                                line: 1,
                                column: 1,
                                init: {
                                  type: "BlockExpression",
                                  line: 0,
                                  column: 0,
                                  body: [
                                    {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 1, column: 1, name: "_arr"},
                                      op: "=",
                                      right: {
                                        type: "Call",
                                        line: 1285,
                                        column: 22,
                                        func: {type: "Ident", line: 1285, column: 22, name: "__toArray"},
                                        args: [{type: "Ident", line: 3382, column: 17, name: "iterable"}]
                                      }
                                    },
                                    {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 1, column: 1, name: "_i"},
                                      op: "=",
                                      right: {
                                        type: "Const",
                                        line: 1241,
                                        column: 32,
                                        value: 0,
                                        sign: 1
                                      }
                                    },
                                    {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 1, column: 1, name: "_len"},
                                      op: "=",
                                      right: {
                                        type: "Binary",
                                        line: 1292,
                                        column: 61,
                                        left: {type: "Ident", line: 1, column: 1, name: "_arr"},
                                        op: ".",
                                        right: {type: "Const", line: 1292, column: 68, value: "length"}
                                      }
                                    }
                                  ]
                                },
                                test: {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {type: "Ident", line: 1, column: 1, name: "_i"},
                                  op: "<",
                                  right: {type: "Ident", line: 1, column: 1, name: "_len"}
                                },
                                step: {
                                  type: "Unary",
                                  line: 1,
                                  column: 1,
                                  op: "++",
                                  node: {type: "Ident", line: 1, column: 1, name: "_i"}
                                },
                                body: {
                                  type: "BlockStatement",
                                  line: 1407,
                                  column: 1,
                                  body: [
                                    {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 3382, column: 12, name: "x"},
                                      op: "=",
                                      right: {
                                        type: "Binary",
                                        line: 1288,
                                        column: 75,
                                        left: {type: "Ident", line: 1, column: 1, name: "_arr"},
                                        op: ".",
                                        right: {type: "Ident", line: 1, column: 1, name: "_i"}
                                      }
                                    },
                                    {
                                      type: "Call",
                                      line: 3383,
                                      column: 11,
                                      func: {
                                        type: "Binary",
                                        line: 3383,
                                        column: 11,
                                        left: {type: "This", line: 3383, column: 11},
                                        op: ".",
                                        right: {type: "Const", line: 3383, column: 12, value: "set"}
                                      },
                                      args: [
                                        {
                                          type: "Binary",
                                          line: 3383,
                                          column: 16,
                                          left: {type: "Ident", line: 3383, column: 16, name: "x"},
                                          op: ".",
                                          right: {
                                            type: "Const",
                                            line: 3383,
                                            column: 18,
                                            value: 0,
                                            sign: 1
                                          }
                                        },
                                        {
                                          type: "Binary",
                                          line: 3383,
                                          column: 21,
                                          left: {type: "Ident", line: 3383, column: 21, name: "x"},
                                          op: ".",
                                          right: {type: "Const", line: 3383, column: 24, value: 1}
                                        }
                                      ]
                                    }
                                  ]
                                }
                              },
                              whenFalse: {
                                type: "TryFinally",
                                line: 1,
                                column: 1,
                                tryBody: {
                                  type: "For",
                                  line: 1,
                                  column: 1,
                                  init: {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {type: "Ident", line: 1, column: 1, name: "_iter"},
                                    op: "=",
                                    right: {
                                      type: "Call",
                                      line: 2032,
                                      column: 30,
                                      func: {
                                        type: "Binary",
                                        line: 2032,
                                        column: 30,
                                        left: {type: "Ident", line: 3385, column: 19, name: "iterable"},
                                        op: ".",
                                        right: {type: "Const", line: 2032, column: 41, value: "iterator"}
                                      }
                                    }
                                  },
                                  test: {type: "Const", line: 2105, column: 19, value: true},
                                  body: {
                                    type: "BlockStatement",
                                    line: 2072,
                                    column: 1,
                                    body: [
                                      {
                                        type: "TryCatch",
                                        line: 1,
                                        column: 1,
                                        tryBody: {
                                          type: "Binary",
                                          line: 1,
                                          column: 1,
                                          left: {type: "Ident", line: 3385, column: 12, name: "x"},
                                          op: "=",
                                          right: {
                                            type: "Call",
                                            line: 2040,
                                            column: 19,
                                            func: {
                                              type: "Binary",
                                              line: 2040,
                                              column: 19,
                                              left: {type: "Ident", line: 1, column: 1, name: "_iter"},
                                              op: ".",
                                              right: {type: "Const", line: 2040, column: 30, value: "next"}
                                            }
                                          }
                                        },
                                        catchIdent: {type: "Ident", line: 2041, column: 10, name: "e"},
                                        catchBody: {
                                          type: "IfStatement",
                                          line: 1,
                                          column: 1,
                                          test: {
                                            type: "Binary",
                                            line: 1,
                                            column: 1,
                                            left: {type: "Ident", line: 2042, column: 9, name: "e"},
                                            op: "===",
                                            right: {type: "Ident", line: 2042, column: 14, name: "StopIteration"}
                                          },
                                          whenTrue: {type: "Break", line: 1, column: 1},
                                          whenFalse: {
                                            type: "Throw",
                                            line: 1,
                                            column: 1,
                                            node: {type: "Ident", line: 2045, column: 14, name: "e"}
                                          }
                                        }
                                      },
                                      {
                                        type: "Call",
                                        line: 3386,
                                        column: 11,
                                        func: {
                                          type: "Binary",
                                          line: 3386,
                                          column: 11,
                                          left: {type: "This", line: 3386, column: 11},
                                          op: ".",
                                          right: {type: "Const", line: 3386, column: 12, value: "set"}
                                        },
                                        args: [
                                          {
                                            type: "Binary",
                                            line: 3386,
                                            column: 16,
                                            left: {type: "Ident", line: 3386, column: 16, name: "x"},
                                            op: ".",
                                            right: {
                                              type: "Const",
                                              line: 3386,
                                              column: 18,
                                              value: 0,
                                              sign: 1
                                            }
                                          },
                                          {
                                            type: "Binary",
                                            line: 3386,
                                            column: 21,
                                            left: {type: "Ident", line: 3386, column: 21, name: "x"},
                                            op: ".",
                                            right: {type: "Const", line: 3386, column: 24, value: 1}
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                },
                                finallyBody: {
                                  type: "IfStatement",
                                  line: 2112,
                                  column: 7,
                                  test: {
                                    type: "Binary",
                                    line: 2112,
                                    column: 7,
                                    left: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 1, column: 1, name: "_iter"},
                                      op: "!=",
                                      right: {type: "Const", line: 100, column: 19, value: null}
                                    },
                                    op: "&&",
                                    right: {
                                      type: "Binary",
                                      line: 2112,
                                      column: 7,
                                      left: {
                                        type: "Unary",
                                        line: 2112,
                                        column: 7,
                                        op: "typeof",
                                        node: {
                                          type: "Binary",
                                          line: 2112,
                                          column: 7,
                                          left: {type: "Ident", line: 1, column: 1, name: "_iter"},
                                          op: ".",
                                          right: {type: "Const", line: 2112, column: 18, value: "close"}
                                        }
                                      },
                                      op: "===",
                                      right: {type: "Const", line: 2112, column: 7, value: "function"}
                                    }
                                  },
                                  whenTrue: {
                                    type: "Call",
                                    line: 2112,
                                    column: 7,
                                    func: {
                                      type: "Binary",
                                      line: 2112,
                                      column: 7,
                                      left: {type: "Ident", line: 1, column: 1, name: "_iter"},
                                      op: ".",
                                      right: {type: "Const", line: 2112, column: 18, value: "close"}
                                    }
                                  }
                                }
                              }
                            }
                          },
                          {
                            type: "Return",
                            line: 3387,
                            column: 5,
                            node: {type: "This", line: 3387, column: 5}
                          }
                        ]
                      }
                    },
                    {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {
                        type: "Binary",
                        line: 3388,
                        column: 6,
                        left: {type: "Ident", line: 3388, column: 3, name: "Map"},
                        op: ".",
                        right: {type: "Const", line: 3388, column: 7, value: "displayName"}
                      },
                      op: "=",
                      right: {type: "Const", line: 3388, column: 23, value: "Map"}
                    },
                    {
                      type: "Return",
                      line: 3389,
                      column: 3,
                      node: {type: "Ident", line: 3389, column: 3, name: "Map"}
                    }
                  ]
                }
              }
            }
          },
          type: {type: "any"},
          dependencies: [
            "__create",
            "__indexOfIdentical",
            "__isArray",
            "__toArray",
            "e",
            "fallback",
            "GLOBAL",
            "i",
            "index",
            "iterable",
            "key",
            "keys",
            "Map",
            "StopIteration",
            "value",
            "values",
            "x"
          ]
        },
        Set: {
          helper: {
            type: "IfExpression",
            line: 1,
            column: 1,
            test: {
              type: "Binary",
              line: 1,
              column: 1,
              left: {
                type: "Unary",
                line: 1,
                column: 1,
                op: "typeof",
                node: {
                  type: "Binary",
                  line: 3391,
                  column: 36,
                  left: {type: "Ident", line: 3391, column: 36, name: "GLOBAL"},
                  op: ".",
                  right: {type: "Const", line: 3391, column: 44, value: "Set"}
                }
              },
              op: "===",
              right: {type: "Const", line: 124, column: 25, value: "function"}
            },
            whenTrue: {
              type: "Binary",
              line: 3391,
              column: 52,
              left: {type: "Ident", line: 3391, column: 52, name: "GLOBAL"},
              op: ".",
              right: {type: "Const", line: 3391, column: 60, value: "Set"}
            },
            whenFalse: {
              type: "Call",
              line: 3,
              column: 9,
              func: {
                type: "Func",
                line: 3,
                column: 12,
                body: {
                  type: "BlockStatement",
                  line: 3392,
                  column: 1,
                  body: [
                    {
                      type: "Func",
                      line: 1,
                      column: 1,
                      name: {type: "Ident", line: 3392, column: 6, name: "Set"},
                      params: [{type: "Ident", line: 3392, column: 11, name: "iterable"}],
                      variables: [
                        "_arr",
                        "_i",
                        "_iter",
                        "_len",
                        "item",
                        "items"
                      ],
                      body: {
                        type: "BlockStatement",
                        line: 3393,
                        column: 1,
                        body: [
                          {
                            type: "IfStatement",
                            line: 1,
                            column: 1,
                            test: {
                              type: "Unary",
                              line: 1,
                              column: 1,
                              op: "!",
                              node: {
                                type: "Binary",
                                line: 1,
                                column: 1,
                                left: {type: "This", line: 3393, column: 7},
                                op: "instanceof",
                                right: {type: "Ident", line: 3393, column: 27, name: "Set"}
                              }
                            },
                            whenTrue: {
                              type: "Return",
                              line: 1,
                              column: 1,
                              node: {
                                type: "Call",
                                line: 3394,
                                column: 13,
                                func: {
                                  type: "Binary",
                                  line: 3394,
                                  column: 13,
                                  left: {type: "Ident", line: 3394, column: 13, name: "Set"},
                                  op: ".",
                                  right: {type: "Const", line: 3394, column: 13, value: "apply"}
                                },
                                args: [
                                  {
                                    type: "Call",
                                    line: 110661,
                                    column: 110686,
                                    func: {type: "Ident", line: 110661, column: 110686, name: "__create"},
                                    args: [{
                                      type: "Binary",
                                      line: 3394,
                                      column: 28,
                                      left: {type: "Ident", line: 3394, column: 28, name: "Set"},
                                      op: ".",
                                      right: {type: "Const", line: 3394, column: 33, value: "prototype"}
                                    }]
                                  },
                                  {type: "Arguments", line: 3394, column: 49}
                                ]
                              }
                            }
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {type: "Ident", line: 3395, column: 8, name: "items"},
                            op: "=",
                            right: {type: "Arr", line: 3395, column: 16}
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 3396,
                              column: 5,
                              left: {type: "This", line: 3396, column: 5},
                              op: ".",
                              right: {type: "Const", line: 3396, column: 6, value: "has"}
                            },
                            op: "=",
                            right: {
                              type: "Func",
                              line: 3396,
                              column: 14,
                              params: [{type: "Ident", line: 3396, column: 15, name: "item"}],
                              body: {
                                type: "Return",
                                line: 1,
                                column: 1,
                                node: {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {
                                    type: "Call",
                                    line: 3397,
                                    column: 7,
                                    func: {type: "Ident", line: 3397, column: 7, name: "__indexOfIdentical"},
                                    args: [
                                      {type: "Ident", line: 3397, column: 28, name: "items"},
                                      {type: "Ident", line: 3397, column: 34, name: "item"}
                                    ]
                                  },
                                  op: "!==",
                                  right: {type: "Const", line: 1, column: 1, value: -1}
                                }
                              }
                            }
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 3398,
                              column: 5,
                              left: {type: "This", line: 3398, column: 5},
                              op: ".",
                              right: {type: "Const", line: 3398, column: 6, value: "add"}
                            },
                            op: "=",
                            right: {
                              type: "Func",
                              line: 3398,
                              column: 14,
                              params: [{type: "Ident", line: 3398, column: 15, name: "item"}],
                              body: {
                                type: "IfExpression",
                                line: 1,
                                column: 1,
                                test: {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {
                                    type: "Call",
                                    line: 3399,
                                    column: 9,
                                    func: {type: "Ident", line: 3399, column: 9, name: "__indexOfIdentical"},
                                    args: [
                                      {type: "Ident", line: 3399, column: 31, name: "items"},
                                      {type: "Ident", line: 3399, column: 37, name: "item"}
                                    ]
                                  },
                                  op: "===",
                                  right: {type: "Const", line: 1, column: 1, value: -1}
                                },
                                whenTrue: {
                                  type: "Call",
                                  line: 3400,
                                  column: 9,
                                  func: {
                                    type: "Binary",
                                    line: 3400,
                                    column: 9,
                                    left: {type: "Ident", line: 3400, column: 9, name: "items"},
                                    op: ".",
                                    right: {type: "Const", line: 3400, column: 15, value: "push"}
                                  },
                                  args: [{type: "Ident", line: 3400, column: 20, name: "item"}]
                                }
                              }
                            }
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 3401,
                              column: 5,
                              left: {type: "This", line: 3401, column: 5},
                              op: ".",
                              right: {type: "Const", line: 3401, column: 6, value: "delete"}
                            },
                            op: "=",
                            right: {
                              type: "Func",
                              line: 3401,
                              column: 17,
                              params: [{type: "Ident", line: 3401, column: 18, name: "item"}],
                              variables: ["index"],
                              body: {
                                type: "BlockExpression",
                                line: 3402,
                                column: 1,
                                body: [
                                  {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {type: "Ident", line: 3402, column: 10, name: "index"},
                                    op: "=",
                                    right: {
                                      type: "Call",
                                      line: 3402,
                                      column: 18,
                                      func: {type: "Ident", line: 3402, column: 18, name: "__indexOfIdentical"},
                                      args: [
                                        {type: "Ident", line: 3402, column: 40, name: "items"},
                                        {type: "Ident", line: 3402, column: 46, name: "item"}
                                      ]
                                    }
                                  },
                                  {
                                    type: "IfExpression",
                                    line: 1,
                                    column: 1,
                                    test: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 3403, column: 9, name: "index"},
                                      op: "!==",
                                      right: {type: "Const", line: 1, column: 1, value: -1}
                                    },
                                    whenTrue: {
                                      type: "Call",
                                      line: 3404,
                                      column: 9,
                                      func: {
                                        type: "Binary",
                                        line: 3404,
                                        column: 9,
                                        left: {type: "Ident", line: 3404, column: 9, name: "items"},
                                        op: ".",
                                        right: {type: "Const", line: 3404, column: 15, value: "splice"}
                                      },
                                      args: [
                                        {type: "Ident", line: 3404, column: 22, name: "index"},
                                        {type: "Const", line: 3404, column: 29, value: 1}
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          },
                          {
                            type: "Binary",
                            line: 1,
                            column: 1,
                            left: {
                              type: "Binary",
                              line: 3405,
                              column: 5,
                              left: {type: "This", line: 3405, column: 5},
                              op: ".",
                              right: {type: "Const", line: 3405, column: 6, value: "values"}
                            },
                            op: "=",
                            right: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {
                                type: "Binary",
                                line: 3405,
                                column: 15,
                                left: {type: "This", line: 3405, column: 15},
                                op: ".",
                                right: {type: "Const", line: 3405, column: 17, value: "iterator"}
                              },
                              op: "=",
                              right: {
                                type: "Func",
                                line: 3405,
                                column: 30,
                                variables: ["_e", "_i", "_state", "item"],
                                body: {
                                  type: "BlockStatement",
                                  line: 1,
                                  column: 1,
                                  body: [
                                    {
                                      type: "Binary",
                                      line: 3405,
                                      column: 30,
                                      left: {type: "Ident", line: 3405, column: 30, name: "_state"},
                                      op: "=",
                                      right: {type: "Const", line: 3405, column: 30, value: 1}
                                    },
                                    {
                                      type: "Func",
                                      line: 3405,
                                      column: 30,
                                      name: {type: "Ident", line: 3405, column: 30, name: "_close"},
                                      body: {
                                        type: "Binary",
                                        line: 3405,
                                        column: 30,
                                        left: {type: "Ident", line: 3405, column: 30, name: "_state"},
                                        op: "=",
                                        right: {
                                          type: "Const",
                                          line: 3405,
                                          column: 30,
                                          value: 0,
                                          sign: 1
                                        }
                                      }
                                    },
                                    {
                                      type: "Return",
                                      line: 3405,
                                      column: 30,
                                      node: {
                                        type: "Obj",
                                        line: 3405,
                                        column: 30,
                                        elements: [
                                          {
                                            line: 3405,
                                            column: 30,
                                            key: "close",
                                            value: {type: "Ident", line: 3405, column: 30, name: "_close"}
                                          },
                                          {
                                            line: 3405,
                                            column: 30,
                                            key: "iterator",
                                            value: {
                                              type: "Func",
                                              line: 3405,
                                              column: 30,
                                              body: {
                                                type: "Return",
                                                line: 3405,
                                                column: 30,
                                                node: {type: "This", line: 3405, column: 30}
                                              }
                                            }
                                          },
                                          {
                                            line: 3405,
                                            column: 30,
                                            key: "next",
                                            value: {
                                              type: "Func",
                                              line: 3405,
                                              column: 30,
                                              body: {
                                                type: "For",
                                                line: 3405,
                                                column: 30,
                                                test: {type: "Const", line: 3405, column: 30, value: true},
                                                body: {
                                                  type: "TryCatch",
                                                  line: 3405,
                                                  column: 30,
                                                  tryBody: {
                                                    type: "Switch",
                                                    line: 3405,
                                                    column: 30,
                                                    node: {type: "Ident", line: 3405, column: 30, name: "_state"},
                                                    cases: [
                                                      {
                                                        line: 3405,
                                                        column: 30,
                                                        node: {
                                                          type: "Const",
                                                          line: 3405,
                                                          column: 30,
                                                          value: 0,
                                                          sign: 1
                                                        },
                                                        body: {
                                                          type: "Throw",
                                                          line: 3405,
                                                          column: 30,
                                                          node: {type: "Ident", line: 3405, column: 30, name: "StopIteration"}
                                                        }
                                                      },
                                                      {
                                                        line: 1,
                                                        column: 1,
                                                        node: {type: "Const", line: 1, column: 1, value: 1},
                                                        body: {
                                                          type: "BlockStatement",
                                                          line: 3405,
                                                          column: 30,
                                                          body: [
                                                            {
                                                              type: "Binary",
                                                              line: 1,
                                                              column: 1,
                                                              left: {type: "Ident", line: 1, column: 1, name: "_i"},
                                                              op: "=",
                                                              right: {
                                                                type: "Binary",
                                                                line: 1324,
                                                                column: 49,
                                                                left: {type: "Ident", line: 3406, column: 18, name: "items"},
                                                                op: ".",
                                                                right: {type: "Const", line: 1324, column: 56, value: "length"}
                                                              }
                                                            },
                                                            {
                                                              type: "Binary",
                                                              line: 1,
                                                              column: 1,
                                                              left: {type: "Ident", line: 3405, column: 30, name: "_state"},
                                                              op: "=",
                                                              right: {type: "Const", line: 1, column: 1, value: 3}
                                                            },
                                                            {type: "Break", line: 1, column: 1}
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        line: 1,
                                                        column: 1,
                                                        node: {type: "Const", line: 1, column: 1, value: 2},
                                                        body: {
                                                          type: "BlockStatement",
                                                          line: 3405,
                                                          column: 30,
                                                          body: [
                                                            {
                                                              type: "Binary",
                                                              line: 1,
                                                              column: 1,
                                                              left: {type: "Ident", line: 3405, column: 30, name: "_state"},
                                                              op: "=",
                                                              right: {type: "Const", line: 1, column: 1, value: 3}
                                                            },
                                                            {type: "Break", line: 1, column: 1}
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        line: 1,
                                                        column: 1,
                                                        node: {type: "Const", line: 1, column: 1, value: 3},
                                                        body: {
                                                          type: "BlockStatement",
                                                          line: 3405,
                                                          column: 30,
                                                          body: [
                                                            {
                                                              type: "Binary",
                                                              line: 1,
                                                              column: 1,
                                                              left: {type: "Ident", line: 3405, column: 30, name: "_state"},
                                                              op: "=",
                                                              right: {
                                                                type: "IfExpression",
                                                                line: 1,
                                                                column: 1,
                                                                test: {
                                                                  type: "Unary",
                                                                  line: 1,
                                                                  column: 1,
                                                                  op: "--post",
                                                                  node: {type: "Ident", line: 1, column: 1, name: "_i"}
                                                                },
                                                                whenTrue: {type: "Const", line: 1, column: 1, value: 4},
                                                                whenFalse: {type: "Const", line: 1, column: 1, value: 6}
                                                              }
                                                            },
                                                            {type: "Break", line: 1, column: 1}
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        line: 1,
                                                        column: 1,
                                                        node: {type: "Const", line: 1, column: 1, value: 4},
                                                        body: {
                                                          type: "BlockStatement",
                                                          line: 3405,
                                                          column: 30,
                                                          body: [
                                                            {
                                                              type: "Binary",
                                                              line: 1,
                                                              column: 1,
                                                              left: {type: "Ident", line: 3406, column: 10, name: "item"},
                                                              op: "=",
                                                              right: {
                                                                type: "Binary",
                                                                line: 1288,
                                                                column: 75,
                                                                left: {type: "Ident", line: 3406, column: 18, name: "items"},
                                                                op: ".",
                                                                right: {type: "Ident", line: 1, column: 1, name: "_i"}
                                                              }
                                                            },
                                                            {
                                                              type: "Binary",
                                                              line: 1,
                                                              column: 1,
                                                              left: {type: "Ident", line: 3405, column: 30, name: "_state"},
                                                              op: "=",
                                                              right: {type: "Const", line: 1, column: 1, value: 5}
                                                            },
                                                            {
                                                              type: "Return",
                                                              line: 1,
                                                              column: 1,
                                                              node: {type: "Ident", line: 3407, column: 14, name: "item"}
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        line: 1407,
                                                        column: 1,
                                                        node: {type: "Const", line: 1407, column: 1, value: 5},
                                                        body: {
                                                          type: "BlockStatement",
                                                          line: 3405,
                                                          column: 30,
                                                          body: [
                                                            {
                                                              type: "Binary",
                                                              line: 1407,
                                                              column: 1,
                                                              left: {type: "Ident", line: 3405, column: 30, name: "_state"},
                                                              op: "=",
                                                              right: {type: "Const", line: 1407, column: 1, value: 2}
                                                            },
                                                            {type: "Break", line: 1407, column: 1}
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        line: 3405,
                                                        column: 30,
                                                        node: {type: "Const", line: 3405, column: 30, value: 6},
                                                        body: {
                                                          type: "BlockStatement",
                                                          line: 3405,
                                                          column: 30,
                                                          body: [
                                                            {
                                                              type: "Binary",
                                                              line: 3405,
                                                              column: 30,
                                                              left: {type: "Ident", line: 3405, column: 30, name: "_state"},
                                                              op: "=",
                                                              right: {
                                                                type: "Const",
                                                                line: 3405,
                                                                column: 30,
                                                                value: 0,
                                                                sign: 1
                                                              }
                                                            },
                                                            {type: "Break", line: 3405, column: 30}
                                                          ]
                                                        }
                                                      }
                                                    ],
                                                    defaultCase: {
                                                      type: "Throw",
                                                      line: 3405,
                                                      column: 30,
                                                      node: {
                                                        type: "Call",
                                                        line: 3405,
                                                        column: 30,
                                                        func: {type: "Ident", line: 3405, column: 30, name: "Error"},
                                                        args: [{
                                                          type: "Binary",
                                                          line: 3405,
                                                          column: 30,
                                                          left: {type: "Const", line: 3405, column: 30, value: "Unknown state: "},
                                                          op: "+",
                                                          right: {type: "Ident", line: 3405, column: 30, name: "_state"}
                                                        }]
                                                      }
                                                    }
                                                  },
                                                  catchIdent: {type: "Ident", line: 3405, column: 30, name: "_e"},
                                                  catchBody: {
                                                    type: "BlockStatement",
                                                    line: 3405,
                                                    column: 30,
                                                    body: [
                                                      {
                                                        type: "Call",
                                                        line: 3405,
                                                        column: 30,
                                                        func: {type: "Ident", line: 3405, column: 30, name: "_close"}
                                                      },
                                                      {
                                                        type: "Throw",
                                                        line: 3405,
                                                        column: 30,
                                                        node: {type: "Ident", line: 3405, column: 30, name: "_e"}
                                                      }
                                                    ]
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          {
                            type: "IfStatement",
                            line: 1,
                            column: 1,
                            test: {
                              type: "Binary",
                              line: 1,
                              column: 1,
                              left: {type: "Ident", line: 3408, column: 7, name: "iterable"},
                              op: "!=",
                              right: {type: "Const", line: 100, column: 19, value: null}
                            },
                            whenTrue: {
                              type: "IfStatement",
                              line: 1,
                              column: 1,
                              test: {
                                type: "Call",
                                line: 127,
                                column: 146,
                                func: {type: "Ident", line: 127, column: 146, name: "__isArray"},
                                args: [{type: "Ident", line: 3409, column: 19, name: "iterable"}]
                              },
                              whenTrue: {
                                type: "For",
                                line: 1,
                                column: 1,
                                init: {
                                  type: "BlockExpression",
                                  line: 0,
                                  column: 0,
                                  body: [
                                    {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 1, column: 1, name: "_arr"},
                                      op: "=",
                                      right: {
                                        type: "Call",
                                        line: 1285,
                                        column: 22,
                                        func: {type: "Ident", line: 1285, column: 22, name: "__toArray"},
                                        args: [{type: "Ident", line: 3410, column: 20, name: "iterable"}]
                                      }
                                    },
                                    {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 1, column: 1, name: "_i"},
                                      op: "=",
                                      right: {
                                        type: "Const",
                                        line: 1241,
                                        column: 32,
                                        value: 0,
                                        sign: 1
                                      }
                                    },
                                    {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 1, column: 1, name: "_len"},
                                      op: "=",
                                      right: {
                                        type: "Binary",
                                        line: 1292,
                                        column: 61,
                                        left: {type: "Ident", line: 1, column: 1, name: "_arr"},
                                        op: ".",
                                        right: {type: "Const", line: 1292, column: 68, value: "length"}
                                      }
                                    }
                                  ]
                                },
                                test: {
                                  type: "Binary",
                                  line: 1,
                                  column: 1,
                                  left: {type: "Ident", line: 1, column: 1, name: "_i"},
                                  op: "<",
                                  right: {type: "Ident", line: 1, column: 1, name: "_len"}
                                },
                                step: {
                                  type: "Unary",
                                  line: 1,
                                  column: 1,
                                  op: "++",
                                  node: {type: "Ident", line: 1, column: 1, name: "_i"}
                                },
                                body: {
                                  type: "BlockStatement",
                                  line: 1407,
                                  column: 1,
                                  body: [
                                    {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 3410, column: 12, name: "item"},
                                      op: "=",
                                      right: {
                                        type: "Binary",
                                        line: 1288,
                                        column: 75,
                                        left: {type: "Ident", line: 1, column: 1, name: "_arr"},
                                        op: ".",
                                        right: {type: "Ident", line: 1, column: 1, name: "_i"}
                                      }
                                    },
                                    {
                                      type: "Call",
                                      line: 3411,
                                      column: 11,
                                      func: {
                                        type: "Binary",
                                        line: 3411,
                                        column: 11,
                                        left: {type: "This", line: 3411, column: 11},
                                        op: ".",
                                        right: {type: "Const", line: 3411, column: 12, value: "add"}
                                      },
                                      args: [{type: "Ident", line: 3411, column: 16, name: "item"}]
                                    }
                                  ]
                                }
                              },
                              whenFalse: {
                                type: "TryFinally",
                                line: 1,
                                column: 1,
                                tryBody: {
                                  type: "For",
                                  line: 1,
                                  column: 1,
                                  init: {
                                    type: "Binary",
                                    line: 1,
                                    column: 1,
                                    left: {type: "Ident", line: 1, column: 1, name: "_iter"},
                                    op: "=",
                                    right: {
                                      type: "Call",
                                      line: 2032,
                                      column: 30,
                                      func: {
                                        type: "Binary",
                                        line: 2032,
                                        column: 30,
                                        left: {type: "Ident", line: 3413, column: 22, name: "iterable"},
                                        op: ".",
                                        right: {type: "Const", line: 2032, column: 41, value: "iterator"}
                                      }
                                    }
                                  },
                                  test: {type: "Const", line: 2105, column: 19, value: true},
                                  body: {
                                    type: "BlockStatement",
                                    line: 2072,
                                    column: 1,
                                    body: [
                                      {
                                        type: "TryCatch",
                                        line: 1,
                                        column: 1,
                                        tryBody: {
                                          type: "Binary",
                                          line: 1,
                                          column: 1,
                                          left: {type: "Ident", line: 3413, column: 12, name: "item"},
                                          op: "=",
                                          right: {
                                            type: "Call",
                                            line: 2040,
                                            column: 19,
                                            func: {
                                              type: "Binary",
                                              line: 2040,
                                              column: 19,
                                              left: {type: "Ident", line: 1, column: 1, name: "_iter"},
                                              op: ".",
                                              right: {type: "Const", line: 2040, column: 30, value: "next"}
                                            }
                                          }
                                        },
                                        catchIdent: {type: "Ident", line: 2041, column: 10, name: "e"},
                                        catchBody: {
                                          type: "IfStatement",
                                          line: 1,
                                          column: 1,
                                          test: {
                                            type: "Binary",
                                            line: 1,
                                            column: 1,
                                            left: {type: "Ident", line: 2042, column: 9, name: "e"},
                                            op: "===",
                                            right: {type: "Ident", line: 2042, column: 14, name: "StopIteration"}
                                          },
                                          whenTrue: {type: "Break", line: 1, column: 1},
                                          whenFalse: {
                                            type: "Throw",
                                            line: 1,
                                            column: 1,
                                            node: {type: "Ident", line: 2045, column: 14, name: "e"}
                                          }
                                        }
                                      },
                                      {
                                        type: "Call",
                                        line: 3414,
                                        column: 11,
                                        func: {
                                          type: "Binary",
                                          line: 3414,
                                          column: 11,
                                          left: {type: "This", line: 3414, column: 11},
                                          op: ".",
                                          right: {type: "Const", line: 3414, column: 12, value: "add"}
                                        },
                                        args: [{type: "Ident", line: 3414, column: 16, name: "item"}]
                                      }
                                    ]
                                  }
                                },
                                finallyBody: {
                                  type: "IfStatement",
                                  line: 2112,
                                  column: 7,
                                  test: {
                                    type: "Binary",
                                    line: 2112,
                                    column: 7,
                                    left: {
                                      type: "Binary",
                                      line: 1,
                                      column: 1,
                                      left: {type: "Ident", line: 1, column: 1, name: "_iter"},
                                      op: "!=",
                                      right: {type: "Const", line: 100, column: 19, value: null}
                                    },
                                    op: "&&",
                                    right: {
                                      type: "Binary",
                                      line: 2112,
                                      column: 7,
                                      left: {
                                        type: "Unary",
                                        line: 2112,
                                        column: 7,
                                        op: "typeof",
                                        node: {
                                          type: "Binary",
                                          line: 2112,
                                          column: 7,
                                          left: {type: "Ident", line: 1, column: 1, name: "_iter"},
                                          op: ".",
                                          right: {type: "Const", line: 2112, column: 18, value: "close"}
                                        }
                                      },
                                      op: "===",
                                      right: {type: "Const", line: 2112, column: 7, value: "function"}
                                    }
                                  },
                                  whenTrue: {
                                    type: "Call",
                                    line: 2112,
                                    column: 7,
                                    func: {
                                      type: "Binary",
                                      line: 2112,
                                      column: 7,
                                      left: {type: "Ident", line: 1, column: 1, name: "_iter"},
                                      op: ".",
                                      right: {type: "Const", line: 2112, column: 18, value: "close"}
                                    }
                                  }
                                }
                              }
                            }
                          },
                          {
                            type: "Return",
                            line: 3415,
                            column: 5,
                            node: {type: "This", line: 3415, column: 5}
                          }
                        ]
                      }
                    },
                    {
                      type: "Binary",
                      line: 1,
                      column: 1,
                      left: {
                        type: "Binary",
                        line: 3416,
                        column: 6,
                        left: {type: "Ident", line: 3416, column: 3, name: "Set"},
                        op: ".",
                        right: {type: "Const", line: 3416, column: 7, value: "displayName"}
                      },
                      op: "=",
                      right: {type: "Const", line: 3416, column: 23, value: "Set"}
                    },
                    {
                      type: "Return",
                      line: 3417,
                      column: 3,
                      node: {type: "Ident", line: 3417, column: 3, name: "Set"}
                    }
                  ]
                }
              }
            }
          },
          type: {type: "any"},
          dependencies: [
            "__create",
            "__indexOfIdentical",
            "__isArray",
            "__toArray",
            "e",
            "GLOBAL",
            "index",
            "item",
            "items",
            "iterable",
            "Set",
            "StopIteration"
          ]
        }
      },
      assignOperator: [
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.assign(left,"=",right);};}.call(this));',
          operators: [":="],
          options: {type: "right"},
          id: 30
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){if(_this.position==="expression"){return __node("MacroAccess",293,11,1,293,{left:__wrap(setLeft,78),inverted:false,op:"and",right:__node("MacroAccess",293,27,30,293,{left:__wrap(left,78),op:":=",right:__wrap(right,78)},"expression",false,false)},"expression",false,false);}else{return __node("MacroAccess",295,10,19,295,{macroName:"if",macroData:{test:__wrap(setLeft,78),body:__node("MacroAccess",296,9,30,296,{left:__wrap(left,78),op:":=",right:__wrap(right,78)},"statement",false,false),elseIfs:[],elseBody:__wrap(left,78)}},"statement",false,false);}});};}.call(this));',
          operators: ["and="],
          options: {},
          id: 43
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){if(_this.position==="expression"){return __node("MacroAccess",303,11,2,303,{left:__wrap(setLeft,80),inverted:false,op:"or",right:__node("MacroAccess",303,26,30,303,{left:__wrap(left,80),op:":=",right:__wrap(right,80)},"expression",false,false)},"expression",false,false);}else{return __node("MacroAccess",305,10,19,305,{macroName:"if",macroData:{test:__node("MacroAccess",305,13,3,305,{op:"not",node:__wrap(setLeft,80)},"statement",false,false),body:__node("MacroAccess",306,9,30,306,{left:__wrap(left,80),op:":=",right:__wrap(right,80)},"statement",false,false),elseIfs:[],elseBody:__wrap(left,80)}},"statement",false,false);}});};}.call(this));',
          operators: ["or="],
          options: {},
          id: 44
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.canMutateLast(right)&&this.isIdentOrTmp(left)){return this.mutateLast(right||this.noop(),function(n){if(op==="~*="){return _this.assign(left,"*=",n);}else if(op==="~/="){return _this.assign(left,"/=",n);}else{return _this.assign(left,"%=",n);}},true);}else if(op==="~*="){return this.assign(left,"*=",right);}else if(op==="~/="){return this.assign(left,"/=",right);}else{return this.assign(left,"%=",right);}};}.call(this));',
          operators: ["~*=", "~/=", "~%="],
          options: {type: "number"},
          id: 46
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return __node("MacroAccess",340,9,30,340,{left:__wrap(setLeft,85),op:":=",right:__node("MacroAccess",340,22,45,340,{left:__wrap(left,85),inverted:false,op:"~\\\\",right:__wrap(right,85)},"expression",false,false)},"expression",false,false);});};}.call(this));',
          operators: ["~\\="],
          options: {type: "number"},
          id: 47
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var left,op,right;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return __node("MacroAccess",380,9,30,380,{left:__wrap(setLeft,95),op:":=",right:__node("MacroAccess",380,22,50,380,{left:__wrap(left,95),inverted:false,op:"~^",right:__wrap(right,95)},"expression",false,false)},"expression",false,false);});};}.call(this));',
          operators: ["~^="],
          options: {type: "number"},
          id: 51
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right,value;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isConst(right)){value=this.value(right);if(value===1){return this.unary("++",left);}else if(value===-1){return this.unary("--",left);}else if(typeof value==="number"&&!this.isType(left,"numeric")){return this.assign(left,"-=",this["const"](-value));}}if(this.isType(left,"numeric")){if(this.canMutateLast(right)&&this.isIdentOrTmp(left)){return this.mutateLast(right||this.noop(),function(n){if(!_this.isType(n,"numeric")){n=__node("MacroAccess",396,20,48,396,{op:"~+",node:__wrap(n,98)},"expression",false,false);}return _this.assign(left,"+=",n);},true);}else{if(!this.isType(right,"numeric")){right=__node("MacroAccess",400,22,48,400,{op:"~+",node:__wrap(right,96)},"expression",false,false);}return this.assign(left,"+=",right);}}else if(this.canMutateLast(right)&&this.isIdentOrTmp(left)){return this.mutateLast(right||this.noop(),function(n){return _this.assign(left,"-=",__node("MacroAccess",404,72,48,404,{op:"~-",node:__wrap(n,99)},"expression",false,false));},true);}else{return this.assign(left,"-=",__node("MacroAccess",406,31,48,406,{op:"~-",node:__wrap(right,96)},"expression",false,false));}};}.call(this));',
          operators: ["~+="],
          options: {type: "number"},
          id: 52
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right,value;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isConst(right)){value=this.value(right);if(value===1){return this.unary("--",left);}else if(value===-1){return this.unary("++",left);}}if(this.canMutateLast(right)&&this.isIdentOrTmp(left)){return this.mutateLast(right||this.noop(),function(n){return _this.assign(left,"-=",n);},true);}else{return this.assign(left,"-=",right);}};}.call(this));',
          operators: ["~-="],
          options: {type: "number"},
          id: 53
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.canMutateLast(right)&&this.isIdentOrTmp(left)){return this.mutateLast(right||this.noop(),function(n){if(op==="~bitlshift="){return _this.assign(left,"<<=",n);}else if(op==="~bitrshift="){return _this.assign(left,">>=",n);}else{return _this.assign(left,">>>=",n);}},true);}else if(op==="~bitlshift="){return this.assign(left,"<<=",right);}else if(op==="~bitrshift="){return this.assign(left,">>=",right);}else{return this.assign(left,">>>=",right);}};}.call(this));',
          operators: ["~bitlshift=", "~bitrshift=", "~biturshift="],
          options: {type: "number"},
          id: 55
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.canMutateLast(right)&&this.isIdentOrTmp(left)){return this.mutateLast(right||this.noop(),function(n){if(_this.hasType(left,"numeric")&&_this.hasType(n,"numeric")){n=__node("MacroAccess",449,18,29,449,{left:__node("Const",449,19,""),inverted:false,op:"~&",right:__node("Ident",449,24,"n")},"expression",false,false);}return _this.assign(left,"+=",n);},true);}else{if(this.hasType(left,"numeric")&&this.hasType(right,"numeric")){right=__node("MacroAccess",453,20,29,453,{left:__node("Const",453,21,""),inverted:false,op:"~&",right:__node("Ident",453,26,"right")},"expression",false,false);}return this.assign(left,"+=",right);}};}.call(this));',
          operators: ["~&="],
          options: {type: "string"},
          id: 56
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return __node("MacroAccess",513,9,30,513,{left:__wrap(setLeft,121),op:":=",right:__node("MacroAccess",513,22,60,513,{left:__wrap(left,121),inverted:false,op:"^",right:__wrap(right,121)},"expression",false,false)},"expression",false,false);});};}.call(this));',
          operators: ["^="],
          options: {type: "number"},
          id: 61
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return __node("MacroAccess",544,9,30,544,{left:__wrap(setLeft,127),op:":=",right:__node("MacroAccess",544,22,62,544,{left:__wrap(left,127),inverted:false,op:"\\\\",right:__wrap(right,127)},"expression",false,false)},"expression",false,false);});};}.call(this));',
          operators: ["\\="],
          options: {type: "number"},
          id: 66
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isType(left,"string")){return __node("MacroAccess",561,9,56,561,{left:__wrap(left,129),op:"~&=",right:__node("MacroAccess",561,19,67,561,{left:__node("Const",561,20,""),inverted:false,op:"&",right:__wrap(right,129)},"expression",false,false)},"expression",false,false);}else{return this.maybeCacheAccess(left,function(setLeft,left){return __node("MacroAccess",564,11,30,564,{left:__wrap(setLeft,130),op:":=",right:__node("MacroAccess",564,24,67,564,{left:__wrap(left,130),inverted:false,op:"&",right:__wrap(right,130)},"expression",false,false)},"expression",false,false);});}};}.call(this));',
          operators: ["&="],
          options: {type: "string"},
          id: 68
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return _this.maybeCache(right,function(setRight,right){return __node("MacroAccess",742,11,19,742,{macroName:"if",macroData:{test:__node("MacroAccess",742,14,10,742,{left:__wrap(setLeft,168),inverted:false,op:"~>",right:__wrap(setRight,168)},"expression",false,false),body:__node("MacroAccess",743,9,30,743,{left:__wrap(left,168),op:":=",right:__wrap(right,168)},"statement",false,false),elseIfs:[],elseBody:__wrap(left,168)}},"expression",false,false);});});};}.call(this));',
          operators: ["~min="],
          options: {},
          id: 84
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return _this.maybeCache(right,function(setRight,right){return __node("MacroAccess",750,11,19,750,{macroName:"if",macroData:{test:__node("MacroAccess",750,14,9,750,{left:__wrap(setLeft,171),inverted:false,op:"~<",right:__wrap(setRight,171)},"expression",false,false),body:__node("MacroAccess",751,9,30,751,{left:__wrap(left,171),op:":=",right:__wrap(right,171)},"statement",false,false),elseIfs:[],elseBody:__wrap(left,171)}},"expression",false,false);});});};}.call(this));',
          operators: ["~max="],
          options: {},
          id: 85
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return _this.maybeCache(right,function(setRight,right){return __node("MacroAccess",758,11,19,758,{macroName:"if",macroData:{test:__node("MacroAccess",758,14,77,758,{left:__wrap(setLeft,174),inverted:false,op:">",right:__wrap(setRight,174)},"expression",false,false),body:__node("MacroAccess",759,9,30,759,{left:__wrap(left,174),op:":=",right:__wrap(right,174)},"statement",false,false),elseIfs:[],elseBody:__wrap(left,174)}},"expression",false,false);});});};}.call(this));',
          operators: ["min="],
          options: {},
          id: 86
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return _this.maybeCache(right,function(setRight,right){return __node("MacroAccess",766,11,19,766,{macroName:"if",macroData:{test:__node("MacroAccess",766,14,76,766,{left:__wrap(setLeft,177),inverted:false,op:"<",right:__wrap(setRight,177)},"expression",false,false),body:__node("MacroAccess",767,9,30,767,{left:__wrap(left,177),op:":=",right:__wrap(right,177)},"statement",false,false),elseIfs:[],elseBody:__wrap(left,177)}},"expression",false,false);});});};}.call(this));',
          operators: ["max="],
          options: {},
          id: 87
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return __node("MacroAccess",773,9,30,773,{left:__wrap(setLeft,179),op:":=",right:__node("MacroAccess",773,22,82,773,{left:__wrap(left,179),inverted:false,op:"xor",right:__wrap(right,179)},"expression",false,false)},"expression",false,false);});};}.call(this));',
          operators: ["xor="],
          options: {},
          id: 88
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;return this.maybeCacheAccess(left,function(setLeft,left){return _this.maybeCache(setLeft,function(setLeft,leftValue){if(_this.position==="expression"){return __node("MacroAccess",779,13,18,779,{macroName:"if",macroData:{test:__node("MacroAccess",779,16,20,779,{op:"?",node:__wrap(setLeft,182)},"expression",false,false),body:__wrap(leftValue,182),elseIfs:[],elseBody:__node("MacroAccess",779,51,30,779,{left:__wrap(left,182),op:":=",right:__wrap(right,182)},"expression",false,false)}},"expression",false,false);}else{return __node("MacroAccess",781,12,19,781,{macroName:"if",macroData:{test:__node("MacroAccess",781,15,3,781,{op:"not",node:__node("MacroAccess",781,19,20,781,{op:"?",node:__wrap(setLeft,182)},"statement",false,false)},"statement",false,false),body:__node("MacroAccess",782,11,30,782,{left:__wrap(left,182),op:":=",right:__wrap(right,182)},"statement",false,false),elseIfs:[],elseBody:__wrap(leftValue,182)}},"statement",false,false);}});});};}.call(this));',
          operators: ["?="],
          options: {},
          id: 89
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.canMutateLast(right)&&this.isIdentOrTmp(left)){return this.mutateLast(right||this.noop(),function(n){if(op==="~bitand="){return _this.assign(left,"&=",n);}else if(op==="~bitor="){return _this.assign(left,"|=",n);}else{return _this.assign(left,"^=",n);}},true);}else if(op==="~bitand="){return this.assign(left,"&=",right);}else if(op==="~bitor="){return this.assign(left,"|=",right);}else{return this.assign(left,"^=",right);}};}.call(this));',
          operators: ["~bitand=", "~bitor=", "~bitxor="],
          options: {type: "number"},
          id: 93
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var _this,left,op,right;_this=this;left=macroData.left;op=macroData.op;right=macroData.right;if(this.isType(left,"number")){if(op==="*="){return __node("MacroAccess",848,11,46,848,{left:__wrap(left,201),op:"~*=",right:__node("MacroAccess",848,21,58,848,{op:"+",node:__wrap(right,201)},"expression",false,false)},"expression",false,false);}else if(op==="/="){return __node("MacroAccess",850,11,46,850,{left:__wrap(left,201),op:"~/=",right:__node("MacroAccess",850,21,58,850,{op:"+",node:__wrap(right,201)},"expression",false,false)},"expression",false,false);}else if(op==="%="){return __node("MacroAccess",852,11,46,852,{left:__wrap(left,201),op:"~%=",right:__node("MacroAccess",852,21,58,852,{op:"+",node:__wrap(right,201)},"expression",false,false)},"expression",false,false);}else if(op==="+="){return __node("MacroAccess",854,11,52,854,{left:__wrap(left,201),op:"~+=",right:__node("MacroAccess",854,21,58,854,{op:"+",node:__wrap(right,201)},"expression",false,false)},"expression",false,false);}else if(op==="-="){return __node("MacroAccess",856,11,53,856,{left:__wrap(left,201),op:"~-=",right:__node("MacroAccess",856,21,58,856,{op:"+",node:__wrap(right,201)},"expression",false,false)},"expression",false,false);}else if(op==="bitlshift="){return __node("MacroAccess",858,11,55,858,{left:__wrap(left,201),op:"~bitlshift=",right:__node("MacroAccess",858,29,58,858,{op:"+",node:__wrap(right,201)},"expression",false,false)},"expression",false,false);}else if(op==="bitrshift="){return __node("MacroAccess",860,11,55,860,{left:__wrap(left,201),op:"~bitrshift=",right:__node("MacroAccess",860,29,58,860,{op:"+",node:__wrap(right,201)},"expression",false,false)},"expression",false,false);}else if(op==="biturshift="){return __node("MacroAccess",862,11,55,862,{left:__wrap(left,201),op:"~biturshift=",right:__node("MacroAccess",862,30,58,862,{op:"+",node:__wrap(right,201)},"expression",false,false)},"expression",false,false);}else if(op==="bitand="){return __node("MacroAccess",864,11,93,864,{left:__wrap(left,201),op:"~bitand=",right:__node("MacroAccess",864,26,58,864,{op:"+",node:__wrap(right,201)},"expression",false,false)},"expression",false,false);}else if(op==="bitor="){return __node("MacroAccess",866,11,93,866,{left:__wrap(left,201),op:"~bitor=",right:__node("MacroAccess",866,25,58,866,{op:"+",node:__wrap(right,201)},"expression",false,false)},"expression",false,false);}else if(op==="bitxor="){return __node("MacroAccess",868,11,93,868,{left:__wrap(left,201),op:"~bitxor=",right:__node("MacroAccess",868,26,58,868,{op:"+",node:__wrap(right,201)},"expression",false,false)},"expression",false,false);}else{throw Error();}}else{return this.maybeCacheAccess(left,function(setLeft,left){var action;if(op==="*="){action=__node("MacroAccess",874,13,62,874,{left:__wrap(left,202),inverted:false,op:"*",right:__wrap(right,202)},"expression",false,false);}else if(op==="/="){action=__node("MacroAccess",876,13,62,876,{left:__wrap(left,202),inverted:false,op:"/",right:__wrap(right,202)},"expression",false,false);}else if(op==="%="){action=__node("MacroAccess",878,13,62,878,{left:__wrap(left,202),inverted:false,op:"%",right:__wrap(right,202)},"expression",false,false);}else if(op==="+="){action=__node("MacroAccess",880,13,64,880,{left:__wrap(left,202),inverted:false,op:"+",right:__wrap(right,202)},"expression",false,false);}else if(op==="-="){action=__node("MacroAccess",882,13,64,882,{left:__wrap(left,202),inverted:false,op:"-",right:__wrap(right,202)},"expression",false,false);}else if(op==="bitlshift="){action=__node("MacroAccess",884,13,65,884,{left:__wrap(left,202),inverted:false,op:"bitlshift",right:__wrap(right,202)},"expression",false,false);}else if(op==="bitrshift="){action=__node("MacroAccess",886,13,65,886,{left:__wrap(left,202),inverted:false,op:"bitrshift",right:__wrap(right,202)},"expression",false,false);}else if(op==="biturshift="){action=__node("MacroAccess",888,13,65,888,{left:__wrap(left,202),inverted:false,op:"biturshift",right:__wrap(right,202)},"expression",false,false);}else if(op==="bitand="){action=__node("MacroAccess",890,13,94,890,{left:__wrap(left,202),inverted:false,op:"bitand",right:__wrap(right,202)},"expression",false,false);}else if(op==="bitor="){action=__node("MacroAccess",892,13,95,892,{left:__wrap(left,202),inverted:false,op:"bitor",right:__wrap(right,202)},"expression",false,false);}else if(op==="bitxor="){action=__node("MacroAccess",894,13,96,894,{left:__wrap(left,202),inverted:false,op:"bitxor",right:__wrap(right,202)},"expression",false,false);}else{throw Error();}return __node("MacroAccess",897,11,30,897,{left:__wrap(setLeft,202),op:":=",right:__wrap(action,202)},"expression",false,false);});}};}.call(this));',
          operators: [
            "*=",
            "/=",
            "%=",
            "+=",
            "-=",
            "bitlshift=",
            "bitrshift=",
            "biturshift=",
            "bitand=",
            "bitor=",
            "bitxor="
          ],
          options: {type: "number"},
          id: 101
        }
      ],
      defineSyntax: [
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var asType,ident,isMutable;isMutable=macroData.isMutable;ident=macroData.ident;asType=macroData.asType;if(this.isIdentOrTmp(ident)){return {type:"ident",isMutable:isMutable==="mutable",ident:ident,asType:asType};}else{return ident;}};}.call(this));',
          options: {name: "DeclarableIdent"},
          params: [
            {
              type: "ident",
              name: "isMutable",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {type: "const", value: "mutable"}
              }
            },
            {
              type: "ident",
              name: "ident",
              asType: {type: "ident", name: "Identifier"}
            },
            {
              type: "ident",
              name: "asType",
              asType: {
                type: "many",
                multiplier: "?",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: "as"},
                    {
                      type: "this",
                      asType: {type: "ident", name: "Type"}
                    }
                  ]
                }
              }
            }
          ],
          id: 31
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var head,tail;head=macroData.head;tail=macroData.tail;return {type:"array",elements:[head].concat(tail)};};}.call(this));',
          options: {name: "DeclarableArray"},
          params: [
            {type: "const", value: "["},
            {
              type: "ident",
              name: "head",
              asType: {
                type: "choice",
                choices: [
                  {type: "ident", name: "Declarable"},
                  {type: "const", value: ""}
                ]
              }
            },
            {
              type: "ident",
              name: "tail",
              asType: {
                type: "many",
                multiplier: "*",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: ","},
                    {
                      type: "this",
                      asType: {
                        type: "choice",
                        choices: [
                          {type: "ident", name: "Declarable"},
                          {type: "const", value: ""}
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {type: "const", value: "]"}
          ],
          id: 32
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var value;value=macroData.value;value=this.macroExpand1(value);return {key:this.name(value.ident),value:value};};}.call(this));',
          options: {name: "DeclarableObjectSingularPair"},
          params: [{
            type: "ident",
            name: "value",
            asType: {type: "ident", name: "DeclarableIdent"}
          }],
          id: 33
        },
        {
          options: {name: "DeclarableObjectDualPair"},
          params: [{
            type: "this",
            asType: {
              type: "sequence",
              items: [
                {
                  type: "ident",
                  name: "key",
                  asType: {type: "ident", name: "ObjectKey"}
                },
                {type: "const", value: ":"},
                {
                  type: "ident",
                  name: "value",
                  asType: {type: "ident", name: "Declarable"}
                }
              ]
            }
          }],
          id: 34
        },
        {
          options: {name: "DeclarableObjectPair"},
          params: [{
            type: "this",
            asType: {
              type: "choice",
              choices: [
                {type: "ident", name: "DeclarableObjectDualPair"},
                {type: "ident", name: "DeclarableObjectSingularPair"}
              ]
            }
          }],
          id: 35
        },
        {
          code: 'return (function(){"use strict";return function(macroData,__wrap,__node){var head,tail;head=macroData.head;tail=macroData.tail;return {type:"object",pairs:[head].concat(tail)};};}.call(this));',
          options: {name: "DeclarableObject"},
          params: [
            {type: "const", value: "{"},
            {
              type: "ident",
              name: "head",
              asType: {type: "ident", name: "DeclarableObjectPair"}
            },
            {
              type: "ident",
              name: "tail",
              asType: {
                type: "many",
                multiplier: "*",
                inner: {
                  type: "sequence",
                  items: [
                    {type: "const", value: ","},
                    {
                      type: "this",
                      asType: {type: "ident", name: "DeclarableObjectPair"}
                    }
                  ]
                }
              }
            },
            {type: "const", value: "}"}
          ],
          id: 36
        },
        {
          options: {name: "Declarable"},
          params: [{
            type: "this",
            asType: {
              type: "choice",
              choices: [
                {type: "ident", name: "DeclarableArray"},
                {type: "ident", name: "DeclarableObject"},
                {type: "ident", name: "DeclarableIdent"}
              ]
            }
          }],
          id: 37
        }
      ]
    });
  }());

  if (typeof define === "function" && define.amd) {
    define(function () { return GorillaScript; });
  } else {
    root.GorillaScript = GorillaScript;
  }
}(this));