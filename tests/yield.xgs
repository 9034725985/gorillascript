let iterator-to-array(iterator)
  let arr = []
  while true
    try
      arr.push iterator.next()
    catch e
      if e == StopIteration
        return arr
      else
        throw e

test "single-value yield on single-line", #
  let fun(value)* -> yield value
  
  array-eq ["alpha"], iterator-to-array fun("alpha")
  array-eq ["bravo"], iterator-to-array fun("bravo")
  array-eq ["charlie"], iterator-to-array fun("charlie")

test "multi-valued yield", #
  let fun()*
    yield "alpha"
    yield "bravo"
    yield "charlie"
  
  array-eq ["alpha", "bravo", "charlie"], iterator-to-array fun()

test "yield with conditional", #
  let fun(value)*
    yield "alpha"
    if value
      yield "bravo"
    yield "charlie"
  
  array-eq ["alpha", "bravo", "charlie"], iterator-to-array fun(true)
  array-eq ["alpha", "charlie"], iterator-to-array fun(false)

test "yield with variables", #
  let fun()*
    let mutable i = 0
    yield i
    i += 1
    yield i
    i += 1
    yield i
  
  array-eq [0, 1, 2], iterator-to-array fun()

test "yield with while", #
  let fun()*
    let mutable i = 0
    while i < 10
      yield i
      i += 1
  
  array-eq [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], iterator-to-array fun()

test "yield with while and increment", #
  let fun()*
    let mutable i = 0
    while i < 10, i += 1
      yield i
  
  array-eq [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], iterator-to-array fun()


test "yield with while and break", #
  let fun()*
    let mutable i = 0
    while i < 10
      if i > 5
        break
      yield i
      i += 1
  
  array-eq [0, 1, 2, 3, 4, 5], iterator-to-array fun()

test "yield with while and increment and continue", #
  let fun()*
    let mutable i = 0
    while i < 10, i += 1
      if i == 5
        i := 6
        continue
      yield i
  
  array-eq [0, 1, 2, 3, 4, 7, 8, 9], iterator-to-array fun()

test "yield with for-in", #
  let fun(arr)*
    for x in arr
      yield x
  
  array-eq ["a", "b", "c", "d", "e"], iterator-to-array fun ["a", "b", "c", "d", "e"]

test "yield with for-range", #
  let fun(start, finish)*
    for i = start, finish
      yield i
  
  array-eq [1, 2, 3, 4, 5], iterator-to-array fun(1, 6)

test "yield with for-of", #
  let fun(obj)*
    for k, v of obj
      yield [k, v]
  
  array-eq [["alpha", "bravo"], ["charlie", "delta"], ["echo", "foxtrot"]], iterator-to-array(fun({ alpha: "bravo", charlie: "delta", echo: "foxtrot" })).sort #(a, b) -> a[0] <=> b[0]

test "yield with for-of with inheritance", #
  let fun(obj)*
    for k, v of obj
      yield [k, v]
  
  let Class()!
    @alpha := "bravo"
  Class::charlie := "delta"
  
  array-eq [["alpha", "bravo"]], iterator-to-array(fun(new Class)).sort #(a, b) -> a[0] <=> b[0]

test "yield with for-ofall with inheritance", #
  let fun(obj)*
    for k, v ofall obj
      yield [k, v]
  
  let Class()!
    @alpha := "bravo"
  Class::charlie := "delta"

  array-eq [["alpha", "bravo"], ["charlie", "delta"]], iterator-to-array(fun(new Class)).sort #(a, b) -> a[0] <=> b[0]

/*
test "yield with try-catch", -> do
  throws -> Cotton.compile("""
  let fun = -> do
    try
      yield "alpha"
    catch e
    end
  end"""), (e) -> e.line == 3
end

test "yield with try-catch-finally", -> do
  throws -> Cotton.compile("""
  let fun = -> do
    try
      yield "alpha"
    catch e
    finally
    end
  end"""), (e) -> e.line == 3
end
*/
test "yield with try-finally", #
  let cleanup = runOnce undefined
  let obj = {}
  let fun()*
    yield "alpha"
    try
      yield "bravo"
      throw obj
      yield "charlie"
    finally
      cleanup()
  
  let g = fun()
  eq "alpha", g.next()
  eq "bravo", g.next()
  throws g.next, #(e) -> e == obj
  ok cleanup.ran
  throws g.next, #(e) -> e == StopIteration
  
  /*
  throws -> Cotton.compile("""
  let fun = -> do
    try
      yield "alpha"
    finally
      yield "bravo"
    end
  end"""), (e) -> e.line == 5
  */

test "yield multiple", #
  let range(start, finish)*
    for i = start, finish
      yield i
  
  let fun1()*
    for item from range(0, 10)
      yield item
  
  let fun2()*
    yield* range(0, 10)
  
  array-eq [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], iterator-to-array fun1()
  array-eq [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], iterator-to-array fun2()
